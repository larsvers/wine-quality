(function (factory) {
  typeof define === 'function' && define.amd ? define(factory) :
  factory();
}((function () { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var xhtml = "http://www.w3.org/1999/xhtml";

  var namespaces = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };

  function namespace(name) {
    var prefix = name += "", i = prefix.indexOf(":");
    if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
    return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
  }

  function creatorInherit(name) {
    return function() {
      var document = this.ownerDocument,
          uri = this.namespaceURI;
      return uri === xhtml && document.documentElement.namespaceURI === xhtml
          ? document.createElement(name)
          : document.createElementNS(uri, name);
    };
  }

  function creatorFixed(fullname) {
    return function() {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }

  function creator(name) {
    var fullname = namespace(name);
    return (fullname.local
        ? creatorFixed
        : creatorInherit)(fullname);
  }

  function none() {}

  function selector(selector) {
    return selector == null ? none : function() {
      return this.querySelector(selector);
    };
  }

  function selection_select(select) {
    if (typeof select !== "function") select = selector(select);

    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
        }
      }
    }

    return new Selection(subgroups, this._parents);
  }

  function empty() {
    return [];
  }

  function selectorAll(selector) {
    return selector == null ? empty : function() {
      return this.querySelectorAll(selector);
    };
  }

  function selection_selectAll(select) {
    if (typeof select !== "function") select = selectorAll(select);

    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          subgroups.push(select.call(node, node.__data__, i, group));
          parents.push(node);
        }
      }
    }

    return new Selection(subgroups, parents);
  }

  function matcher(selector) {
    return function() {
      return this.matches(selector);
    };
  }

  function selection_filter(match) {
    if (typeof match !== "function") match = matcher(match);

    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
          subgroup.push(node);
        }
      }
    }

    return new Selection(subgroups, this._parents);
  }

  function sparse(update) {
    return new Array(update.length);
  }

  function selection_enter() {
    return new Selection(this._enter || this._groups.map(sparse), this._parents);
  }

  function EnterNode(parent, datum) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum;
  }

  EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
    insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
    querySelector: function(selector) { return this._parent.querySelector(selector); },
    querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
  };

  function constant(x) {
    return function() {
      return x;
    };
  }

  var keyPrefix = "$"; // Protect against keys like “__proto__”.

  function bindIndex(parent, group, enter, update, exit, data) {
    var i = 0,
        node,
        groupLength = group.length,
        dataLength = data.length;

    // Put any non-null nodes that fit into update.
    // Put any null nodes into enter.
    // Put any remaining data into enter.
    for (; i < dataLength; ++i) {
      if (node = group[i]) {
        node.__data__ = data[i];
        update[i] = node;
      } else {
        enter[i] = new EnterNode(parent, data[i]);
      }
    }

    // Put any non-null nodes that don’t fit into exit.
    for (; i < groupLength; ++i) {
      if (node = group[i]) {
        exit[i] = node;
      }
    }
  }

  function bindKey(parent, group, enter, update, exit, data, key) {
    var i,
        node,
        nodeByKeyValue = {},
        groupLength = group.length,
        dataLength = data.length,
        keyValues = new Array(groupLength),
        keyValue;

    // Compute the key for each node.
    // If multiple nodes have the same key, the duplicates are added to exit.
    for (i = 0; i < groupLength; ++i) {
      if (node = group[i]) {
        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
        if (keyValue in nodeByKeyValue) {
          exit[i] = node;
        } else {
          nodeByKeyValue[keyValue] = node;
        }
      }
    }

    // Compute the key for each datum.
    // If there a node associated with this key, join and add it to update.
    // If there is not (or the key is a duplicate), add it to enter.
    for (i = 0; i < dataLength; ++i) {
      keyValue = keyPrefix + key.call(parent, data[i], i, data);
      if (node = nodeByKeyValue[keyValue]) {
        update[i] = node;
        node.__data__ = data[i];
        nodeByKeyValue[keyValue] = null;
      } else {
        enter[i] = new EnterNode(parent, data[i]);
      }
    }

    // Add any remaining nodes that were not bound to data to exit.
    for (i = 0; i < groupLength; ++i) {
      if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
        exit[i] = node;
      }
    }
  }

  function selection_data(value, key) {
    if (!value) {
      data = new Array(this.size()), j = -1;
      this.each(function(d) { data[++j] = d; });
      return data;
    }

    var bind = key ? bindKey : bindIndex,
        parents = this._parents,
        groups = this._groups;

    if (typeof value !== "function") value = constant(value);

    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
      var parent = parents[j],
          group = groups[j],
          groupLength = group.length,
          data = value.call(parent, parent && parent.__data__, j, parents),
          dataLength = data.length,
          enterGroup = enter[j] = new Array(dataLength),
          updateGroup = update[j] = new Array(dataLength),
          exitGroup = exit[j] = new Array(groupLength);

      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

      // Now connect the enter nodes to their following update node, such that
      // appendChild can insert the materialized enter node before this node,
      // rather than at the end of the parent node.
      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
          if (i0 >= i1) i1 = i0 + 1;
          while (!(next = updateGroup[i1]) && ++i1 < dataLength);
          previous._next = next || null;
        }
      }
    }

    update = new Selection(update, parents);
    update._enter = enter;
    update._exit = exit;
    return update;
  }

  function selection_exit() {
    return new Selection(this._exit || this._groups.map(sparse), this._parents);
  }

  function selection_join(onenter, onupdate, onexit) {
    var enter = this.enter(), update = this, exit = this.exit();
    enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
    if (onupdate != null) update = onupdate(update);
    if (onexit == null) exit.remove(); else onexit(exit);
    return enter && update ? enter.merge(update).order() : update;
  }

  function selection_merge(selection) {

    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge[i] = node;
        }
      }
    }

    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }

    return new Selection(merges, this._parents);
  }

  function selection_order() {

    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
        if (node = group[i]) {
          if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }

    return this;
  }

  function selection_sort(compare) {
    if (!compare) compare = ascending;

    function compareNode(a, b) {
      return a && b ? compare(a.__data__, b.__data__) : !a - !b;
    }

    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          sortgroup[i] = node;
        }
      }
      sortgroup.sort(compareNode);
    }

    return new Selection(sortgroups, this._parents).order();
  }

  function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }

  function selection_call() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
  }

  function selection_nodes() {
    var nodes = new Array(this.size()), i = -1;
    this.each(function() { nodes[++i] = this; });
    return nodes;
  }

  function selection_node() {

    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
        var node = group[i];
        if (node) return node;
      }
    }

    return null;
  }

  function selection_size() {
    var size = 0;
    this.each(function() { ++size; });
    return size;
  }

  function selection_empty() {
    return !this.node();
  }

  function selection_each(callback) {

    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
        if (node = group[i]) callback.call(node, node.__data__, i, group);
      }
    }

    return this;
  }

  function attrRemove(name) {
    return function() {
      this.removeAttribute(name);
    };
  }

  function attrRemoveNS(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }

  function attrConstant(name, value) {
    return function() {
      this.setAttribute(name, value);
    };
  }

  function attrConstantNS(fullname, value) {
    return function() {
      this.setAttributeNS(fullname.space, fullname.local, value);
    };
  }

  function attrFunction(name, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null) this.removeAttribute(name);
      else this.setAttribute(name, v);
    };
  }

  function attrFunctionNS(fullname, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
      else this.setAttributeNS(fullname.space, fullname.local, v);
    };
  }

  function selection_attr(name, value) {
    var fullname = namespace(name);

    if (arguments.length < 2) {
      var node = this.node();
      return fullname.local
          ? node.getAttributeNS(fullname.space, fullname.local)
          : node.getAttribute(fullname);
    }

    return this.each((value == null
        ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
        ? (fullname.local ? attrFunctionNS : attrFunction)
        : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
  }

  function defaultView(node) {
    return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
        || (node.document && node) // node is a Window
        || node.defaultView; // node is a Document
  }

  function styleRemove(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }

  function styleConstant(name, value, priority) {
    return function() {
      this.style.setProperty(name, value, priority);
    };
  }

  function styleFunction(name, value, priority) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null) this.style.removeProperty(name);
      else this.style.setProperty(name, v, priority);
    };
  }

  function selection_style(name, value, priority) {
    return arguments.length > 1
        ? this.each((value == null
              ? styleRemove : typeof value === "function"
              ? styleFunction
              : styleConstant)(name, value, priority == null ? "" : priority))
        : styleValue(this.node(), name);
  }

  function styleValue(node, name) {
    return node.style.getPropertyValue(name)
        || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
  }

  function propertyRemove(name) {
    return function() {
      delete this[name];
    };
  }

  function propertyConstant(name, value) {
    return function() {
      this[name] = value;
    };
  }

  function propertyFunction(name, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null) delete this[name];
      else this[name] = v;
    };
  }

  function selection_property(name, value) {
    return arguments.length > 1
        ? this.each((value == null
            ? propertyRemove : typeof value === "function"
            ? propertyFunction
            : propertyConstant)(name, value))
        : this.node()[name];
  }

  function classArray(string) {
    return string.trim().split(/^|\s+/);
  }

  function classList(node) {
    return node.classList || new ClassList(node);
  }

  function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
  }

  ClassList.prototype = {
    add: function(name) {
      var i = this._names.indexOf(name);
      if (i < 0) {
        this._names.push(name);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    remove: function(name) {
      var i = this._names.indexOf(name);
      if (i >= 0) {
        this._names.splice(i, 1);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    contains: function(name) {
      return this._names.indexOf(name) >= 0;
    }
  };

  function classedAdd(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while (++i < n) list.add(names[i]);
  }

  function classedRemove(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while (++i < n) list.remove(names[i]);
  }

  function classedTrue(names) {
    return function() {
      classedAdd(this, names);
    };
  }

  function classedFalse(names) {
    return function() {
      classedRemove(this, names);
    };
  }

  function classedFunction(names, value) {
    return function() {
      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
  }

  function selection_classed(name, value) {
    var names = classArray(name + "");

    if (arguments.length < 2) {
      var list = classList(this.node()), i = -1, n = names.length;
      while (++i < n) if (!list.contains(names[i])) return false;
      return true;
    }

    return this.each((typeof value === "function"
        ? classedFunction : value
        ? classedTrue
        : classedFalse)(names, value));
  }

  function textRemove() {
    this.textContent = "";
  }

  function textConstant(value) {
    return function() {
      this.textContent = value;
    };
  }

  function textFunction(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    };
  }

  function selection_text(value) {
    return arguments.length
        ? this.each(value == null
            ? textRemove : (typeof value === "function"
            ? textFunction
            : textConstant)(value))
        : this.node().textContent;
  }

  function htmlRemove() {
    this.innerHTML = "";
  }

  function htmlConstant(value) {
    return function() {
      this.innerHTML = value;
    };
  }

  function htmlFunction(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    };
  }

  function selection_html(value) {
    return arguments.length
        ? this.each(value == null
            ? htmlRemove : (typeof value === "function"
            ? htmlFunction
            : htmlConstant)(value))
        : this.node().innerHTML;
  }

  function raise() {
    if (this.nextSibling) this.parentNode.appendChild(this);
  }

  function selection_raise() {
    return this.each(raise);
  }

  function lower() {
    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }

  function selection_lower() {
    return this.each(lower);
  }

  function selection_append(name) {
    var create = typeof name === "function" ? name : creator(name);
    return this.select(function() {
      return this.appendChild(create.apply(this, arguments));
    });
  }

  function constantNull() {
    return null;
  }

  function selection_insert(name, before) {
    var create = typeof name === "function" ? name : creator(name),
        select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
    return this.select(function() {
      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
    });
  }

  function remove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }

  function selection_remove() {
    return this.each(remove);
  }

  function selection_cloneShallow() {
    var clone = this.cloneNode(false), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
  }

  function selection_cloneDeep() {
    var clone = this.cloneNode(true), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
  }

  function selection_clone(deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
  }

  function selection_datum(value) {
    return arguments.length
        ? this.property("__data__", value)
        : this.node().__data__;
  }

  var filterEvents = {};

  var event = null;

  if (typeof document !== "undefined") {
    var element = document.documentElement;
    if (!("onmouseenter" in element)) {
      filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
    }
  }

  function filterContextListener(listener, index, group) {
    listener = contextListener(listener, index, group);
    return function(event) {
      var related = event.relatedTarget;
      if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
        listener.call(this, event);
      }
    };
  }

  function contextListener(listener, index, group) {
    return function(event1) {
      var event0 = event; // Events can be reentrant (e.g., focus).
      event = event1;
      try {
        listener.call(this, this.__data__, index, group);
      } finally {
        event = event0;
      }
    };
  }

  function parseTypenames(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name = "", i = t.indexOf(".");
      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
      return {type: t, name: name};
    });
  }

  function onRemove(typename) {
    return function() {
      var on = this.__on;
      if (!on) return;
      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.capture);
        } else {
          on[++i] = o;
        }
      }
      if (++i) on.length = i;
      else delete this.__on;
    };
  }

  function onAdd(typename, value, capture) {
    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
    return function(d, i, group) {
      var on = this.__on, o, listener = wrap(value, i, group);
      if (on) for (var j = 0, m = on.length; j < m; ++j) {
        if ((o = on[j]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.capture);
          this.addEventListener(o.type, o.listener = listener, o.capture = capture);
          o.value = value;
          return;
        }
      }
      this.addEventListener(typename.type, listener, capture);
      o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
      if (!on) this.__on = [o];
      else on.push(o);
    };
  }

  function selection_on(typename, value, capture) {
    var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

    if (arguments.length < 2) {
      var on = this.node().__on;
      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
        for (i = 0, o = on[j]; i < n; ++i) {
          if ((t = typenames[i]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
      return;
    }

    on = value ? onAdd : onRemove;
    if (capture == null) capture = false;
    for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
    return this;
  }

  function customEvent(event1, listener, that, args) {
    var event0 = event;
    event1.sourceEvent = event;
    event = event1;
    try {
      return listener.apply(that, args);
    } finally {
      event = event0;
    }
  }

  function dispatchEvent(node, type, params) {
    var window = defaultView(node),
        event = window.CustomEvent;

    if (typeof event === "function") {
      event = new event(type, params);
    } else {
      event = window.document.createEvent("Event");
      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
      else event.initEvent(type, false, false);
    }

    node.dispatchEvent(event);
  }

  function dispatchConstant(type, params) {
    return function() {
      return dispatchEvent(this, type, params);
    };
  }

  function dispatchFunction(type, params) {
    return function() {
      return dispatchEvent(this, type, params.apply(this, arguments));
    };
  }

  function selection_dispatch(type, params) {
    return this.each((typeof params === "function"
        ? dispatchFunction
        : dispatchConstant)(type, params));
  }

  var root = [null];

  function Selection(groups, parents) {
    this._groups = groups;
    this._parents = parents;
  }

  function selection() {
    return new Selection([[document.documentElement]], root);
  }

  Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: selection_select,
    selectAll: selection_selectAll,
    filter: selection_filter,
    data: selection_data,
    enter: selection_enter,
    exit: selection_exit,
    join: selection_join,
    merge: selection_merge,
    order: selection_order,
    sort: selection_sort,
    call: selection_call,
    nodes: selection_nodes,
    node: selection_node,
    size: selection_size,
    empty: selection_empty,
    each: selection_each,
    attr: selection_attr,
    style: selection_style,
    property: selection_property,
    classed: selection_classed,
    text: selection_text,
    html: selection_html,
    raise: selection_raise,
    lower: selection_lower,
    append: selection_append,
    insert: selection_insert,
    remove: selection_remove,
    clone: selection_clone,
    datum: selection_datum,
    on: selection_on,
    dispatch: selection_dispatch
  };

  function select(selector) {
    return typeof selector === "string"
        ? new Selection([[document.querySelector(selector)]], [document.documentElement])
        : new Selection([[selector]], root);
  }

  function sourceEvent() {
    var current = event, source;
    while (source = current.sourceEvent) current = source;
    return current;
  }

  function point(node, event) {
    var svg = node.ownerSVGElement || node;

    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }

    var rect = node.getBoundingClientRect();
    return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
  }

  function mouse(node) {
    var event = sourceEvent();
    if (event.changedTouches) event = event.changedTouches[0];
    return point(node, event);
  }

  function selectAll(selector) {
    return typeof selector === "string"
        ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
        : new Selection([selector == null ? [] : selector], root);
  }

  function touch(node, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return point(node, touch);
      }
    }

    return null;
  }

  var frame = 0, // is an animation frame pending?
      timeout = 0, // is a timeout pending?
      interval = 0, // are any timers active?
      pokeDelay = 1000, // how frequently we check for clock skew
      taskHead,
      taskTail,
      clockLast = 0,
      clockNow = 0,
      clockSkew = 0,
      clock = typeof performance === "object" && performance.now ? performance : Date,
      setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }

  function clearNow() {
    clockNow = 0;
  }

  function Timer() {
    this._call =
    this._time =
    this._next = null;
  }

  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(callback, delay, time) {
      if (typeof callback !== "function") throw new TypeError("callback is not a function");
      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail !== this) {
        if (taskTail) taskTail._next = this;
        else taskHead = this;
        taskTail = this;
      }
      this._call = callback;
      this._time = time;
      sleep();
    },
    stop: function() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };

  function timer(callback, delay, time) {
    var t = new Timer;
    t.restart(callback, delay, time);
    return t;
  }

  function timerFlush() {
    now(); // Get the current time, if not already set.
    ++frame; // Pretend we’ve set an alarm, if we haven’t already.
    var t = taskHead, e;
    while (t) {
      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
      t = t._next;
    }
    --frame;
  }

  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }

  function poke() {
    var now = clock.now(), delay = now - clockLast;
    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
  }

  function nap() {
    var t0, t1 = taskHead, t2, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time) time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead = t2;
      }
    }
    taskTail = t0;
    sleep(time);
  }

  function sleep(time) {
    if (frame) return; // Soonest alarm already set, or will be.
    if (timeout) timeout = clearTimeout(timeout);
    var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
    if (delay > 24) {
      if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
      if (interval) interval = clearInterval(interval);
    } else {
      if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }

  function timeout$1(callback, delay, time) {
    var t = new Timer;
    delay = delay == null ? 0 : +delay;
    t.restart(function(elapsed) {
      t.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t;
  }

  var noop = {value: function() {}};

  function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + "") || (t in _) || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
      _[t] = [];
    }
    return new Dispatch(_);
  }

  function Dispatch(_) {
    this._ = _;
  }

  function parseTypenames$1(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name = "", i = t.indexOf(".");
      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
      if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
      return {type: t, name: name};
    });
  }

  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
      var _ = this._,
          T = parseTypenames$1(typename + "", _),
          t,
          i = -1,
          n = T.length;

      // If no callback was specified, return the callback of the given type and name.
      if (arguments.length < 2) {
        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
        return;
      }

      // If a type was specified, set the callback for the given type and name.
      // Otherwise, if a null callback was specified, remove callbacks of the given name.
      if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
      while (++i < n) {
        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
        else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
      }

      return this;
    },
    copy: function() {
      var copy = {}, _ = this._;
      for (var t in _) copy[t] = _[t].slice();
      return new Dispatch(copy);
    },
    call: function(type, that) {
      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
      if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
    },
    apply: function(type, that, args) {
      if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
    }
  };

  function get(type, name) {
    for (var i = 0, n = type.length, c; i < n; ++i) {
      if ((c = type[i]).name === name) {
        return c.value;
      }
    }
  }

  function set(type, name, callback) {
    for (var i = 0, n = type.length; i < n; ++i) {
      if (type[i].name === name) {
        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
      }
    }
    if (callback != null) type.push({name: name, value: callback});
    return type;
  }

  var frame$1 = 0, // is an animation frame pending?
      timeout$2 = 0, // is a timeout pending?
      interval$1 = 0, // are any timers active?
      pokeDelay$1 = 1000, // how frequently we check for clock skew
      taskHead$1,
      taskTail$1,
      clockLast$1 = 0,
      clockNow$1 = 0,
      clockSkew$1 = 0,
      clock$1 = typeof performance === "object" && performance.now ? performance : Date,
      setFrame$1 = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

  function now$1() {
    return clockNow$1 || (setFrame$1(clearNow$1), clockNow$1 = clock$1.now() + clockSkew$1);
  }

  function clearNow$1() {
    clockNow$1 = 0;
  }

  function Timer$1() {
    this._call =
    this._time =
    this._next = null;
  }

  Timer$1.prototype = timer$1.prototype = {
    constructor: Timer$1,
    restart: function(callback, delay, time) {
      if (typeof callback !== "function") throw new TypeError("callback is not a function");
      time = (time == null ? now$1() : +time) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail$1 !== this) {
        if (taskTail$1) taskTail$1._next = this;
        else taskHead$1 = this;
        taskTail$1 = this;
      }
      this._call = callback;
      this._time = time;
      sleep$1();
    },
    stop: function() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep$1();
      }
    }
  };

  function timer$1(callback, delay, time) {
    var t = new Timer$1;
    t.restart(callback, delay, time);
    return t;
  }

  function timerFlush$1() {
    now$1(); // Get the current time, if not already set.
    ++frame$1; // Pretend we’ve set an alarm, if we haven’t already.
    var t = taskHead$1, e;
    while (t) {
      if ((e = clockNow$1 - t._time) >= 0) t._call.call(null, e);
      t = t._next;
    }
    --frame$1;
  }

  function wake$1() {
    clockNow$1 = (clockLast$1 = clock$1.now()) + clockSkew$1;
    frame$1 = timeout$2 = 0;
    try {
      timerFlush$1();
    } finally {
      frame$1 = 0;
      nap$1();
      clockNow$1 = 0;
    }
  }

  function poke$1() {
    var now = clock$1.now(), delay = now - clockLast$1;
    if (delay > pokeDelay$1) clockSkew$1 -= delay, clockLast$1 = now;
  }

  function nap$1() {
    var t0, t1 = taskHead$1, t2, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time) time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead$1 = t2;
      }
    }
    taskTail$1 = t0;
    sleep$1(time);
  }

  function sleep$1(time) {
    if (frame$1) return; // Soonest alarm already set, or will be.
    if (timeout$2) timeout$2 = clearTimeout(timeout$2);
    var delay = time - clockNow$1; // Strictly less than if we recomputed clockNow.
    if (delay > 24) {
      if (time < Infinity) timeout$2 = setTimeout(wake$1, time - clock$1.now() - clockSkew$1);
      if (interval$1) interval$1 = clearInterval(interval$1);
    } else {
      if (!interval$1) clockLast$1 = clock$1.now(), interval$1 = setInterval(poke$1, pokeDelay$1);
      frame$1 = 1, setFrame$1(wake$1);
    }
  }

  function timeout$3(callback, delay, time) {
    var t = new Timer$1;
    delay = delay == null ? 0 : +delay;
    t.restart(function(elapsed) {
      t.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t;
  }

  var emptyOn = dispatch("start", "end", "cancel", "interrupt");
  var emptyTween = [];

  var CREATED = 0;
  var SCHEDULED = 1;
  var STARTING = 2;
  var STARTED = 3;
  var RUNNING = 4;
  var ENDING = 5;
  var ENDED = 6;

  function schedule(node, name, id, index, group, timing) {
    var schedules = node.__transition;
    if (!schedules) node.__transition = {};
    else if (id in schedules) return;
    create(node, id, {
      name: name,
      index: index, // For context during callback.
      group: group, // For context during callback.
      on: emptyOn,
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED
    });
  }

  function init(node, id) {
    var schedule = get$1(node, id);
    if (schedule.state > CREATED) throw new Error("too late; already scheduled");
    return schedule;
  }

  function set$1(node, id) {
    var schedule = get$1(node, id);
    if (schedule.state > STARTED) throw new Error("too late; already running");
    return schedule;
  }

  function get$1(node, id) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
    return schedule;
  }

  function create(node, id, self) {
    var schedules = node.__transition,
        tween;

    // Initialize the self timer when the transition is created.
    // Note the actual delay is not known until the first callback!
    schedules[id] = self;
    self.timer = timer$1(schedule, 0, self.time);

    function schedule(elapsed) {
      self.state = SCHEDULED;
      self.timer.restart(start, self.delay, self.time);

      // If the elapsed delay is less than our first sleep, start immediately.
      if (self.delay <= elapsed) start(elapsed - self.delay);
    }

    function start(elapsed) {
      var i, j, n, o;

      // If the state is not SCHEDULED, then we previously errored on start.
      if (self.state !== SCHEDULED) return stop();

      for (i in schedules) {
        o = schedules[i];
        if (o.name !== self.name) continue;

        // While this element already has a starting transition during this frame,
        // defer starting an interrupting transition until that transition has a
        // chance to tick (and possibly end); see d3/d3-transition#54!
        if (o.state === STARTED) return timeout$3(start);

        // Interrupt the active transition, if any.
        if (o.state === RUNNING) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("interrupt", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }

        // Cancel any pre-empted transitions.
        else if (+i < id) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("cancel", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }
      }

      // Defer the first tick to end of the current frame; see d3/d3#1576.
      // Note the transition may be canceled after start and before the first tick!
      // Note this must be scheduled before the start event; see d3/d3-transition#16!
      // Assuming this is successful, subsequent callbacks go straight to tick.
      timeout$3(function() {
        if (self.state === STARTED) {
          self.state = RUNNING;
          self.timer.restart(tick, self.delay, self.time);
          tick(elapsed);
        }
      });

      // Dispatch the start event.
      // Note this must be done before the tween are initialized.
      self.state = STARTING;
      self.on.call("start", node, node.__data__, self.index, self.group);
      if (self.state !== STARTING) return; // interrupted
      self.state = STARTED;

      // Initialize the tween, deleting null tween.
      tween = new Array(n = self.tween.length);
      for (i = 0, j = -1; i < n; ++i) {
        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
          tween[++j] = o;
        }
      }
      tween.length = j + 1;
    }

    function tick(elapsed) {
      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
          i = -1,
          n = tween.length;

      while (++i < n) {
        tween[i].call(node, t);
      }

      // Dispatch the end event.
      if (self.state === ENDING) {
        self.on.call("end", node, node.__data__, self.index, self.group);
        stop();
      }
    }

    function stop() {
      self.state = ENDED;
      self.timer.stop();
      delete schedules[id];
      for (var i in schedules) return; // eslint-disable-line no-unused-vars
      delete node.__transition;
    }
  }

  function interrupt(node, name) {
    var schedules = node.__transition,
        schedule,
        active,
        empty = true,
        i;

    if (!schedules) return;

    name = name == null ? null : name + "";

    for (i in schedules) {
      if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
      active = schedule.state > STARTING && schedule.state < ENDING;
      schedule.state = ENDED;
      schedule.timer.stop();
      schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
      delete schedules[i];
    }

    if (empty) delete node.__transition;
  }

  function selection_interrupt(name) {
    return this.each(function() {
      interrupt(this, name);
    });
  }

  function define(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }

  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition) prototype[key] = definition[key];
    return prototype;
  }

  function Color() {}

  var darker = 0.7;
  var brighter = 1 / darker;

  var reI = "\\s*([+-]?\\d+)\\s*",
      reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
      reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
      reHex = /^#([0-9a-f]{3,8})$/,
      reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
      reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
      reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
      reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
      reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
      reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

  var named = {
    aliceblue: 0xf0f8ff,
    antiquewhite: 0xfaebd7,
    aqua: 0x00ffff,
    aquamarine: 0x7fffd4,
    azure: 0xf0ffff,
    beige: 0xf5f5dc,
    bisque: 0xffe4c4,
    black: 0x000000,
    blanchedalmond: 0xffebcd,
    blue: 0x0000ff,
    blueviolet: 0x8a2be2,
    brown: 0xa52a2a,
    burlywood: 0xdeb887,
    cadetblue: 0x5f9ea0,
    chartreuse: 0x7fff00,
    chocolate: 0xd2691e,
    coral: 0xff7f50,
    cornflowerblue: 0x6495ed,
    cornsilk: 0xfff8dc,
    crimson: 0xdc143c,
    cyan: 0x00ffff,
    darkblue: 0x00008b,
    darkcyan: 0x008b8b,
    darkgoldenrod: 0xb8860b,
    darkgray: 0xa9a9a9,
    darkgreen: 0x006400,
    darkgrey: 0xa9a9a9,
    darkkhaki: 0xbdb76b,
    darkmagenta: 0x8b008b,
    darkolivegreen: 0x556b2f,
    darkorange: 0xff8c00,
    darkorchid: 0x9932cc,
    darkred: 0x8b0000,
    darksalmon: 0xe9967a,
    darkseagreen: 0x8fbc8f,
    darkslateblue: 0x483d8b,
    darkslategray: 0x2f4f4f,
    darkslategrey: 0x2f4f4f,
    darkturquoise: 0x00ced1,
    darkviolet: 0x9400d3,
    deeppink: 0xff1493,
    deepskyblue: 0x00bfff,
    dimgray: 0x696969,
    dimgrey: 0x696969,
    dodgerblue: 0x1e90ff,
    firebrick: 0xb22222,
    floralwhite: 0xfffaf0,
    forestgreen: 0x228b22,
    fuchsia: 0xff00ff,
    gainsboro: 0xdcdcdc,
    ghostwhite: 0xf8f8ff,
    gold: 0xffd700,
    goldenrod: 0xdaa520,
    gray: 0x808080,
    green: 0x008000,
    greenyellow: 0xadff2f,
    grey: 0x808080,
    honeydew: 0xf0fff0,
    hotpink: 0xff69b4,
    indianred: 0xcd5c5c,
    indigo: 0x4b0082,
    ivory: 0xfffff0,
    khaki: 0xf0e68c,
    lavender: 0xe6e6fa,
    lavenderblush: 0xfff0f5,
    lawngreen: 0x7cfc00,
    lemonchiffon: 0xfffacd,
    lightblue: 0xadd8e6,
    lightcoral: 0xf08080,
    lightcyan: 0xe0ffff,
    lightgoldenrodyellow: 0xfafad2,
    lightgray: 0xd3d3d3,
    lightgreen: 0x90ee90,
    lightgrey: 0xd3d3d3,
    lightpink: 0xffb6c1,
    lightsalmon: 0xffa07a,
    lightseagreen: 0x20b2aa,
    lightskyblue: 0x87cefa,
    lightslategray: 0x778899,
    lightslategrey: 0x778899,
    lightsteelblue: 0xb0c4de,
    lightyellow: 0xffffe0,
    lime: 0x00ff00,
    limegreen: 0x32cd32,
    linen: 0xfaf0e6,
    magenta: 0xff00ff,
    maroon: 0x800000,
    mediumaquamarine: 0x66cdaa,
    mediumblue: 0x0000cd,
    mediumorchid: 0xba55d3,
    mediumpurple: 0x9370db,
    mediumseagreen: 0x3cb371,
    mediumslateblue: 0x7b68ee,
    mediumspringgreen: 0x00fa9a,
    mediumturquoise: 0x48d1cc,
    mediumvioletred: 0xc71585,
    midnightblue: 0x191970,
    mintcream: 0xf5fffa,
    mistyrose: 0xffe4e1,
    moccasin: 0xffe4b5,
    navajowhite: 0xffdead,
    navy: 0x000080,
    oldlace: 0xfdf5e6,
    olive: 0x808000,
    olivedrab: 0x6b8e23,
    orange: 0xffa500,
    orangered: 0xff4500,
    orchid: 0xda70d6,
    palegoldenrod: 0xeee8aa,
    palegreen: 0x98fb98,
    paleturquoise: 0xafeeee,
    palevioletred: 0xdb7093,
    papayawhip: 0xffefd5,
    peachpuff: 0xffdab9,
    peru: 0xcd853f,
    pink: 0xffc0cb,
    plum: 0xdda0dd,
    powderblue: 0xb0e0e6,
    purple: 0x800080,
    rebeccapurple: 0x663399,
    red: 0xff0000,
    rosybrown: 0xbc8f8f,
    royalblue: 0x4169e1,
    saddlebrown: 0x8b4513,
    salmon: 0xfa8072,
    sandybrown: 0xf4a460,
    seagreen: 0x2e8b57,
    seashell: 0xfff5ee,
    sienna: 0xa0522d,
    silver: 0xc0c0c0,
    skyblue: 0x87ceeb,
    slateblue: 0x6a5acd,
    slategray: 0x708090,
    slategrey: 0x708090,
    snow: 0xfffafa,
    springgreen: 0x00ff7f,
    steelblue: 0x4682b4,
    tan: 0xd2b48c,
    teal: 0x008080,
    thistle: 0xd8bfd8,
    tomato: 0xff6347,
    turquoise: 0x40e0d0,
    violet: 0xee82ee,
    wheat: 0xf5deb3,
    white: 0xffffff,
    whitesmoke: 0xf5f5f5,
    yellow: 0xffff00,
    yellowgreen: 0x9acd32
  };

  define(Color, color, {
    copy: function(channels) {
      return Object.assign(new this.constructor, this, channels);
    },
    displayable: function() {
      return this.rgb().displayable();
    },
    hex: color_formatHex, // Deprecated! Use color.formatHex.
    formatHex: color_formatHex,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });

  function color_formatHex() {
    return this.rgb().formatHex();
  }

  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }

  function color_formatRgb() {
    return this.rgb().formatRgb();
  }

  function color(format) {
    var m, l;
    format = (format + "").trim().toLowerCase();
    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
        : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
        : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
        : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
        : null) // invalid hex
        : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
        : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
        : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
        : null;
  }

  function rgbn(n) {
    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
  }

  function rgba(r, g, b, a) {
    if (a <= 0) r = g = b = NaN;
    return new Rgb(r, g, b, a);
  }

  function rgbConvert(o) {
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Rgb;
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
  }

  function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
  }

  function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
  }

  define(Rgb, rgb, extend(Color, {
    brighter: function(k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker: function(k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb: function() {
      return this;
    },
    displayable: function() {
      return (-0.5 <= this.r && this.r < 255.5)
          && (-0.5 <= this.g && this.g < 255.5)
          && (-0.5 <= this.b && this.b < 255.5)
          && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex, // Deprecated! Use color.formatHex.
    formatHex: rgb_formatHex,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));

  function rgb_formatHex() {
    return "#" + hex(this.r) + hex(this.g) + hex(this.b);
  }

  function rgb_formatRgb() {
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(")
        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
        + (a === 1 ? ")" : ", " + a + ")");
  }

  function hex(value) {
    value = Math.max(0, Math.min(255, Math.round(value) || 0));
    return (value < 16 ? "0" : "") + value.toString(16);
  }

  function hsla(h, s, l, a) {
    if (a <= 0) h = s = l = NaN;
    else if (l <= 0 || l >= 1) h = s = NaN;
    else if (s <= 0) h = NaN;
    return new Hsl(h, s, l, a);
  }

  function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Hsl;
    if (o instanceof Hsl) return o;
    o = o.rgb();
    var r = o.r / 255,
        g = o.g / 255,
        b = o.b / 255,
        min = Math.min(r, g, b),
        max = Math.max(r, g, b),
        h = NaN,
        s = max - min,
        l = (max + min) / 2;
    if (s) {
      if (r === max) h = (g - b) / s + (g < b) * 6;
      else if (g === max) h = (b - r) / s + 2;
      else h = (r - g) / s + 4;
      s /= l < 0.5 ? max + min : 2 - max - min;
      h *= 60;
    } else {
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new Hsl(h, s, l, o.opacity);
  }

  function hsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
  }

  function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }

  define(Hsl, hsl, extend(Color, {
    brighter: function(k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function(k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function() {
      var h = this.h % 360 + (this.h < 0) * 360,
          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
          l = this.l,
          m2 = l + (l < 0.5 ? l : 1 - l) * s,
          m1 = 2 * l - m2;
      return new Rgb(
        hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
        hsl2rgb(h, m1, m2),
        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
        this.opacity
      );
    },
    displayable: function() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s))
          && (0 <= this.l && this.l <= 1)
          && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl: function() {
      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "hsl(" : "hsla(")
          + (this.h || 0) + ", "
          + (this.s || 0) * 100 + "%, "
          + (this.l || 0) * 100 + "%"
          + (a === 1 ? ")" : ", " + a + ")");
    }
  }));

  /* From FvD 13.37, CSS Color Module Level 3 */
  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60
        : h < 180 ? m2
        : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
        : m1) * 255;
  }

  function constant$1(x) {
    return function() {
      return x;
    };
  }

  function linear(a, d) {
    return function(t) {
      return a + t * d;
    };
  }

  function exponential(a, b, y) {
    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
      return Math.pow(a + t * b, y);
    };
  }

  function gamma(y) {
    return (y = +y) === 1 ? nogamma : function(a, b) {
      return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
    };
  }

  function nogamma(a, b) {
    var d = b - a;
    return d ? linear(a, d) : constant$1(isNaN(a) ? b : a);
  }

  var interpolateRgb = (function rgbGamma(y) {
    var color = gamma(y);

    function rgb$1(start, end) {
      var r = color((start = rgb(start)).r, (end = rgb(end)).r),
          g = color(start.g, end.g),
          b = color(start.b, end.b),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.r = r(t);
        start.g = g(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }

    rgb$1.gamma = rgbGamma;

    return rgb$1;
  })(1);

  function numberArray(a, b) {
    if (!b) b = [];
    var n = a ? Math.min(b.length, a.length) : 0,
        c = b.slice(),
        i;
    return function(t) {
      for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
      return c;
    };
  }

  function isNumberArray(x) {
    return ArrayBuffer.isView(x) && !(x instanceof DataView);
  }

  function genericArray(a, b) {
    var nb = b ? b.length : 0,
        na = a ? Math.min(nb, a.length) : 0,
        x = new Array(na),
        c = new Array(nb),
        i;

    for (i = 0; i < na; ++i) x[i] = interpolateValue(a[i], b[i]);
    for (; i < nb; ++i) c[i] = b[i];

    return function(t) {
      for (i = 0; i < na; ++i) c[i] = x[i](t);
      return c;
    };
  }

  function date(a, b) {
    var d = new Date;
    return a = +a, b = +b, function(t) {
      return d.setTime(a * (1 - t) + b * t), d;
    };
  }

  function interpolateNumber(a, b) {
    return a = +a, b = +b, function(t) {
      return a * (1 - t) + b * t;
    };
  }

  function object(a, b) {
    var i = {},
        c = {},
        k;

    if (a === null || typeof a !== "object") a = {};
    if (b === null || typeof b !== "object") b = {};

    for (k in b) {
      if (k in a) {
        i[k] = interpolateValue(a[k], b[k]);
      } else {
        c[k] = b[k];
      }
    }

    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }

  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
      reB = new RegExp(reA.source, "g");

  function zero(b) {
    return function() {
      return b;
    };
  }

  function one(b) {
    return function(t) {
      return b(t) + "";
    };
  }

  function interpolateString(a, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
        am, // current match in a
        bm, // current match in b
        bs, // string preceding current number in b, if any
        i = -1, // index in s
        s = [], // string constants and placeholders
        q = []; // number interpolators

    // Coerce inputs to strings.
    a = a + "", b = b + "";

    // Interpolate pairs of numbers in a & b.
    while ((am = reA.exec(a))
        && (bm = reB.exec(b))) {
      if ((bs = bm.index) > bi) { // a string precedes the next number in b
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
        if (s[i]) s[i] += bm; // coalesce with previous string
        else s[++i] = bm;
      } else { // interpolate non-matching numbers
        s[++i] = null;
        q.push({i: i, x: interpolateNumber(am, bm)});
      }
      bi = reB.lastIndex;
    }

    // Add remains of b.
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }

    // Special optimization for only a single match.
    // Otherwise, interpolate each of the numbers and rejoin the string.
    return s.length < 2 ? (q[0]
        ? one(q[0].x)
        : zero(b))
        : (b = q.length, function(t) {
            for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
            return s.join("");
          });
  }

  function interpolateValue(a, b) {
    var t = typeof b, c;
    return b == null || t === "boolean" ? constant$1(b)
        : (t === "number" ? interpolateNumber
        : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
        : b instanceof color ? interpolateRgb
        : b instanceof Date ? date
        : isNumberArray(b) ? numberArray
        : Array.isArray(b) ? genericArray
        : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
        : interpolateNumber)(a, b);
  }

  function interpolateRound(a, b) {
    return a = +a, b = +b, function(t) {
      return Math.round(a * (1 - t) + b * t);
    };
  }

  var degrees = 180 / Math.PI;

  var identity = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };

  function decompose(a, b, c, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b, a) * degrees,
      skewX: Math.atan(skewX) * degrees,
      scaleX: scaleX,
      scaleY: scaleY
    };
  }

  var cssNode,
      cssRoot,
      cssView,
      svgNode;

  function parseCss(value) {
    if (value === "none") return identity;
    if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
    cssNode.style.transform = value;
    value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
    cssRoot.removeChild(cssNode);
    value = value.slice(7, -1).split(",");
    return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
  }

  function parseSvg(value) {
    if (value == null) return identity;
    if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
    value = value.matrix;
    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
  }

  function interpolateTransform(parse, pxComma, pxParen, degParen) {

    function pop(s) {
      return s.length ? s.pop() + " " : "";
    }

    function translate(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push("translate(", null, pxComma, null, pxParen);
        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
      } else if (xb || yb) {
        s.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }

    function rotate(a, b, s, q) {
      if (a !== b) {
        if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
        q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a, b)});
      } else if (b) {
        s.push(pop(s) + "rotate(" + b + degParen);
      }
    }

    function skewX(a, b, s, q) {
      if (a !== b) {
        q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a, b)});
      } else if (b) {
        s.push(pop(s) + "skewX(" + b + degParen);
      }
    }

    function scale(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push(pop(s) + "scale(", null, ",", null, ")");
        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
      } else if (xb !== 1 || yb !== 1) {
        s.push(pop(s) + "scale(" + xb + "," + yb + ")");
      }
    }

    return function(a, b) {
      var s = [], // string constants and placeholders
          q = []; // number interpolators
      a = parse(a), b = parse(b);
      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
      rotate(a.rotate, b.rotate, s, q);
      skewX(a.skewX, b.skewX, s, q);
      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
      a = b = null; // gc
      return function(t) {
        var i = -1, n = q.length, o;
        while (++i < n) s[(o = q[i]).i] = o.x(t);
        return s.join("");
      };
    };
  }

  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

  function tweenRemove(id, name) {
    var tween0, tween1;
    return function() {
      var schedule = set$1(this, id),
          tween = schedule.tween;

      // If this node shared tween with the previous node,
      // just assign the updated shared tween and we’re done!
      // Otherwise, copy-on-write.
      if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name) {
            tween1 = tween1.slice();
            tween1.splice(i, 1);
            break;
          }
        }
      }

      schedule.tween = tween1;
    };
  }

  function tweenFunction(id, name, value) {
    var tween0, tween1;
    if (typeof value !== "function") throw new Error;
    return function() {
      var schedule = set$1(this, id),
          tween = schedule.tween;

      // If this node shared tween with the previous node,
      // just assign the updated shared tween and we’re done!
      // Otherwise, copy-on-write.
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name) {
            tween1[i] = t;
            break;
          }
        }
        if (i === n) tween1.push(t);
      }

      schedule.tween = tween1;
    };
  }

  function transition_tween(name, value) {
    var id = this._id;

    name += "";

    if (arguments.length < 2) {
      var tween = get$1(this.node(), id).tween;
      for (var i = 0, n = tween.length, t; i < n; ++i) {
        if ((t = tween[i]).name === name) {
          return t.value;
        }
      }
      return null;
    }

    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
  }

  function tweenValue(transition, name, value) {
    var id = transition._id;

    transition.each(function() {
      var schedule = set$1(this, id);
      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
    });

    return function(node) {
      return get$1(node, id).value[name];
    };
  }

  function interpolate(a, b) {
    var c;
    return (typeof b === "number" ? interpolateNumber
        : b instanceof color ? interpolateRgb
        : (c = color(b)) ? (b = c, interpolateRgb)
        : interpolateString)(a, b);
  }

  function attrRemove$1(name) {
    return function() {
      this.removeAttribute(name);
    };
  }

  function attrRemoveNS$1(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }

  function attrConstant$1(name, interpolate, value1) {
    var string00,
        string1 = value1 + "",
        interpolate0;
    return function() {
      var string0 = this.getAttribute(name);
      return string0 === string1 ? null
          : string0 === string00 ? interpolate0
          : interpolate0 = interpolate(string00 = string0, value1);
    };
  }

  function attrConstantNS$1(fullname, interpolate, value1) {
    var string00,
        string1 = value1 + "",
        interpolate0;
    return function() {
      var string0 = this.getAttributeNS(fullname.space, fullname.local);
      return string0 === string1 ? null
          : string0 === string00 ? interpolate0
          : interpolate0 = interpolate(string00 = string0, value1);
    };
  }

  function attrFunction$1(name, interpolate, value) {
    var string00,
        string10,
        interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null) return void this.removeAttribute(name);
      string0 = this.getAttribute(name);
      string1 = value1 + "";
      return string0 === string1 ? null
          : string0 === string00 && string1 === string10 ? interpolate0
          : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }

  function attrFunctionNS$1(fullname, interpolate, value) {
    var string00,
        string10,
        interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
      string0 = this.getAttributeNS(fullname.space, fullname.local);
      string1 = value1 + "";
      return string0 === string1 ? null
          : string0 === string00 && string1 === string10 ? interpolate0
          : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }

  function transition_attr(name, value) {
    var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate;
    return this.attrTween(name, typeof value === "function"
        ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value))
        : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)
        : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));
  }

  function attrInterpolate(name, i) {
    return function(t) {
      this.setAttribute(name, i.call(this, t));
    };
  }

  function attrInterpolateNS(fullname, i) {
    return function(t) {
      this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
    };
  }

  function attrTweenNS(fullname, value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
      return t0;
    }
    tween._value = value;
    return tween;
  }

  function attrTween(name, value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
      return t0;
    }
    tween._value = value;
    return tween;
  }

  function transition_attrTween(name, value) {
    var key = "attr." + name;
    if (arguments.length < 2) return (key = this.tween(key)) && key._value;
    if (value == null) return this.tween(key, null);
    if (typeof value !== "function") throw new Error;
    var fullname = namespace(name);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
  }

  function delayFunction(id, value) {
    return function() {
      init(this, id).delay = +value.apply(this, arguments);
    };
  }

  function delayConstant(id, value) {
    return value = +value, function() {
      init(this, id).delay = value;
    };
  }

  function transition_delay(value) {
    var id = this._id;

    return arguments.length
        ? this.each((typeof value === "function"
            ? delayFunction
            : delayConstant)(id, value))
        : get$1(this.node(), id).delay;
  }

  function durationFunction(id, value) {
    return function() {
      set$1(this, id).duration = +value.apply(this, arguments);
    };
  }

  function durationConstant(id, value) {
    return value = +value, function() {
      set$1(this, id).duration = value;
    };
  }

  function transition_duration(value) {
    var id = this._id;

    return arguments.length
        ? this.each((typeof value === "function"
            ? durationFunction
            : durationConstant)(id, value))
        : get$1(this.node(), id).duration;
  }

  function easeConstant(id, value) {
    if (typeof value !== "function") throw new Error;
    return function() {
      set$1(this, id).ease = value;
    };
  }

  function transition_ease(value) {
    var id = this._id;

    return arguments.length
        ? this.each(easeConstant(id, value))
        : get$1(this.node(), id).ease;
  }

  function transition_filter(match) {
    if (typeof match !== "function") match = matcher(match);

    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
          subgroup.push(node);
        }
      }
    }

    return new Transition(subgroups, this._parents, this._name, this._id);
  }

  function transition_merge(transition) {
    if (transition._id !== this._id) throw new Error;

    for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge[i] = node;
        }
      }
    }

    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }

    return new Transition(merges, this._parents, this._name, this._id);
  }

  function start(name) {
    return (name + "").trim().split(/^|\s+/).every(function(t) {
      var i = t.indexOf(".");
      if (i >= 0) t = t.slice(0, i);
      return !t || t === "start";
    });
  }

  function onFunction(id, name, listener) {
    var on0, on1, sit = start(name) ? init : set$1;
    return function() {
      var schedule = sit(this, id),
          on = schedule.on;

      // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.
      if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

      schedule.on = on1;
    };
  }

  function transition_on(name, listener) {
    var id = this._id;

    return arguments.length < 2
        ? get$1(this.node(), id).on.on(name)
        : this.each(onFunction(id, name, listener));
  }

  function removeFunction(id) {
    return function() {
      var parent = this.parentNode;
      for (var i in this.__transition) if (+i !== id) return;
      if (parent) parent.removeChild(this);
    };
  }

  function transition_remove() {
    return this.on("end.remove", removeFunction(this._id));
  }

  function transition_select(select) {
    var name = this._name,
        id = this._id;

    if (typeof select !== "function") select = selector(select);

    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
          schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
        }
      }
    }

    return new Transition(subgroups, this._parents, name, id);
  }

  function transition_selectAll(select) {
    var name = this._name,
        id = this._id;

    if (typeof select !== "function") select = selectorAll(select);

    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
            if (child = children[k]) {
              schedule(child, name, id, k, children, inherit);
            }
          }
          subgroups.push(children);
          parents.push(node);
        }
      }
    }

    return new Transition(subgroups, parents, name, id);
  }

  var Selection$1 = selection.prototype.constructor;

  function transition_selection() {
    return new Selection$1(this._groups, this._parents);
  }

  function styleNull(name, interpolate) {
    var string00,
        string10,
        interpolate0;
    return function() {
      var string0 = styleValue(this, name),
          string1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null
          : string0 === string00 && string1 === string10 ? interpolate0
          : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
  }

  function styleRemove$1(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }

  function styleConstant$1(name, interpolate, value1) {
    var string00,
        string1 = value1 + "",
        interpolate0;
    return function() {
      var string0 = styleValue(this, name);
      return string0 === string1 ? null
          : string0 === string00 ? interpolate0
          : interpolate0 = interpolate(string00 = string0, value1);
    };
  }

  function styleFunction$1(name, interpolate, value) {
    var string00,
        string10,
        interpolate0;
    return function() {
      var string0 = styleValue(this, name),
          value1 = value(this),
          string1 = value1 + "";
      if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null
          : string0 === string00 && string1 === string10 ? interpolate0
          : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }

  function styleMaybeRemove(id, name) {
    var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
    return function() {
      var schedule = set$1(this, id),
          on = schedule.on,
          listener = schedule.value[key] == null ? remove || (remove = styleRemove$1(name)) : undefined;

      // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.
      if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);

      schedule.on = on1;
    };
  }

  function transition_style(name, value, priority) {
    var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
    return value == null ? this
        .styleTween(name, styleNull(name, i))
        .on("end.style." + name, styleRemove$1(name))
      : typeof value === "function" ? this
        .styleTween(name, styleFunction$1(name, i, tweenValue(this, "style." + name, value)))
        .each(styleMaybeRemove(this._id, name))
      : this
        .styleTween(name, styleConstant$1(name, i, value), priority)
        .on("end.style." + name, null);
  }

  function styleInterpolate(name, i, priority) {
    return function(t) {
      this.style.setProperty(name, i.call(this, t), priority);
    };
  }

  function styleTween(name, value, priority) {
    var t, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
      return t;
    }
    tween._value = value;
    return tween;
  }

  function transition_styleTween(name, value, priority) {
    var key = "style." + (name += "");
    if (arguments.length < 2) return (key = this.tween(key)) && key._value;
    if (value == null) return this.tween(key, null);
    if (typeof value !== "function") throw new Error;
    return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
  }

  function textConstant$1(value) {
    return function() {
      this.textContent = value;
    };
  }

  function textFunction$1(value) {
    return function() {
      var value1 = value(this);
      this.textContent = value1 == null ? "" : value1;
    };
  }

  function transition_text(value) {
    return this.tween("text", typeof value === "function"
        ? textFunction$1(tweenValue(this, "text", value))
        : textConstant$1(value == null ? "" : value + ""));
  }

  function textInterpolate(i) {
    return function(t) {
      this.textContent = i.call(this, t);
    };
  }

  function textTween(value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
      return t0;
    }
    tween._value = value;
    return tween;
  }

  function transition_textTween(value) {
    var key = "text";
    if (arguments.length < 1) return (key = this.tween(key)) && key._value;
    if (value == null) return this.tween(key, null);
    if (typeof value !== "function") throw new Error;
    return this.tween(key, textTween(value));
  }

  function transition_transition() {
    var name = this._name,
        id0 = this._id,
        id1 = newId();

    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          var inherit = get$1(node, id0);
          schedule(node, name, id1, i, group, {
            time: inherit.time + inherit.delay + inherit.duration,
            delay: 0,
            duration: inherit.duration,
            ease: inherit.ease
          });
        }
      }
    }

    return new Transition(groups, this._parents, name, id1);
  }

  function transition_end() {
    var on0, on1, that = this, id = that._id, size = that.size();
    return new Promise(function(resolve, reject) {
      var cancel = {value: reject},
          end = {value: function() { if (--size === 0) resolve(); }};

      that.each(function() {
        var schedule = set$1(this, id),
            on = schedule.on;

        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0) {
          on1 = (on0 = on).copy();
          on1._.cancel.push(cancel);
          on1._.interrupt.push(cancel);
          on1._.end.push(end);
        }

        schedule.on = on1;
      });
    });
  }

  var id = 0;

  function Transition(groups, parents, name, id) {
    this._groups = groups;
    this._parents = parents;
    this._name = name;
    this._id = id;
  }

  function transition(name) {
    return selection().transition(name);
  }

  function newId() {
    return ++id;
  }

  var selection_prototype = selection.prototype;

  Transition.prototype = transition.prototype = {
    constructor: Transition,
    select: transition_select,
    selectAll: transition_selectAll,
    filter: transition_filter,
    merge: transition_merge,
    selection: transition_selection,
    transition: transition_transition,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: transition_on,
    attr: transition_attr,
    attrTween: transition_attrTween,
    style: transition_style,
    styleTween: transition_styleTween,
    text: transition_text,
    textTween: transition_textTween,
    remove: transition_remove,
    tween: transition_tween,
    delay: transition_delay,
    duration: transition_duration,
    ease: transition_ease,
    end: transition_end
  };

  function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
  }

  var defaultTiming = {
    time: null, // Set on use.
    delay: 0,
    duration: 250,
    ease: cubicInOut
  };

  function inherit(node, id) {
    var timing;
    while (!(timing = node.__transition) || !(timing = timing[id])) {
      if (!(node = node.parentNode)) {
        return defaultTiming.time = now$1(), defaultTiming;
      }
    }
    return timing;
  }

  function selection_transition(name) {
    var id,
        timing;

    if (name instanceof Transition) {
      id = name._id, name = name._name;
    } else {
      id = newId(), (timing = defaultTiming).time = now$1(), name = name == null ? null : name + "";
    }

    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          schedule(node, name, id, i, group, timing || inherit(node, id));
        }
      }
    }

    return new Transition(groups, this._parents, name, id);
  }

  selection.prototype.interrupt = selection_interrupt;
  selection.prototype.transition = selection_transition;

  var EOL = {},
      EOF = {},
      QUOTE = 34,
      NEWLINE = 10,
      RETURN = 13;

  function objectConverter(columns) {
    return new Function("d", "return {" + columns.map(function(name, i) {
      return JSON.stringify(name) + ": d[" + i + "] || \"\"";
    }).join(",") + "}");
  }

  function customConverter(columns, f) {
    var object = objectConverter(columns);
    return function(row, i) {
      return f(object(row), i, columns);
    };
  }

  // Compute unique columns in order of discovery.
  function inferColumns(rows) {
    var columnSet = Object.create(null),
        columns = [];

    rows.forEach(function(row) {
      for (var column in row) {
        if (!(column in columnSet)) {
          columns.push(columnSet[column] = column);
        }
      }
    });

    return columns;
  }

  function pad(value, width) {
    var s = value + "", length = s.length;
    return length < width ? new Array(width - length + 1).join(0) + s : s;
  }

  function formatYear(year) {
    return year < 0 ? "-" + pad(-year, 6)
      : year > 9999 ? "+" + pad(year, 6)
      : pad(year, 4);
  }

  function formatDate(date) {
    var hours = date.getUTCHours(),
        minutes = date.getUTCMinutes(),
        seconds = date.getUTCSeconds(),
        milliseconds = date.getUTCMilliseconds();
    return isNaN(date) ? "Invalid Date"
        : formatYear(date.getUTCFullYear()) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2)
        + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z"
        : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z"
        : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z"
        : "");
  }

  function dsvFormat(delimiter) {
    var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
        DELIMITER = delimiter.charCodeAt(0);

    function parse(text, f) {
      var convert, columns, rows = parseRows(text, function(row, i) {
        if (convert) return convert(row, i - 1);
        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
      });
      rows.columns = columns || [];
      return rows;
    }

    function parseRows(text, f) {
      var rows = [], // output rows
          N = text.length,
          I = 0, // current character index
          n = 0, // current line number
          t, // current token
          eof = N <= 0, // current token followed by EOF?
          eol = false; // current token followed by EOL?

      // Strip the trailing newline.
      if (text.charCodeAt(N - 1) === NEWLINE) --N;
      if (text.charCodeAt(N - 1) === RETURN) --N;

      function token() {
        if (eof) return EOF;
        if (eol) return eol = false, EOL;

        // Unescape quotes.
        var i, j = I, c;
        if (text.charCodeAt(j) === QUOTE) {
          while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
          if ((i = I) >= N) eof = true;
          else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
          else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
          return text.slice(j + 1, i - 1).replace(/""/g, "\"");
        }

        // Find next delimiter or newline.
        while (I < N) {
          if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
          else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
          else if (c !== DELIMITER) continue;
          return text.slice(j, i);
        }

        // Return last token before EOF.
        return eof = true, text.slice(j, N);
      }

      while ((t = token()) !== EOF) {
        var row = [];
        while (t !== EOL && t !== EOF) row.push(t), t = token();
        if (f && (row = f(row, n++)) == null) continue;
        rows.push(row);
      }

      return rows;
    }

    function preformatBody(rows, columns) {
      return rows.map(function(row) {
        return columns.map(function(column) {
          return formatValue(row[column]);
        }).join(delimiter);
      });
    }

    function format(rows, columns) {
      if (columns == null) columns = inferColumns(rows);
      return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
    }

    function formatBody(rows, columns) {
      if (columns == null) columns = inferColumns(rows);
      return preformatBody(rows, columns).join("\n");
    }

    function formatRows(rows) {
      return rows.map(formatRow).join("\n");
    }

    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }

    function formatValue(value) {
      return value == null ? ""
          : value instanceof Date ? formatDate(value)
          : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\""
          : value;
    }

    return {
      parse: parse,
      parseRows: parseRows,
      format: format,
      formatBody: formatBody,
      formatRows: formatRows,
      formatRow: formatRow,
      formatValue: formatValue
    };
  }

  var csv = dsvFormat(",");

  var csvParse = csv.parse;

  function autoType(object) {
    for (var key in object) {
      var value = object[key].trim(), number, m;
      if (!value) value = null;
      else if (value === "true") value = true;
      else if (value === "false") value = false;
      else if (value === "NaN") value = NaN;
      else if (!isNaN(number = +value)) value = number;
      else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
        if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, "/").replace(/T/, " ");
        value = new Date(value);
      }
      else continue;
      object[key] = value;
    }
    return object;
  }

  // https://github.com/d3/d3-dsv/issues/45
  var fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();

  function responseText(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    return response.text();
  }

  function text(input, init) {
    return fetch(input, init).then(responseText);
  }

  function dsvParse(parse) {
    return function(input, init, row) {
      if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
      return text(input, init).then(function(response) {
        return parse(response, row);
      });
    };
  }

  var csv$1 = dsvParse(csvParse);

  function image(input, init) {
    return new Promise(function(resolve, reject) {
      var image = new Image;
      for (var key in init) image[key] = init[key];
      image.onerror = reject;
      image.onload = function() { resolve(image); };
      image.src = input;
    });
  }

  function responseJson(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    if (response.status === 204 || response.status === 205) return;
    return response.json();
  }

  function json(input, init) {
    return fetch(input, init).then(responseJson);
  }

  function parser(type) {
    return function(input, init)  {
      return text(input, init).then(function(text) {
        return (new DOMParser).parseFromString(text, type);
      });
    };
  }

  var xml = parser("application/xml");

  function ascending$1(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }

  function bisector(compare) {
    if (compare.length === 1) compare = ascendingComparator(compare);
    return {
      left: function(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;
          else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;
          else lo = mid + 1;
        }
        return lo;
      }
    };
  }

  function ascendingComparator(f) {
    return function(d, x) {
      return ascending$1(f(d), x);
    };
  }

  var ascendingBisect = bisector(ascending$1);
  var bisectRight = ascendingBisect.right;

  function number(x) {
    return x === null ? NaN : +x;
  }

  function extent(values, valueof) {
    var n = values.length,
        i = -1,
        value,
        min,
        max;

    if (valueof == null) {
      while (++i < n) { // Find the first comparable value.
        if ((value = values[i]) != null && value >= value) {
          min = max = value;
          while (++i < n) { // Compare the remaining values.
            if ((value = values[i]) != null) {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      }
    }

    else {
      while (++i < n) { // Find the first comparable value.
        if ((value = valueof(values[i], i, values)) != null && value >= value) {
          min = max = value;
          while (++i < n) { // Compare the remaining values.
            if ((value = valueof(values[i], i, values)) != null) {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      }
    }

    return [min, max];
  }

  function range(start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

    var i = -1,
        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
        range = new Array(n);

    while (++i < n) {
      range[i] = start + i * step;
    }

    return range;
  }

  var e10 = Math.sqrt(50),
      e5 = Math.sqrt(10),
      e2 = Math.sqrt(2);

  function ticks(start, stop, count) {
    var reverse,
        i = -1,
        n,
        ticks,
        step;

    stop = +stop, start = +start, count = +count;
    if (start === stop && count > 0) return [start];
    if (reverse = stop < start) n = start, start = stop, stop = n;
    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

    if (step > 0) {
      start = Math.ceil(start / step);
      stop = Math.floor(stop / step);
      ticks = new Array(n = Math.ceil(stop - start + 1));
      while (++i < n) ticks[i] = (start + i) * step;
    } else {
      start = Math.floor(start * step);
      stop = Math.ceil(stop * step);
      ticks = new Array(n = Math.ceil(start - stop + 1));
      while (++i < n) ticks[i] = (start - i) / step;
    }

    if (reverse) ticks.reverse();

    return ticks;
  }

  function tickIncrement(start, stop, count) {
    var step = (stop - start) / Math.max(0, count),
        power = Math.floor(Math.log(step) / Math.LN10),
        error = step / Math.pow(10, power);
    return power >= 0
        ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
        : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
  }

  function tickStep(start, stop, count) {
    var step0 = Math.abs(stop - start) / Math.max(0, count),
        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
        error = step0 / step1;
    if (error >= e10) step1 *= 10;
    else if (error >= e5) step1 *= 5;
    else if (error >= e2) step1 *= 2;
    return stop < start ? -step1 : step1;
  }

  function threshold(values, p, valueof) {
    if (valueof == null) valueof = number;
    if (!(n = values.length)) return;
    if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
    if (p >= 1) return +valueof(values[n - 1], n - 1, values);
    var n,
        i = (n - 1) * p,
        i0 = Math.floor(i),
        value0 = +valueof(values[i0], i0, values),
        value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i - i0);
  }

  function max(values, valueof) {
    var n = values.length,
        i = -1,
        value,
        max;

    if (valueof == null) {
      while (++i < n) { // Find the first comparable value.
        if ((value = values[i]) != null && value >= value) {
          max = value;
          while (++i < n) { // Compare the remaining values.
            if ((value = values[i]) != null && value > max) {
              max = value;
            }
          }
        }
      }
    }

    else {
      while (++i < n) { // Find the first comparable value.
        if ((value = valueof(values[i], i, values)) != null && value >= value) {
          max = value;
          while (++i < n) { // Compare the remaining values.
            if ((value = valueof(values[i], i, values)) != null && value > max) {
              max = value;
            }
          }
        }
      }
    }

    return max;
  }

  function mean(values, valueof) {
    var n = values.length,
        m = n,
        i = -1,
        value,
        sum = 0;

    if (valueof == null) {
      while (++i < n) {
        if (!isNaN(value = number(values[i]))) sum += value;
        else --m;
      }
    }

    else {
      while (++i < n) {
        if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
        else --m;
      }
    }

    if (m) return sum / m;
  }

  function median(values, valueof) {
    var n = values.length,
        i = -1,
        value,
        numbers = [];

    if (valueof == null) {
      while (++i < n) {
        if (!isNaN(value = number(values[i]))) {
          numbers.push(value);
        }
      }
    }

    else {
      while (++i < n) {
        if (!isNaN(value = number(valueof(values[i], i, values)))) {
          numbers.push(value);
        }
      }
    }

    return threshold(numbers.sort(ascending$1), 0.5);
  }

  function merge(arrays) {
    var n = arrays.length,
        m,
        i = -1,
        j = 0,
        merged,
        array;

    while (++i < n) j += arrays[i].length;
    merged = new Array(j);

    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }

    return merged;
  }

  function min(values, valueof) {
    var n = values.length,
        i = -1,
        value,
        min;

    if (valueof == null) {
      while (++i < n) { // Find the first comparable value.
        if ((value = values[i]) != null && value >= value) {
          min = value;
          while (++i < n) { // Compare the remaining values.
            if ((value = values[i]) != null && min > value) {
              min = value;
            }
          }
        }
      }
    }

    else {
      while (++i < n) { // Find the first comparable value.
        if ((value = valueof(values[i], i, values)) != null && value >= value) {
          min = value;
          while (++i < n) { // Compare the remaining values.
            if ((value = valueof(values[i], i, values)) != null && min > value) {
              min = value;
            }
          }
        }
      }
    }

    return min;
  }

  var prefix = "$";

  function Map() {}

  Map.prototype = map.prototype = {
    constructor: Map,
    has: function(key) {
      return (prefix + key) in this;
    },
    get: function(key) {
      return this[prefix + key];
    },
    set: function(key, value) {
      this[prefix + key] = value;
      return this;
    },
    remove: function(key) {
      var property = prefix + key;
      return property in this && delete this[property];
    },
    clear: function() {
      for (var property in this) if (property[0] === prefix) delete this[property];
    },
    keys: function() {
      var keys = [];
      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
      return keys;
    },
    values: function() {
      var values = [];
      for (var property in this) if (property[0] === prefix) values.push(this[property]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
      return entries;
    },
    size: function() {
      var size = 0;
      for (var property in this) if (property[0] === prefix) ++size;
      return size;
    },
    empty: function() {
      for (var property in this) if (property[0] === prefix) return false;
      return true;
    },
    each: function(f) {
      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
    }
  };

  function map(object, f) {
    var map = new Map;

    // Copy constructor.
    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

    // Index array by numeric index or specified key function.
    else if (Array.isArray(object)) {
      var i = -1,
          n = object.length,
          o;

      if (f == null) while (++i < n) map.set(i, object[i]);
      else while (++i < n) map.set(f(o = object[i], i, object), o);
    }

    // Convert object to map.
    else if (object) for (var key in object) map.set(key, object[key]);

    return map;
  }

  function nest() {
    var keys = [],
        sortKeys = [],
        sortValues,
        rollup,
        nest;

    function apply(array, depth, createResult, setResult) {
      if (depth >= keys.length) {
        if (sortValues != null) array.sort(sortValues);
        return rollup != null ? rollup(array) : array;
      }

      var i = -1,
          n = array.length,
          key = keys[depth++],
          keyValue,
          value,
          valuesByKey = map(),
          values,
          result = createResult();

      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
          values.push(value);
        } else {
          valuesByKey.set(keyValue, [value]);
        }
      }

      valuesByKey.each(function(values, key) {
        setResult(result, key, apply(values, depth, createResult, setResult));
      });

      return result;
    }

    function entries(map, depth) {
      if (++depth > keys.length) return map;
      var array, sortKey = sortKeys[depth - 1];
      if (rollup != null && depth >= keys.length) array = map.entries();
      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
    }

    return nest = {
      object: function(array) { return apply(array, 0, createObject, setObject); },
      map: function(array) { return apply(array, 0, createMap, setMap); },
      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
      key: function(d) { keys.push(d); return nest; },
      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
      sortValues: function(order) { sortValues = order; return nest; },
      rollup: function(f) { rollup = f; return nest; }
    };
  }

  function createObject() {
    return {};
  }

  function setObject(object, key, value) {
    object[key] = value;
  }

  function createMap() {
    return map();
  }

  function setMap(map, key, value) {
    map.set(key, value);
  }

  function Set() {}

  var proto = map.prototype;

  Set.prototype = set$2.prototype = {
    constructor: Set,
    has: proto.has,
    add: function(value) {
      value += "";
      this[prefix + value] = value;
      return this;
    },
    remove: proto.remove,
    clear: proto.clear,
    values: proto.keys,
    size: proto.size,
    empty: proto.empty,
    each: proto.each
  };

  function set$2(object, f) {
    var set = new Set;

    // Copy constructor.
    if (object instanceof Set) object.each(function(value) { set.add(value); });

    // Otherwise, assume it’s an array.
    else if (object) {
      var i = -1, n = object.length;
      if (f == null) while (++i < n) set.add(object[i]);
      else while (++i < n) set.add(f(object[i], i, object));
    }

    return set;
  }

  function t(t,e,s){if(t&&t.length){const[n,o]=e,a=Math.PI/180*s,r=Math.cos(a),h=Math.sin(a);t.forEach(t=>{const[e,s]=t;t[0]=(e-n)*r-(s-o)*h+n,t[1]=(e-n)*h+(s-o)*r+o;});}}function e(t){const e=t[0],s=t[1];return Math.sqrt(Math.pow(e[0]-s[0],2)+Math.pow(e[1]-s[1],2))}function s(t,e,s,n){const o=e[1]-t[1],a=t[0]-e[0],r=o*t[0]+a*t[1],h=n[1]-s[1],i=s[0]-n[0],c=h*s[0]+i*s[1],l=o*i-h*a;return l?[(i*r-a*c)/l,(o*c-h*r)/l]:null}function n(t,e,s){const n=t.length;if(n<3)return !1;const h=[Number.MAX_SAFE_INTEGER,s],i=[e,s];let c=0;for(let e=0;e<n;e++){const s=t[e],l=t[(e+1)%n];if(r(s,l,i,h)){if(0===a(s,i,l))return o(s,i,l);c++;}}return c%2==1}function o(t,e,s){return e[0]<=Math.max(t[0],s[0])&&e[0]>=Math.min(t[0],s[0])&&e[1]<=Math.max(t[1],s[1])&&e[1]>=Math.min(t[1],s[1])}function a(t,e,s){const n=(e[1]-t[1])*(s[0]-e[0])-(e[0]-t[0])*(s[1]-e[1]);return 0===n?0:n>0?1:2}function r(t,e,s,n){const r=a(t,e,s),h=a(t,e,n),i=a(s,n,t),c=a(s,n,e);return r!==h&&i!==c||(!(0!==r||!o(t,s,e))||(!(0!==h||!o(t,n,e))||(!(0!==i||!o(s,t,n))||!(0!==c||!o(s,e,n)))))}function h(e,s){const n=[0,0],o=Math.round(s.hachureAngle+90);o&&t(e,n,o);const a=function(t,e){const s=[...t];s[0].join(",")!==s[s.length-1].join(",")&&s.push([s[0][0],s[0][1]]);const n=[];if(s&&s.length>2){let t=e.hachureGap;t<0&&(t=4*e.strokeWidth),t=Math.max(t,.1);const o=[];for(let t=0;t<s.length-1;t++){const e=s[t],n=s[t+1];if(e[1]!==n[1]){const t=Math.min(e[1],n[1]);o.push({ymin:t,ymax:Math.max(e[1],n[1]),x:t===e[1]?e[0]:n[0],islope:(n[0]-e[0])/(n[1]-e[1])});}}if(o.sort((t,e)=>t.ymin<e.ymin?-1:t.ymin>e.ymin?1:t.x<e.x?-1:t.x>e.x?1:t.ymax===e.ymax?0:(t.ymax-e.ymax)/Math.abs(t.ymax-e.ymax)),!o.length)return n;let a=[],r=o[0].ymin;for(;a.length||o.length;){if(o.length){let t=-1;for(let e=0;e<o.length&&!(o[e].ymin>r);e++)t=e;o.splice(0,t+1).forEach(t=>{a.push({s:r,edge:t});});}if(a=a.filter(t=>!(t.edge.ymax<=r)),a.sort((t,e)=>t.edge.x===e.edge.x?0:(t.edge.x-e.edge.x)/Math.abs(t.edge.x-e.edge.x)),a.length>1)for(let t=0;t<a.length;t+=2){const e=t+1;if(e>=a.length)break;const s=a[t].edge,o=a[e].edge;n.push([[Math.round(s.x),r],[Math.round(o.x),r]]);}r+=t,a.forEach(e=>{e.edge.x=e.edge.x+t*e.edge.islope;});}}return n}(e,s);return o&&(t(e,n,-o),function(e,s,n){const o=[];e.forEach(t=>o.push(...t)),t(o,s,n);}(a,n,-o)),a}class i{constructor(t){this.helper=t;}fillPolygon(t,e){return this._fillPolygon(t,e)}_fillPolygon(t,e,s=!1){let n=h(t,e);if(s){const e=this.connectingLines(t,n);n=n.concat(e);}return {type:"fillSketch",ops:this.renderLines(n,e)}}renderLines(t,e){const s=[];for(const n of t)s.push(...this.helper.doubleLineOps(n[0][0],n[0][1],n[1][0],n[1][1],e));return s}connectingLines(t,s){const n=[];if(s.length>1)for(let o=1;o<s.length;o++){const a=s[o-1];if(e(a)<3)continue;const r=[s[o][0],a[1]];if(e(r)>3){const e=this.splitOnIntersections(t,r);n.push(...e);}}return n}midPointInPolygon(t,e){return n(t,(e[0][0]+e[1][0])/2,(e[0][1]+e[1][1])/2)}splitOnIntersections(t,o){const a=Math.max(5,.1*e(o)),h=[];for(let n=0;n<t.length;n++){const i=t[n],c=t[(n+1)%t.length];if(r(i,c,...o)){const t=s(i,c,o[0],o[1]);if(t){const s=e([t,o[0]]),n=e([t,o[1]]);s>a&&n>a&&h.push({point:t,distance:s});}}}if(h.length>1){const e=h.sort((t,e)=>t.distance-e.distance).map(t=>t.point);if(n(t,...o[0])||e.shift(),n(t,...o[1])||e.pop(),e.length<=1)return this.midPointInPolygon(t,o)?[o]:[];const s=[o[0],...e,o[1]],a=[];for(let e=0;e<s.length-1;e+=2){const n=[s[e],s[e+1]];this.midPointInPolygon(t,n)&&a.push(n);}return a}return this.midPointInPolygon(t,o)?[o]:[]}}class c extends i{fillPolygon(t,e){return this._fillPolygon(t,e,!0)}}class l extends i{fillPolygon(t,e){const s=this._fillPolygon(t,e),n=Object.assign({},e,{hachureAngle:e.hachureAngle+90}),o=this._fillPolygon(t,n);return s.ops=s.ops.concat(o.ops),s}}class u{constructor(t){this.helper=t;}fillPolygon(t,e){const s=h(t,e=Object.assign({},e,{curveStepCount:4,hachureAngle:0,roughness:1}));return this.dotsOnLines(s,e)}dotsOnLines(t,s){const n=[];let o=s.hachureGap;o<0&&(o=4*s.strokeWidth),o=Math.max(o,.1);let a=s.fillWeight;a<0&&(a=s.strokeWidth/2);const r=o/4;for(const h of t){const t=e(h),i=t/o,c=Math.ceil(i)-1,l=t-c*o,u=(h[0][0]+h[1][0])/2-o/4,f=Math.min(h[0][1],h[1][1]);for(let t=0;t<c;t++){const e=f+l+t*o,h=this.helper.randOffsetWithRange(u-r,u+r,s),i=this.helper.randOffsetWithRange(e-r,e+r,s),c=this.helper.ellipse(h,i,a,a,s);n.push(...c.ops);}}return {type:"fillSketch",ops:n}}}class f{constructor(t){this.helper=t;}fillPolygon(t,e){const s=h(t,e);return {type:"fillSketch",ops:this.dashedLine(s,e)}}dashedLine(t,s){const n=s.dashOffset<0?s.hachureGap<0?4*s.strokeWidth:s.hachureGap:s.dashOffset,o=s.dashGap<0?s.hachureGap<0?4*s.strokeWidth:s.hachureGap:s.dashGap,a=[];return t.forEach(t=>{const r=e(t),h=Math.floor(r/(n+o)),i=(r+o-h*(n+o))/2;let c=t[0],l=t[1];c[0]>l[0]&&(c=t[1],l=t[0]);const u=Math.atan((l[1]-c[1])/(l[0]-c[0]));for(let t=0;t<h;t++){const e=t*(n+o),r=e+n,h=[c[0]+e*Math.cos(u)+i*Math.cos(u),c[1]+e*Math.sin(u)+i*Math.sin(u)],l=[c[0]+r*Math.cos(u)+i*Math.cos(u),c[1]+r*Math.sin(u)+i*Math.sin(u)];a.push(...this.helper.doubleLineOps(h[0],h[1],l[0],l[1],s));}}),a}}class p{constructor(t){this.helper=t;}fillPolygon(t,e){const s=e.hachureGap<0?4*e.strokeWidth:e.hachureGap,n=e.zigzagOffset<0?s:e.zigzagOffset,o=h(t,e=Object.assign({},e,{hachureGap:s+n}));return {type:"fillSketch",ops:this.zigzagLines(o,n,e)}}zigzagLines(t,s,n){const o=[];return t.forEach(t=>{const a=e(t),r=Math.round(a/(2*s));let h=t[0],i=t[1];h[0]>i[0]&&(h=t[1],i=t[0]);const c=Math.atan((i[1]-h[1])/(i[0]-h[0]));for(let t=0;t<r;t++){const e=2*t*s,a=2*(t+1)*s,r=Math.sqrt(2*Math.pow(s,2)),i=[h[0]+e*Math.cos(c),h[1]+e*Math.sin(c)],l=[h[0]+a*Math.cos(c),h[1]+a*Math.sin(c)],u=[i[0]+r*Math.cos(c+Math.PI/4),i[1]+r*Math.sin(c+Math.PI/4)];o.push(...this.helper.doubleLineOps(i[0],i[1],u[0],u[1],n),...this.helper.doubleLineOps(u[0],u[1],l[0],l[1],n));}}),o}}const d={};class g{constructor(t){this.seed=t;}next(){return this.seed?(2**31-1&(this.seed=Math.imul(48271,this.seed)))/2**31:Math.random()}}const M={A:7,a:7,C:6,c:6,H:1,h:1,L:2,l:2,M:2,m:2,Q:4,q:4,S:4,s:4,T:2,t:2,V:1,v:1,Z:0,z:0};function k(t,e){return t.type===e}function b(t){const e=[],s=function(t){const e=new Array;for(;""!==t;)if(t.match(/^([ \t\r\n,]+)/))t=t.substr(RegExp.$1.length);else if(t.match(/^([aAcChHlLmMqQsStTvVzZ])/))e[e.length]={type:0,text:RegExp.$1},t=t.substr(RegExp.$1.length);else {if(!t.match(/^(([-+]?[0-9]+(\.[0-9]*)?|[-+]?\.[0-9]+)([eE][-+]?[0-9]+)?)/))return [];e[e.length]={type:1,text:""+parseFloat(RegExp.$1)},t=t.substr(RegExp.$1.length);}return e[e.length]={type:2,text:""},e}(t);let n="BOD",o=0,a=s[o];for(;!k(a,2);){let r=0;const h=[];if("BOD"===n){if("M"!==a.text&&"m"!==a.text)return b("M0,0"+t);o++,r=M[a.text],n=a.text;}else k(a,1)?r=M[n]:(o++,r=M[a.text],n=a.text);if(!(o+r<s.length))throw new Error("Path data ended short");for(let t=o;t<o+r;t++){const e=s[t];if(!k(e,1))throw new Error("Param not a number: "+n+","+e.text);h[h.length]=+e.text;}if("number"!=typeof M[n])throw new Error("Bad segment: "+n);{const t={key:n,data:h};e.push(t),o+=r,a=s[o],"M"===n&&(n="L"),"m"===n&&(n="l");}}return e}function y(t){let e=0,s=0,n=0,o=0;const a=[];for(const{key:r,data:h}of t)switch(r){case"M":a.push({key:"M",data:[...h]}),[e,s]=h,[n,o]=h;break;case"m":e+=h[0],s+=h[1],a.push({key:"M",data:[e,s]}),n=e,o=s;break;case"L":a.push({key:"L",data:[...h]}),[e,s]=h;break;case"l":e+=h[0],s+=h[1],a.push({key:"L",data:[e,s]});break;case"C":a.push({key:"C",data:[...h]}),e=h[4],s=h[5];break;case"c":{const t=h.map((t,n)=>n%2?t+s:t+e);a.push({key:"C",data:t}),e=t[4],s=t[5];break}case"Q":a.push({key:"Q",data:[...h]}),e=h[2],s=h[3];break;case"q":{const t=h.map((t,n)=>n%2?t+s:t+e);a.push({key:"Q",data:t}),e=t[2],s=t[3];break}case"A":a.push({key:"A",data:[...h]}),e=h[5],s=h[6];break;case"a":e+=h[5],s+=h[6],a.push({key:"A",data:[h[0],h[1],h[2],h[3],h[4],e,s]});break;case"H":a.push({key:"H",data:[...h]}),e=h[0];break;case"h":e+=h[0],a.push({key:"H",data:[e]});break;case"V":a.push({key:"V",data:[...h]}),s=h[0];break;case"v":s+=h[0],a.push({key:"V",data:[s]});break;case"S":a.push({key:"S",data:[...h]}),e=h[2],s=h[3];break;case"s":{const t=h.map((t,n)=>n%2?t+s:t+e);a.push({key:"S",data:t}),e=t[2],s=t[3];break}case"T":a.push({key:"T",data:[...h]}),e=h[0],s=h[1];break;case"t":e+=h[0],s+=h[1],a.push({key:"T",data:[e,s]});break;case"Z":case"z":a.push({key:"Z",data:[]}),e=n,s=o;}return a}function m(t){const e=[];let s="",n=0,o=0,a=0,r=0,h=0,i=0;for(const{key:c,data:l}of t){switch(c){case"M":e.push({key:"M",data:[...l]}),[n,o]=l,[a,r]=l;break;case"C":e.push({key:"C",data:[...l]}),n=l[4],o=l[5],h=l[2],i=l[3];break;case"L":e.push({key:"L",data:[...l]}),[n,o]=l;break;case"H":n=l[0],e.push({key:"L",data:[n,o]});break;case"V":o=l[0],e.push({key:"L",data:[n,o]});break;case"S":{let t=0,a=0;"C"===s||"S"===s?(t=n+(n-h),a=o+(o-i)):(t=n,a=o),e.push({key:"C",data:[t,a,...l]}),h=l[0],i=l[1],n=l[2],o=l[3];break}case"T":{const[t,a]=l;let r=0,c=0;"Q"===s||"T"===s?(r=n+(n-h),c=o+(o-i)):(r=n,c=o);const u=n+2*(r-n)/3,f=o+2*(c-o)/3,p=t+2*(r-t)/3,d=a+2*(c-a)/3;e.push({key:"C",data:[u,f,p,d,t,a]}),h=r,i=c,n=t,o=a;break}case"Q":{const[t,s,a,r]=l,c=n+2*(t-n)/3,u=o+2*(s-o)/3,f=a+2*(t-a)/3,p=r+2*(s-r)/3;e.push({key:"C",data:[c,u,f,p,a,r]}),h=t,i=s,n=a,o=r;break}case"A":{const t=Math.abs(l[0]),s=Math.abs(l[1]),a=l[2],r=l[3],h=l[4],i=l[5],c=l[6];if(0===t||0===s)e.push({key:"C",data:[n,o,i,c,i,c]}),n=i,o=c;else if(n!==i||o!==c){P(n,o,i,c,t,s,a,r,h).forEach((function(t){e.push({key:"C",data:t});})),n=i,o=c;}break}case"Z":e.push({key:"Z",data:[]}),n=a,o=r;}s=c;}return e}function w(t,e,s){return [t*Math.cos(s)-e*Math.sin(s),t*Math.sin(s)+e*Math.cos(s)]}function P(t,e,s,n,o,a,r,h,i,c){const l=(u=r,Math.PI*u/180);var u;let f=[],p=0,d=0,g=0,M=0;if(c)[p,d,g,M]=c;else {[t,e]=w(t,e,-l),[s,n]=w(s,n,-l);const r=(t-s)/2,c=(e-n)/2;let u=r*r/(o*o)+c*c/(a*a);u>1&&(u=Math.sqrt(u),o*=u,a*=u);const f=o*o,k=a*a,b=f*k-f*c*c-k*r*r,y=f*c*c+k*r*r,m=(h===i?-1:1)*Math.sqrt(Math.abs(b/y));g=m*o*c/a+(t+s)/2,M=m*-a*r/o+(e+n)/2,p=Math.asin(parseFloat(((e-M)/a).toFixed(9))),d=Math.asin(parseFloat(((n-M)/a).toFixed(9))),t<g&&(p=Math.PI-p),s<g&&(d=Math.PI-d),p<0&&(p=2*Math.PI+p),d<0&&(d=2*Math.PI+d),i&&p>d&&(p-=2*Math.PI),!i&&d>p&&(d-=2*Math.PI);}let k=d-p;if(Math.abs(k)>120*Math.PI/180){const t=d,e=s,h=n;d=i&&d>p?p+120*Math.PI/180*1:p+120*Math.PI/180*-1,f=P(s=g+o*Math.cos(d),n=M+a*Math.sin(d),e,h,o,a,r,0,i,[d,t,g,M]);}k=d-p;const b=Math.cos(p),y=Math.sin(p),m=Math.cos(d),x=Math.sin(d),v=Math.tan(k/4),O=4/3*o*v,S=4/3*a*v,L=[t,e],T=[t+O*y,e-S*b],I=[s+O*x,n-S*m],A=[s,n];if(T[0]=2*L[0]-T[0],T[1]=2*L[1]-T[1],c)return [T,I,A].concat(f);{f=[T,I,A].concat(f);const t=[];for(let e=0;e<f.length;e+=3){const s=w(f[e][0],f[e][1],l),n=w(f[e+1][0],f[e+1][1],l),o=w(f[e+2][0],f[e+2][1],l);t.push([s[0],s[1],n[0],n[1],o[0],o[1]]);}return t}}const x={randOffset:function(t,e){return W(t,e)},randOffsetWithRange:function(t,e,s){return E(t,e,s)},ellipse:function(t,e,s,n,o){const a=T(s,n,o);return I(t,e,o,a).opset},doubleLineOps:function(t,e,s,n,o){return z(t,e,s,n,o,!0)}};function v(t,e,s,n,o){return {type:"path",ops:z(t,e,s,n,o)}}function O(t,e,s){const n=(t||[]).length;if(n>2){const o=[];for(let e=0;e<n-1;e++)o.push(...z(t[e][0],t[e][1],t[e+1][0],t[e+1][1],s));return e&&o.push(...z(t[n-1][0],t[n-1][1],t[0][0],t[0][1],s)),{type:"path",ops:o}}return 2===n?v(t[0][0],t[0][1],t[1][0],t[1][1],s):{type:"path",ops:[]}}function S(t,e,s,n,o){return function(t,e){return O(t,!0,e)}([[t,e],[t+s,e],[t+s,e+n],[t,e+n]],o)}function L(t,e){let s=$(t,1*(1+.2*e.roughness),e);if(!e.disableMultiStroke){const n=$(t,1.5*(1+.22*e.roughness),function(t){const e=Object.assign({},t);e.randomizer=void 0,t.seed&&(e.seed=t.seed+1);return e}(e));s=s.concat(n);}return {type:"path",ops:s}}function T(t,e,s){const n=Math.sqrt(2*Math.PI*Math.sqrt((Math.pow(t/2,2)+Math.pow(e/2,2))/2)),o=Math.max(s.curveStepCount,s.curveStepCount/Math.sqrt(200)*n),a=2*Math.PI/o;let r=Math.abs(t/2),h=Math.abs(e/2);const i=1-s.curveFitting;return r+=W(r*i,s),h+=W(h*i,s),{increment:a,rx:r,ry:h}}function I(t,e,s,n){const[o,a]=q(n.increment,t,e,n.rx,n.ry,1,n.increment*E(.1,E(.4,1,s),s),s);let r=G(o,null,s);if(!s.disableMultiStroke){const[o]=q(n.increment,t,e,n.rx,n.ry,1.5,0,s),a=G(o,null,s);r=r.concat(a);}return {estimatedPoints:a,opset:{type:"path",ops:r}}}function A(t,e,s,n,o,a,r,h,i){const c=t,l=e;let u=Math.abs(s/2),f=Math.abs(n/2);u+=W(.01*u,i),f+=W(.01*f,i);let p=o,d=a;for(;p<0;)p+=2*Math.PI,d+=2*Math.PI;d-p>2*Math.PI&&(p=0,d=2*Math.PI);const g=2*Math.PI/i.curveStepCount,M=Math.min(g/2,(d-p)/2),k=F(M,c,l,u,f,p,d,1,i);if(!i.disableMultiStroke){const t=F(M,c,l,u,f,p,d,1.5,i);k.push(...t);}return r&&(h?k.push(...z(c,l,c+u*Math.cos(p),l+f*Math.sin(p),i),...z(c,l,c+u*Math.cos(d),l+f*Math.sin(d),i)):k.push({op:"lineTo",data:[c,l]},{op:"lineTo",data:[c+u*Math.cos(p),l+f*Math.sin(p)]})),{type:"path",ops:k}}function _(t,e){const s=[];if(t.length){const n=e.maxRandomnessOffset||0,o=t.length;if(o>2){s.push({op:"move",data:[t[0][0]+W(n,e),t[0][1]+W(n,e)]});for(let a=1;a<o;a++)s.push({op:"lineTo",data:[t[a][0]+W(n,e),t[a][1]+W(n,e)]});}}return {type:"fillPath",ops:s}}function C(t,e){return function(t,e){let s=t.fillStyle||"hachure";if(!d[s])switch(s){case"zigzag":d[s]||(d[s]=new c(e));break;case"cross-hatch":d[s]||(d[s]=new l(e));break;case"dots":d[s]||(d[s]=new u(e));break;case"dashed":d[s]||(d[s]=new f(e));break;case"zigzag-line":d[s]||(d[s]=new p(e));break;case"hachure":default:s="hachure",d[s]||(d[s]=new i(e));}return d[s]}(e,x).fillPolygon(t,e)}function D(t){return t.randomizer||(t.randomizer=new g(t.seed||0)),t.randomizer.next()}function E(t,e,s,n=1){return s.roughness*n*(D(s)*(e-t)+t)}function W(t,e,s=1){return E(-t,t,e,s)}function z(t,e,s,n,o,a=!1){const r=a?o.disableMultiStrokeFill:o.disableMultiStroke,h=R(t,e,s,n,o,!0,!1);if(r)return h;const i=R(t,e,s,n,o,!0,!0);return h.concat(i)}function R(t,e,s,n,o,a,r){const h=Math.pow(t-s,2)+Math.pow(e-n,2),i=Math.sqrt(h);let c=1;c=i<200?1:i>500?.4:-.0016668*i+1.233334;let l=o.maxRandomnessOffset||0;l*l*100>h&&(l=i/10);const u=l/2,f=.2+.2*D(o);let p=o.bowing*o.maxRandomnessOffset*(n-e)/200,d=o.bowing*o.maxRandomnessOffset*(t-s)/200;p=W(p,o,c),d=W(d,o,c);const g=[],M=()=>W(u,o,c),k=()=>W(l,o,c);return a&&(r?g.push({op:"move",data:[t+M(),e+M()]}):g.push({op:"move",data:[t+W(l,o,c),e+W(l,o,c)]})),r?g.push({op:"bcurveTo",data:[p+t+(s-t)*f+M(),d+e+(n-e)*f+M(),p+t+2*(s-t)*f+M(),d+e+2*(n-e)*f+M(),s+M(),n+M()]}):g.push({op:"bcurveTo",data:[p+t+(s-t)*f+k(),d+e+(n-e)*f+k(),p+t+2*(s-t)*f+k(),d+e+2*(n-e)*f+k(),s+k(),n+k()]}),g}function $(t,e,s){const n=[];n.push([t[0][0]+W(e,s),t[0][1]+W(e,s)]),n.push([t[0][0]+W(e,s),t[0][1]+W(e,s)]);for(let o=1;o<t.length;o++)n.push([t[o][0]+W(e,s),t[o][1]+W(e,s)]),o===t.length-1&&n.push([t[o][0]+W(e,s),t[o][1]+W(e,s)]);return G(n,null,s)}function G(t,e,s){const n=t.length,o=[];if(n>3){const a=[],r=1-s.curveTightness;o.push({op:"move",data:[t[1][0],t[1][1]]});for(let e=1;e+2<n;e++){const s=t[e];a[0]=[s[0],s[1]],a[1]=[s[0]+(r*t[e+1][0]-r*t[e-1][0])/6,s[1]+(r*t[e+1][1]-r*t[e-1][1])/6],a[2]=[t[e+1][0]+(r*t[e][0]-r*t[e+2][0])/6,t[e+1][1]+(r*t[e][1]-r*t[e+2][1])/6],a[3]=[t[e+1][0],t[e+1][1]],o.push({op:"bcurveTo",data:[a[1][0],a[1][1],a[2][0],a[2][1],a[3][0],a[3][1]]});}if(e&&2===e.length){const t=s.maxRandomnessOffset;o.push({op:"lineTo",data:[e[0]+W(t,s),e[1]+W(t,s)]});}}else 3===n?(o.push({op:"move",data:[t[1][0],t[1][1]]}),o.push({op:"bcurveTo",data:[t[1][0],t[1][1],t[2][0],t[2][1],t[2][0],t[2][1]]})):2===n&&o.push(...z(t[0][0],t[0][1],t[1][0],t[1][1],s));return o}function q(t,e,s,n,o,a,r,h){const i=[],c=[],l=W(.5,h)-Math.PI/2;c.push([W(a,h)+e+.9*n*Math.cos(l-t),W(a,h)+s+.9*o*Math.sin(l-t)]);for(let r=l;r<2*Math.PI+l-.01;r+=t){const t=[W(a,h)+e+n*Math.cos(r),W(a,h)+s+o*Math.sin(r)];i.push(t),c.push(t);}return c.push([W(a,h)+e+n*Math.cos(l+2*Math.PI+.5*r),W(a,h)+s+o*Math.sin(l+2*Math.PI+.5*r)]),c.push([W(a,h)+e+.98*n*Math.cos(l+r),W(a,h)+s+.98*o*Math.sin(l+r)]),c.push([W(a,h)+e+.9*n*Math.cos(l+.5*r),W(a,h)+s+.9*o*Math.sin(l+.5*r)]),[c,i]}function F(t,e,s,n,o,a,r,h,i){const c=a+W(.1,i),l=[];l.push([W(h,i)+e+.9*n*Math.cos(c-t),W(h,i)+s+.9*o*Math.sin(c-t)]);for(let a=c;a<=r;a+=t)l.push([W(h,i)+e+n*Math.cos(a),W(h,i)+s+o*Math.sin(a)]);return l.push([e+n*Math.cos(r),s+o*Math.sin(r)]),l.push([e+n*Math.cos(r),s+o*Math.sin(r)]),G(l,null,i)}function j(t,e,s,n,o,a,r,h){const i=[],c=[h.maxRandomnessOffset||1,(h.maxRandomnessOffset||1)+.3];let l=[0,0];const u=h.disableMultiStroke?1:2;for(let f=0;f<u;f++)0===f?i.push({op:"move",data:[r[0],r[1]]}):i.push({op:"move",data:[r[0]+W(c[0],h),r[1]+W(c[0],h)]}),l=[o+W(c[f],h),a+W(c[f],h)],i.push({op:"bcurveTo",data:[t+W(c[f],h),e+W(c[f],h),s+W(c[f],h),n+W(c[f],h),l[0],l[1]]});return i}function N(t){return [...t]}function Z(t,e){return Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)}function Q(t,e,s){const n=Z(e,s);if(0===n)return Z(t,e);let o=((t[0]-e[0])*(s[0]-e[0])+(t[1]-e[1])*(s[1]-e[1]))/n;return o=Math.max(0,Math.min(1,o)),Z(t,H(e,s,o))}function H(t,e,s){return [t[0]+(e[0]-t[0])*s,t[1]+(e[1]-t[1])*s]}function V(t,e,s,n){const o=n||[];if(function(t,e){const s=t[e+0],n=t[e+1],o=t[e+2],a=t[e+3];let r=3*n[0]-2*s[0]-a[0];r*=r;let h=3*n[1]-2*s[1]-a[1];h*=h;let i=3*o[0]-2*a[0]-s[0];i*=i;let c=3*o[1]-2*a[1]-s[1];return c*=c,r<i&&(r=i),h<c&&(h=c),r+h}(t,e)<s){const s=t[e+0];if(o.length){(a=o[o.length-1],r=s,Math.sqrt(Z(a,r)))>1&&o.push(s);}else o.push(s);o.push(t[e+3]);}else {const n=.5,a=t[e+0],r=t[e+1],h=t[e+2],i=t[e+3],c=H(a,r,n),l=H(r,h,n),u=H(h,i,n),f=H(c,l,n),p=H(l,u,n),d=H(f,p,n);V([a,c,f,d],0,s,o),V([d,p,u,i],0,s,o);}var a,r;return o}function B(t,e){return X(t,0,t.length,e)}function X(t,e,s,n,o){const a=o||[],r=t[e],h=t[s-1];let i=0,c=1;for(let n=e+1;n<s-1;++n){const e=Q(t[n],r,h);e>i&&(i=e,c=n);}return Math.sqrt(i)>n?(X(t,e,c+1,n,a),X(t,c,s,n,a)):(a.length||a.push(r),a.push(h)),a}function J(t,e=.15,s){const n=[],o=(t.length-1)/3;for(let s=0;s<o;s++){V(t,3*s,e,n);}return s&&s>0?X(n,0,n.length,s):n}const K="none";class U{constructor(t){this.defaultOptions={maxRandomnessOffset:2,roughness:1,bowing:1,stroke:"#000",strokeWidth:1,curveTightness:0,curveFitting:.95,curveStepCount:9,fillStyle:"hachure",fillWeight:-1,hachureAngle:-41,hachureGap:-1,dashOffset:-1,dashGap:-1,zigzagOffset:-1,seed:0,combineNestedSvgPaths:!1,disableMultiStroke:!1,disableMultiStrokeFill:!1},this.config=t||{},this.config.options&&(this.defaultOptions=this._o(this.config.options));}static newSeed(){return Math.floor(Math.random()*2**31)}_o(t){return t?Object.assign({},this.defaultOptions,t):this.defaultOptions}_d(t,e,s){return {shape:t,sets:e||[],options:s||this.defaultOptions}}line(t,e,s,n,o){const a=this._o(o);return this._d("line",[v(t,e,s,n,a)],a)}rectangle(t,e,s,n,o){const a=this._o(o),r=[],h=S(t,e,s,n,a);if(a.fill){const o=[[t,e],[t+s,e],[t+s,e+n],[t,e+n]];"solid"===a.fillStyle?r.push(_(o,a)):r.push(C(o,a));}return a.stroke!==K&&r.push(h),this._d("rectangle",r,a)}ellipse(t,e,s,n,o){const a=this._o(o),r=[],h=T(s,n,a),i=I(t,e,a,h);if(a.fill)if("solid"===a.fillStyle){const s=I(t,e,a,h).opset;s.type="fillPath",r.push(s);}else r.push(C(i.estimatedPoints,a));return a.stroke!==K&&r.push(i.opset),this._d("ellipse",r,a)}circle(t,e,s,n){const o=this.ellipse(t,e,s,s,n);return o.shape="circle",o}linearPath(t,e){const s=this._o(e);return this._d("linearPath",[O(t,!1,s)],s)}arc(t,e,s,n,o,a,r=!1,h){const i=this._o(h),c=[],l=A(t,e,s,n,o,a,r,!0,i);if(r&&i.fill)if("solid"===i.fillStyle){const r=A(t,e,s,n,o,a,!0,!1,i);r.type="fillPath",c.push(r);}else c.push(function(t,e,s,n,o,a,r){const h=t,i=e;let c=Math.abs(s/2),l=Math.abs(n/2);c+=W(.01*c,r),l+=W(.01*l,r);let u=o,f=a;for(;u<0;)u+=2*Math.PI,f+=2*Math.PI;f-u>2*Math.PI&&(u=0,f=2*Math.PI);const p=(f-u)/r.curveStepCount,d=[];for(let t=u;t<=f;t+=p)d.push([h+c*Math.cos(t),i+l*Math.sin(t)]);return d.push([h+c*Math.cos(f),i+l*Math.sin(f)]),d.push([h,i]),C(d,r)}(t,e,s,n,o,a,i));return i.stroke!==K&&c.push(l),this._d("arc",c,i)}curve(t,e){const s=this._o(e),n=[],o=L(t,s);if(s.fill&&s.fill!==K&&t.length>=3){const e=J(function(t,e=0){const s=t.length;if(s<3)throw new Error("A curve must have at least three points.");const n=[];if(3===s)n.push(N(t[0]),N(t[1]),N(t[2]),N(t[2]));else {const s=[];s.push(t[0],t[0]);for(let e=1;e<t.length;e++)s.push(t[e]),e===t.length-1&&s.push(t[e]);const o=[],a=1-e;n.push(N(s[0]));for(let t=1;t+2<s.length;t++){const e=s[t];o[0]=[e[0],e[1]],o[1]=[e[0]+(a*s[t+1][0]-a*s[t-1][0])/6,e[1]+(a*s[t+1][1]-a*s[t-1][1])/6],o[2]=[s[t+1][0]+(a*s[t][0]-a*s[t+2][0])/6,s[t+1][1]+(a*s[t][1]-a*s[t+2][1])/6],o[3]=[s[t+1][0],s[t+1][1]],n.push(o[1],o[2],o[3]);}}return n}(t),10,(1+s.roughness)/2);"solid"===s.fillStyle?n.push(_(e,s)):n.push(C(e,s));}return s.stroke!==K&&n.push(o),this._d("curve",n,s)}polygon(t,e){const s=this._o(e),n=[],o=O(t,!0,s);return s.fill&&("solid"===s.fillStyle?n.push(_(t,s)):n.push(C(t,s))),s.stroke!==K&&n.push(o),this._d("polygon",n,s)}path(t,e){const s=this._o(e),n=[];if(!t)return this._d("path",n,s);t=(t||"").replace(/\n/g," ").replace(/(-\s)/g,"-").replace("/(ss)/g"," ");const o=s.fill&&"transparent"!==s.fill&&s.fill!==K,a=s.stroke!==K,r=!!(s.simplification&&s.simplification<1),h=function(t,e,s){const n=m(y(b(t))),o=[];let a=[],r=[0,0],h=[];const i=()=>{h.length>=4&&a.push(...J(h,e)),h=[];},c=()=>{i(),a.length&&(o.push(a),a=[]);};for(const{key:t,data:e}of n)switch(t){case"M":c(),r=[e[0],e[1]],a.push(r);break;case"L":i(),a.push([e[0],e[1]]);break;case"C":if(!h.length){const t=a.length?a[a.length-1]:r;h.push([t[0],t[1]]);}h.push([e[0],e[1]]),h.push([e[2],e[3]]),h.push([e[4],e[5]]);break;case"Z":i(),a.push([r[0],r[1]]);}if(c(),!s)return o;const l=[];for(const t of o){const e=B(t,s);e.length&&l.push(e);}return l}(t,1,r?4-4*s.simplification:(1+s.roughness)/2);if(o)if(s.combineNestedSvgPaths){const t=[];h.forEach(e=>t.push(...e)),"solid"===s.fillStyle?n.push(_(t,s)):n.push(C(t,s));}else h.forEach(t=>{"solid"===s.fillStyle?n.push(_(t,s)):n.push(C(t,s));});return a&&(r?h.forEach(t=>{n.push(O(t,!1,s));}):n.push(function(t,e){const s=m(y(b(t))),n=[];let o=[0,0],a=[0,0];for(const{key:t,data:r}of s)switch(t){case"M":{const t=1*(e.maxRandomnessOffset||0);n.push({op:"move",data:r.map(s=>s+W(t,e))}),a=[r[0],r[1]],o=[r[0],r[1]];break}case"L":n.push(...z(a[0],a[1],r[0],r[1],e)),a=[r[0],r[1]];break;case"C":{const[t,s,o,h,i,c]=r;n.push(...j(t,s,o,h,i,c,a,e)),a=[i,c];break}case"Z":n.push(...z(a[0],a[1],o[0],o[1],e)),a=[o[0],o[1]];}return {type:"path",ops:n}}(t,s))),this._d("path",n,s)}opsToPath(t){let e="";for(const s of t.ops){const t=s.data;switch(s.op){case"move":e+=`M${t[0]} ${t[1]} `;break;case"bcurveTo":e+=`C${t[0]} ${t[1]}, ${t[2]} ${t[3]}, ${t[4]} ${t[5]} `;break;case"lineTo":e+=`L${t[0]} ${t[1]} `;}}return e.trim()}toPaths(t){const e=t.sets||[],s=t.options||this.defaultOptions,n=[];for(const t of e){let e=null;switch(t.type){case"path":e={d:this.opsToPath(t),stroke:s.stroke,strokeWidth:s.strokeWidth,fill:K};break;case"fillPath":e={d:this.opsToPath(t),stroke:K,strokeWidth:0,fill:s.fill||K};break;case"fillSketch":e=this.fillSketch(t,s);}e&&n.push(e);}return n}fillSketch(t,e){let s=e.fillWeight;return s<0&&(s=e.strokeWidth/2),{d:this.opsToPath(t),stroke:e.fill||K,strokeWidth:s,fill:K}}}class Y{constructor(t,e){this.canvas=t,this.ctx=this.canvas.getContext("2d"),this.gen=new U(e);}draw(t){const e=t.sets||[],s=t.options||this.getDefaultOptions(),n=this.ctx;for(const o of e)switch(o.type){case"path":n.save(),n.strokeStyle="none"===s.stroke?"transparent":s.stroke,n.lineWidth=s.strokeWidth,s.strokeLineDash&&n.setLineDash(s.strokeLineDash),s.strokeLineDashOffset&&(n.lineDashOffset=s.strokeLineDashOffset),this._drawToContext(n,o),n.restore();break;case"fillPath":n.save(),n.fillStyle=s.fill||"";const e="curve"===t.shape||"polygon"===t.shape?"evenodd":"nonzero";this._drawToContext(n,o,e),n.restore();break;case"fillSketch":this.fillSketch(n,o,s);}}fillSketch(t,e,s){let n=s.fillWeight;n<0&&(n=s.strokeWidth/2),t.save(),s.fillLineDash&&t.setLineDash(s.fillLineDash),s.fillLineDashOffset&&(t.lineDashOffset=s.fillLineDashOffset),t.strokeStyle=s.fill||"",t.lineWidth=n,this._drawToContext(t,e),t.restore();}_drawToContext(t,e,s="nonzero"){t.beginPath();for(const s of e.ops){const e=s.data;switch(s.op){case"move":t.moveTo(e[0],e[1]);break;case"bcurveTo":t.bezierCurveTo(e[0],e[1],e[2],e[3],e[4],e[5]);break;case"lineTo":t.lineTo(e[0],e[1]);}}"fillPath"===e.type?t.fill(s):t.stroke();}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}line(t,e,s,n,o){const a=this.gen.line(t,e,s,n,o);return this.draw(a),a}rectangle(t,e,s,n,o){const a=this.gen.rectangle(t,e,s,n,o);return this.draw(a),a}ellipse(t,e,s,n,o){const a=this.gen.ellipse(t,e,s,n,o);return this.draw(a),a}circle(t,e,s,n){const o=this.gen.circle(t,e,s,n);return this.draw(o),o}linearPath(t,e){const s=this.gen.linearPath(t,e);return this.draw(s),s}polygon(t,e){const s=this.gen.polygon(t,e);return this.draw(s),s}arc(t,e,s,n,o,a,r=!1,h){const i=this.gen.arc(t,e,s,n,o,a,r,h);return this.draw(i),i}curve(t,e){const s=this.gen.curve(t,e);return this.draw(s),s}path(t,e){const s=this.gen.path(t,e);return this.draw(s),s}}const tt="http://www.w3.org/2000/svg";class et{constructor(t,e){this.svg=t,this.gen=new U(e);}draw(t){const e=t.sets||[],s=t.options||this.getDefaultOptions(),n=this.svg.ownerDocument||window.document,o=n.createElementNS(tt,"g");for(const a of e){let e=null;switch(a.type){case"path":e=n.createElementNS(tt,"path"),e.setAttribute("d",this.opsToPath(a)),e.setAttribute("stroke",s.stroke),e.setAttribute("stroke-width",s.strokeWidth+""),e.setAttribute("fill","none"),s.strokeLineDash&&e.setAttribute("stroke-dasharray",s.strokeLineDash.join(" ").trim()),s.strokeLineDashOffset&&e.setAttribute("stroke-dashoffset",""+s.strokeLineDashOffset);break;case"fillPath":e=n.createElementNS(tt,"path"),e.setAttribute("d",this.opsToPath(a)),e.setAttribute("stroke","none"),e.setAttribute("stroke-width","0"),e.setAttribute("fill",s.fill||""),"curve"!==t.shape&&"polygon"!==t.shape||e.setAttribute("fill-rule","evenodd");break;case"fillSketch":e=this.fillSketch(n,a,s);}e&&o.appendChild(e);}return o}fillSketch(t,e,s){let n=s.fillWeight;n<0&&(n=s.strokeWidth/2);const o=t.createElementNS(tt,"path");return o.setAttribute("d",this.opsToPath(e)),o.setAttribute("stroke",s.fill||""),o.setAttribute("stroke-width",n+""),o.setAttribute("fill","none"),s.fillLineDash&&o.setAttribute("stroke-dasharray",s.fillLineDash.join(" ").trim()),s.fillLineDashOffset&&o.setAttribute("stroke-dashoffset",""+s.fillLineDashOffset),o}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}opsToPath(t){return this.gen.opsToPath(t)}line(t,e,s,n,o){const a=this.gen.line(t,e,s,n,o);return this.draw(a)}rectangle(t,e,s,n,o){const a=this.gen.rectangle(t,e,s,n,o);return this.draw(a)}ellipse(t,e,s,n,o){const a=this.gen.ellipse(t,e,s,n,o);return this.draw(a)}circle(t,e,s,n){const o=this.gen.circle(t,e,s,n);return this.draw(o)}linearPath(t,e){const s=this.gen.linearPath(t,e);return this.draw(s)}polygon(t,e){const s=this.gen.polygon(t,e);return this.draw(s)}arc(t,e,s,n,o,a,r=!1,h){const i=this.gen.arc(t,e,s,n,o,a,r,h);return this.draw(i)}curve(t,e){const s=this.gen.curve(t,e);return this.draw(s)}path(t,e){const s=this.gen.path(t,e);return this.draw(s)}}var st={canvas:(t,e)=>new Y(t,e),svg:(t,e)=>new et(t,e),generator:t=>new U(t),newSeed:()=>U.newSeed()};

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, basedir, module) {
  	return module = {
  	  path: basedir,
  	  exports: {},
  	  require: function (path, base) {
        return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
      }
  	}, fn(module, module.exports), module.exports;
  }

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
  }

  var lodash_clonedeep = createCommonjsModule(function (module, exports) {
  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array ? array.length : 0;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /** Used for built-in method references. */
  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root['__core-js_shared__'];

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /** Built-in value references. */
  var Buffer = moduleExports ? root.Buffer : undefined,
      Symbol = root.Symbol,
      Uint8Array = root.Uint8Array,
      getPrototype = overArg(Object.getPrototypeOf, Object),
      objectCreate = Object.create,
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      splice = arrayProto.splice;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols,
      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
      nativeKeys = overArg(Object.keys, Object);

  /* Built-in method references that are verified to be native. */
  var DataView = getNative(root, 'DataView'),
      Map = getNative(root, 'Map'),
      Promise = getNative(root, 'Promise'),
      Set = getNative(root, 'Set'),
      WeakMap = getNative(root, 'WeakMap'),
      nativeCreate = getNative(Object, 'create');

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol ? Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    return this;
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
  }

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash,
      'map': new (Map || ListCache),
      'string': new Hash
    };
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    this.__data__ = new ListCache(entries);
  }

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new ListCache;
  }

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    return this.__data__['delete'](key);
  }

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var cache = this.__data__;
    if (cache instanceof ListCache) {
      var pairs = cache.__data__;
      if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        return this;
      }
      cache = this.__data__ = new MapCache(pairs);
    }
    cache.set(key, value);
    return this;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    // Safari 9 makes `arguments.length` enumerable in strict mode.
    var result = (isArray(value) || isArguments(value))
      ? baseTimes(value.length, String)
      : [];

    var length = result.length,
        skipIndexes = !!length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) &&
          !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
        (value === undefined && !(key in object))) {
      object[key] = value;
    }
  }

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @param {boolean} [isFull] Specify a clone including symbols.
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
    var result;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject(value)) {
      return value;
    }
    var isArr = isArray(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
        if (isHostObject(value)) {
          return object ? value : {};
        }
        result = initCloneObject(isFunc ? {} : value);
        if (!isDeep) {
          return copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, baseClone, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack);
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);

    if (!isArr) {
      var props = isFull ? getAllKeys(value) : keys(value);
    }
    arrayEach(props || value, function(subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
    });
    return result;
  }

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} prototype The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  function baseCreate(proto) {
    return isObject(proto) ? objectCreate(proto) : {};
  }

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  /**
   * The base implementation of `getTag`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    return objectToString.call(value);
  }

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var result = new buffer.constructor(buffer.length);
    buffer.copy(result);
    return result;
  }

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  /**
   * Creates a clone of `map`.
   *
   * @private
   * @param {Object} map The map to clone.
   * @param {Function} cloneFunc The function to clone values.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned map.
   */
  function cloneMap(map, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
    return arrayReduce(array, addMapEntry, new map.constructor);
  }

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  /**
   * Creates a clone of `set`.
   *
   * @private
   * @param {Object} set The set to clone.
   * @param {Function} cloneFunc The function to clone values.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned set.
   */
  function cloneSet(set, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
    return arrayReduce(array, addSetEntry, new set.constructor);
  }

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;

      assignValue(object, key, newValue === undefined ? source[key] : newValue);
    }
    return object;
  }

  /**
   * Copies own symbol properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  /**
   * Creates an array of the own enumerable symbol properties of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11,
  // for data views in Edge < 14, and promises in Node.js.
  if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
      (Map && getTag(new Map) != mapTag) ||
      (Promise && getTag(Promise.resolve()) != promiseTag) ||
      (Set && getTag(new Set) != setTag) ||
      (WeakMap && getTag(new WeakMap) != weakMapTag)) {
    getTag = function(value) {
      var result = objectToString.call(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : undefined;

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag;
          case mapCtorString: return mapTag;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag;
          case weakMapCtorString: return weakMapTag;
        }
      }
      return result;
    };
  }

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !isPrototype(object))
      ? baseCreate(getPrototype(object))
      : {};
  }

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {Function} cloneFunc The function to clone values.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, cloneFunc, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);

      case boolTag:
      case dateTag:
        return new Ctor(+object);

      case dataViewTag:
        return cloneDataView(object, isDeep);

      case float32Tag: case float64Tag:
      case int8Tag: case int16Tag: case int32Tag:
      case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
        return cloneTypedArray(object, isDeep);

      case mapTag:
        return cloneMap(object, isDeep, cloneFunc);

      case numberTag:
      case stringTag:
        return new Ctor(object);

      case regexpTag:
        return cloneRegExp(object);

      case setTag:
        return cloneSet(object, isDeep, cloneFunc);

      case symbolTag:
        return cloneSymbol(object);
    }
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length &&
      (typeof value == 'number' || reIsUint.test(value)) &&
      (value > -1 && value % 1 == 0 && value < length);
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    return value === proto;
  }

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to process.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return baseClone(value, true, true);
  }

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  function isArguments(value) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
      (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8-9 which returns 'object' for typed array and other constructors.
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  module.exports = cloneDeep;
  });

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root$1 = freeGlobal || freeSelf || Function('return this')();

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max,
      nativeMin = Math.min;

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now$2 = function() {
    return root$1.Date.now();
  };

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;

      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          result = wait - timeSinceLastCall;

      return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }

    function timerExpired() {
      var time = now$2();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now$2());
    }

    function debounced() {
      var time = now$2(),
          isInvoking = shouldInvoke(time);

      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && objectToString.call(value) == symbolTag);
  }

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  var lodash_debounce = debounce;

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  /*!
   * GSAP 3.4.1
   * https://greensock.com
   *
   * @license Copyright 2008-2020, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */

  /* eslint-disable */
  var _config = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: ""
    }
  },
      _defaults = {
    duration: .5,
    overwrite: false,
    delay: 0
  },
      _bigNum = 1e8,
      _tinyNum = 1 / _bigNum,
      _2PI = Math.PI * 2,
      _HALF_PI = _2PI / 4,
      _gsID = 0,
      _sqrt = Math.sqrt,
      _cos = Math.cos,
      _sin = Math.sin,
      _isString = function _isString(value) {
    return typeof value === "string";
  },
      _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
      _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
      _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
      _isObject = function _isObject(value) {
    return typeof value === "object";
  },
      _isNotFalse = function _isNotFalse(value) {
    return value !== false;
  },
      _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
      _isFuncOrString = function _isFuncOrString(value) {
    return _isFunction(value) || _isString(value);
  },
      _isArray = Array.isArray,
      _strictNumExp = /(?:-?\.?\d|\.)+/gi,
      //only numbers (including negatives and decimals) but NOT relative values.
  _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-\+]*\d*/g,
      //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
  _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
      _complexStringNumExp = /[-+=.]*\d+(?:\.|e-|e)*\d*/gi,
      //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
  _parenthesesExp = /\(([^()]+)\)/i,
      //finds the string between parentheses.
  _relExp = /[+-]=-?[\.\d]+/,
      _delimitedValueExp = /[#\-+.]*\b[a-z\d-=+%.]+/gi,
      _globalTimeline,
      _win,
      _coreInitted,
      _doc,
      _globals = {},
      _installScope = {},
      _coreReady,
      _install = function _install(scope) {
    return (_installScope = _merge(scope, _globals)) && gsap;
  },
      _missingPlugin = function _missingPlugin(property, value) {
    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
  },
      _warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
  },
      _addGlobal = function _addGlobal(name, obj) {
    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
  },
      _emptyFunc = function _emptyFunc() {
    return 0;
  },
      _reservedProps = {},
      _lazyTweens = [],
      _lazyLookup = {},
      _lastRenderedFrame,
      _plugins = {},
      _effects = {},
      _nextGCFrame = 30,
      _harnessPlugins = [],
      _callbackNames = "",
      _harness = function _harness(targets) {
    var target = targets[0],
        harnessPlugin,
        i;

    if (!_isObject(target) && !_isFunction(target)) {
      targets = [targets];
    }

    if (!(harnessPlugin = (target._gsap || {}).harness)) {
      i = _harnessPlugins.length;

      while (i-- && !_harnessPlugins[i].targetTest(target)) {}

      harnessPlugin = _harnessPlugins[i];
    }

    i = targets.length;

    while (i--) {
      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
    }

    return targets;
  },
      _getCache = function _getCache(target) {
    return target._gsap || _harness(toArray(target))[0]._gsap;
  },
      _getProperty = function _getProperty(target, property) {
    var currentValue = target[property];
    return _isFunction(currentValue) ? target[property]() : _isUndefined(currentValue) && target.getAttribute(property) || currentValue;
  },
      _forEachName = function _forEachName(names, func) {
    return (names = names.split(",")).forEach(func) || names;
  },
      //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
  _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
    var l = toFind.length,
        i = 0;

    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}

    return i < l;
  },
      _parseVars = function _parseVars(params, type, parent) {
    //reads the arguments passed to one of the key methods and figures out if the user is defining things with the OLD/legacy syntax where the duration is the 2nd parameter, and then it adjusts things accordingly and spits back the corrected vars object (with the duration added if necessary, as well as runBackwards or startAt or immediateRender). type 0 = to()/staggerTo(), 1 = from()/staggerFrom(), 2 = fromTo()/staggerFromTo()
    var isLegacy = _isNumber(params[1]),
        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
        vars = params[varsIndex],
        irVars;

    if (isLegacy) {
      vars.duration = params[1];
    }

    vars.parent = parent;

    if (type) {
      irVars = vars;

      while (parent && !("immediateRender" in irVars)) {
        // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
        irVars = parent.vars.defaults || {};
        parent = _isNotFalse(parent.vars.inherit) && parent.parent;
      }

      vars.immediateRender = _isNotFalse(irVars.immediateRender);

      if (type < 2) {
        vars.runBackwards = 1;
      } else {
        vars.startAt = params[varsIndex - 1]; // "from" vars
      }
    }

    return vars;
  },
      _lazyRender = function _lazyRender() {
    var l = _lazyTweens.length,
        a = _lazyTweens.slice(0),
        i,
        tween;

    _lazyLookup = {};
    _lazyTweens.length = 0;

    for (i = 0; i < l; i++) {
      tween = a[i];
      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
  },
      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
    _lazyTweens.length && _lazyRender();
    animation.render(time, suppressEvents, force);
    _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
  },
      _numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : value;
  },
      _passThrough = function _passThrough(p) {
    return p;
  },
      _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }

    return obj;
  },
      _setKeyframeDefaults = function _setKeyframeDefaults(obj, defaults) {
    for (var p in defaults) {
      if (!(p in obj) && p !== "duration" && p !== "ease") {
        obj[p] = defaults[p];
      }
    }
  },
      _merge = function _merge(base, toMerge) {
    for (var p in toMerge) {
      base[p] = toMerge[p];
    }

    return base;
  },
      _mergeDeep = function _mergeDeep(base, toMerge) {
    for (var p in toMerge) {
      base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p];
    }

    return base;
  },
      _copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {},
        p;

    for (p in obj) {
      p in excluding || (copy[p] = obj[p]);
    }

    return copy;
  },
      _inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || _globalTimeline,
        func = vars.keyframes ? _setKeyframeDefaults : _setDefaults;

    if (_isNotFalse(vars.inherit)) {
      while (parent) {
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
      }
    }

    return vars;
  },
      _arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length,
        match = i === a2.length;

    while (match && i-- && a1[i] === a2[i]) {}

    return i < 0;
  },
      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }

    if (lastProp === void 0) {
      lastProp = "_last";
    }

    var prev = parent[lastProp],
        t;

    if (sortBy) {
      t = child[sortBy];

      while (prev && prev[sortBy] > t) {
        prev = prev._prev;
      }
    }

    if (prev) {
      child._next = prev._next;
      prev._next = child;
    } else {
      child._next = parent[firstProp];
      parent[firstProp] = child;
    }

    if (child._next) {
      child._next._prev = child;
    } else {
      parent[lastProp] = child;
    }

    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
  },
      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }

    if (lastProp === void 0) {
      lastProp = "_last";
    }

    var prev = child._prev,
        next = child._next;

    if (prev) {
      prev._next = next;
    } else if (parent[firstProp] === child) {
      parent[firstProp] = next;
    }

    if (next) {
      next._prev = prev;
    } else if (parent[lastProp] === child) {
      parent[lastProp] = prev;
    }

    child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
  },
      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
    if (child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren)) {
      child.parent.remove(child);
    }

    child._act = 0;
  },
      _uncache = function _uncache(animation) {
    var a = animation;

    while (a) {
      a._dirty = 1;
      a = a.parent;
    }

    return animation;
  },
      _recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;

    while (parent && parent.parent) {
      //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
      parent._dirty = 1;
      parent.totalDuration();
      parent = parent.parent;
    }

    return animation;
  },
      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
  },
      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
  },
      // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
  _animationCycle = function _animationCycle(tTime, cycleDuration) {
    return (tTime /= cycleDuration) && ~~tTime === tTime ? ~~tTime - 1 : ~~tTime;
  },
      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
  },
      _setEnd = function _setEnd(animation) {
    return animation._end = _round(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
  },
      _alignPlayhead = function _alignPlayhead(animation, totalTime) {
    // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
    var parent = animation._dp;

    if (parent && parent.smoothChildTiming && animation._ts) {
      animation._start = _round(animation._dp._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));

      _setEnd(animation);

      parent._dirty || _uncache(parent); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
    }

    return animation;
  },

  /*
  _totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
  	let cycleDuration = duration + repeatDelay,
  		time = _round(clampedTotalTime % cycleDuration);
  	if (time > duration) {
  		time = duration;
  	}
  	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
  },
  */
  _postAddChecks = function _postAddChecks(timeline, child) {
    var t;

    if (child._time || child._initted && !child._dur) {
      //in case, for example, the _start is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
      t = _parentToChildTotalTime(timeline.rawTime(), child);

      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
        child.render(t, true);
      }
    } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.


    if (_uncache(timeline)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
      //in case any of the ancestors had completed but should now be enabled...
      if (timeline._dur < timeline.duration()) {
        t = timeline;

        while (t._dp) {
          t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

          t = t._dp;
        }
      }

      timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
    }
  },
      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
    child.parent && _removeFromParent(child);
    child._start = _round(position + child._delay);
    child._end = _round(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));

    _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);

    timeline._recent = child;
    skipChecks || _postAddChecks(timeline, child);
    return timeline;
  },
      _scrollTrigger = function _scrollTrigger(animation, trigger) {
    return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
  },
      _attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {
    _initTween(tween, totalTime);

    if (!tween._initted) {
      return 1;
    }

    if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
      _lazyTweens.push(tween);

      tween._lazy = [totalTime, suppressEvents];
      return 1;
    }
  },
      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
    var prevRatio = tween.ratio,
        ratio = totalTime < 0 || !totalTime && prevRatio && !tween._start && tween._zTime > _tinyNum && !tween._dp._lock || tween._ts < 0 || tween._dp._ts < 0 ? 0 : 1,
        // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0. Also, if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0.
    repeatDelay = tween._rDelay,
        tTime = 0,
        pt,
        iteration,
        prevIteration;

    if (repeatDelay && tween._repeat) {
      // in case there's a zero-duration tween that has a repeat with a repeatDelay
      tTime = _clamp(0, tween._tDur, totalTime);
      iteration = _animationCycle(tTime, repeatDelay);
      prevIteration = _animationCycle(tween._tTime, repeatDelay);

      if (iteration !== prevIteration) {
        prevRatio = 1 - ratio;
        tween.vars.repeatRefresh && tween._initted && tween.invalidate();
      }
    }

    if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents)) {
      // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
      return;
    }

    if (ratio !== prevRatio || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
      prevIteration = tween._zTime;
      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

      suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

      tween.ratio = ratio;
      tween._from && (ratio = 1 - ratio);
      tween._time = 0;
      tween._tTime = tTime;
      suppressEvents || _callback(tween, "onStart");
      pt = tween._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }

      tween._startAt && totalTime < 0 && tween._startAt.render(totalTime, true, true);
      tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");

      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
        ratio && _removeFromParent(tween, 1);

        if (!suppressEvents) {
          _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);

          tween._prom && tween._prom();
        }
      }
    } else if (!tween._zTime) {
      tween._zTime = totalTime;
    }
  },
      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
    var child;

    if (time > prevTime) {
      child = animation._first;

      while (child && child._start <= time) {
        if (!child._dur && child.data === "isPause" && child._start > prevTime) {
          return child;
        }

        child = child._next;
      }
    } else {
      child = animation._last;

      while (child && child._start >= time) {
        if (!child._dur && child.data === "isPause" && child._start < prevTime) {
          return child;
        }

        child = child._prev;
      }
    }
  },
      _setDuration = function _setDuration(animation, duration, skipUncache) {
    var repeat = animation._repeat,
        dur = _round(duration) || 0;
    animation._dur = dur;
    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _round(dur * (repeat + 1) + animation._rDelay * repeat);

    if (animation._time > dur) {
      animation._time = dur;
      animation._tTime = Math.min(animation._tTime, animation._tDur);
    }

    !skipUncache && _uncache(animation.parent);
    animation.parent && _setEnd(animation);
    return animation;
  },
      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
  },
      _zeroPosition = {
    _start: 0,
    endTime: _emptyFunc
  },
      _parsePosition = function _parsePosition(animation, position) {
    var labels = animation.labels,
        recent = animation._recent || _zeroPosition,
        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
        //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
    i,
        offset;

    if (_isString(position) && (isNaN(position) || position in labels)) {
      //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
      i = position.charAt(0);

      if (i === "<" || i === ">") {
        return (i === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0);
      }

      i = position.indexOf("=");

      if (i < 0) {
        position in labels || (labels[position] = clippedDuration);
        return labels[position];
      }

      offset = +(position.charAt(i - 1) + position.substr(i + 1));
      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1)) + offset : clippedDuration + offset;
    }

    return position == null ? clippedDuration : +position;
  },
      _conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
  },
      _clamp = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
  },
      getUnit = function getUnit(value) {
    return (value + "").substr((parseFloat(value) + "").length);
  },
      clamp = function clamp(min, max, value) {
    return _conditionalReturn(value, function (v) {
      return _clamp(min, max, v);
    });
  },
      _slice = [].slice,
      _isArrayLike = function _isArrayLike(value, nonEmpty) {
    return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
  },
      _flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) {
      accumulator = [];
    }

    return ar.forEach(function (value) {
      var _accumulator;

      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
    }) || accumulator;
  },
      //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
  toArray = function toArray(value, leaveStrings) {
    return _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call(_doc.querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
  },
      shuffle = function shuffle(a) {
    return a.sort(function () {
      return .5 - Math.random();
    });
  },
      // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
  //for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
  distribute = function distribute(v) {
    if (_isFunction(v)) {
      return v;
    }

    var vars = _isObject(v) ? v : {
      each: v
    },
        //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
    ease = _parseEase(vars.ease),
        from = vars.from || 0,
        base = parseFloat(vars.base) || 0,
        cache = {},
        isDecimal = from > 0 && from < 1,
        ratios = isNaN(from) || isDecimal,
        axis = vars.axis,
        ratioX = from,
        ratioY = from;

    if (_isString(from)) {
      ratioX = ratioY = {
        center: .5,
        edges: .5,
        end: 1
      }[from] || 0;
    } else if (!isDecimal && ratios) {
      ratioX = from[0];
      ratioY = from[1];
    }

    return function (i, target, a) {
      var l = (a || vars).length,
          distances = cache[l],
          originX,
          originY,
          x,
          y,
          d,
          j,
          max,
          min,
          wrapAt;

      if (!distances) {
        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];

        if (!wrapAt) {
          max = -_bigNum;

          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}

          wrapAt--;
        }

        distances = cache[l] = [];
        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
        originY = ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
        max = 0;
        min = _bigNum;

        for (j = 0; j < l; j++) {
          x = j % wrapAt - originX;
          y = originY - (j / wrapAt | 0);
          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
          d > max && (max = d);
          d < min && (min = d);
        }

        from === "random" && shuffle(distances);
        distances.max = max - min;
        distances.min = min;
        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
        distances.b = l < 0 ? base - l : base;
        distances.u = getUnit(vars.amount || vars.each) || 0; //unit

        ease = ease && l < 0 ? _invertEase(ease) : ease;
      }

      l = (distances[i] - distances.min) / distances.max || 0;
      return _round(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
    };
  },
      _roundModifier = function _roundModifier(v) {
    //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
    var p = v < 1 ? Math.pow(10, (v + "").length - 2) : 1; //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed()

    return function (raw) {
      return Math.floor(Math.round(parseFloat(raw) / v) * v * p) / p + (_isNumber(raw) ? 0 : getUnit(raw));
    };
  },
      snap = function snap(snapTo, value) {
    var isArray = _isArray(snapTo),
        radius,
        is2D;

    if (!isArray && _isObject(snapTo)) {
      radius = isArray = snapTo.radius || _bigNum;

      if (snapTo.values) {
        snapTo = toArray(snapTo.values);

        if (is2D = !_isNumber(snapTo[0])) {
          radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
        }
      } else {
        snapTo = _roundModifier(snapTo.increment);
      }
    }

    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
      is2D = snapTo(raw);
      return Math.abs(is2D - raw) <= radius ? is2D : raw;
    } : function (raw) {
      var x = parseFloat(is2D ? raw.x : raw),
          y = parseFloat(is2D ? raw.y : 0),
          min = _bigNum,
          closest = 0,
          i = snapTo.length,
          dx,
          dy;

      while (i--) {
        if (is2D) {
          dx = snapTo[i].x - x;
          dy = snapTo[i].y - y;
          dx = dx * dx + dy * dy;
        } else {
          dx = Math.abs(snapTo[i] - x);
        }

        if (dx < min) {
          min = dx;
          closest = i;
        }
      }

      closest = !radius || min <= radius ? snapTo[closest] : raw;
      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
    });
  },
      random = function random(min, max, roundingIncrement, returnFunction) {
    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min + Math.random() * (max - min)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
    });
  },
      pipe = function pipe() {
    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
      functions[_key] = arguments[_key];
    }

    return function (value) {
      return functions.reduce(function (v, f) {
        return f(v);
      }, value);
    };
  },
      unitize = function unitize(func, unit) {
    return function (value) {
      return func(parseFloat(value)) + (unit || getUnit(value));
    };
  },
      normalize = function normalize(min, max, value) {
    return mapRange(min, max, 0, 1, value);
  },
      _wrapArray = function _wrapArray(a, wrapper, value) {
    return _conditionalReturn(value, function (index) {
      return a[~~wrapper(index)];
    });
  },
      wrap = function wrap(min, max, value) {
    // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
    var range = max - min;
    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
      return (range + (value - min) % range) % range + min;
    });
  },
      wrapYoyo = function wrapYoyo(min, max, value) {
    var range = max - min,
        total = range * 2;
    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
      value = (total + (value - min) % total) % total || 0;
      return min + (value > range ? total - value : value);
    });
  },
      _replaceRandom = function _replaceRandom(value) {
    //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
    var prev = 0,
        s = "",
        i,
        nums,
        end,
        isArray;

    while (~(i = value.indexOf("random(", prev))) {
      end = value.indexOf(")", i);
      isArray = value.charAt(i + 7) === "[";
      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], +nums[1], +nums[2] || 1e-5);
      prev = end + 1;
    }

    return s + value.substr(prev, value.length - prev);
  },
      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
    var inRange = inMax - inMin,
        outRange = outMax - outMin;
    return _conditionalReturn(value, function (value) {
      return outMin + ((value - inMin) / inRange * outRange || 0);
    });
  },
      interpolate$1 = function interpolate(start, end, progress, mutate) {
    var func = isNaN(start + end) ? 0 : function (p) {
      return (1 - p) * start + p * end;
    };

    if (!func) {
      var isString = _isString(start),
          master = {},
          p,
          i,
          interpolators,
          l,
          il;

      progress === true && (mutate = 1) && (progress = null);

      if (isString) {
        start = {
          p: start
        };
        end = {
          p: end
        };
      } else if (_isArray(start) && !_isArray(end)) {
        interpolators = [];
        l = start.length;
        il = l - 2;

        for (i = 1; i < l; i++) {
          interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
        }

        l--;

        func = function func(p) {
          p *= l;
          var i = Math.min(il, ~~p);
          return interpolators[i](p - i);
        };

        progress = end;
      } else if (!mutate) {
        start = _merge(_isArray(start) ? [] : {}, start);
      }

      if (!interpolators) {
        for (p in end) {
          _addPropTween.call(master, start, p, "get", end[p]);
        }

        func = function func(p) {
          return _renderPropTweens(p, master) || (isString ? start.p : start);
        };
      }
    }

    return _conditionalReturn(progress, func);
  },
      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
    //used for nextLabel() and previousLabel()
    var labels = timeline.labels,
        min = _bigNum,
        p,
        distance,
        label;

    for (p in labels) {
      distance = labels[p] - fromTime;

      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
        label = p;
        min = distance;
      }
    }

    return label;
  },
      _callback = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars,
        callback = v[type],
        params,
        scope;

    if (!callback) {
      return;
    }

    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

    return params ? callback.apply(scope, params) : callback.call(scope);
  },
      _interrupt = function _interrupt(animation) {
    _removeFromParent(animation);

    if (animation.progress() < 1) {
      _callback(animation, "onInterrupt");
    }

    return animation;
  },
      _quickTween,
      _createPlugin = function _createPlugin(config) {
    config = !config.name && config["default"] || config; //UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

    var name = config.name,
        isFunc = _isFunction(config),
        Plugin = name && !isFunc && config.init ? function () {
      this._props = [];
    } : config,
        //in case someone passes in an object that's not a plugin, like CustomEase
    instanceDefaults = {
      init: _emptyFunc,
      render: _renderPropTweens,
      add: _addPropTween,
      kill: _killPropTweensOf,
      modifier: _addPluginModifier,
      rawVars: 0
    },
        statics = {
      targetTest: 0,
      get: 0,
      getSetter: _getSetter,
      aliases: {},
      register: 0
    };

    _wake();

    if (config !== Plugin) {
      if (_plugins[name]) {
        return;
      }

      _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods


      _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods


      _plugins[Plugin.prop = name] = Plugin;

      if (config.targetTest) {
        _harnessPlugins.push(Plugin);

        _reservedProps[name] = 1;
      }

      name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
    }

    _addGlobal(name, Plugin);

    if (config.register) {
      config.register(gsap, Plugin, PropTween);
    }
  },

  /*
   * --------------------------------------------------------------------------------------
   * COLORS
   * --------------------------------------------------------------------------------------
   */
  _255 = 255,
      _colorLookup = {
    aqua: [0, _255, _255],
    lime: [0, _255, 0],
    silver: [192, 192, 192],
    black: [0, 0, 0],
    maroon: [128, 0, 0],
    teal: [0, 128, 128],
    blue: [0, 0, _255],
    navy: [0, 0, 128],
    white: [_255, _255, _255],
    olive: [128, 128, 0],
    yellow: [_255, _255, 0],
    orange: [_255, 165, 0],
    gray: [128, 128, 128],
    purple: [128, 0, 128],
    green: [0, 128, 0],
    red: [_255, 0, 0],
    pink: [_255, 192, 203],
    cyan: [0, _255, _255],
    transparent: [_255, _255, _255, 0]
  },
      _hue = function _hue(h, m1, m2) {
    h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;
    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
  },
      splitColor = function splitColor(v, toHSL, forceAlpha) {
    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
        r,
        g,
        b,
        h,
        s,
        l,
        max,
        min,
        d,
        wasHSL;

    if (!a) {
      if (v.substr(-1) === ",") {
        //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
        v = v.substr(0, v.length - 1);
      }

      if (_colorLookup[v]) {
        a = _colorLookup[v];
      } else if (v.charAt(0) === "#") {
        if (v.length === 4) {
          //for shorthand like #9F0
          r = v.charAt(1);
          g = v.charAt(2);
          b = v.charAt(3);
          v = "#" + r + r + g + g + b + b;
        }

        v = parseInt(v.substr(1), 16);
        a = [v >> 16, v >> 8 & _255, v & _255];
      } else if (v.substr(0, 3) === "hsl") {
        a = wasHSL = v.match(_strictNumExp);

        if (!toHSL) {
          h = +a[0] % 360 / 360;
          s = +a[1] / 100;
          l = +a[2] / 100;
          g = l <= .5 ? l * (s + 1) : l + s - l * s;
          r = l * 2 - g;

          if (a.length > 3) {
            a[3] *= 1; //cast as number
          }

          a[0] = _hue(h + 1 / 3, r, g);
          a[1] = _hue(h, r, g);
          a[2] = _hue(h - 1 / 3, r, g);
        } else if (~v.indexOf("=")) {
          //if relative values are found, just return the raw strings with the relative prefixes in place.
          a = v.match(_numExp);
          forceAlpha && a.length < 4 && (a[3] = 1);
          return a;
        }
      } else {
        a = v.match(_strictNumExp) || _colorLookup.transparent;
      }

      a = a.map(Number);
    }

    if (toHSL && !wasHSL) {
      r = a[0] / _255;
      g = a[1] / _255;
      b = a[2] / _255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;

      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
        h *= 60;
      }

      a[0] = ~~(h + .5);
      a[1] = ~~(s * 100 + .5);
      a[2] = ~~(l * 100 + .5);
    }

    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
  },
      _colorOrderData = function _colorOrderData(v) {
    // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
    var values = [],
        c = [],
        i = -1;
    v.split(_colorExp).forEach(function (v) {
      var a = v.match(_numWithUnitExp) || [];
      values.push.apply(values, a);
      c.push(i += a.length + 1);
    });
    values.c = c;
    return values;
  },
      _formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "",
        colors = (s + result).match(_colorExp),
        type = toHSL ? "hsla(" : "rgba(",
        i = 0,
        c,
        shell,
        d,
        l;

    if (!colors) {
      return s;
    }

    colors = colors.map(function (color) {
      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
    });

    if (orderMatchData) {
      d = _colorOrderData(s);
      c = orderMatchData.c;

      if (c.join(result) !== d.c.join(result)) {
        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
        l = shell.length - 1;

        for (; i < l; i++) {
          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
        }
      }
    }

    if (!shell) {
      shell = s.split(_colorExp);
      l = shell.length - 1;

      for (; i < l; i++) {
        result += shell[i] + colors[i];
      }
    }

    return result + shell[l];
  },
      _colorExp = function () {
    var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b",
        //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
    p;

    for (p in _colorLookup) {
      s += "|" + p + "\\b";
    }

    return new RegExp(s + ")", "gi");
  }(),
      _hslExp = /hsl[a]?\(/,
      _colorStringFilter = function _colorStringFilter(a) {
    var combined = a.join(" "),
        toHSL;
    _colorExp.lastIndex = 0;

    if (_colorExp.test(combined)) {
      toHSL = _hslExp.test(combined);
      a[1] = _formatColors(a[1], toHSL);
      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

      return true;
    }
  },

  /*
   * --------------------------------------------------------------------------------------
   * TICKER
   * --------------------------------------------------------------------------------------
   */
  _tickerActive,
      _ticker = function () {
    var _getTime = Date.now,
        _lagThreshold = 500,
        _adjustedLag = 33,
        _startTime = _getTime(),
        _lastUpdate = _startTime,
        _gap = 1 / 240,
        _nextTime = _gap,
        _listeners = [],
        _id,
        _req,
        _raf,
        _self,
        _tick = function _tick(v) {
      var elapsed = _getTime() - _lastUpdate,
          manual = v === true,
          overlap,
          dispatch;

      if (elapsed > _lagThreshold) {
        _startTime += elapsed - _adjustedLag;
      }

      _lastUpdate += elapsed;
      _self.time = (_lastUpdate - _startTime) / 1000;
      overlap = _self.time - _nextTime;

      if (overlap > 0 || manual) {
        _self.frame++;
        _nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);
        dispatch = 1;
      }

      manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

      dispatch && _listeners.forEach(function (l) {
        return l(_self.time, elapsed, _self.frame, v);
      });
    };

    _self = {
      time: 0,
      frame: 0,
      tick: function tick() {
        _tick(true);
      },
      wake: function wake() {
        if (_coreReady) {
          if (!_coreInitted && _windowExists()) {
            _win = _coreInitted = window;
            _doc = _win.document || {};
            _globals.gsap = gsap;
            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);

            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});

            _raf = _win.requestAnimationFrame;
          }

          _id && _self.sleep();

          _req = _raf || function (f) {
            return setTimeout(f, (_nextTime - _self.time) * 1000 + 1 | 0);
          };

          _tickerActive = 1;

          _tick(2);
        }
      },
      sleep: function sleep() {
        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);
        _tickerActive = 0;
        _req = _emptyFunc;
      },
      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
        _lagThreshold = threshold || 1 / _tinyNum; //zero should be interpreted as basically unlimited

        _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
      },
      fps: function fps(_fps) {
        _gap = 1 / (_fps || 240);
        _nextTime = _self.time + _gap;
      },
      add: function add(callback) {
        _listeners.indexOf(callback) < 0 && _listeners.push(callback);

        _wake();
      },
      remove: function remove(callback) {
        var i;
        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1);
      },
      _listeners: _listeners
    };
    return _self;
  }(),
      _wake = function _wake() {
    return !_tickerActive && _ticker.wake();
  },
      //also ensures the core classes are initialized.

  /*
  * -------------------------------------------------
  * EASING
  * -------------------------------------------------
  */
  _easeMap = {},
      _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
      _quotesExp = /["']/g,
      _parseObjectInString = function _parseObjectInString(value) {
    //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
    var obj = {},
        split = value.substr(1, value.length - 3).split(":"),
        key = split[0],
        i = 1,
        l = split.length,
        index,
        val,
        parsedVal;

    for (; i < l; i++) {
      val = split[i];
      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
      parsedVal = val.substr(0, index);
      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
      key = val.substr(index + 1).trim();
    }

    return obj;
  },
      _configEaseFromString = function _configEaseFromString(name) {
    //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
    var split = (name + "").split("("),
        ease = _easeMap[split[0]];
    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _parenthesesExp.exec(name)[1].split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
  },
      _invertEase = function _invertEase(ease) {
    return function (p) {
      return 1 - ease(1 - p);
    };
  },
      // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
  _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first,
        ease;

    while (child) {
      if (child instanceof Timeline) {
        _propagateYoyoEase(child, isYoyo);
      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
        if (child.timeline) {
          _propagateYoyoEase(child.timeline, isYoyo);
        } else {
          ease = child._ease;
          child._ease = child._yEase;
          child._yEase = ease;
          child._yoyo = isYoyo;
        }
      }

      child = child._next;
    }
  },
      _parseEase = function _parseEase(ease, defaultEase) {
    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
  },
      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) {
      easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
      };
    }

    if (easeInOut === void 0) {
      easeInOut = function easeInOut(p) {
        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
      };
    }

    var ease = {
      easeIn: easeIn,
      easeOut: easeOut,
      easeInOut: easeInOut
    },
        lowercaseName;

    _forEachName(names, function (name) {
      _easeMap[name] = _globals[name] = ease;
      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;

      for (var p in ease) {
        _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
      }
    });

    return ease;
  },
      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function (p) {
      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
    };
  },
      _configElastic = function _configElastic(type, amplitude, period) {
    var p1 = amplitude >= 1 ? amplitude : 1,
        //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
    p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
        easeOut = function easeOut(p) {
      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
    },
        ease = type === "out" ? easeOut : type === "in" ? function (p) {
      return 1 - easeOut(1 - p);
    } : _easeInOutFromOut(easeOut);

    p2 = _2PI / p2; //precalculate to optimize

    ease.config = function (amplitude, period) {
      return _configElastic(type, amplitude, period);
    };

    return ease;
  },
      _configBack = function _configBack(type, overshoot) {
    if (overshoot === void 0) {
      overshoot = 1.70158;
    }

    var easeOut = function easeOut(p) {
      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
    },
        ease = type === "out" ? easeOut : type === "in" ? function (p) {
      return 1 - easeOut(1 - p);
    } : _easeInOutFromOut(easeOut);

    ease.config = function (overshoot) {
      return _configBack(type, overshoot);
    };

    return ease;
  }; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
  // _weightedEase = ratio => {
  // 	let y = 0.5 + ratio / 2;
  // 	return p => (2 * (1 - p) * p * y + p * p);
  // },
  // a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
  // _weightedEaseStrong = ratio => {
  // 	ratio = .5 + ratio / 2;
  // 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
  // 		b = ratio - o,
  // 		c = ratio + o;
  // 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
  // };


  _forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
    var power = i < 5 ? i + 1 : i;

    _insertEase(name + ",Power" + (power - 1), i ? function (p) {
      return Math.pow(p, power);
    } : function (p) {
      return p;
    }, function (p) {
      return 1 - Math.pow(1 - p, power);
    }, function (p) {
      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
    });
  });

  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

  _insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());

  (function (n, c) {
    var n1 = 1 / c,
        n2 = 2 * n1,
        n3 = 2.5 * n1,
        easeOut = function easeOut(p) {
      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
    };

    _insertEase("Bounce", function (p) {
      return 1 - easeOut(1 - p);
    }, easeOut);
  })(7.5625, 2.75);

  _insertEase("Expo", function (p) {
    return p ? Math.pow(2, 10 * (p - 1)) : 0;
  });

  _insertEase("Circ", function (p) {
    return -(_sqrt(1 - p * p) - 1);
  });

  _insertEase("Sine", function (p) {
    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
  });

  _insertEase("Back", _configBack("in"), _configBack("out"), _configBack());

  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
    config: function config(steps, immediateStart) {
      if (steps === void 0) {
        steps = 1;
      }

      var p1 = 1 / steps,
          p2 = steps + (immediateStart ? 0 : 1),
          p3 = immediateStart ? 1 : 0,
          max = 1 - _tinyNum;
      return function (p) {
        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
      };
    }
  };
  _defaults.ease = _easeMap["quad.out"];

  _forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
    return _callbackNames += name + "," + name + "Params,";
  });
  /*
   * --------------------------------------------------------------------------------------
   * CACHE
   * --------------------------------------------------------------------------------------
   */


  var GSCache = function GSCache(target, harness) {
    this.id = _gsID++;
    target._gsap = this;
    this.target = target;
    this.harness = harness;
    this.get = harness ? harness.get : _getProperty;
    this.set = harness ? harness.getSetter : _getSetter;
  };
  /*
   * --------------------------------------------------------------------------------------
   * ANIMATION
   * --------------------------------------------------------------------------------------
   */

  var Animation = /*#__PURE__*/function () {
    function Animation(vars, time) {
      var parent = vars.parent || _globalTimeline;
      this.vars = vars;
      this._delay = +vars.delay || 0;

      if (this._repeat = vars.repeat || 0) {
        this._rDelay = vars.repeatDelay || 0;
        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
      }

      this._ts = 1;

      _setDuration(this, +vars.duration, 1);

      this.data = vars.data;
      _tickerActive || _ticker.wake();
      parent && _addToTimeline(parent, this, time || time === 0 ? time : parent._time, 1);
      vars.reversed && this.reverse();
      vars.paused && this.paused(true);
    }

    var _proto = Animation.prototype;

    _proto.delay = function delay(value) {
      if (value || value === 0) {
        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
        this._delay = value;
        return this;
      }

      return this._delay;
    };

    _proto.duration = function duration(value) {
      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
    };

    _proto.totalDuration = function totalDuration(value) {
      if (!arguments.length) {
        return this._tDur;
      }

      this._dirty = 0;
      var t = this._time / this._dur || 0;

      _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));

      return this._tTime ? _alignPlayhead(this, t * value + _elapsedCycleDuration(this)) : this; // in case the animation hasn't even started yet and it has a delay. Aligning the playhead in that case would make it appear to lose the delay.
    };

    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
      _wake();

      if (!arguments.length) {
        return this._tTime;
      }

      var parent = this._dp;

      if (parent && parent.smoothChildTiming && this._ts) {
        _alignPlayhead(this, _totalTime); //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.


        while (parent.parent) {
          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
            parent.totalTime(parent._tTime, true);
          }

          parent = parent.parent;
        }

        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
          //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
          _addToTimeline(this._dp, this, this._start - this._delay);
        }
      }

      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted) {
        this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause

        _lazySafeRender(this, _totalTime, suppressEvents);
      }

      return this;
    };

    _proto.time = function time(value, suppressEvents) {
      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % this._dur || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
    };

    _proto.totalProgress = function totalProgress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
    };

    _proto.progress = function progress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
    };

    _proto.iteration = function iteration(value, suppressEvents) {
      var cycleDuration = this.duration() + this._rDelay;

      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
    } // potential future addition:
    // isPlayingBackwards() {
    // 	let animation = this,
    // 		orientation = 1; // 1 = forward, -1 = backward
    // 	while (animation) {
    // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
    // 		animation = animation.parent;
    // 	}
    // 	return orientation < 0;
    // }
    ;

    _proto.timeScale = function timeScale(value) {
      if (!arguments.length) {
        return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
      }

      if (this._rts === value) {
        return this;
      }

      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
      // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

      this._rts = +value || 0;
      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

      return _recacheAncestors(this.totalTime(_clamp(-this._delay, this._tDur, tTime), true));
    };

    _proto.paused = function paused(value) {
      if (!arguments.length) {
        return this._ps;
      }

      if (this._ps !== value) {
        this._ps = value;

        if (value) {
          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

          this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
        } else {
          _wake();

          this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && (this._tTime -= _tinyNum) && Math.abs(this._zTime) !== _tinyNum); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
        }
      }

      return this;
    };

    _proto.startTime = function startTime(value) {
      if (arguments.length) {
        this._start = value;
        var parent = this.parent || this._dp;
        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
        return this;
      }

      return this._start;
    };

    _proto.endTime = function endTime(includeRepeats) {
      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts);
    };

    _proto.rawTime = function rawTime(wrapRepeats) {
      var parent = this.parent || this._dp; // _dp = detatched parent

      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
    };

    _proto.globalTime = function globalTime(rawTime) {
      var animation = this,
          time = arguments.length ? rawTime : animation.rawTime();

      while (animation) {
        time = animation._start + time / (animation._ts || 1);
        animation = animation._dp;
      }

      return time;
    };

    _proto.repeat = function repeat(value) {
      if (arguments.length) {
        this._repeat = value;
        return _onUpdateTotalDuration(this);
      }

      return this._repeat;
    };

    _proto.repeatDelay = function repeatDelay(value) {
      if (arguments.length) {
        this._rDelay = value;
        return _onUpdateTotalDuration(this);
      }

      return this._rDelay;
    };

    _proto.yoyo = function yoyo(value) {
      if (arguments.length) {
        this._yoyo = value;
        return this;
      }

      return this._yoyo;
    };

    _proto.seek = function seek(position, suppressEvents) {
      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
    };

    _proto.restart = function restart(includeDelay, suppressEvents) {
      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
    };

    _proto.play = function play(from, suppressEvents) {
      if (from != null) {
        this.seek(from, suppressEvents);
      }

      return this.reversed(false).paused(false);
    };

    _proto.reverse = function reverse(from, suppressEvents) {
      if (from != null) {
        this.seek(from || this.totalDuration(), suppressEvents);
      }

      return this.reversed(true).paused(false);
    };

    _proto.pause = function pause(atTime, suppressEvents) {
      if (atTime != null) {
        this.seek(atTime, suppressEvents);
      }

      return this.paused(true);
    };

    _proto.resume = function resume() {
      return this.paused(false);
    };

    _proto.reversed = function reversed(value) {
      if (arguments.length) {
        if (!!value !== this.reversed()) {
          this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.
        }

        return this;
      }

      return this._rts < 0;
    };

    _proto.invalidate = function invalidate() {
      this._initted = 0;
      this._zTime = -_tinyNum;
      return this;
    };

    _proto.isActive = function isActive() {
      var parent = this.parent || this._dp,
          start = this._start,
          rawTime;
      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
    };

    _proto.eventCallback = function eventCallback(type, callback, params) {
      var vars = this.vars;

      if (arguments.length > 1) {
        if (!callback) {
          delete vars[type];
        } else {
          vars[type] = callback;

          if (params) {
            vars[type + "Params"] = params;
          }

          if (type === "onUpdate") {
            this._onUpdate = callback;
          }
        }

        return this;
      }

      return vars[type];
    };

    _proto.then = function then(onFulfilled) {
      var self = this;
      return new Promise(function (resolve) {
        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
            _resolve = function _resolve() {
          var _then = self.then;
          self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
          resolve(f);
          self.then = _then;
        };

        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
          _resolve();
        } else {
          self._prom = _resolve;
        }
      });
    };

    _proto.kill = function kill() {
      _interrupt(this);
    };

    return Animation;
  }();

  _setDefaults(Animation.prototype, {
    _time: 0,
    _start: 0,
    _end: 0,
    _tTime: 0,
    _tDur: 0,
    _dirty: 0,
    _repeat: 0,
    _yoyo: false,
    parent: null,
    _initted: false,
    _rDelay: 0,
    _ts: 1,
    _dp: 0,
    ratio: 0,
    _zTime: -_tinyNum,
    _prom: 0,
    _ps: false,
    _rts: 1
  });
  /*
   * -------------------------------------------------
   * TIMELINE
   * -------------------------------------------------
   */


  var Timeline = /*#__PURE__*/function (_Animation) {
    _inheritsLoose(Timeline, _Animation);

    function Timeline(vars, time) {
      var _this;

      if (vars === void 0) {
        vars = {};
      }

      _this = _Animation.call(this, vars, time) || this;
      _this.labels = {};
      _this.smoothChildTiming = !!vars.smoothChildTiming;
      _this.autoRemoveChildren = !!vars.autoRemoveChildren;
      _this._sort = _isNotFalse(vars.sortChildren);
      _this.parent && _postAddChecks(_this.parent, _assertThisInitialized(_this));
      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
      return _this;
    }

    var _proto2 = Timeline.prototype;

    _proto2.to = function to(targets, vars, position) {
      new Tween(targets, _parseVars(arguments, 0, this), _parsePosition(this, _isNumber(vars) ? arguments[3] : position));
      return this;
    };

    _proto2.from = function from(targets, vars, position) {
      new Tween(targets, _parseVars(arguments, 1, this), _parsePosition(this, _isNumber(vars) ? arguments[3] : position));
      return this;
    };

    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
      new Tween(targets, _parseVars(arguments, 2, this), _parsePosition(this, _isNumber(fromVars) ? arguments[4] : position));
      return this;
    };

    _proto2.set = function set(targets, vars, position) {
      vars.duration = 0;
      vars.parent = this;
      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
      vars.immediateRender = !!vars.immediateRender;
      new Tween(targets, vars, _parsePosition(this, position), 1);
      return this;
    };

    _proto2.call = function call(callback, params, position) {
      return _addToTimeline(this, Tween.delayedCall(0, callback, params), _parsePosition(this, position));
    } //ONLY for backward compatibility! Maybe delete?
    ;

    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.duration = duration;
      vars.stagger = vars.stagger || stagger;
      vars.onComplete = onCompleteAll;
      vars.onCompleteParams = onCompleteAllParams;
      vars.parent = this;
      new Tween(targets, vars, _parsePosition(this, position));
      return this;
    };

    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.runBackwards = 1;
      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
    };

    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
      toVars.startAt = fromVars;
      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
    };

    _proto2.render = function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._dirty ? this.totalDuration() : this._tDur,
          dur = this._dur,
          tTime = this !== _globalTimeline && totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,
          crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
          time,
          child,
          next,
          iteration,
          cycleDuration,
          prevPaused,
          pauseTween,
          timeScale,
          prevStart,
          prevIteration,
          yoyo,
          isYoyo;

      if (tTime !== this._tTime || force || crossingStart) {
        if (prevTime !== this._time && dur) {
          //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
          tTime += this._time - prevTime;
          totalTime += this._time - prevTime;
        }

        time = tTime;
        prevStart = this._start;
        timeScale = this._ts;
        prevPaused = !timeScale;

        if (crossingStart) {
          dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

          (totalTime || !suppressEvents) && (this._zTime = totalTime);
        }

        if (this._repeat) {
          //adjust the time for repeats and yoyos
          yoyo = this._yoyo;
          cycleDuration = dur + this._rDelay;
          time = _round(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

          if (time > dur || tDur === tTime) {
            time = dur;
          }

          iteration = ~~(tTime / cycleDuration);

          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }

          prevIteration = _animationCycle(this._tTime, cycleDuration);
          !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://greensock.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005

          if (yoyo && iteration & 1) {
            time = dur - time;
            isYoyo = 1;
          }
          /*
          make sure children at the end/beginning of the timeline are rendered properly. If, for example,
          a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
          would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
          could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
          we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
          ensure that zero-duration tweens at the very beginning or end of the Timeline work.
          */


          if (iteration !== prevIteration && !this._lock) {
            var rewinding = yoyo && prevIteration & 1,
                doesWrap = rewinding === (yoyo && iteration & 1);

            if (iteration < prevIteration) {
              rewinding = !rewinding;
            }

            prevTime = rewinding ? 0 : dur;
            this._lock = 1;
            this.render(prevTime || (isYoyo ? 0 : _round(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;

            if (!suppressEvents && this.parent) {
              _callback(this, "onRepeat");
            }

            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);

            if (prevTime !== this._time || prevPaused !== !this._ts) {
              return this;
            }

            if (doesWrap) {
              this._lock = 2;
              prevTime = rewinding ? dur + 0.0001 : -0.0001;
              this.render(prevTime, true);
              this.vars.repeatRefresh && !isYoyo && this.invalidate();
            }

            this._lock = 0;

            if (!this._ts && !prevPaused) {
              return this;
            } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.


            _propagateYoyoEase(this, isYoyo);
          }
        }

        if (this._hasPause && !this._forcing && this._lock < 2) {
          pauseTween = _findNextPauseTween(this, _round(prevTime), _round(time));

          if (pauseTween) {
            tTime -= time - (time = pauseTween._start);
          }
        }

        this._tTime = tTime;
        this._time = time;
        this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

        if (!this._initted) {
          this._onUpdate = this.vars.onUpdate;
          this._initted = 1;
          this._zTime = totalTime;
        }

        if (!prevTime && time && !suppressEvents) {
          _callback(this, "onStart");
        }

        if (time >= prevTime && totalTime >= 0) {
          child = this._first;

          while (child) {
            next = child._next;

            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                return this.render(totalTime, suppressEvents, force);
              }

              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);

              if (time !== this._time || !this._ts && !prevPaused) {
                //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                pauseTween = 0;
                next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)

                break;
              }
            }

            child = next;
          }
        } else {
          child = this._last;
          var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

          while (child) {
            next = child._prev;

            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                return this.render(totalTime, suppressEvents, force);
              }

              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);

              if (time !== this._time || !this._ts && !prevPaused) {
                //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                pauseTween = 0;
                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

                break;
              }
            }

            child = next;
          }
        }

        if (pauseTween && !suppressEvents) {
          this.pause();
          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;

          if (this._ts) {
            //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
            this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

            _setEnd(this);

            return this.render(totalTime, suppressEvents, force);
          }
        }

        this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
        if (tTime === tDur && tDur >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {
            _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }

      return this;
    };

    _proto2.add = function add(child, position) {
      var _this2 = this;

      if (!_isNumber(position)) {
        position = _parsePosition(this, position);
      }

      if (!(child instanceof Animation)) {
        if (_isArray(child)) {
          child.forEach(function (obj) {
            return _this2.add(obj, position);
          });
          return _uncache(this);
        }

        if (_isString(child)) {
          return this.addLabel(child, position);
        }

        if (_isFunction(child)) {
          child = Tween.delayedCall(0, child);
        } else {
          return this;
        }
      }

      return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
    };

    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
      if (nested === void 0) {
        nested = true;
      }

      if (tweens === void 0) {
        tweens = true;
      }

      if (timelines === void 0) {
        timelines = true;
      }

      if (ignoreBeforeTime === void 0) {
        ignoreBeforeTime = -_bigNum;
      }

      var a = [],
          child = this._first;

      while (child) {
        if (child._start >= ignoreBeforeTime) {
          if (child instanceof Tween) {
            tweens && a.push(child);
          } else {
            timelines && a.push(child);
            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
          }
        }

        child = child._next;
      }

      return a;
    };

    _proto2.getById = function getById(id) {
      var animations = this.getChildren(1, 1, 1),
          i = animations.length;

      while (i--) {
        if (animations[i].vars.id === id) {
          return animations[i];
        }
      }
    };

    _proto2.remove = function remove(child) {
      if (_isString(child)) {
        return this.removeLabel(child);
      }

      if (_isFunction(child)) {
        return this.killTweensOf(child);
      }

      _removeLinkedListItem(this, child);

      if (child === this._recent) {
        this._recent = this._last;
      }

      return _uncache(this);
    };

    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
      if (!arguments.length) {
        return this._tTime;
      }

      this._forcing = 1;

      if (!this._dp && this._ts) {
        //special case for the global timeline (or any other that has no parent or detached parent).
        this._start = _round(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
      }

      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);

      this._forcing = 0;
      return this;
    };

    _proto2.addLabel = function addLabel(label, position) {
      this.labels[label] = _parsePosition(this, position);
      return this;
    };

    _proto2.removeLabel = function removeLabel(label) {
      delete this.labels[label];
      return this;
    };

    _proto2.addPause = function addPause(position, callback, params) {
      var t = Tween.delayedCall(0, callback || _emptyFunc, params);
      t.data = "isPause";
      this._hasPause = 1;
      return _addToTimeline(this, t, _parsePosition(this, position));
    };

    _proto2.removePause = function removePause(position) {
      var child = this._first;
      position = _parsePosition(this, position);

      while (child) {
        if (child._start === position && child.data === "isPause") {
          _removeFromParent(child);
        }

        child = child._next;
      }
    };

    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
      var tweens = this.getTweensOf(targets, onlyActive),
          i = tweens.length;

      while (i--) {
        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
      }

      return this;
    };

    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
      var a = [],
          parsedTargets = toArray(targets),
          child = this._first,
          isGlobalTime = _isNumber(onlyActive),
          // a number is interpreted as a global time. If the animation spans
      children;

      while (child) {
        if (child instanceof Tween) {
          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
            // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
            a.push(child);
          }
        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
          a.push.apply(a, children);
        }

        child = child._next;
      }

      return a;
    };

    _proto2.tweenTo = function tweenTo(position, vars) {
      vars = vars || {};

      var tl = this,
          endTime = _parsePosition(tl, position),
          _vars = vars,
          startAt = _vars.startAt,
          _onStart = _vars.onStart,
          onStartParams = _vars.onStartParams,
          tween = Tween.to(tl, _setDefaults(vars, {
        ease: "none",
        lazy: false,
        time: endTime,
        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
        onStart: function onStart() {
          tl.pause();
          var duration = vars.duration || Math.abs((endTime - tl._time) / tl.timeScale());
          tween._dur !== duration && _setDuration(tween, duration).render(tween._time, true, true);
          _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
        }
      }));

      return tween;
    };

    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
      return this.tweenTo(toPosition, _setDefaults({
        startAt: {
          time: _parsePosition(this, fromPosition)
        }
      }, vars));
    };

    _proto2.recent = function recent() {
      return this._recent;
    };

    _proto2.nextLabel = function nextLabel(afterTime) {
      if (afterTime === void 0) {
        afterTime = this._time;
      }

      return _getLabelInDirection(this, _parsePosition(this, afterTime));
    };

    _proto2.previousLabel = function previousLabel(beforeTime) {
      if (beforeTime === void 0) {
        beforeTime = this._time;
      }

      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
    };

    _proto2.currentLabel = function currentLabel(value) {
      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
    };

    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
      if (ignoreBeforeTime === void 0) {
        ignoreBeforeTime = 0;
      }

      var child = this._first,
          labels = this.labels,
          p;

      while (child) {
        if (child._start >= ignoreBeforeTime) {
          child._start += amount;
        }

        child = child._next;
      }

      if (adjustLabels) {
        for (p in labels) {
          if (labels[p] >= ignoreBeforeTime) {
            labels[p] += amount;
          }
        }
      }

      return _uncache(this);
    };

    _proto2.invalidate = function invalidate() {
      var child = this._first;
      this._lock = 0;

      while (child) {
        child.invalidate();
        child = child._next;
      }

      return _Animation.prototype.invalidate.call(this);
    };

    _proto2.clear = function clear(includeLabels) {
      if (includeLabels === void 0) {
        includeLabels = true;
      }

      var child = this._first,
          next;

      while (child) {
        next = child._next;
        this.remove(child);
        child = next;
      }

      this._time = this._tTime = this._pTime = 0;

      if (includeLabels) {
        this.labels = {};
      }

      return _uncache(this);
    };

    _proto2.totalDuration = function totalDuration(value) {
      var max = 0,
          self = this,
          child = self._last,
          prevStart = _bigNum,
          prev,
          end,
          start,
          parent;

      if (arguments.length) {
        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
      }

      if (self._dirty) {
        parent = self.parent;

        while (child) {
          prev = child._prev; //record it here in case the tween changes position in the sequence...

          child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

          start = child._start;

          if (start > prevStart && self._sort && child._ts && !self._lock) {
            //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
            self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
          } else {
            prevStart = start;
          }

          if (start < 0 && child._ts) {
            //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
            max -= start;

            if (!parent && !self._dp || parent && parent.smoothChildTiming) {
              self._start += start / self._ts;
              self._time -= start;
              self._tTime -= start;
            }

            self.shiftChildren(-start, false, -1e999);
            prevStart = 0;
          }

          end = _setEnd(child);

          if (end > max && child._ts) {
            max = end;
          }

          child = prev;
        }

        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1);

        self._dirty = 0;
      }

      return self._tDur;
    };

    Timeline.updateRoot = function updateRoot(time) {
      if (_globalTimeline._ts) {
        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));

        _lastRenderedFrame = _ticker.frame;
      }

      if (_ticker.frame >= _nextGCFrame) {
        _nextGCFrame += _config.autoSleep || 120;
        var child = _globalTimeline._first;
        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
          while (child && !child._ts) {
            child = child._next;
          }

          child || _ticker.sleep();
        }
      }
    };

    return Timeline;
  }(Animation);

  _setDefaults(Timeline.prototype, {
    _lock: 0,
    _hasPause: 0,
    _forcing: 0
  });

  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
    //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
        index = 0,
        matchIndex = 0,
        result,
        startNums,
        color,
        endNum,
        chunk,
        startNum,
        hasRandom,
        a;
    pt.b = start;
    pt.e = end;
    start += ""; //ensure values are strings

    end += "";

    if (hasRandom = ~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }

    if (stringFilter) {
      a = [start, end];
      stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

      start = a[0];
      end = a[1];
    }

    startNums = start.match(_complexStringNumExp) || [];

    while (result = _complexStringNumExp.exec(end)) {
      endNum = result[0];
      chunk = end.substring(index, result.index);

      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(") {
        color = 1;
      }

      if (endNum !== startNums[matchIndex++]) {
        startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
          s: startNum,
          c: endNum.charAt(1) === "=" ? parseFloat(endNum.substr(2)) * (endNum.charAt(0) === "-" ? -1 : 1) : parseFloat(endNum) - startNum,
          m: color && color < 4 ? Math.round : 0
        };
        index = _complexStringNumExp.lastIndex;
      }
    }

    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

    pt.fp = funcParam;

    if (_relExp.test(end) || hasRandom) {
      pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
    }

    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

    return pt;
  },
      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam) {
    _isFunction(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop],
        parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
        pt;

    if (_isString(end)) {
      if (~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }

      if (end.charAt(1) === "=") {
        end = parseFloat(parsedStart) + parseFloat(end.substr(2)) * (end.charAt(0) === "-" ? -1 : 1) + (getUnit(parsedStart) || 0);
      }
    }

    if (parsedStart !== end) {
      if (!isNaN(parsedStart * end)) {
        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
        funcParam && (pt.fp = funcParam);
        modifier && pt.modifier(modifier, this, target);
        return this._pt = pt;
      }

      !currentValue && !(prop in target) && _missingPlugin(prop, end);
      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
    }
  },
      //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
  _processVars = function _processVars(vars, index, target, targets, tween) {
    if (_isFunction(vars)) {
      vars = _parseFuncOrString(vars, tween, index, target, targets);
    }

    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars)) {
      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
    }

    var copy = {},
        p;

    for (p in vars) {
      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
    }

    return copy;
  },
      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
    var plugin, pt, ptLookup, i;

    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);

      if (tween !== _quickTween) {
        ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

        i = plugin._props.length;

        while (i--) {
          ptLookup[plugin._props[i]] = pt;
        }
      }
    }

    return plugin;
  },
      _overwritingTween,
      //store a reference temporarily so we can avoid overwriting itself.
  _initTween = function _initTween(tween, time) {
    var vars = tween.vars,
        ease = vars.ease,
        startAt = vars.startAt,
        immediateRender = vars.immediateRender,
        lazy = vars.lazy,
        onUpdate = vars.onUpdate,
        onUpdateParams = vars.onUpdateParams,
        callbackScope = vars.callbackScope,
        runBackwards = vars.runBackwards,
        yoyoEase = vars.yoyoEase,
        keyframes = vars.keyframes,
        autoRevert = vars.autoRevert,
        dur = tween._dur,
        prevStartAt = tween._startAt,
        targets = tween._targets,
        parent = tween.parent,
        fullTargets = parent && parent.data === "nested" ? parent.parent._targets : targets,
        autoOverwrite = tween._overwrite === "auto",
        tl = tween.timeline,
        cleanVars,
        i,
        p,
        pt,
        target,
        hasPriority,
        gsData,
        harness,
        plugin,
        ptLookup,
        index,
        harnessVars;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = _parseEase(ease, _defaults.ease);
    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;

    if (yoyoEase && tween._yoyo && !tween._repeat) {
      //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
      yoyoEase = tween._yEase;
      tween._yEase = tween._ease;
      tween._ease = yoyoEase;
    }

    if (!tl) {
      //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
      harness = targets[0] ? _getCache(targets[0]).harness : 0;
      harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

      cleanVars = _copyExcluding(vars, _reservedProps);
      prevStartAt && prevStartAt.render(-1, true).kill();

      if (startAt) {
        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
          data: "isStart",
          overwrite: false,
          parent: parent,
          immediateRender: true,
          lazy: _isNotFalse(lazy),
          startAt: null,
          delay: 0,
          onUpdate: onUpdate,
          onUpdateParams: onUpdateParams,
          callbackScope: callbackScope,
          stagger: 0
        }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);


        if (immediateRender) {
          if (time > 0) {
            !autoRevert && (tween._startAt = 0); //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in Timeline instances where immediateRender was false or when autoRevert is explicitly set to true.
          } else if (dur && !(time < 0 && prevStartAt)) {
            tween._zTime = time;
            return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
          }
        }
      } else if (runBackwards && dur) {
        //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
        if (prevStartAt) {
          !autoRevert && (tween._startAt = 0);
        } else {
          time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

          p = _setDefaults({
            overwrite: false,
            data: "isFromStart",
            //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
            lazy: immediateRender && _isNotFalse(lazy),
            immediateRender: immediateRender,
            //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
            stagger: 0,
            parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y:gsap.utils.wrap([-100,100])})

          }, cleanVars);
          harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

          _removeFromParent(tween._startAt = Tween.set(targets, p));

          if (!immediateRender) {
            _initTween(tween._startAt, _tinyNum); //ensures that the initial values are recorded

          } else if (!time) {
            return;
          }
        }
      }

      tween._pt = 0;
      lazy = dur && _isNotFalse(lazy) || lazy && !dur;

      for (i = 0; i < targets.length; i++) {
        target = targets[i];
        gsData = target._gsap || _harness(targets)[i]._gsap;
        tween._ptLookup[i] = ptLookup = {};
        _lazyLookup[gsData.id] && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

        index = fullTargets === targets ? i : fullTargets.indexOf(target);

        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);

          plugin._props.forEach(function (name) {
            ptLookup[name] = pt;
          });

          plugin.priority && (hasPriority = 1);
        }

        if (!harness || harnessVars) {
          for (p in cleanVars) {
            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
              plugin.priority && (hasPriority = 1);
            } else {
              ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
            }
          }
        }

        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

        if (autoOverwrite && tween._pt) {
          _overwritingTween = tween;

          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(0)); //Also make sure the overwriting doesn't overwrite THIS tween!!!


          _overwritingTween = 0;
        }

        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
      }

      hasPriority && _sortPropTweensByPriority(tween);
      tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
    }

    tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

    tween._onUpdate = onUpdate;
    tween._initted = !!tween.parent; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.
  },
      _addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? _getCache(targets[0]).harness : 0,
        propertyAliases = harness && harness.aliases,
        copy,
        p,
        i,
        aliases;

    if (!propertyAliases) {
      return vars;
    }

    copy = _merge({}, vars);

    for (p in propertyAliases) {
      if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;

        while (i--) {
          copy[aliases[i]] = copy[p];
        }
      }
    }

    return copy;
  },
      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
  },
      _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",
      _staggerPropsToSkip = (_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger").split(",");
  /*
   * --------------------------------------------------------------------------------------
   * TWEEN
   * --------------------------------------------------------------------------------------
   */


  var Tween = /*#__PURE__*/function (_Animation2) {
    _inheritsLoose(Tween, _Animation2);

    function Tween(targets, vars, time, skipInherit) {
      var _this3;

      if (typeof vars === "number") {
        time.duration = vars;
        vars = time;
        time = null;
      }

      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars), time) || this;
      var _this3$vars = _this3.vars,
          duration = _this3$vars.duration,
          delay = _this3$vars.delay,
          immediateRender = _this3$vars.immediateRender,
          stagger = _this3$vars.stagger,
          overwrite = _this3$vars.overwrite,
          keyframes = _this3$vars.keyframes,
          defaults = _this3$vars.defaults,
          scrollTrigger = _this3$vars.scrollTrigger,
          yoyoEase = _this3$vars.yoyoEase,
          parent = _this3.parent,
          parsedTargets = (_isArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
          tl,
          i,
          copy,
          l,
          p,
          curTarget,
          staggerFunc,
          staggerVarsToMerge;
      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
      _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

      _this3._overwrite = overwrite;

      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        vars = _this3.vars;
        tl = _this3.timeline = new Timeline({
          data: "nested",
          defaults: defaults || {}
        });
        tl.kill();
        tl.parent = _assertThisInitialized(_this3);

        if (keyframes) {
          _setDefaults(tl.vars.defaults, {
            ease: "none"
          });

          keyframes.forEach(function (frame) {
            return tl.to(parsedTargets, frame, ">");
          });
        } else {
          l = parsedTargets.length;
          staggerFunc = stagger ? distribute(stagger) : _emptyFunc;

          if (_isObject(stagger)) {
            //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
            for (p in stagger) {
              if (~_staggerTweenProps.indexOf(p)) {
                staggerVarsToMerge || (staggerVarsToMerge = {});
                staggerVarsToMerge[p] = stagger[p];
              }
            }
          }

          for (i = 0; i < l; i++) {
            copy = {};

            for (p in vars) {
              if (_staggerPropsToSkip.indexOf(p) < 0) {
                copy[p] = vars[p];
              }
            }

            copy.stagger = 0;
            yoyoEase && (copy.yoyoEase = yoyoEase);
            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
            curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;

            if (!stagger && l === 1 && copy.delay) {
              // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
              _this3._delay = delay = copy.delay;
              _this3._start += delay;
              copy.delay = 0;
            }

            tl.to(curTarget, copy, staggerFunc(i, curTarget, parsedTargets));
          }

          tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
        }

        duration || _this3.duration(duration = tl.duration());
      } else {
        _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
      }

      if (overwrite === true) {
        _overwritingTween = _assertThisInitialized(_this3);

        _globalTimeline.killTweensOf(parsedTargets);

        _overwritingTween = 0;
      }

      parent && _postAddChecks(parent, _assertThisInitialized(_this3));

      if (immediateRender || !duration && !keyframes && _this3._start === _round(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
        _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

        _this3.render(Math.max(0, -delay)); //in case delay is negative

      }

      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
      return _this3;
    }

    var _proto3 = Tween.prototype;

    _proto3.render = function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._tDur,
          dur = this._dur,
          tTime = totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,
          time,
          pt,
          iteration,
          cycleDuration,
          prevIteration,
          isYoyo,
          ratio,
          timeline,
          yoyoEase;

      if (!dur) {
        _renderZeroDurationTween(this, totalTime, suppressEvents, force);
      } else if (tTime !== this._tTime || !totalTime || force || this._startAt && this._zTime < 0 !== totalTime < 0) {
        //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
        time = tTime;
        timeline = this.timeline;

        if (this._repeat) {
          //adjust the time for repeats and yoyos
          cycleDuration = dur + this._rDelay;
          time = _round(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

          if (time > dur || tDur === tTime) {
            // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
            time = dur;
          }

          iteration = ~~(tTime / cycleDuration);

          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }

          isYoyo = this._yoyo && iteration & 1;

          if (isYoyo) {
            yoyoEase = this._yEase;
            time = dur - time;
          }

          prevIteration = _animationCycle(this._tTime, cycleDuration);

          if (time === prevTime && !force && this._initted) {
            //could be during the repeatDelay part. No need to render and fire callbacks.
            return this;
          }

          if (iteration !== prevIteration) {
            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
              this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

              this.render(_round(cycleDuration * iteration), true).invalidate()._lock = 0;
            }
          }
        }

        if (!this._initted) {
          if (_attemptInitTween(this, totalTime < 0 ? totalTime : time, force, suppressEvents)) {
            this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

            return this;
          }

          if (dur !== this._dur) {
            // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
            return this.render(totalTime, suppressEvents, force);
          }
        }

        this._tTime = tTime;
        this._time = time;

        if (!this._act && this._ts) {
          this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

          this._lazy = 0;
        }

        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

        if (this._from) {
          this.ratio = ratio = 1 - ratio;
        }

        time && !prevTime && !suppressEvents && _callback(this, "onStart");
        pt = this._pt;

        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }

        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * ratio, suppressEvents, force) || this._startAt && (this._zTime = totalTime);

        if (this._onUpdate && !suppressEvents) {
          if (totalTime < 0 && this._startAt) {
            this._startAt.render(totalTime, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

          }

          _callback(this, "onUpdate");
        }

        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");

        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
          totalTime < 0 && this._startAt && !this._onUpdate && this._startAt.render(totalTime, true, true);
          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {
            // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
            _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }

      return this;
    };

    _proto3.targets = function targets() {
      return this._targets;
    };

    _proto3.invalidate = function invalidate() {
      this._pt = this._op = this._startAt = this._onUpdate = this._act = this._lazy = 0;
      this._ptLookup = [];
      this.timeline && this.timeline.invalidate();
      return _Animation2.prototype.invalidate.call(this);
    };

    _proto3.kill = function kill(targets, vars) {
      if (vars === void 0) {
        vars = "all";
      }

      if (!targets && (!vars || vars === "all")) {
        this._lazy = 0;

        if (this.parent) {
          return _interrupt(this);
        }
      }

      if (this.timeline) {
        var tDur = this.timeline.totalDuration();
        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweenng, interrupt.

        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

        return this;
      }

      var parsedTargets = this._targets,
          killingTargets = targets ? toArray(targets) : parsedTargets,
          propTweenLookup = this._ptLookup,
          firstPT = this._pt,
          overwrittenProps,
          curLookup,
          curOverwriteProps,
          props,
          p,
          pt,
          i;

      if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
        return _interrupt(this);
      }

      overwrittenProps = this._op = this._op || [];

      if (vars !== "all") {
        //so people can pass in a comma-delimited list of property names
        if (_isString(vars)) {
          p = {};

          _forEachName(vars, function (name) {
            return p[name] = 1;
          });

          vars = p;
        }

        vars = _addAliasesToVars(parsedTargets, vars);
      }

      i = parsedTargets.length;

      while (i--) {
        if (~killingTargets.indexOf(parsedTargets[i])) {
          curLookup = propTweenLookup[i];

          if (vars === "all") {
            overwrittenProps[i] = vars;
            props = curLookup;
            curOverwriteProps = {};
          } else {
            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
            props = vars;
          }

          for (p in props) {
            pt = curLookup && curLookup[p];

            if (pt) {
              if (!("kill" in pt.d) || pt.d.kill(p) === true) {
                _removeLinkedListItem(this, pt, "_pt");
              }

              delete curLookup[p];
            }

            if (curOverwriteProps !== "all") {
              curOverwriteProps[p] = 1;
            }
          }
        }
      }

      this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

      return this;
    };

    Tween.to = function to(targets, vars) {
      return new Tween(targets, vars, arguments[2]);
    };

    Tween.from = function from(targets, vars) {
      return new Tween(targets, _parseVars(arguments, 1));
    };

    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
      return new Tween(callback, 0, {
        immediateRender: false,
        lazy: false,
        overwrite: false,
        delay: delay,
        onComplete: callback,
        onReverseComplete: callback,
        onCompleteParams: params,
        onReverseCompleteParams: params,
        callbackScope: scope
      });
    };

    Tween.fromTo = function fromTo(targets, fromVars, toVars) {
      return new Tween(targets, _parseVars(arguments, 2));
    };

    Tween.set = function set(targets, vars) {
      vars.duration = 0;
      vars.repeatDelay || (vars.repeat = 0);
      return new Tween(targets, vars);
    };

    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
      return _globalTimeline.killTweensOf(targets, props, onlyActive);
    };

    return Tween;
  }(Animation);

  _setDefaults(Tween.prototype, {
    _targets: [],
    _lazy: 0,
    _startAt: 0,
    _op: 0,
    _onInit: 0
  }); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
  // _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
  // 	Tween.prototype[name] = function() {
  // 		let tl = new Timeline();
  // 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
  // 	}
  // });
  //for backward compatibility. Leverage the timeline calls.


  _forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
    Tween[name] = function () {
      var tl = new Timeline(),
          params = _slice.call(arguments, 0);

      params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
      return tl[name].apply(tl, params);
    };
  });
  /*
   * --------------------------------------------------------------------------------------
   * PROPTWEEN
   * --------------------------------------------------------------------------------------
   */


  var _setterPlain = function _setterPlain(target, property, value) {
    return target[property] = value;
  },
      _setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
  },
      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
    return target[property](data.fp, value);
  },
      _setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
  },
      _getSetter = function _getSetter(target, property) {
    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
  },
      _renderPlain = function _renderPlain(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000, data);
  },
      _renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
  },
      _renderComplexString = function _renderComplexString(ratio, data) {
    var pt = data._pt,
        s = "";

    if (!ratio && data.b) {
      //b = beginning string
      s = data.b;
    } else if (ratio === 1 && data.e) {
      //e = ending string
      s = data.e;
    } else {
      while (pt) {
        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

        pt = pt._next;
      }

      s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
    }

    data.set(data.t, data.p, s, data);
  },
      _renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;

    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }
  },
      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
    var pt = this._pt,
        next;

    while (pt) {
      next = pt._next;

      if (pt.p === property) {
        pt.modifier(modifier, tween, target);
      }

      pt = next;
    }
  },
      _killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt,
        hasNonDependentRemaining,
        next;

    while (pt) {
      next = pt._next;

      if (pt.p === property && !pt.op || pt.op === property) {
        _removeLinkedListItem(this, pt, "_pt");
      } else if (!pt.dep) {
        hasNonDependentRemaining = 1;
      }

      pt = next;
    }

    return !hasNonDependentRemaining;
  },
      _setterWithModifier = function _setterWithModifier(target, property, value, data) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
  },
      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
    var pt = parent._pt,
        next,
        pt2,
        first,
        last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

    while (pt) {
      next = pt._next;
      pt2 = first;

      while (pt2 && pt2.pr > pt.pr) {
        pt2 = pt2._next;
      }

      if (pt._prev = pt2 ? pt2._prev : last) {
        pt._prev._next = pt;
      } else {
        first = pt;
      }

      if (pt._next = pt2) {
        pt2._prev = pt;
      } else {
        last = pt;
      }

      pt = next;
    }

    parent._pt = first;
  }; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)


  var PropTween = /*#__PURE__*/function () {
    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
      this.t = target;
      this.s = start;
      this.c = change;
      this.p = prop;
      this.r = renderer || _renderPlain;
      this.d = data || this;
      this.set = setter || _setterPlain;
      this.pr = priority || 0;
      this._next = next;

      if (next) {
        next._prev = this;
      }
    }

    var _proto4 = PropTween.prototype;

    _proto4.modifier = function modifier(func, tween, target) {
      this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

      this.set = _setterWithModifier;
      this.m = func;
      this.mt = target; //modifier target

      this.tween = tween;
    };

    return PropTween;
  }(); //Initialization tasks

  _forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
    return _reservedProps[name] = 1;
  });

  _globals.TweenMax = _globals.TweenLite = Tween;
  _globals.TimelineLite = _globals.TimelineMax = Timeline;
  _globalTimeline = new Timeline({
    sortChildren: false,
    defaults: _defaults,
    autoRemoveChildren: true,
    id: "root",
    smoothChildTiming: true
  });
  _config.stringFilter = _colorStringFilter;
  /*
   * --------------------------------------------------------------------------------------
   * GSAP
   * --------------------------------------------------------------------------------------
   */

  var _gsap = {
    registerPlugin: function registerPlugin() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      args.forEach(function (config) {
        return _createPlugin(config);
      });
    },
    timeline: function timeline(vars) {
      return new Timeline(vars);
    },
    getTweensOf: function getTweensOf(targets, onlyActive) {
      return _globalTimeline.getTweensOf(targets, onlyActive);
    },
    getProperty: function getProperty(target, property, unit, uncache) {
      if (_isString(target)) {
        //in case selector text or an array is passed in
        target = toArray(target)[0];
      }

      var getter = _getCache(target || {}).get,
          format = unit ? _passThrough : _numericIfPossible;

      if (unit === "native") {
        unit = "";
      }

      return !target ? target : !property ? function (property, unit, uncache) {
        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    },
    quickSetter: function quickSetter(target, property, unit) {
      target = toArray(target);

      if (target.length > 1) {
        var setters = target.map(function (t) {
          return gsap.quickSetter(t, property, unit);
        }),
            l = setters.length;
        return function (value) {
          var i = l;

          while (i--) {
            setters[i](value);
          }
        };
      }

      target = target[0] || {};

      var Plugin = _plugins[property],
          cache = _getCache(target),
          p = cache.harness && (cache.harness.aliases || {})[property] || property,
          // in case it's an alias, like "rotate" for "rotation".
      setter = Plugin ? function (value) {
        var p = new Plugin();
        _quickTween._pt = 0;
        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
        p.render(1, p);
        _quickTween._pt && _renderPropTweens(1, _quickTween);
      } : cache.set(target, p);

      return Plugin ? setter : function (value) {
        return setter(target, p, unit ? value + unit : value, cache, 1);
      };
    },
    isTweening: function isTweening(targets) {
      return _globalTimeline.getTweensOf(targets, true).length > 0;
    },
    defaults: function defaults(value) {
      if (value && value.ease) {
        value.ease = _parseEase(value.ease, _defaults.ease);
      }

      return _mergeDeep(_defaults, value || {});
    },
    config: function config(value) {
      return _mergeDeep(_config, value || {});
    },
    registerEffect: function registerEffect(_ref) {
      var name = _ref.name,
          effect = _ref.effect,
          plugins = _ref.plugins,
          defaults = _ref.defaults,
          extendTimeline = _ref.extendTimeline;
      (plugins || "").split(",").forEach(function (pluginName) {
        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
      });

      _effects[name] = function (targets, vars, tl) {
        return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
      };

      if (extendTimeline) {
        Timeline.prototype[name] = function (targets, vars, position) {
          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
        };
      }
    },
    registerEase: function registerEase(name, ease) {
      _easeMap[name] = _parseEase(ease);
    },
    parseEase: function parseEase(ease, defaultEase) {
      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
    },
    getById: function getById(id) {
      return _globalTimeline.getById(id);
    },
    exportRoot: function exportRoot(vars, includeDelayedCalls) {
      if (vars === void 0) {
        vars = {};
      }

      var tl = new Timeline(vars),
          child,
          next;
      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

      _globalTimeline.remove(tl);

      tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

      tl._time = tl._tTime = _globalTimeline._time;
      child = _globalTimeline._first;

      while (child) {
        next = child._next;

        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
          _addToTimeline(tl, child, child._start - child._delay);
        }

        child = next;
      }

      _addToTimeline(_globalTimeline, tl, 0);

      return tl;
    },
    utils: {
      wrap: wrap,
      wrapYoyo: wrapYoyo,
      distribute: distribute,
      random: random,
      snap: snap,
      normalize: normalize,
      getUnit: getUnit,
      clamp: clamp,
      splitColor: splitColor,
      toArray: toArray,
      mapRange: mapRange,
      pipe: pipe,
      unitize: unitize,
      interpolate: interpolate$1,
      shuffle: shuffle
    },
    install: _install,
    effects: _effects,
    ticker: _ticker,
    updateRoot: Timeline.updateRoot,
    plugins: _plugins,
    globalTimeline: _globalTimeline,
    core: {
      PropTween: PropTween,
      globals: _addGlobal,
      Tween: Tween,
      Timeline: Timeline,
      Animation: Animation,
      getCache: _getCache,
      _removeLinkedListItem: _removeLinkedListItem
    }
  };

  _forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
    return _gsap[name] = Tween[name];
  });

  _ticker.add(Timeline.updateRoot);

  _quickTween = _gsap.to({}, {
    duration: 0
  }); // ---- EXTRA PLUGINS --------------------------------------------------------

  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;

    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
      pt = pt._next;
    }

    return pt;
  },
      _addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets,
        p,
        i,
        pt;

    for (p in modifiers) {
      i = targets.length;

      while (i--) {
        pt = tween._ptLookup[i][p];

        if (pt && (pt = pt.d)) {
          if (pt._pt) {
            // is a plugin
            pt = _getPluginPropTween(pt, p);
          }

          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
        }
      }
    }
  },
      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
      name: name,
      rawVars: 1,
      //don't pre-process function-based values or "random()" strings.
      init: function init(target, vars, tween) {
        tween._onInit = function (tween) {
          var temp, p;

          if (_isString(vars)) {
            temp = {};

            _forEachName(vars, function (name) {
              return temp[name] = 1;
            }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.


            vars = temp;
          }

          if (modifier) {
            temp = {};

            for (p in vars) {
              temp[p] = modifier(vars[p]);
            }

            vars = temp;
          }

          _addModifiers(tween, vars);
        };
      }
    };
  }; //register core plugins


  var gsap = _gsap.registerPlugin({
    name: "attr",
    init: function init(target, vars, tween, index, targets) {
      var p, pt;

      for (p in vars) {
        pt = this.add(target, "setAttribute", (target.getAttribute(p) || 0) + "", vars[p], index, targets, 0, 0, p);
        pt && (pt.op = p); //this.add(target, "setAttribute", (target.getAttribute((p in target.dataset ? (p = "data-" + p) : p)) || 0) + "", vars[p], index, targets, 0, 0, p);

        this._props.push(p);
      }
    }
  }, {
    name: "endArray",
    init: function init(target, value) {
      var i = value.length;

      while (i--) {
        this.add(target, i, target[i] || 0, value[i]);
      }
    }
  }, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

  Tween.version = Timeline.version = gsap.version = "3.4.0";
  _coreReady = 1;

  if (_windowExists()) {
    _wake();
  }

  /*!
   * CSSPlugin 3.4.0
   * https://greensock.com
   *
   * Copyright 2008-2020, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */

  var _win$1,
      _doc$1,
      _docElement,
      _pluginInitted,
      _tempDiv,
      _tempDivStyler,
      _recentSetterPlugin,
      _windowExists$1 = function _windowExists() {
    return typeof window !== "undefined";
  },
      _transformProps = {},
      _RAD2DEG = 180 / Math.PI,
      _DEG2RAD = Math.PI / 180,
      _atan2 = Math.atan2,
      _bigNum$1 = 1e8,
      _capsExp = /([A-Z])/g,
      _horizontalExp = /(?:left|right|width|margin|padding|x)/i,
      _complexExp = /[\s,\(]\S/,
      _propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
  },
      _renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
  },
      //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
  _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
  },
      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
  },
      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
  },
      _setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return target.style[property] = value;
  },
      _setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
  },
      _setterTransform = function _setterTransform(target, property, value) {
    return target._gsap[property] = value;
  },
      _setterScale = function _setterScale(target, property, value) {
    return target._gsap.scaleX = target._gsap.scaleY = value;
  },
      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
  },
      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
  },
      _transformProp = "transform",
      _transformOriginProp = _transformProp + "Origin",
      _supports3D,
      _createElement = function _createElement(type, ns) {
    var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc$1.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

    return e.style ? e : _doc$1.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
  },
      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
    var cs = getComputedStyle(target);
    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
  },
      _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
    var e = element || _tempDiv,
        s = e.style,
        i = 5;

    if (property in s && !preferPrefix) {
      return property;
    }

    property = property.charAt(0).toUpperCase() + property.substr(1);

    while (i-- && !(_prefixes[i] + property in s)) {}

    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
  },
      _initCore = function _initCore() {
    if (_windowExists$1() && window.document) {
      _win$1 = window;
      _doc$1 = _win$1.document;
      _docElement = _doc$1.documentElement;
      _tempDiv = _createElement("div") || {
        style: {}
      };
      _tempDivStyler = _createElement("div");
      _transformProp = _checkPropPrefix(_transformProp);
      _transformOriginProp = _transformProp + "Origin";
      _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

      _supports3D = !!_checkPropPrefix("perspective");
      _pluginInitted = 1;
    }
  },
      _getBBoxHack = function _getBBoxHack(swapIfPossible) {
    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
    var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
        oldParent = this.parentNode,
        oldSibling = this.nextSibling,
        oldCSS = this.style.cssText,
        bbox;

    _docElement.appendChild(svg);

    svg.appendChild(this);
    this.style.display = "block";

    if (swapIfPossible) {
      try {
        bbox = this.getBBox();
        this._gsapBBox = this.getBBox; //store the original

        this.getBBox = _getBBoxHack;
      } catch (e) {}
    } else if (this._gsapBBox) {
      bbox = this._gsapBBox();
    }

    if (oldParent) {
      if (oldSibling) {
        oldParent.insertBefore(this, oldSibling);
      } else {
        oldParent.appendChild(this);
      }
    }

    _docElement.removeChild(svg);

    this.style.cssText = oldCSS;
    return bbox;
  },
      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
    var i = attributesArray.length;

    while (i--) {
      if (target.hasAttribute(attributesArray[i])) {
        return target.getAttribute(attributesArray[i]);
      }
    }
  },
      _getBBox = function _getBBox(target) {
    var bounds;

    try {
      bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
    } catch (error) {
      bounds = _getBBoxHack.call(target, true);
    }

    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

    return bounds && !bounds.width && !bounds.x && !bounds.y ? {
      x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
      y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
      width: 0,
      height: 0
    } : bounds;
  },
      _isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
  },
      //reports if the element is an SVG on which getBBox() actually works
  _removeProperty = function _removeProperty(target, property) {
    if (property) {
      var style = target.style;

      if (property in _transformProps && property !== _transformOriginProp) {
        property = _transformProp;
      }

      if (style.removeProperty) {
        if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
          //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
          property = "-" + property;
        }

        style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
      } else {
        //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
        style.removeAttribute(property);
      }
    }
  },
      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;

    plugin._props.push(property);

    return pt;
  },
      _nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1
  },
      //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
  _convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0,
        curUnit = (value + "").trim().substr((curValue + "").length) || "px",
        // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
    style = _tempDiv.style,
        horizontal = _horizontalExp.test(property),
        isRootSVG = target.tagName.toLowerCase() === "svg",
        measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
        amount = 100,
        toPixels = unit === "px",
        toPercent = unit === "%",
        px,
        parent,
        cache,
        isSVG;

    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
      return curValue;
    }

    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && _isSVG(target);

    if (toPercent && (_transformProps[property] || ~property.indexOf("adius"))) {
      //transforms and borderRadius are relative to the size of the element itself!
      return _round(curValue / (isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty]) * amount);
    }

    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
    parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;

    if (isSVG) {
      parent = (target.ownerSVGElement || {}).parentNode;
    }

    if (!parent || parent === _doc$1 || !parent.appendChild) {
      parent = _doc$1.body;
    }

    cache = parent._gsap;

    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time) {
      return _round(curValue / cache.width * amount);
    } else {
      (toPercent || curUnit === "%") && (style.position = _getComputedProperty(target, "position"));
      parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

      parent.appendChild(_tempDiv);
      px = _tempDiv[measureProperty];
      parent.removeChild(_tempDiv);
      style.position = "absolute";

      if (horizontal && toPercent) {
        cache = _getCache(parent);
        cache.time = _ticker.time;
        cache.width = parent[measureProperty];
      }
    }

    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
  },
      _get = function _get(target, property, unit, uncache) {
    var value;
    _pluginInitted || _initCore();

    if (property in _propertyAliases && property !== "transform") {
      property = _propertyAliases[property];

      if (~property.indexOf(",")) {
        property = property.split(",")[0];
      }
    }

    if (_transformProps[property] && property !== "transform") {
      value = _parseTransform(target, uncache);
      value = property !== "transformOrigin" ? value[property] : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
    } else {
      value = target.style[property];

      if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
      }
    }

    return unit && !~(value + "").indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
  },
      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
    //note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    if (!start || start === "none") {
      // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/
      var p = _checkPropPrefix(prop, target, 1),
          s = p && _getComputedProperty(target, p, 1);

      if (s && s !== start) {
        prop = p;
        start = s;
      } else if (prop === "borderColor") {
        start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
      }
    }

    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
        index = 0,
        matchIndex = 0,
        a,
        result,
        startValues,
        startNum,
        color,
        startValue,
        endValue,
        endNum,
        chunk,
        endUnit,
        startUnit,
        relative,
        endValues;
    pt.b = start;
    pt.e = end;
    start += ""; //ensure values are strings

    end += "";

    if (end === "auto") {
      target.style[prop] = end;
      end = _getComputedProperty(target, prop) || end;
      target.style[prop] = start;
    }

    a = [start, end];

    _colorStringFilter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().


    start = a[0];
    end = a[1];
    startValues = start.match(_numWithUnitExp) || [];
    endValues = end.match(_numWithUnitExp) || [];

    if (endValues.length) {
      while (result = _numWithUnitExp.exec(end)) {
        endValue = result[0];
        chunk = end.substring(index, result.index);

        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
          color = 1;
        }

        if (endValue !== (startValue = startValues[matchIndex++] || "")) {
          startNum = parseFloat(startValue) || 0;
          startUnit = startValue.substr((startNum + "").length);
          relative = endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;

          if (relative) {
            endValue = endValue.substr(2);
          }

          endNum = parseFloat(endValue);
          endUnit = endValue.substr((endNum + "").length);
          index = _numWithUnitExp.lastIndex - endUnit.length;

          if (!endUnit) {
            //if something like "perspective:300" is passed in and we must add a unit to the end
            endUnit = endUnit || _config.units[prop] || startUnit;

            if (index === end.length) {
              end += endUnit;
              pt.e += endUnit;
            }
          }

          if (startUnit !== endUnit) {
            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
          } //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.


          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
            s: startNum,
            c: relative ? relative * endNum : endNum - startNum,
            m: color && color < 4 ? Math.round : 0
          };
        }
      }

      pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
    } else {
      pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
    }

    if (_relExp.test(end)) {
      pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
    }

    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

    return pt;
  },
      _keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
  },
      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
    var split = value.split(" "),
        x = split[0],
        y = split[1] || "50%";

    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
      //the user provided them in the wrong order, so flip them
      value = x;
      x = y;
      y = value;
    }

    split[0] = _keywordToPercent[x] || x;
    split[1] = _keywordToPercent[y] || y;
    return split.join(" ");
  },
      _renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
      var target = data.t,
          style = target.style,
          props = data.u,
          cache = target._gsap,
          prop,
          clearTransforms,
          i;

      if (props === "all" || props === true) {
        style.cssText = "";
        clearTransforms = 1;
      } else {
        props = props.split(",");
        i = props.length;

        while (--i > -1) {
          prop = props[i];

          if (_transformProps[prop]) {
            clearTransforms = 1;
            prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
          }

          _removeProperty(target, prop);
        }
      }

      if (clearTransforms) {
        _removeProperty(target, _transformProp);

        if (cache) {
          cache.svg && target.removeAttribute("transform");

          _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.


          cache.uncache = 1;
        }
      }
    }
  },
      // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
  _specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
      if (tween.data !== "isFromStart") {
        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
        pt.u = endValue;
        pt.pr = -10;
        pt.tween = tween;

        plugin._props.push(property);

        return 1;
      }
    }
    /* className feature (about 0.4kb gzipped).
    , className(plugin, target, property, endValue, tween) {
    	let _renderClassName = (ratio, data) => {
    			data.css.render(ratio, data.css);
    			if (!ratio || ratio === 1) {
    				let inline = data.rmv,
    					target = data.t,
    					p;
    				target.setAttribute("class", ratio ? data.e : data.b);
    				for (p in inline) {
    					_removeProperty(target, p);
    				}
    			}
    		},
    		_getAllStyles = (target) => {
    			let styles = {},
    				computed = getComputedStyle(target),
    				p;
    			for (p in computed) {
    				if (isNaN(p) && p !== "cssText" && p !== "length") {
    					styles[p] = computed[p];
    				}
    			}
    			_setDefaults(styles, _parseTransform(target, 1));
    			return styles;
    		},
    		startClassList = target.getAttribute("class"),
    		style = target.style,
    		cssText = style.cssText,
    		cache = target._gsap,
    		classPT = cache.classPT,
    		inlineToRemoveAtEnd = {},
    		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
    		changingVars = {},
    		startVars = _getAllStyles(target),
    		transformRelated = /(transform|perspective)/i,
    		endVars, p;
    	if (classPT) {
    		classPT.r(1, classPT.d);
    		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
    	}
    	target.setAttribute("class", data.e);
    	endVars = _getAllStyles(target, true);
    	target.setAttribute("class", startClassList);
    	for (p in endVars) {
    		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
    			changingVars[p] = endVars[p];
    			if (!style[p] && style[p] !== "0") {
    				inlineToRemoveAtEnd[p] = 1;
    			}
    		}
    	}
    	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
    	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
    		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
    	}
    	_parseTransform(target, true); //to clear the caching of transforms
    	data.css = new gsap.plugins.css();
    	data.css.init(target, changingVars, tween);
    	plugin._props.push(...data.css._props);
    	return 1;
    }
    */

  },

  /*
   * --------------------------------------------------------------------------------------
   * TRANSFORMS
   * --------------------------------------------------------------------------------------
   */
  _identity2DMatrix = [1, 0, 0, 1, 0, 0],
      _rotationalProperties = {},
      _isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
  },
      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
    var matrixString = _getComputedProperty(target, _transformProp);

    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
  },
      _getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || _getCache(target),
        style = target.style,
        matrix = _getComputedTransformMatrixAsArray(target),
        parent,
        nextSibling,
        temp,
        addedToDOM;

    if (cache.svg && target.getAttribute("transform")) {
      temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
      //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
      //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
      temp = style.display;
      style.display = "block";
      parent = target.parentNode;

      if (!parent || !target.offsetParent) {
        // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
        addedToDOM = 1; //flag

        nextSibling = target.nextSibling;

        _docElement.appendChild(target); //we must add it to the DOM in order to get values properly

      }

      matrix = _getComputedTransformMatrixAsArray(target);
      temp ? style.display = temp : _removeProperty(target, "display");

      if (addedToDOM) {
        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
      }
    }

    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
  },
      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
    var cache = target._gsap,
        matrix = matrixArray || _getMatrix(target, true),
        xOriginOld = cache.xOrigin || 0,
        yOriginOld = cache.yOrigin || 0,
        xOffsetOld = cache.xOffset || 0,
        yOffsetOld = cache.yOffset || 0,
        a = matrix[0],
        b = matrix[1],
        c = matrix[2],
        d = matrix[3],
        tx = matrix[4],
        ty = matrix[5],
        originSplit = origin.split(" "),
        xOrigin = parseFloat(originSplit[0]) || 0,
        yOrigin = parseFloat(originSplit[1]) || 0,
        bounds,
        determinant,
        x,
        y;

    if (!originIsAbsolute) {
      bounds = _getBBox(target);
      xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
      //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
      xOrigin = x;
      yOrigin = y;
    }

    if (smooth || smooth !== false && cache.smooth) {
      tx = xOrigin - xOriginOld;
      ty = yOrigin - yOriginOld;
      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else {
      cache.xOffset = cache.yOffset = 0;
    }

    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

    if (pluginToAddPropTweensTo) {
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
    }

    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
  },
      _parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new GSCache(target);

    if ("x" in cache && !uncache && !cache.uncache) {
      return cache;
    }

    var style = target.style,
        invertedScaleX = cache.scaleX < 0,
        px = "px",
        deg = "deg",
        origin = _getComputedProperty(target, _transformOriginProp) || "0",
        x,
        y,
        z,
        scaleX,
        scaleY,
        rotation,
        rotationX,
        rotationY,
        skewX,
        skewY,
        perspective,
        xOrigin,
        yOrigin,
        matrix,
        angle,
        cos,
        sin,
        a,
        b,
        c,
        d,
        a12,
        a22,
        t1,
        t2,
        t3,
        a13,
        a23,
        a33,
        a42,
        a43,
        a32;
    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && _isSVG(target));
    matrix = _getMatrix(target, cache.svg);

    if (cache.svg) {
      t1 = !cache.uncache && target.getAttribute("data-svg-origin");

      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
    }

    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;

    if (matrix !== _identity2DMatrix) {
      a = matrix[0]; //a11

      b = matrix[1]; //a21

      c = matrix[2]; //a31

      d = matrix[3]; //a41

      x = a12 = matrix[4];
      y = a22 = matrix[5]; //2D matrix

      if (matrix.length === 6) {
        scaleX = Math.sqrt(a * a + b * b);
        scaleY = Math.sqrt(d * d + c * c);
        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
        skewX && (scaleY *= Math.cos(skewX * _DEG2RAD));

        if (cache.svg) {
          x -= xOrigin - (xOrigin * a + yOrigin * c);
          y -= yOrigin - (xOrigin * b + yOrigin * d);
        } //3D matrix

      } else {
        a32 = matrix[6];
        a42 = matrix[7];
        a13 = matrix[8];
        a23 = matrix[9];
        a33 = matrix[10];
        a43 = matrix[11];
        x = matrix[12];
        y = matrix[13];
        z = matrix[14];
        angle = _atan2(a32, a33);
        rotationX = angle * _RAD2DEG; //rotationX

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a12 * cos + a13 * sin;
          t2 = a22 * cos + a23 * sin;
          t3 = a32 * cos + a33 * sin;
          a13 = a12 * -sin + a13 * cos;
          a23 = a22 * -sin + a23 * cos;
          a33 = a32 * -sin + a33 * cos;
          a43 = a42 * -sin + a43 * cos;
          a12 = t1;
          a22 = t2;
          a32 = t3;
        } //rotationY


        angle = _atan2(-c, a33);
        rotationY = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a * cos - a13 * sin;
          t2 = b * cos - a23 * sin;
          t3 = c * cos - a33 * sin;
          a43 = d * sin + a43 * cos;
          a = t1;
          b = t2;
          c = t3;
        } //rotationZ


        angle = _atan2(b, a);
        rotation = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(angle);
          sin = Math.sin(angle);
          t1 = a * cos + b * sin;
          t2 = a12 * cos + a22 * sin;
          b = b * cos - a * sin;
          a22 = a22 * cos - a12 * sin;
          a = t1;
          a12 = t2;
        }

        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
          //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
          rotationX = rotation = 0;
          rotationY = 180 - rotationY;
        }

        scaleX = _round(Math.sqrt(a * a + b * b + c * c));
        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
        angle = _atan2(a12, a22);
        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
      }

      if (cache.svg) {
        //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
        t1 = target.getAttribute("transform");
        cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
        t1 && target.setAttribute("transform", t1);
      }
    }

    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
      if (invertedScaleX) {
        scaleX *= -1;
        skewX += rotation <= 0 ? 180 : -180;
        rotation += rotation <= 0 ? 180 : -180;
      } else {
        scaleY *= -1;
        skewX += skewX <= 0 ? 180 : -180;
      }
    }

    cache.x = ((cache.xPercent = x && Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0) ? 0 : x) + px;
    cache.y = ((cache.yPercent = y && Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0) ? 0 : y) + px;
    cache.z = z + px;
    cache.scaleX = _round(scaleX);
    cache.scaleY = _round(scaleY);
    cache.rotation = _round(rotation) + deg;
    cache.rotationX = _round(rotationX) + deg;
    cache.rotationY = _round(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;

    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
      style[_transformOriginProp] = _firstTwoOnly(origin);
    }

    cache.xOffset = cache.yOffset = 0;
    cache.force3D = _config.force3D;
    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
  },
      _firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
  },
      //for handling transformOrigin values, stripping out the 3rd dimension
  _addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = getUnit(start);
    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
  },
      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;

    _renderCSSTransforms(ratio, cache);
  },
      _zeroDeg = "0deg",
      _zeroPx = "0px",
      _endParenthesis = ") ",
      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this,
        xPercent = _ref.xPercent,
        yPercent = _ref.yPercent,
        x = _ref.x,
        y = _ref.y,
        z = _ref.z,
        rotation = _ref.rotation,
        rotationY = _ref.rotationY,
        rotationX = _ref.rotationX,
        skewX = _ref.skewX,
        skewY = _ref.skewY,
        scaleX = _ref.scaleX,
        scaleY = _ref.scaleY,
        transformPerspective = _ref.transformPerspective,
        force3D = _ref.force3D,
        target = _ref.target,
        zOrigin = _ref.zOrigin,
        transforms = "",
        use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)


    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
      var angle = parseFloat(rotationY) * _DEG2RAD,
          a13 = Math.sin(angle),
          a33 = Math.cos(angle),
          cos;

      angle = parseFloat(rotationX) * _DEG2RAD;
      cos = Math.cos(angle);
      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }

    if (transformPerspective !== _zeroPx) {
      transforms += "perspective(" + transformPerspective + _endParenthesis;
    }

    if (xPercent || yPercent) {
      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    }

    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
      transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
    }

    if (rotation !== _zeroDeg) {
      transforms += "rotate(" + rotation + _endParenthesis;
    }

    if (rotationY !== _zeroDeg) {
      transforms += "rotateY(" + rotationY + _endParenthesis;
    }

    if (rotationX !== _zeroDeg) {
      transforms += "rotateX(" + rotationX + _endParenthesis;
    }

    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
    }

    if (scaleX !== 1 || scaleY !== 1) {
      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
    }

    target.style[_transformProp] = transforms || "translate(0, 0)";
  },
      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this,
        xPercent = _ref2.xPercent,
        yPercent = _ref2.yPercent,
        x = _ref2.x,
        y = _ref2.y,
        rotation = _ref2.rotation,
        skewX = _ref2.skewX,
        skewY = _ref2.skewY,
        scaleX = _ref2.scaleX,
        scaleY = _ref2.scaleY,
        target = _ref2.target,
        xOrigin = _ref2.xOrigin,
        yOrigin = _ref2.yOrigin,
        xOffset = _ref2.xOffset,
        yOffset = _ref2.yOffset,
        forceCSS = _ref2.forceCSS,
        tx = parseFloat(x),
        ty = parseFloat(y),
        a11,
        a21,
        a12,
        a22,
        temp;

    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);

    if (skewY) {
      //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
      skewY = parseFloat(skewY);
      skewX += skewY;
      rotation += skewY;
    }

    if (rotation || skewX) {
      rotation *= _DEG2RAD;
      skewX *= _DEG2RAD;
      a11 = Math.cos(rotation) * scaleX;
      a21 = Math.sin(rotation) * scaleX;
      a12 = Math.sin(rotation - skewX) * -scaleY;
      a22 = Math.cos(rotation - skewX) * scaleY;

      if (skewX) {
        skewY *= _DEG2RAD;
        temp = Math.tan(skewX - skewY);
        temp = Math.sqrt(1 + temp * temp);
        a12 *= temp;
        a22 *= temp;

        if (skewY) {
          temp = Math.tan(skewY);
          temp = Math.sqrt(1 + temp * temp);
          a11 *= temp;
          a21 *= temp;
        }
      }

      a11 = _round(a11);
      a21 = _round(a21);
      a12 = _round(a12);
      a22 = _round(a22);
    } else {
      a11 = scaleX;
      a22 = scaleY;
      a21 = a12 = 0;
    }

    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
      tx = _convertToUnit(target, "x", x, "px");
      ty = _convertToUnit(target, "y", y, "px");
    }

    if (xOrigin || yOrigin || xOffset || yOffset) {
      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }

    if (xPercent || yPercent) {
      //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
      temp = target.getBBox();
      tx = _round(tx + xPercent / 100 * temp.width);
      ty = _round(ty + yPercent / 100 * temp.height);
    }

    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
    target.setAttribute("transform", temp);

    if (forceCSS) {
      //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the  transform attribute changes!)
      target.style[_transformProp] = temp;
    }
  },
      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue, relative) {
    var cap = 360,
        isString = _isString(endValue),
        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
        change = relative ? endNum * relative : endNum - startNum,
        finalValue = startNum + change + "deg",
        direction,
        pt;

    if (isString) {
      direction = endValue.split("_")[1];

      if (direction === "short") {
        change %= cap;

        if (change !== change % (cap / 2)) {
          change += change < 0 ? cap : -cap;
        }
      }

      if (direction === "cw" && change < 0) {
        change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;
      } else if (direction === "ccw" && change > 0) {
        change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;
      }
    }

    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
    pt.e = finalValue;
    pt.u = "deg";

    plugin._props.push(property);

    return pt;
  },
      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
    //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
    var style = _tempDivStyler.style,
        startCache = target._gsap,
        exclude = "perspective,force3D,transformOrigin,svgOrigin",
        endCache,
        p,
        startValue,
        endValue,
        startNum,
        endNum,
        startUnit,
        endUnit;
    style.cssText = getComputedStyle(target).cssText + ";position:absolute;display:block;"; //%-based translations will fail unless we set the width/height to match the original target (and padding/borders can affect it)

    style[_transformProp] = transforms;

    _doc$1.body.appendChild(_tempDivStyler);

    endCache = _parseTransform(_tempDivStyler, 1);

    for (p in _transformProps) {
      startValue = startCache[p];
      endValue = endCache[p];

      if (startValue !== endValue && exclude.indexOf(p) < 0) {
        //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
        startUnit = getUnit(startValue);
        endUnit = getUnit(endValue);
        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
        endNum = parseFloat(endValue);
        plugin._pt = new PropTween(plugin._pt, startCache, p, startNum, endNum - startNum, _renderCSSProp);
        plugin._pt.u = endUnit || 0;

        plugin._props.push(p);
      }
    }

    _doc$1.body.removeChild(_tempDivStyler);
  }; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.


  _forEachName("padding,margin,Width,Radius", function (name, index) {
    var t = "Top",
        r = "Right",
        b = "Bottom",
        l = "Left",
        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
      return index < 2 ? name + side : "border" + side + name;
    });

    _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
      var a, vars;

      if (arguments.length < 4) {
        // getter, passed target, property, and unit (from _get())
        a = props.map(function (prop) {
          return _get(plugin, prop, property);
        });
        vars = a.join(" ");
        return vars.split(a[0]).length === 5 ? a[0] : vars;
      }

      a = (endValue + "").split(" ");
      vars = {};
      props.forEach(function (prop, i) {
        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
      });
      plugin.init(target, vars, tween);
    };
  });

  var CSSPlugin = {
    name: "css",
    register: _initCore,
    targetTest: function targetTest(target) {
      return target.style && target.nodeType;
    },
    init: function init(target, vars, tween, index, targets) {
      var props = this._props,
          style = target.style,
          startValue,
          endValue,
          endNum,
          startNum,
          type,
          specialProp,
          p,
          startUnit,
          endUnit,
          relative,
          isTransformRelated,
          transformPropTween,
          cache,
          smooth,
          hasPriority;

      if (!_pluginInitted) {
        _initCore();
      }

      for (p in vars) {
        if (p === "autoRound") {
          continue;
        }

        endValue = vars[p];

        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {
          //plugins
          continue;
        }

        type = typeof endValue;
        specialProp = _specialProps[p];

        if (type === "function") {
          endValue = endValue.call(tween, index, target, targets);
          type = typeof endValue;
        }

        if (type === "string" && ~endValue.indexOf("random(")) {
          endValue = _replaceRandom(endValue);
        }

        if (specialProp) {
          if (specialProp(this, target, p, endValue, tween)) {
            hasPriority = 1;
          }
        } else if (p.substr(0, 2) === "--") {
          //CSS variable
          this.add(style, "setProperty", getComputedStyle(target).getPropertyValue(p) + "", endValue + "", index, targets, 0, 0, p);
        } else {
          startValue = _get(target, p);
          startNum = parseFloat(startValue);
          relative = type === "string" && endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;

          if (relative) {
            endValue = endValue.substr(2);
          }

          endNum = parseFloat(endValue);

          if (p in _propertyAliases) {
            if (p === "autoAlpha") {
              //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
              if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
                //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
                startNum = 0;
              }

              _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
            }

            if (p !== "scale" && p !== "transform") {
              p = _propertyAliases[p];

              if (~p.indexOf(",")) {
                p = p.split(",")[0];
              }
            }
          }

          isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

          if (isTransformRelated) {
            if (!transformPropTween) {
              cache = target._gsap;
              cache.renderTransform || _parseTransform(target); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

              smooth = vars.smoothOrigin !== false && cache.smooth;
              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

              transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
            }

            if (p === "scale") {
              this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, relative ? relative * endNum : endNum - cache.scaleY);
              props.push("scaleY", p);
              p += "X";
            } else if (p === "transformOrigin") {
              endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

              if (cache.svg) {
                _applySVGOrigin(target, endValue, 0, smooth, 0, this);
              } else {
                endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

                if (endUnit !== cache.zOrigin) {
                  _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
                }

                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
              }

              continue;
            } else if (p === "svgOrigin") {
              _applySVGOrigin(target, endValue, 1, smooth, 0, this);

              continue;
            } else if (p in _rotationalProperties) {
              _addRotationalPropTween(this, cache, p, startNum, endValue, relative);

              continue;
            } else if (p === "smoothOrigin") {
              _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);

              continue;
            } else if (p === "force3D") {
              cache[p] = endValue;
              continue;
            } else if (p === "transform") {
              _addRawTransformPTs(this, endValue, target);

              continue;
            }
          } else if (!(p in style)) {
            p = _checkPropPrefix(p) || p;
          }

          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
            startUnit = (startValue + "").substr((startNum + "").length);
            endNum || (endNum = 0); // protect against NaN

            endUnit = (endValue + "").substr((endNum + "").length) || (p in _config.units ? _config.units[p] : startUnit);

            if (startUnit !== endUnit) {
              startNum = _convertToUnit(target, p, startValue, endUnit);
            }

            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, relative ? relative * endNum : endNum - startNum, endUnit === "px" && vars.autoRound !== false && !isTransformRelated ? _renderRoundedCSSProp : _renderCSSProp);
            this._pt.u = endUnit || 0;

            if (startUnit !== endUnit) {
              //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
              this._pt.b = startValue;
              this._pt.r = _renderCSSPropWithBeginning;
            }
          } else if (!(p in style)) {
            if (p in target) {
              //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
              this.add(target, p, target[p], endValue, index, targets);
            } else {
              _missingPlugin(p, endValue);

              continue;
            }
          } else {
            _tweenComplexCSSString.call(this, target, p, startValue, endValue);
          }

          props.push(p);
        }
      }

      if (hasPriority) {
        _sortPropTweensByPriority(this);
      }
    },
    get: _get,
    aliases: _propertyAliases,
    getSetter: function getSetter(target, property, plugin) {
      //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
      var p = _propertyAliases[property];
      p && p.indexOf(",") < 0 && (property = p);
      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
    },
    core: {
      _removeProperty: _removeProperty,
      _getMatrix: _getMatrix
    }
  };
  gsap.utils.checkPrefix = _checkPropPrefix;

  (function (positionAndScale, rotation, others, aliases) {
    var all = _forEachName(positionAndScale + "," + rotation + "," + others, function (name) {
      _transformProps[name] = 1;
    });

    _forEachName(rotation, function (name) {
      _config.units[name] = "deg";
      _rotationalProperties[name] = 1;
    });

    _propertyAliases[all[13]] = positionAndScale + "," + rotation;

    _forEachName(aliases, function (name) {
      var split = name.split(":");
      _propertyAliases[split[1]] = all[split[0]];
    });
  })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");

  _forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
    _config.units[name] = "px";
  });

  gsap.registerPlugin(CSSPlugin);

  var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap, // to protect from tree shaking
  	TweenMaxWithCSS = gsapWithCSS.core.Tween;

  /*!
   * paths 3.4.0
   * https://greensock.com
   *
   * Copyright 2008-2020, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  /* eslint-disable */

  let _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
  	_numbersExp = /(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
  	_scientific = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/ig,
  	_selectorExp = /(^[#\.][a-z]|[a-y][a-z])/i,
  	_DEG2RAD$1 = Math.PI / 180,
  	_sin$1 = Math.sin,
  	_cos$1 = Math.cos,
  	_abs = Math.abs,
  	_sqrt$1 = Math.sqrt,
  	_isString$1 = value => typeof(value) === "string",
  	_isNumber$1 = value => typeof(value) === "number",
  	_roundingNum = 1e5,
  	_round$1 = value => (Math.round(value * _roundingNum) / _roundingNum) || 0;

  /* TERMINOLOGY
   - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple "M" commands, defining Segments (paths aren't always connected).
   - Segment - an array containing a sequence of Cubic Bezier coordinates in alternating x, y, x, y format. Starting anchor, then control point 1, control point 2, and ending anchor, then the next control point 1, control point 2, anchor, etc. Uses less memory than an array with a bunch of {x, y} points.
   - Bezier - a single cubic Bezier with a starting anchor, two control points, and an ending anchor.
   - the variable "t" is typically the position along an individual Bezier path (time) and it's NOT linear, meaning it could accelerate/decelerate based on the control points whereas the "p" or "progress" value is linearly mapped to the whole path, so it shouldn't really accelerate/decelerate based on control points. So a progress of 0.2 would be almost exactly 20% along the path. "t" is ONLY in an individual Bezier piece.
   */

  //accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).
  function getRawPath(value) {
  	value = (_isString$1(value) && _selectorExp.test(value)) ? document.querySelector(value) || value : value;
  	let e = value.getAttribute ? value : 0,
  		rawPath;
  	if (e && (value = value.getAttribute("d"))) {
  		//implements caching
  		if (!e._gsPath) {
  			e._gsPath = {};
  		}
  		rawPath = e._gsPath[value];
  		return (rawPath && !rawPath._dirty) ? rawPath : (e._gsPath[value] = stringToRawPath(value));
  	}
  	return !value ? console.warn("Expecting a <path> element or an SVG path data string") : _isString$1(value) ? stringToRawPath(value) : (_isNumber$1(value[0])) ? [value] : value;
  }

  function reverseSegment(segment) {
  	let i = 0,
  		y;
  	segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.
  	for (; i < segment.length; i += 2) {
  		y = segment[i];
  		segment[i] = segment[i+1];
  		segment[i+1] = y;
  	}
  	segment.reversed = !segment.reversed;
  }



  let _createPath = (e, ignore) => {
  		let path = document.createElementNS("http://www.w3.org/2000/svg", "path"),
  			attr = [].slice.call(e.attributes),
  			i = attr.length,
  			name;
  		ignore = "," + ignore + ",";
  		while (--i > -1) {
  			name = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.
  			if (ignore.indexOf("," + name + ",") < 0) {
  				path.setAttributeNS(null, name, attr[i].nodeValue);
  			}
  		}
  		return path;
  	},
  	_typeAttrs = {
  		rect:"rx,ry,x,y,width,height",
  		circle:"r,cx,cy",
  		ellipse:"rx,ry,cx,cy",
  		line:"x1,x2,y1,y2"
  	},
  	_attrToObj = (e, attrs) => {
  		let props = attrs ? attrs.split(",") : [],
  			obj = {},
  			i = props.length;
  		while (--i > -1) {
  			obj[props[i]] = +e.getAttribute(props[i]) || 0;
  		}
  		return obj;
  	};

  //converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.
  function convertToPath(element, swap) {
  	let type = element.tagName.toLowerCase(),
  		circ = 0.552284749831,
  		data, x, y, r, ry, path, rcirc, rycirc, points, w, h, x2, x3, x4, x5, x6, y2, y3, y4, y5, y6, attr;
  	if (type === "path" || !element.getBBox) {
  		return element;
  	}
  	path = _createPath(element, "x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points");
  	attr = _attrToObj(element, _typeAttrs[type]);
  	if (type === "rect") {
  		r = attr.rx;
  		ry = attr.ry || r;
  		x = attr.x;
  		y = attr.y;
  		w = attr.width - r * 2;
  		h = attr.height - ry * 2;
  		if (r || ry) { //if there are rounded corners, render cubic beziers
  			x2 = x + r * (1 - circ);
  			x3 = x + r;
  			x4 = x3 + w;
  			x5 = x4 + r * circ;
  			x6 = x4 + r;
  			y2 = y + ry * (1 - circ);
  			y3 = y + ry;
  			y4 = y3 + h;
  			y5 = y4 + ry * circ;
  			y6 = y4 + ry;
  			data = "M" + x6 + "," + y3 + " V" + y4 + " C" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(",") + "z";
  		} else {
  			data = "M" + (x + w) + "," + y + " v" + h + " h" + (-w) + " v" + (-h) + " h" + w + "z";
  		}

  	} else if (type === "circle" || type === "ellipse") {
  		if (type === "circle") {
  			r = ry = attr.r;
  			rycirc = r * circ;
  		} else {
  			r = attr.rx;
  			ry = attr.ry;
  			rycirc = ry * circ;
  		}
  		x = attr.cx;
  		y = attr.cy;
  		rcirc = r * circ;
  		data = "M" + (x+r) + "," + y + " C" + [x+r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(",") + "z";
  	} else if (type === "line") {
  		data = "M" + attr.x1 + "," + attr.y1 + " L" + attr.x2 + "," + attr.y2; //previously, we just converted to "Mx,y Lx,y" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.
  	} else if (type === "polyline" || type === "polygon") {
  		points = (element.getAttribute("points") + "").match(_numbersExp) || [];
  		x = points.shift();
  		y = points.shift();
  		data = "M" + x + "," + y + " L" + points.join(",");
  		if (type === "polygon") {
  			data += "," + x + "," + y + "z";
  		}
  	}
  	path.setAttribute("d", rawPathToString(path._gsRawPath = stringToRawPath(data)));
  	if (swap && element.parentNode) {
  		element.parentNode.insertBefore(path, element);
  		element.parentNode.removeChild(element);
  	}
  	return path;
  }



  // translates SVG arc data into a segment (cubic beziers). Angle is in degrees.
  function arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {
  	if (lastX === x && lastY === y) {
  		return;
  	}
  	rx = _abs(rx);
  	ry = _abs(ry);
  	let angleRad = (angle % 360) * _DEG2RAD$1,
  		cosAngle = _cos$1(angleRad),
  		sinAngle = _sin$1(angleRad),
  		PI = Math.PI,
  		TWOPI = PI * 2,
  		dx2 = (lastX - x) / 2,
  		dy2 = (lastY - y) / 2,
  		x1 = (cosAngle * dx2 + sinAngle * dy2),
  		y1 = (-sinAngle * dx2 + cosAngle * dy2),
  		x1_sq = x1 * x1,
  		y1_sq = y1 * y1,
  		radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);
  	if (radiiCheck > 1) {
  		rx = _sqrt$1(radiiCheck) * rx;
  		ry = _sqrt$1(radiiCheck) * ry;
  	}
  	let rx_sq = rx * rx,
  		ry_sq = ry * ry,
  		sq = ((rx_sq * ry_sq) - (rx_sq * y1_sq) - (ry_sq * x1_sq)) / ((rx_sq * y1_sq) + (ry_sq * x1_sq));
  	if (sq < 0) {
  		sq = 0;
  	}
  	let coef = ((largeArcFlag === sweepFlag) ? -1 : 1) * _sqrt$1(sq),
  		cx1 = coef * ((rx * y1) / ry),
  		cy1 = coef * -((ry * x1) / rx),
  		sx2 = (lastX + x) / 2,
  		sy2 = (lastY + y) / 2,
  		cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),
  		cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),
  		ux = (x1 - cx1) / rx,
  		uy = (y1 - cy1) / ry,
  		vx = (-x1 - cx1) / rx,
  		vy = (-y1 - cy1) / ry,
  		temp = ux * ux + uy * uy,
  		angleStart = ((uy < 0) ? -1 : 1) * Math.acos(ux / _sqrt$1(temp)),
  		angleExtent = ((ux * vy - uy * vx < 0) ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt$1(temp * (vx * vx + vy * vy)));
  	isNaN(angleExtent) && (angleExtent = PI); //rare edge case. Math.cos(-1) is NaN.
  	if (!sweepFlag && angleExtent > 0) {
  		angleExtent -= TWOPI;
  	} else if (sweepFlag && angleExtent < 0) {
  		angleExtent += TWOPI;
  	}
  	angleStart %= TWOPI;
  	angleExtent %= TWOPI;
  	let segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),
  		rawPath = [],
  		angleIncrement = angleExtent / segments,
  		controlLength = 4 / 3 * _sin$1(angleIncrement / 2) / (1 + _cos$1(angleIncrement / 2)),
  		ma = cosAngle * rx,
  		mb = sinAngle * rx,
  		mc = sinAngle * -ry,
  		md = cosAngle * ry,
  		i;
  	for (i = 0; i < segments; i++) {
  		angle = angleStart + i * angleIncrement;
  		x1 = _cos$1(angle);
  		y1 = _sin$1(angle);
  		ux = _cos$1(angle += angleIncrement);
  		uy = _sin$1(angle);
  		rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);
  	}
  	//now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).
  	for (i = 0; i < rawPath.length; i+=2) {
  		x1 = rawPath[i];
  		y1 = rawPath[i+1];
  		rawPath[i] = x1 * ma + y1 * mc + cx;
  		rawPath[i+1] = x1 * mb + y1 * md + cy;
  	}
  	rawPath[i-2] = x; //always set the end to exactly where it's supposed to be
  	rawPath[i-1] = y;
  	return rawPath;
  }

  //Spits back a RawPath with absolute coordinates. Each segment starts with a "moveTo" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.
  function stringToRawPath(d) {
  	let a = (d + "").replace(_scientific, m => { let n = +m; return (n < 0.0001 && n > -0.0001) ? 0 : n; }).match(_svgPathExp) || [], //some authoring programs spit out very small numbers in scientific notation like "1e-5", so make sure we round that down to 0 first.
  		path = [],
  		relativeX = 0,
  		relativeY = 0,
  		twoThirds = 2 / 3,
  		elements = a.length,
  		points = 0,
  		errorMessage = "ERROR: malformed path: " + d,
  		i, j, x, y, command, isRelative, segment, startX, startY, difX, difY, beziers, prevCommand, flag1, flag2,
  		line = function(sx, sy, ex, ey) {
  			difX = (ex - sx) / 3;
  			difY = (ey - sy) / 3;
  			segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);
  		};
  	if (!d || !isNaN(a[0]) || isNaN(a[1])) {
  		console.log(errorMessage);
  		return path;
  	}
  	for (i = 0; i < elements; i++) {
  		prevCommand = command;
  		if (isNaN(a[i])) {
  			command = a[i].toUpperCase();
  			isRelative = (command !== a[i]); //lower case means relative
  		} else { //commands like "C" can be strung together without any new command characters between.
  			i--;
  		}
  		x = +a[i + 1];
  		y = +a[i + 2];
  		if (isRelative) {
  			x += relativeX;
  			y += relativeY;
  		}
  		if (!i) {
  			startX = x;
  			startY = y;
  		}

  		// "M" (move)
  		if (command === "M") {
  			if (segment) {
  				if (segment.length < 8) { //if the path data was funky and just had a M with no actual drawing anywhere, skip it.
  					path.length -= 1;
  				} else {
  					points += segment.length;
  				}
  			}
  			relativeX = startX = x;
  			relativeY = startY = y;
  			segment = [x, y];
  			path.push(segment);
  			i += 2;
  			command = "L"; //an "M" with more than 2 values gets interpreted as "lineTo" commands ("L").

  		// "C" (cubic bezier)
  		} else if (command === "C") {
  			if (!segment) {
  				segment = [0, 0];
  			}
  			if (!isRelative) {
  				relativeX = relativeY = 0;
  			}
  			//note: "*1" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.
  			segment.push(x,	y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, (relativeX += a[i + 5] * 1),	(relativeY += a[i + 6] * 1));
  			i += 6;

  		// "S" (continuation of cubic bezier)
  		} else if (command === "S") {
  			difX = relativeX;
  			difY = relativeY;
  			if (prevCommand === "C" || prevCommand === "S") {
  				difX += relativeX - segment[segment.length - 4];
  				difY += relativeY - segment[segment.length - 3];
  			}
  			if (!isRelative) {
  				relativeX = relativeY = 0;
  			}
  			segment.push(difX, difY, x,	y, (relativeX += a[i + 3] * 1), (relativeY += a[i + 4] * 1));
  			i += 4;

  		// "Q" (quadratic bezier)
  		} else if (command === "Q") {
  			difX = relativeX + (x - relativeX) * twoThirds;
  			difY = relativeY + (y - relativeY) * twoThirds;
  			if (!isRelative) {
  				relativeX = relativeY = 0;
  			}
  			relativeX += a[i + 3] * 1;
  			relativeY += a[i + 4] * 1;
  			segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);
  			i += 4;

  		// "T" (continuation of quadratic bezier)
  		} else if (command === "T") {
  			difX = relativeX - segment[segment.length - 4];
  			difY = relativeY - segment[segment.length - 3];
  			segment.push(relativeX + difX, relativeY + difY, x + ((relativeX + difX * 1.5) - x) * twoThirds, y + ((relativeY + difY * 1.5) - y) * twoThirds, (relativeX = x), (relativeY = y));
  			i += 2;

  		// "H" (horizontal line)
  		} else if (command === "H") {
  			line(relativeX, relativeY, (relativeX = x), relativeY);
  			i += 1;

  		// "V" (vertical line)
  		} else if (command === "V") {
  			//adjust values because the first (and only one) isn't x in this case, it's y.
  			line(relativeX, relativeY, relativeX, (relativeY = x + (isRelative ? relativeY - relativeX : 0)));
  			i += 1;

  		// "L" (line) or "Z" (close)
  		} else if (command === "L" || command === "Z") {
  			if (command === "Z") {
  				x = startX;
  				y = startY;
  				segment.closed = true;
  			}
  			if (command === "L" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {
  				line(relativeX, relativeY, x, y);
  				if (command === "L") {
  					i += 2;
  				}
  			}
  			relativeX = x;
  			relativeY = y;

  		// "A" (arc)
  		} else if (command === "A") {
  			flag1 = a[i+4];
  			flag2 = a[i+5];
  			difX = a[i+6];
  			difY = a[i+7];
  			j = 7;
  			if (flag1.length > 1) { // for cases when the flags are merged, like "a8 8 0 018 8" (the 0 and 1 flags are WITH the x value of 8, but it could also be "a8 8 0 01-8 8" so it may include x or not)
  				if (flag1.length < 3) {
  					difY = difX;
  					difX = flag2;
  					j--;
  				} else {
  					difY = flag2;
  					difX = flag1.substr(2);
  					j-=2;
  				}
  				flag2 = flag1.charAt(1);
  				flag1 = flag1.charAt(0);
  			}
  			beziers = arcToSegment(relativeX, relativeY, +a[i+1], +a[i+2], +a[i+3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX*1, (isRelative ? relativeY : 0) + difY*1);
  			i += j;
  			if (beziers) {
  				for (j = 0; j < beziers.length; j++) {
  					segment.push(beziers[j]);
  				}
  			}
  			relativeX = segment[segment.length-2];
  			relativeY = segment[segment.length-1];

  		} else {
  			console.log(errorMessage);
  		}
  	}
  	i = segment.length;
  	if (i < 6) { //in case there's odd SVG like a M0,0 command at the very end.
  		path.pop();
  		i = 0;
  	} else if (segment[0] === segment[i-2] && segment[1] === segment[i-1]) {
  		segment.closed = true;
  	}
  	path.totalPoints = points + i;
  	return path;
  }

  /*
  Takes any of the following and converts it to an all Cubic Bezier SVG data string:
  - A <path> data string like "M0,0 L2,4 v20,15 H100"
  - A RawPath, like [[x, y, x, y, x, y, x, y][[x, y, x, y, x, y, x, y]]
  - A Segment, like [x, y, x, y, x, y, x, y]

  Note: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13
  */
  function rawPathToString(rawPath) {
  	if (_isNumber$1(rawPath[0])) { //in case a segment is passed in instead
  		rawPath = [rawPath];
  	}
  	let result = "",
  		l = rawPath.length,
  		sl, s, i, segment;
  	for (s = 0; s < l; s++) {
  		segment = rawPath[s];
  		result += "M" + _round$1(segment[0]) + "," + _round$1(segment[1]) + " C";
  		sl = segment.length;
  		for (i = 2; i < sl; i++) {
  			result += _round$1(segment[i++]) + "," + _round$1(segment[i++]) + " " + _round$1(segment[i++]) + "," + _round$1(segment[i++]) + " " + _round$1(segment[i++]) + "," + _round$1(segment[i]) + " ";
  		}
  		if (segment.closed) {
  			result += "z";
  		}
  	}
  	return result;
  }

  /*
  // takes a segment with coordinates [x, y, x, y, ...] and converts the control points into angles and lengths [x, y, angle, length, angle, length, x, y, angle, length, ...] so that it animates more cleanly and avoids odd breaks/kinks. For example, if you animate from 1 o'clock to 6 o'clock, it'd just go directly/linearly rather than around. So the length would be very short in the middle of the tween.
  export function cpCoordsToAngles(segment, copy) {
  	var result = copy ? segment.slice(0) : segment,
  		x, y, i;
  	for (i = 0; i < segment.length; i+=6) {
  		x = segment[i+2] - segment[i];
  		y = segment[i+3] - segment[i+1];
  		result[i+2] = Math.atan2(y, x);
  		result[i+3] = Math.sqrt(x * x + y * y);
  		x = segment[i+6] - segment[i+4];
  		y = segment[i+7] - segment[i+5];
  		result[i+4] = Math.atan2(y, x);
  		result[i+5] = Math.sqrt(x * x + y * y);
  	}
  	return result;
  }

  // takes a segment that was converted with cpCoordsToAngles() to have angles and lengths instead of coordinates for the control points, and converts it BACK into coordinates.
  export function cpAnglesToCoords(segment, copy) {
  	var result = copy ? segment.slice(0) : segment,
  		length = segment.length,
  		rnd = 1000,
  		angle, l, i, j;
  	for (i = 0; i < length; i+=6) {
  		angle = segment[i+2];
  		l = segment[i+3]; //length
  		result[i+2] = (((segment[i] + Math.cos(angle) * l) * rnd) | 0) / rnd;
  		result[i+3] = (((segment[i+1] + Math.sin(angle) * l) * rnd) | 0) / rnd;
  		angle = segment[i+4];
  		l = segment[i+5]; //length
  		result[i+4] = (((segment[i+6] - Math.cos(angle) * l) * rnd) | 0) / rnd;
  		result[i+5] = (((segment[i+7] - Math.sin(angle) * l) * rnd) | 0) / rnd;
  	}
  	return result;
  }

  //adds an "isSmooth" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.
  export function populateSmoothData(rawPath) {
  	let j = rawPath.length,
  		smooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;
  	while (--j > -1) {
  		segment = rawPath[j];
  		isSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];
  		smoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];
  		isSmooth.length = 4;
  		l = segment.length - 2;
  		for (i = 6; i < l; i += 6) {
  			x = segment[i] - segment[i - 2];
  			y = segment[i + 1] - segment[i - 1];
  			x2 = segment[i + 2] - segment[i];
  			y2 = segment[i + 3] - segment[i + 1];
  			a = _atan2(y, x);
  			a2 = _atan2(y2, x2);
  			smooth = (Math.abs(a - a2) < 0.09);
  			if (smooth) {
  				smoothData[i - 2] = a;
  				smoothData[i + 2] = a2;
  				smoothData[i - 1] = _sqrt(x * x + y * y);
  				smoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);
  			}
  			isSmooth.push(smooth, smooth, 0, 0, smooth, smooth);
  		}
  		//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.
  		if (segment[l] === segment[0] && segment[l+1] === segment[1]) {
  			x = segment[0] - segment[l-2];
  			y = segment[1] - segment[l-1];
  			x2 = segment[2] - segment[0];
  			y2 = segment[3] - segment[1];
  			a = _atan2(y, x);
  			a2 = _atan2(y2, x2);
  			if (Math.abs(a - a2) < 0.09) {
  				smoothData[l-2] = a;
  				smoothData[2] = a2;
  				smoothData[l-1] = _sqrt(x * x + y * y);
  				smoothData[3] = _sqrt(x2 * x2 + y2 * y2);
  				isSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.
  			}
  		}
  	}
  	return rawPath;
  }
  export function pointToScreen(svgElement, point) {
  	if (arguments.length < 2) { //by default, take the first set of coordinates in the path as the point
  		let rawPath = getRawPath(svgElement);
  		point = svgElement.ownerSVGElement.createSVGPoint();
  		point.x = rawPath[0][0];
  		point.y = rawPath[0][1];
  	}
  	return point.matrixTransform(svgElement.getScreenCTM());
  }

  */

  /*!
   * MorphSVGPlugin 3.4.0
   * https://greensock.com
   *
   * @license Copyright 2008-2020, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */

  let gsap$1, _toArray, _lastLinkedAnchor, _coreInitted$1, PluginClass,
  	_getGSAP = () => gsap$1 || (typeof(window) !== "undefined" && (gsap$1 = window.gsap) && gsap$1.registerPlugin && gsap$1),
  	_isFunction$1 = value => typeof(value) === "function",
  	_atan2$1 = Math.atan2,
  	_cos$2 = Math.cos,
  	_sin$2 = Math.sin,
  	_sqrt$2 = Math.sqrt,
  	_PI = Math.PI,
  	_2PI$1 = _PI * 2,
  	_angleMin = _PI * 0.3,
  	_angleMax = _PI * 0.7,
  	_bigNum$2 = 1e20,
  	_numExp$1 = /[-+=\.]*\d+[\.e\-\+]*\d*[e\-\+]*\d*/gi, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
  	_selectorExp$1 = /(^[#\.][a-z]|[a-y][a-z])/gi,
  	_commands = /[achlmqstvz]/ig,
  	_log = message => console && console.warn(message),
  	_bonusValidated = 1, //<name>MorphSVGPlugin</name>
  	_getAverageXY = segment => {
  		let l = segment.length,
  			x = 0,
  			y = 0,
  			i;
  		for (i = 0; i < l; i++) {
  			x += segment[i++];
  			y += segment[i];
  		}
  		return [x / (l / 2), y / (l / 2)];
  	},
  	_getSize = segment => { //rough estimate of the bounding box (based solely on the anchors) of a single segment. sets "size", "centerX", and "centerY" properties on the bezier array itself, and returns the size (width * height)
  		let l = segment.length,
  			xMax = segment[0],
  			xMin = xMax,
  			yMax = segment[1],
  			yMin = yMax,
  			x, y, i;
  		for (i = 6; i < l; i+=6) {
  			x = segment[i];
  			y = segment[i+1];
  			if (x > xMax) {
  				xMax = x;
  			} else if (x < xMin) {
  				xMin = x;
  			}
  			if (y > yMax) {
  				yMax = y;
  			} else if (y < yMin) {
  				yMin = y;
  			}
  		}
  		segment.centerX = (xMax + xMin) / 2;
  		segment.centerY = (yMax + yMin) / 2;
  		return (segment.size = (xMax - xMin) * (yMax - yMin));
  	},
  	_getTotalSize = (rawPath, samplesPerBezier = 3) => { //rough estimate of the bounding box of the entire list of Bezier segments (based solely on the anchors). sets "size", "centerX", and "centerY" properties on the bezier array itself, and returns the size (width * height)
  		let j = rawPath.length,
  			xMax = rawPath[0][0],
  			xMin = xMax,
  			yMax = rawPath[0][1],
  			yMin = yMax,
  			inc = 1 / samplesPerBezier,
  			l, x, y, i, segment, k, t, inv, x1, y1, x2, x3, x4, y2, y3, y4;
  		while (--j > -1) {
  			segment = rawPath[j];
  			l = segment.length;
  			for (i = 6; i < l; i+=6) {
  				x1 = segment[i];
  				y1 = segment[i+1];
  				x2 = segment[i+2] - x1;
  				y2 = segment[i+3] - y1;
  				x3 = segment[i+4] - x1;
  				y3 = segment[i+5] - y1;
  				x4 = segment[i+6] - x1;
  				y4 = segment[i+7] - y1;
  				k = samplesPerBezier;
  				while (--k > -1) {
  					t = inc * k;
  					inv = 1 - t;
  					x = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t + x1;
  					y = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t + y1;
  					if (x > xMax) {
  						xMax = x;
  					} else if (x < xMin) {
  						xMin = x;
  					}
  					if (y > yMax) {
  						yMax = y;
  					} else if (y < yMin) {
  						yMin = y;
  					}
  				}
  			}
  		}
  		rawPath.centerX = (xMax + xMin) / 2;
  		rawPath.centerY = (yMax + yMin) / 2;
  		rawPath.left = xMin;
  		rawPath.width = (xMax - xMin);
  		rawPath.top = yMin;
  		rawPath.height = (yMax - yMin);
  		return (rawPath.size = (xMax - xMin) * (yMax - yMin));
  	},
  	_sortByComplexity = (a, b) => b.length - a.length,
  	_sortBySize = (a, b) => {
  		let sizeA = a.size || _getSize(a),
  			sizeB = b.size || _getSize(b);
  		return (Math.abs(sizeB - sizeA) < (sizeA + sizeB) / 20) ? (b.centerX - a.centerX) || (b.centerY - a.centerY) : sizeB - sizeA; //if the size is within 10% of each other, prioritize position from left to right, then top to bottom.
  	},
  	_offsetSegment = (segment, shapeIndex) => {
  		let a = segment.slice(0),
  			l = segment.length,
  			wrap = l - 2,
  			i, index;
  		shapeIndex = shapeIndex | 0;
  		for (i = 0; i < l; i++) {
  			index = (i + shapeIndex) % wrap;
  			segment[i++] = a[index];
  			segment[i] = a[index+1];
  		}
  	},
  	_getTotalMovement = (sb, eb, shapeIndex, offsetX, offsetY) => {
  		let l = sb.length,
  			d = 0,
  			wrap = l - 2,
  			index, i, x, y;
  		shapeIndex *= 6;
  		for (i = 0; i < l; i += 6) {
  			index = (i + shapeIndex) % wrap;
  			y = sb[index] - (eb[i] - offsetX);
  			x = sb[index+1] - (eb[i+1] - offsetY);
  			d += _sqrt$2(x * x + y * y);
  		}
  		return d;
  	},
  	_getClosestShapeIndex = (sb, eb, checkReverse) => { //finds the index in a closed cubic bezier array that's closest to the angle provided (angle measured from the center or average x/y).
  		let l = sb.length,
  			sCenter = _getAverageXY(sb), //when comparing distances, adjust the coordinates as if the shapes are centered with each other.
  			eCenter = _getAverageXY(eb),
  			offsetX = eCenter[0] - sCenter[0],
  			offsetY = eCenter[1] - sCenter[1],
  			min = _getTotalMovement(sb, eb, 0, offsetX, offsetY),
  			minIndex = 0,
  			copy, d, i;
  		for (i = 6; i < l; i += 6) {
  			d = _getTotalMovement(sb, eb, i / 6, offsetX, offsetY);
  			if (d < min) {
  				min = d;
  				minIndex = i;
  			}
  		}
  		if (checkReverse) {
  			copy = sb.slice(0);
  			reverseSegment(copy);
  			for (i = 6; i < l; i += 6) {
  				d = _getTotalMovement(copy, eb, i / 6, offsetX, offsetY);
  				if (d < min) {
  					min = d;
  					minIndex = -i;
  				}
  			}
  		}
  		return minIndex / 6;
  	},
  	_getClosestAnchor = (rawPath, x, y) => { //finds the x/y of the anchor that's closest to the provided x/y coordinate (returns an array, like [x, y]). The bezier should be the top-level type that contains an array for each segment.
  		let j = rawPath.length,
  			closestDistance = _bigNum$2,
  			closestX = 0,
  			closestY = 0,
  			segment, dx, dy, d, i, l;
  		while (--j > -1) {
  			segment = rawPath[j];
  			l = segment.length;
  			for (i = 0; i < l; i += 6) {
  				dx = segment[i] - x;
  				dy = segment[i+1] - y;
  				d = _sqrt$2(dx * dx + dy * dy);
  				if (d < closestDistance) {
  					closestDistance = d;
  					closestX = segment[i];
  					closestY = segment[i+1];
  				}
  			}
  		}
  		return [closestX, closestY];
  	},
  	_getClosestSegment = (bezier, pool, startIndex, sortRatio, offsetX, offsetY) => { //matches the bezier to the closest one in a pool (array) of beziers, assuming they are in order of size and we shouldn't drop more than 20% of the size, otherwise prioritizing location (total distance to the center). Extracts the segment out of the pool array and returns it.
  		let l = pool.length,
  			index = 0,
  			minSize = Math.min(bezier.size || _getSize(bezier), pool[startIndex].size || _getSize(pool[startIndex])) * sortRatio, //limit things based on a percentage of the size of either the bezier or the next element in the array, whichever is smaller.
  			min = _bigNum$2,
  			cx = bezier.centerX + offsetX,
  			cy = bezier.centerY + offsetY,
  			size, i, dx, dy, d;
  		for (i = startIndex; i < l; i++) {
  			size = pool[i].size || _getSize(pool[i]);
  			if (size < minSize) {
  				break;
  			}
  			dx = pool[i].centerX - cx;
  			dy = pool[i].centerY - cy;
  			d = _sqrt$2(dx * dx + dy * dy);
  			if (d < min) {
  				index = i;
  				min = d;
  			}
  		}
  		d = pool[index];
  		pool.splice(index, 1);
  		return d;
  	},
  	_subdivideSegmentQty = (segment, quantity) => {
  		let tally = 0,
  			max = 0.999999,
  			l = segment.length,
  			newPointsPerSegment = quantity / ((l - 2) / 6),
  			ax, ay, cp1x, cp1y, cp2x, cp2y, bx, by,
  			x1, y1, x2, y2, i, t;
  		for (i = 2; i < l; i += 6) {
  			tally += newPointsPerSegment;
  			while (tally > max) { //compare with 0.99999 instead of 1 in order to prevent rounding errors
  				ax = segment[i-2];
  				ay = segment[i-1];
  				cp1x = segment[i];
  				cp1y = segment[i+1];
  				cp2x = segment[i+2];
  				cp2y = segment[i+3];
  				bx = segment[i+4];
  				by = segment[i+5];
  				t = 1 / ((Math.floor(tally) || 1) + 1); //progress along the bezier (value between 0 and 1)
  				x1 = ax + (cp1x - ax) * t;
  				x2 = cp1x + (cp2x - cp1x) * t;
  				x1 += (x2 - x1) * t;
  				x2 += ((cp2x + (bx - cp2x) * t) - x2) * t;
  				y1 = ay + (cp1y - ay) * t;
  				y2 = cp1y + (cp2y - cp1y) * t;
  				y1 += (y2 - y1) * t;
  				y2 += ((cp2y + (by - cp2y) * t) - y2) * t;
  				segment.splice(i, 4,
  					ax + (cp1x - ax) * t,   //first control point
  					ay + (cp1y - ay) * t,
  					x1,                     //second control point
  					y1,
  					x1 + (x2 - x1) * t,     //new fabricated anchor on line
  					y1 + (y2 - y1) * t,
  					x2,                     //third control point
  					y2,
  					cp2x + (bx - cp2x) * t, //fourth control point
  					cp2y + (by - cp2y) * t
  				);
  				i += 6;
  				l += 6;
  				tally--;
  			}
  		}
  		return segment;
  	},
  	_equalizeSegmentQuantity = (start, end, shapeIndex, map, fillSafe) => { //returns an array of shape indexes, 1 for each segment.
  		let dif = end.length - start.length,
  			longer = dif > 0 ? end : start,
  			shorter = dif > 0 ? start : end,
  			added = 0,
  			sortMethod = (map === "complexity") ? _sortByComplexity : _sortBySize,
  			sortRatio = (map === "position") ? 0 : (typeof(map) === "number") ? map : 0.8,
  			i = shorter.length,
  			shapeIndices = (typeof(shapeIndex) === "object" && shapeIndex.push) ? shapeIndex.slice(0) : [shapeIndex],
  			reverse = (shapeIndices[0] === "reverse" || shapeIndices[0] < 0),
  			log = (shapeIndex === "log"),
  			eb, sb, b, x, y, offsetX, offsetY;
  		if (!shorter[0]) {
  			return;
  		}
  		if (longer.length > 1) {
  			start.sort(sortMethod);
  			end.sort(sortMethod);
  			offsetX = longer.size || _getTotalSize(longer); //ensures centerX and centerY are defined (used below).
  			offsetX = shorter.size || _getTotalSize(shorter);
  			offsetX = longer.centerX - shorter.centerX;
  			offsetY = longer.centerY - shorter.centerY;
  			if (sortMethod === _sortBySize) {
  				for (i = 0; i < shorter.length; i++) {
  					longer.splice(i, 0, _getClosestSegment(shorter[i], longer, i, sortRatio, offsetX, offsetY));
  				}
  			}
  		}
  		if (dif) {
  			if (dif < 0) {
  				dif = -dif;
  			}
  			if (longer[0].length > shorter[0].length) { //since we use shorter[0] as the one to map the origination point of any brand new fabricated segments, do any subdividing first so that there are more points to choose from (if necessary)
  				_subdivideSegmentQty(shorter[0], ((longer[0].length - shorter[0].length)/6) | 0);
  			}
  			i = shorter.length;
  			while (added < dif) {
  				x = longer[i].size || _getSize(longer[i]); //just to ensure centerX and centerY are calculated which we use on the next line.
  				b = _getClosestAnchor(shorter, longer[i].centerX, longer[i].centerY);
  				x = b[0];
  				y = b[1];
  				shorter[i++] = [x, y, x, y, x, y, x, y];
  				shorter.totalPoints += 8;
  				added++;
  			}
  		}
  		for (i = 0; i < start.length; i++) {
  			eb = end[i];
  			sb = start[i];
  			dif = eb.length - sb.length;
  			if (dif < 0) {
  				_subdivideSegmentQty(eb, (-dif/6) | 0);
  			} else if (dif > 0) {
  				_subdivideSegmentQty(sb, (dif/6) | 0);
  			}
  			if (reverse && fillSafe !== false && !sb.reversed) {
  				reverseSegment(sb);
  			}
  			shapeIndex = (shapeIndices[i] || shapeIndices[i] === 0) ? shapeIndices[i] : "auto";
  			if (shapeIndex) {
  				//if start shape is closed, find the closest point to the start/end, and re-organize the bezier points accordingly so that the shape morphs in a more intuitive way.
  				if (sb.closed || (Math.abs(sb[0] - sb[sb.length - 2]) < 0.5 && Math.abs(sb[1] - sb[sb.length - 1]) < 0.5)) {
  					if (shapeIndex === "auto" || shapeIndex === "log") {
  						shapeIndices[i] = shapeIndex = _getClosestShapeIndex(sb, eb, (!i || fillSafe === false));
  						if (shapeIndex < 0) {
  							reverse = true;
  							reverseSegment(sb);
  							shapeIndex = -shapeIndex;
  						}
  						_offsetSegment(sb, shapeIndex * 6);

  					} else if (shapeIndex !== "reverse") {
  						if (i && shapeIndex < 0) { //only happens if an array is passed as shapeIndex and a negative value is defined for an index beyond 0. Very rare, but helpful sometimes.
  							reverseSegment(sb);
  						}
  						_offsetSegment(sb, (shapeIndex < 0 ? -shapeIndex : shapeIndex) * 6);
  					}
  					//otherwise, if it's not a closed shape, consider reversing it if that would make the overall travel less
  				} else if (!reverse && (shapeIndex === "auto" && (Math.abs(eb[0] - sb[0]) + Math.abs(eb[1] - sb[1]) + Math.abs(eb[eb.length - 2] - sb[sb.length - 2]) + Math.abs(eb[eb.length - 1] - sb[sb.length - 1]) > Math.abs(eb[0] - sb[sb.length - 2]) + Math.abs(eb[1] - sb[sb.length - 1]) + Math.abs(eb[eb.length - 2] - sb[0]) + Math.abs(eb[eb.length - 1] - sb[1])) || (shapeIndex % 2))) {
  					reverseSegment(sb);
  					shapeIndices[i] = -1;
  					reverse = true;
  				} else if (shapeIndex === "auto") {
  					shapeIndices[i] = 0;
  				} else if (shapeIndex === "reverse") {
  					shapeIndices[i] = -1;
  				}
  				if (sb.closed !== eb.closed) { //if one is closed and one isn't, don't close either one otherwise the tweening will look weird (but remember, the beginning and final states will honor the actual values, so this only affects the inbetween state)
  					sb.closed = eb.closed = false;
  				}
  			}
  		}
  		if (log) {
  			_log("shapeIndex:[" + shapeIndices.join(",") + "]");
  		}
  		start.shapeIndex = shapeIndices;
  		return shapeIndices;
  	},
  	_pathFilter = (a, shapeIndex, map, precompile, fillSafe) => {
  		let start = stringToRawPath(a[0]),
  			end = stringToRawPath(a[1]);
  		if (!_equalizeSegmentQuantity(start, end, (shapeIndex || shapeIndex === 0) ? shapeIndex : "auto", map, fillSafe)) {
  			return; //malformed path data or null target
  		}
  		a[0] = rawPathToString(start);
  		a[1] = rawPathToString(end);
  		if (precompile === "log" || precompile === true) {
  			_log('precompile:["' + a[0] + '","' + a[1] + '"]');
  		}
  	},
  	_offsetPoints = (text, offset) => {
  		if (!offset) {
  			return text;
  		}
  		let a = text.match(_numExp$1) || [],
  			l = a.length,
  			s = "",
  			inc, i, j;
  		if (offset === "reverse") {
  			i = l-1;
  			inc = -2;
  		} else {
  			i = (((parseInt(offset, 10) || 0) * 2 + 1) + l * 100) % l;
  			inc = 2;
  		}
  		for (j = 0; j < l; j += 2) {
  			s += a[i-1] + "," + a[i] + " ";
  			i = (i + inc) % l;
  		}
  		return s;
  	},
  	//adds a certain number of points while maintaining the polygon/polyline shape (so that the start/end values can have a matching quantity of points to animate). Returns the revised string.
  	_equalizePointQuantity = (a, quantity) => {
  		let tally = 0,
  			x = parseFloat(a[0]),
  			y = parseFloat(a[1]),
  			s = x + "," + y + " ",
  			max = 0.999999,
  			newPointsPerSegment, i, l, j, factor, nextX, nextY;
  		l = a.length;
  		newPointsPerSegment = quantity * 0.5 / (l * 0.5 - 1);
  		for (i = 0; i < l-2; i += 2) {
  			tally += newPointsPerSegment;
  			nextX = parseFloat(a[i+2]);
  			nextY = parseFloat(a[i+3]);
  			if (tally > max) { //compare with 0.99999 instead of 1 in order to prevent rounding errors
  				factor = 1 / (Math.floor(tally) + 1);
  				j = 1;
  				while (tally > max) {
  					s += (x + (nextX - x) * factor * j).toFixed(2) + "," + (y + (nextY - y) * factor * j).toFixed(2) + " ";
  					tally--;
  					j++;
  				}
  			}
  			s += nextX + "," + nextY + " ";
  			x = nextX;
  			y = nextY;
  		}
  		return s;
  	},
  	_pointsFilter = a => {
  		let startNums = a[0].match(_numExp$1) || [],
  			endNums = a[1].match(_numExp$1) || [],
  			dif = endNums.length - startNums.length;
  		if (dif > 0) {
  			a[0] = _equalizePointQuantity(startNums, dif);
  		} else {
  			a[1] = _equalizePointQuantity(endNums, -dif);
  		}
  	},
  	_buildPointsFilter = shapeIndex => !isNaN(shapeIndex) ? a => {
  			_pointsFilter(a);
  			a[1] = _offsetPoints(a[1], parseInt(shapeIndex, 10));
  		} : _pointsFilter,
  	_parseShape = (shape, forcePath, target) => {
  		let isString = typeof(shape) === "string",
  			e, type;
  		if (!isString || _selectorExp$1.test(shape) || (shape.match(_numExp$1) || []).length < 3) {
  			e = _toArray(shape)[0];
  			if (e) {
  				type = (e.nodeName + "").toUpperCase();
  				if (forcePath && type !== "PATH") { //if we were passed an element (or selector text for an element) that isn't a path, convert it.
  					e = convertToPath(e, false);
  					type = "PATH";
  				}
  				shape = e.getAttribute(type === "PATH" ? "d" : "points") || "";
  				if (e === target) { //if the shape matches the target element, the user wants to revert to the original which should have been stored in the data-original attribute
  					shape = e.getAttributeNS(null, "data-original") || shape;
  				}
  			} else {
  				_log("WARNING: invalid morph to: " + shape);
  				shape = false;
  			}
  		}
  		return shape;
  	},
  	//adds an "isSmooth" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.
  	_populateSmoothData = (rawPath, tolerance) => {
  		let j = rawPath.length,
  			limit = 0.2 * (tolerance || 1),
  			smooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;
  		while (--j > -1) {
  			segment = rawPath[j];
  			isSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];
  			smoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];
  			isSmooth.length = 4;
  			l = segment.length - 2;
  			for (i = 6; i < l; i += 6) {
  				x = segment[i] - segment[i - 2];
  				y = segment[i + 1] - segment[i - 1];
  				x2 = segment[i + 2] - segment[i];
  				y2 = segment[i + 3] - segment[i + 1];
  				a = _atan2$1(y, x);
  				a2 = _atan2$1(y2, x2);
  				smooth = (Math.abs(a - a2) < limit);
  				if (smooth) {
  					smoothData[i - 2] = a;
  					smoothData[i + 2] = a2;
  					smoothData[i - 1] = _sqrt$2(x * x + y * y);
  					smoothData[i + 3] = _sqrt$2(x2 * x2 + y2 * y2);
  				}
  				isSmooth.push(smooth, smooth, 0, 0, smooth, smooth);
  			}
  			//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.
  			if (segment[l] === segment[0] && segment[l+1] === segment[1]) {
  				x = segment[0] - segment[l-2];
  				y = segment[1] - segment[l-1];
  				x2 = segment[2] - segment[0];
  				y2 = segment[3] - segment[1];
  				a = _atan2$1(y, x);
  				a2 = _atan2$1(y2, x2);
  				if (Math.abs(a - a2) < limit) {
  					smoothData[l-2] = a;
  					smoothData[2] = a2;
  					smoothData[l-1] = _sqrt$2(x * x + y * y);
  					smoothData[3] = _sqrt$2(x2 * x2 + y2 * y2);
  					isSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.
  				}
  			}
  		}
  		return rawPath;
  	},
  	_parseOriginFactors = v => {
  		let a = v.trim().split(" "),
  			x = ~v.indexOf("left") ? 0 : ~v.indexOf("right") ? 100 : isNaN(parseFloat(a[0])) ? 50 : parseFloat(a[0]),
  			y = ~v.indexOf("top") ? 0 : ~v.indexOf("bottom") ? 100 : isNaN(parseFloat(a[1])) ? 50 : parseFloat(a[1]);
  		return {x:x / 100, y:y / 100};
  	},
  	_shortAngle = dif => (dif !== dif % _PI) ? dif + ((dif < 0) ? _2PI$1 : -_2PI$1) : dif,
  	_morphMessage = "Use MorphSVGPlugin.convertToPath() to convert to a path before morphing.",
  	_tweenRotation = function(start, end, i, linkedPT) {
  		let so = this._origin,              //starting origin
  			eo = this._eOrigin,             //ending origin
  			dx = start[i] - so.x,
  			dy = start[i+1] - so.y,
  			d = _sqrt$2(dx * dx + dy * dy),   //length from starting origin to starting point
  			sa = _atan2$1(dy, dx),
  			angleDif, short;
  		dx = end[i] - eo.x;
  		dy = end[i+1] - eo.y;
  		angleDif = _atan2$1(dy, dx) - sa;
  		short = _shortAngle(angleDif);
  		//in the case of control points, we ALWAYS link them to their anchor so that they don't get torn apart and rotate the opposite direction. If it's not a control point, we look at the most recently linked point as long as they're within a certain rotational range of each other.
  		if (!linkedPT && _lastLinkedAnchor && Math.abs(short + _lastLinkedAnchor.ca) < _angleMin) {
  			linkedPT = _lastLinkedAnchor;
  		}
  		return (this._anchorPT = _lastLinkedAnchor = {
  			_next:this._anchorPT,
  			t:start,
  			sa:sa,                              //starting angle
  			ca:(linkedPT && short * linkedPT.ca < 0 && Math.abs(short) > _angleMax) ? angleDif : short,  //change in angle
  			sl:d,                               //starting length
  			cl:_sqrt$2(dx * dx + dy * dy) - d,    //change in length
  			i:i
  		});
  	},
  	_initCore$1 = required => {
  		gsap$1 = _getGSAP();
  		PluginClass = PluginClass || (gsap$1 && gsap$1.plugins.morphSVG);
  		if (gsap$1 && PluginClass) {
  			_toArray = gsap$1.utils.toArray;
  			PluginClass.prototype._tweenRotation = _tweenRotation;
  			_coreInitted$1 = 1;
  		} else if (required) {
  			_log("Please gsap.registerPlugin(MorphSVGPlugin)");
  		}
  	};


  const MorphSVGPlugin = {
  	version: "3.4.0",
  	name: "morphSVG",
  	rawVars: 1, // otherwise "render" would be interpreted as a function-based value.
  	register(core, Plugin) {
  		gsap$1 = core;
  		PluginClass = Plugin;
  		_initCore$1();
  	},
  	init(target, value, tween, index, targets) {
  		_coreInitted$1 || _initCore$1(1);
  		if (!value) {
  			_log("invalid shape");
  			return false;
  		}
  		_isFunction$1(value) && (value = value.call(tween, index, target, targets));
  		let type, p, pt, shape, isPoly, shapeIndex, map, startSmooth, endSmooth, start, end, i, j, l, startSeg, endSeg, precompiled, sData, eData, originFactors, useRotation, offset;
  		if (typeof(value) === "string" || value.getBBox || value[0]) {
  			value = {shape:value};
  		} else if (typeof(value) === "object") { // if there are any function-based values, parse them here (and make a copy of the object so we're not modifying the original)
  			type = {};
  			for (p in value) {
  				type[p] = _isFunction$1(value[p]) && p !== "render" ? value[p].call(tween, index, target, targets) : value[p];
  			}
  			value = type;
  		}
  		let cs = target.nodeType ? window.getComputedStyle(target) : {},
  			fill = cs.fill + "",
  			fillSafe = !(fill === "none" || (fill.match(_numExp$1) || [])[3] === "0" || cs.fillRule === "evenodd"),
  			origins = (value.origin || "50 50").split(",");
  		type = (target.nodeName + "").toUpperCase();
  		isPoly = (type === "POLYLINE" || type === "POLYGON");
  		if (type !== "PATH" && !isPoly && !value.prop) {
  			_log("Cannot morph a <" + type + "> element. " + _morphMessage);
  			return false;
  		}
  		p = (type === "PATH") ? "d" : "points";
  		if (!value.prop && !_isFunction$1(target.setAttribute)) {
  			return false;
  		}
  		shape = _parseShape(value.shape || value.d || value.points || "", (p === "d"), target);
  		if (isPoly && _commands.test(shape)) {
  			_log("A <" + type + "> cannot accept path data. " + _morphMessage);
  			return false;
  		}
  		shapeIndex = (value.shapeIndex || value.shapeIndex === 0) ? value.shapeIndex : "auto";
  		map = value.map || MorphSVGPlugin.defaultMap;
  		this._prop = value.prop;
  		this._render = value.render || MorphSVGPlugin.defaultRender;
  		this._apply = ("updateTarget" in value) ? value.updateTarget : MorphSVGPlugin.defaultUpdateTarget;
  		this._rnd = Math.pow(10, isNaN(value.precision) ? 2 : +value.precision);
  		this._tween = tween;
  		if (shape) {
  			this._target = target;
  			precompiled = (typeof(value.precompile) === "object");
  			start = this._prop ? target[this._prop] : target.getAttribute(p);
  			if (!this._prop && !target.getAttributeNS(null, "data-original")) {
  				target.setAttributeNS(null, "data-original", start); //record the original state in a data-original attribute so that we can revert to it later.
  			}
  			if (p === "d" || this._prop) {
  				start = stringToRawPath(precompiled ? value.precompile[0] : start);
  				end = stringToRawPath(precompiled ? value.precompile[1] : shape);
  				if (!precompiled && !_equalizeSegmentQuantity(start, end, shapeIndex, map, fillSafe)) {
  					return false; //malformed path data or null target
  				}
  				if (value.precompile === "log" || value.precompile === true) {
  					_log('precompile:["' + rawPathToString(start) + '","' + rawPathToString(end) + '"]');
  				}
  				useRotation = (value.type || MorphSVGPlugin.defaultType) !== "linear";
  				if (useRotation) {
  					start = _populateSmoothData(start, value.smoothTolerance);
  					end = _populateSmoothData(end, value.smoothTolerance);
  					if (!start.size) {
  						_getTotalSize(start); //adds top/left/width/height values
  					}
  					if (!end.size) {
  						_getTotalSize(end);
  					}
  					originFactors = _parseOriginFactors(origins[0]);
  					this._origin = start.origin = {x:start.left + originFactors.x * start.width, y:start.top + originFactors.y * start.height};
  					if (origins[1]) {
  						originFactors = _parseOriginFactors(origins[1]);
  					}
  					this._eOrigin = {x:end.left + originFactors.x * end.width, y:end.top + originFactors.y * end.height};
  				}

  				this._rawPath = target._gsRawPath =  start;

  				j = start.length;
  				while (--j > -1) {
  					startSeg = start[j];
  					endSeg = end[j];
  					startSmooth = startSeg.isSmooth || [];
  					endSmooth = endSeg.isSmooth || [];
  					l = startSeg.length;
  					_lastLinkedAnchor = 0; //reset; we use _lastLinkedAnchor in the _tweenRotation() method to help make sure that close points don't get ripped apart and rotate opposite directions. Typically we want to go the shortest direction, but if the previous anchor is going a different direction, we override this logic (within certain thresholds)
  					for (i = 0; i < l; i+=2) {
  						if (endSeg[i] !== startSeg[i] || endSeg[i+1] !== startSeg[i+1]) {
  							if (useRotation) {
  								if (startSmooth[i] && endSmooth[i]) { //if BOTH starting and ending values are smooth (meaning control points have basically the same slope), interpolate the rotation and length instead of the coordinates (this is what makes things smooth).
  									sData = startSeg.smoothData;
  									eData = endSeg.smoothData;
  									offset = i + ((i === l - 4) ? 7 - l : 5); //helps us accommodate wrapping (like if the end and start anchors are identical and the control points are smooth).
  									this._controlPT = {_next:this._controlPT, i:i, j:j, l1s:sData[i+1], l1c:eData[i+1] - sData[i+1], l2s:sData[offset], l2c:eData[offset] - sData[offset]};
  									pt = this._tweenRotation(startSeg, endSeg, i+2);
  									this._tweenRotation(startSeg, endSeg, i, pt);
  									this._tweenRotation(startSeg, endSeg, offset-1, pt);
  									i+=4;
  								} else {
  									this._tweenRotation(startSeg, endSeg, i);
  								}
  							} else {
  								pt = this.add(startSeg, i, startSeg[i], endSeg[i]);
  								pt = this.add(startSeg, i+1, startSeg[i+1], endSeg[i+1]) || pt;
  							}
  						}
  					}
  				}
  			} else {
  				pt = this.add(target, "setAttribute", target.getAttribute(p) + "", shape + "", index, targets, 0, _buildPointsFilter(shapeIndex), p);
  			}

  			if (useRotation) {
  				this.add(this._origin, "x", this._origin.x, this._eOrigin.x);
  				pt = this.add(this._origin, "y", this._origin.y, this._eOrigin.y);
  			}

  			if (pt) {
  				this._props.push("morphSVG");
  				pt.end = shape;
  				pt.endProp = p;
  			}
  		}
  		return _bonusValidated;
  	},

  	render(ratio, data) {
  		let rawPath = data._rawPath,
  			controlPT = data._controlPT,
  			anchorPT = data._anchorPT,
  			rnd = data._rnd,
  			target = data._target,
  			pt = data._pt,
  			s, space, easeInOut, segment, l, angle, i, j, x, y, sin, cos, offset;
  		while (pt) {
  			pt.r(ratio, pt.d);
  			pt = pt._next;
  		}
  		if (ratio === 1 && data._apply) {
  			pt = data._pt;
  			while (pt) {
  				if (pt.end) {
  					if (data._prop) {
  						target[data._prop] = pt.end;
  					} else {
  						target.setAttribute(pt.endProp, pt.end); //make sure the end value is exactly as specified (in case we had to add fabricated points during the tween)
  					}
  				}
  				pt = pt._next;
  			}
  		} else if (rawPath) {

  			//rotationally position the anchors
  			while (anchorPT) {
  				angle = anchorPT.sa + ratio * anchorPT.ca;
  				l = anchorPT.sl + ratio * anchorPT.cl;    //length
  				anchorPT.t[anchorPT.i] = data._origin.x + _cos$2(angle) * l;
  				anchorPT.t[anchorPT.i + 1] = data._origin.y + _sin$2(angle) * l;
  				anchorPT = anchorPT._next;
  			}

  			//smooth out the control points
  			easeInOut = ratio < 0.5 ? 2 * ratio * ratio : (4 - 2 * ratio) * ratio - 1;
  			while (controlPT) {
  				i = controlPT.i;
  				segment = rawPath[controlPT.j];
  				offset = i + ((i === segment.length - 4) ? 7 - segment.length : 5); //accommodates wrapping around of smooth points, like if the start and end anchors are on top of each other and their handles are smooth.
  				angle = _atan2$1(segment[offset] - segment[i+1], segment[offset-1] - segment[i]); //average the angles
  				sin = _sin$2(angle);
  				cos = _cos$2(angle);
  				x = segment[i+2];
  				y = segment[i+3];
  				l = controlPT.l1s + easeInOut * controlPT.l1c;    //length
  				segment[i] = x - cos * l;
  				segment[i+1] = y - sin * l;
  				l = controlPT.l2s + easeInOut * controlPT.l2c;
  				segment[offset-1] = x + cos * l;
  				segment[offset] = y + sin * l;
  				controlPT = controlPT._next;
  			}

  			target._gsRawPath = rawPath;

  			if (data._apply) {
  				s = "";
  				space = " ";
  				for (j = 0; j < rawPath.length; j++) {
  					segment = rawPath[j];
  					l = segment.length;
  					s += "M" + (((segment[0] * rnd) | 0) / rnd) + space + (((segment[1] * rnd) | 0) / rnd) + " C";
  					for (i = 2; i < l; i++) { //this is actually faster than just doing a join() on the array, possibly because the numbers have so many decimal places
  						s += (((segment[i] * rnd) | 0) / rnd) + space;
  					}
  				}
  				if (data._prop) {
  					target[data._prop] = s;
  				} else {
  					target.setAttribute("d", s);
  				}
  			}
  		}
  		data._render && rawPath && data._render.call(data._tween, rawPath, target);
  	},
  	kill(property) {
  		this._pt = this._rawPath = 0;
  	},
  	getRawPath: getRawPath,
  	stringToRawPath: stringToRawPath,
  	rawPathToString: rawPathToString,
  	pathFilter: _pathFilter,
  	pointsFilter: _pointsFilter,
  	getTotalSize: _getTotalSize,
  	equalizeSegmentQuantity: _equalizeSegmentQuantity,
  	convertToPath: (targets, swap) => _toArray(targets).map(target => convertToPath(target, swap !== false)),
  	defaultType: "linear",
  	defaultUpdateTarget: true,
  	defaultMap: "size"
  };

  _getGSAP() && gsap$1.registerPlugin(MorphSVGPlugin);

  /*!
   * DrawSVGPlugin 3.4.0
   * https://greensock.com
   *
   * @license Copyright 2008-2020, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  /* eslint-disable */


  let gsap$2, _toArray$1, _win$2, _isEdge, _coreInitted$2,
  	_windowExists$2 = () => typeof(window) !== "undefined",
  	_getGSAP$1 = () => gsap$2 || (_windowExists$2() && (gsap$2 = window.gsap) && gsap$2.registerPlugin && gsap$2),
  	_numExp$2 = /[-+=\.]*\d+[\.e\-\+]*\d*[e\-\+]*\d*/gi, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
  	_types = {rect:["width","height"], circle:["r","r"], ellipse:["rx","ry"], line:["x2","y2"]},
  	_round$2 = value => Math.round(value * 10000) / 10000,
  	_parseNum = value => parseFloat(value || 0),
  	_getAttributeAsNumber = (target, attr) => _parseNum(target.getAttribute(attr)),
  	_sqrt$3 = Math.sqrt,
  	_getDistance = (x1, y1, x2, y2, scaleX, scaleY) => _sqrt$3(((_parseNum(x2) - _parseNum(x1)) * scaleX) ** 2 + ((_parseNum(y2) - _parseNum(y1)) * scaleY) ** 2),
  	_warn$1 = message => console.warn(message),
  	_hasNonScalingStroke = target => target.getAttribute("vector-effect") === "non-scaling-stroke",
  	_bonusValidated$1 = 1, //<name>DrawSVGPlugin</name>
  	//accepts values like "100%" or "20% 80%" or "20 50" and parses it into an absolute start and end position on the line/stroke based on its length. Returns an an array with the start and end values, like [0, 243]
  	_parse = (value, length, defaultStart) => {
  		let i = value.indexOf(" "),
  			s, e;
  		if (i < 0) {
  			s = defaultStart !== undefined ? defaultStart + "" : value;
  			e = value;
  		} else {
  			s = value.substr(0, i);
  			e = value.substr(i + 1);
  		}
  		s = ~s.indexOf("%") ? (_parseNum(s) / 100) * length : _parseNum(s);
  		e = ~e.indexOf("%") ? (_parseNum(e) / 100) * length : _parseNum(e);
  		return (s > e) ? [e, s] : [s, e];
  	},
  	_getLength = target => {
  		target = _toArray$1(target)[0];
  		if (!target) {
  			return 0;
  		}
  		let type = target.tagName.toLowerCase(),
  			style = target.style,
  			scaleX = 1,
  			scaleY = 1,
  			length, bbox, points, prevPoint, i, rx, ry;
  		if (_hasNonScalingStroke(target)) { //non-scaling-stroke basically scales the shape and then strokes it at the screen-level (after transforms), thus we need to adjust the length accordingly.
  			scaleY = target.getScreenCTM();
  			scaleX = _sqrt$3(scaleY.a * scaleY.a + scaleY.b * scaleY.b);
  			scaleY = _sqrt$3(scaleY.d * scaleY.d + scaleY.c * scaleY.c);
  		}
  		try { //IE bug: calling <path>.getTotalLength() locks the repaint area of the stroke to whatever its current dimensions are on that frame/tick. To work around that, we must call getBBox() to force IE to recalculate things.
  			bbox = target.getBBox(); //solely for fixing bug in IE - we don't actually use the bbox.
  		} catch (e) {
  			//firefox has a bug that throws an error if the element isn't visible.
  			_warn$1("Some browsers won't measure invisible elements (like display:none or masks inside defs).");
  		}
  		let {x, y, width, height} = bbox || {x:0, y:0, width:0, height:0};
  		if ((!bbox || (!width && !height)) && _types[type]) { //if the element isn't visible, try to discern width/height using its attributes.
  			width =_getAttributeAsNumber(target, _types[type][0]);
  			height = _getAttributeAsNumber(target, _types[type][1]);
  			if (type !== "rect" && type !== "line") { //double the radius for circles and ellipses
  				width *= 2;
  				height *= 2;
  			}
  			if (type === "line") {
  				x = _getAttributeAsNumber(target, "x1");
  				y = _getAttributeAsNumber(target, "y1");
  				width = Math.abs(width - x);
  				height = Math.abs(height - y);
  			}
  		}
  		if (type === "path") {
  			prevPoint = style.strokeDasharray;
  			style.strokeDasharray = "none";
  			length = target.getTotalLength() || 0;
  			if (scaleX !== scaleY) {
  				_warn$1("Warning: <path> length cannot be measured when vector-effect is non-scaling-stroke and the element isn't proportionally scaled.");
  			}
  			length *= (scaleX + scaleY) / 2;
  			style.strokeDasharray = prevPoint;
  		} else if (type === "rect") {
  			length = width * 2 * scaleX + height * 2 * scaleY;
  		} else if (type === "line") {
  			length = _getDistance(x, y, x + width, y + height, scaleX, scaleY);
  		} else if (type === "polyline" || type === "polygon") {
  			points = target.getAttribute("points").match(_numExp$2) || [];
  			if (type === "polygon") {
  				points.push(points[0], points[1]);
  			}
  			length = 0;
  			for (i = 2; i < points.length; i+=2) {
  				length += _getDistance(points[i-2], points[i-1], points[i], points[i+1], scaleX, scaleY) || 0;
  			}
  		} else if (type === "circle" || type === "ellipse") {
  			rx = (width / 2) * scaleX;
  			ry = (height / 2) * scaleY;
  			length = Math.PI * ( 3 * (rx + ry) - _sqrt$3((3 * rx + ry) * (rx + 3 * ry)) );
  		}
  		return length || 0;
  	},
  	_getPosition = (target, length) => {
  		target = _toArray$1(target)[0];
  		if (!target) {
  			return [0, 0];
  		}
  		if (!length) {
  			length = _getLength(target) + 1;
  		}
  		let cs = _win$2.getComputedStyle(target),
  			dash = cs.strokeDasharray || "",
  			offset = _parseNum(cs.strokeDashoffset),
  			i = dash.indexOf(",");
  		if (i < 0) {
  			i = dash.indexOf(" ");
  		}
  		dash = (i < 0) ? length : _parseNum(dash.substr(0, i)) || 1e-5;
  		if (dash > length) {
  			dash = length;
  		}
  		return [Math.max(0, -offset), Math.max(0, dash - offset)];
  	},
  	_initCore$2 = () => {
  		if (_windowExists$2()) {
  			_win$2 = window;
  			_coreInitted$2 = gsap$2 = _getGSAP$1();
  			_toArray$1 = gsap$2.utils.toArray;
  			_isEdge = (((_win$2.navigator || {}).userAgent || "").indexOf("Edge") !== -1); //Microsoft Edge has a bug that causes it not to redraw the path correctly if the stroke-linecap is anything other than "butt" (like "round") and it doesn't match the stroke-linejoin. A way to trigger it is to change the stroke-miterlimit, so we'll only do that if/when we have to (to maximize performance)
  		}
  	};


  const DrawSVGPlugin = {
  	version:"3.4.0",
  	name:"drawSVG",
  	register(core) {
  		gsap$2 = core;
  		_initCore$2();
  	},
  	init(target, value, tween, index, targets) {
  		if (!target.getBBox) {
  			return false;
  		}
  		if (!_coreInitted$2) {
  			_initCore$2();
  		}
  		let length = _getLength(target) + 1,
  			start, end, overage, cs;
  		this._style = target.style;
  		this._target = target;
  		if (value + "" === "true") {
  			value = "0 100%";
  		} else if (!value) {
  			value = "0 0";
  		} else if ((value + "").indexOf(" ") === -1) {
  			value = "0 " + value;
  		}
  		start = _getPosition(target, length);
  		end = _parse(value, length, start[0]);
  		this._length = _round$2(length + 10);
  		if (start[0] === 0 && end[0] === 0) {
  			overage = Math.max(0.00001, end[1] - length); //allow people to go past the end, like values of 105% because for some paths, Firefox doesn't return an accurate getTotalLength(), so it could end up coming up short.
  			this._dash = _round$2(length + overage);
  			this._offset = _round$2(length - start[1] + overage);
  			this._offsetPT = this.add(this, "_offset", this._offset, _round$2(length - end[1] + overage));
  		} else {
  			this._dash = _round$2(start[1] - start[0]) || 0.000001; //some browsers render artifacts if dash is 0, so we use a very small number in that case.
  			this._offset = _round$2(-start[0]);
  			this._dashPT = this.add(this, "_dash", this._dash, _round$2(end[1] - end[0]) || 0.00001);
  			this._offsetPT = this.add(this, "_offset", this._offset, _round$2(-end[0]));
  		}
  		if (_isEdge) { //to work around a bug in Microsoft Edge, animate the stroke-miterlimit by 0.0001 just to trigger the repaint (unnecessary if it's "round" and stroke-linejoin is also "round"). Imperceptible, relatively high-performance, and effective. Another option was to set the "d" <path> attribute to its current value on every tick, but that seems like it'd be much less performant.
  			cs = _win$2.getComputedStyle(target);
  			if (cs.strokeLinecap !== cs.strokeLinejoin) {
  				end = _parseNum(cs.strokeMiterlimit);
  				this.add(target.style, "strokeMiterlimit", end, end + 0.01);
  			}
  		}
  		this._live = (_hasNonScalingStroke(target) || ~((value + "").indexOf("live")));
  		this._props.push("drawSVG");
  		return _bonusValidated$1;
  	},
  	render(ratio, data) {
  		let pt = data._pt,
  			style = data._style,
  			length, lengthRatio, dash, offset;
  		if (pt) {
  			//when the element has vector-effect="non-scaling-stroke" and the SVG is resized (like on a window resize), it actually changes the length of the stroke! So we must sense that and make the proper adjustments.
  			if (data._live) {
  				length = _getLength(data._target) + 11;
  				if (length !== data._length) {
  					lengthRatio = length / data._length;
  					data._length = length;
  					data._offsetPT.s *= lengthRatio;
  					data._offsetPT.c *= lengthRatio;
  					if (data._dashPT) {
  						data._dashPT.s *= lengthRatio;
  						data._dashPT.c *= lengthRatio;
  					} else {
  						data._dash *= lengthRatio;
  					}
  				}
  			}
  			while (pt) {
  				pt.r(ratio, pt.d);
  				pt = pt._next;
  			}
  			dash = data._dash;
  			offset = data._offset;
  			length = data._length;
  			style.strokeDashoffset = data._offset;
  			if (ratio === 1 || !ratio) {
  				if (dash - offset < 0.001 && length - dash <= 10) { //works around a bug in Safari that caused strokes with rounded ends to still show initially when they shouldn't.
  					style.strokeDashoffset = offset + 1;
  				}
  				style.strokeDasharray = (offset < 0.001 && length - dash <= 10) ? "none" : (offset === dash) ? "0px, 999999px" : dash + "px," + length + "px";
  			} else {
  				style.strokeDasharray = dash + "px," + length + "px";
  			}
  		}
  	},
  	getLength: _getLength,
  	getPosition: _getPosition
  };

  _getGSAP$1() && gsap$2.registerPlugin(DrawSVGPlugin);

  /*!
   * matrix 3.4.0
   * https://greensock.com
   *
   * Copyright 2008-2020, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  /* eslint-disable */

  let _doc$2, _win$3, _docElement$1, _body,	_divContainer, _svgContainer, _identityMatrix,
  	_transformProp$1 = "transform",
  	_transformOriginProp$1 = _transformProp$1 + "Origin",
  	_hasOffsetBug,
  	_setDoc = element => {
  		let doc = element.ownerDocument || element;
  		if (!(_transformProp$1 in element.style) && "msTransform" in element.style) { //to improve compatibility with old Microsoft browsers
  			_transformProp$1 = "msTransform";
  			_transformOriginProp$1 = _transformProp$1 + "Origin";
  		}
  		while (doc.parentNode && (doc = doc.parentNode)) {	}
  		_win$3 = window;
  		_identityMatrix = new Matrix2D();
  		if (doc) {
  			_doc$2 = doc;
  			_docElement$1 = doc.documentElement;
  			_body = doc.body;
  			// now test for the offset reporting bug. Use feature detection instead of browser sniffing to make things more bulletproof and future-proof. Hopefully Safari will fix their bug soon but it's 2020 and it's still not fixed.
  			let d1 = doc.createElement("div"),
  				d2 = doc.createElement("div");
  			_body.appendChild(d1);
  			d1.appendChild(d2);
  			d1.style.position = "static";
  			d1.style[_transformProp$1] = "translate3d(0,0,1px)";
  			_hasOffsetBug = (d2.offsetParent !== d1);
  			_body.removeChild(d1);
  		}
  		return doc;
  	},
  	_forceNonZeroScale = e => { // walks up the element's ancestors and finds any that had their scale set to 0 via GSAP, and changes them to 0.0001 to ensure that measurements work
  		let a, cache;
  		while (e && e !== _body) {
  			cache = e._gsap;
  			if (cache && !cache.scaleX && !cache.scaleY && cache.renderTransform) {
  				cache.scaleX = cache.scaleY = 1e-4;
  				cache.renderTransform(1, cache);
  				a ? a.push(cache) : (a = [cache]);
  			}
  			e = e.parentNode;
  		}
  		return a;
  	},
  	// possible future addition: pass an element to _forceDisplay() and it'll walk up all its ancestors and make sure anything with display: none is set to display: block, and if there's no parentNode, it'll add it to the body. It returns an Array that you can then feed to _revertDisplay() to have it revert all the changes it made.
  	// _forceDisplay = e => {
  	// 	let a = [],
  	// 		parent;
  	// 	while (e && e !== _body) {
  	// 		parent = e.parentNode;
  	// 		(_win.getComputedStyle(e).display === "none" || !parent) && a.push(e, e.style.display, parent) && (e.style.display = "block");
  	// 		parent || _body.appendChild(e);
  	// 		e = parent;
  	// 	}
  	// 	return a;
  	// },
  	// _revertDisplay = a => {
  	// 	for (let i = 0; i < a.length; i+=3) {
  	// 		a[i+1] ? (a[i].style.display = a[i+1]) : a[i].style.removeProperty("display");
  	// 		a[i+2] || a[i].parentNode.removeChild(a[i]);
  	// 	}
  	// },
  	_svgTemps = [], //we create 3 elements for SVG, and 3 for other DOM elements and cache them for performance reasons. They get nested in _divContainer and _svgContainer so that just one element is added to the DOM on each successive attempt. Again, performance is key.
  	_divTemps = [],
  	_getDocScrollTop = () => _win$3.pageYOffset  || _doc$2.scrollTop || _docElement$1.scrollTop || _body.scrollTop || 0,
  	_getDocScrollLeft = () => _win$3.pageXOffset || _doc$2.scrollLeft || _docElement$1.scrollLeft || _body.scrollLeft || 0,
  	_svgOwner = element => element.ownerSVGElement || ((element.tagName + "").toLowerCase() === "svg" ? element : null),
  	_isFixed = element => {
  		if (_win$3.getComputedStyle(element).position === "fixed") {
  			return true;
  		}
  		element = element.parentNode;
  		if (element && element.nodeType === 1) { // avoid document fragments which will throw an error.
  			return _isFixed(element);
  		}
  	},
  	_createSibling = (element, i) => {
  		if (element.parentNode && (_doc$2 || _setDoc(element))) {
  			let svg = _svgOwner(element),
  				ns = svg ? (svg.getAttribute("xmlns") || "http://www.w3.org/2000/svg") : "http://www.w3.org/1999/xhtml",
  				type = svg ? (i ? "rect" : "g") : "div",
  				x = i !== 2 ? 0 : 100,
  				y = i === 3 ? 100 : 0,
  				css = "position:absolute;display:block;pointer-events:none;",
  				e = _doc$2.createElementNS ? _doc$2.createElementNS(ns.replace(/^https/, "http"), type) : _doc$2.createElement(type);
  			if (i) {
  				if (!svg) {
  					if (!_divContainer) {
  						_divContainer = _createSibling(element);
  						_divContainer.style.cssText = css;
  					}
  					e.style.cssText = css + "width:0.1px;height:0.1px;top:" + y + "px;left:" + x + "px";
  					_divContainer.appendChild(e);

  				} else {
  					if (!_svgContainer) {
  						_svgContainer = _createSibling(element);
  					}
  					e.setAttribute("width", 0.01);
  					e.setAttribute("height", 0.01);
  					e.setAttribute("transform", "translate(" + x + "," + y + ")");
  					_svgContainer.appendChild(e);
  				}
  			}
  			return e;
  		}
  		throw "Need document and parent.";
  	},
  	_consolidate = m => { // replaces SVGTransformList.consolidate() because a bug in Firefox causes it to break pointer events. See https://greensock.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800
  		let c = new Matrix2D(),
  			i = 0;
  		for (; i < m.numberOfItems; i++) {
  			c.multiply(m.getItem(i).matrix);
  		}
  		return c;
  	},
  	_placeSiblings = (element, adjustGOffset) => {
  		let svg = _svgOwner(element),
  			isRootSVG = element === svg,
  			siblings = svg ? _svgTemps : _divTemps,
  			container, m, b, x, y;
  		if (element === _win$3) {
  			return element;
  		}
  		if (!siblings.length) {
  			siblings.push(_createSibling(element, 1), _createSibling(element, 2), _createSibling(element, 3));
  		}
  		container = svg ? _svgContainer : _divContainer;
  		if (svg) {
  			b = isRootSVG ? {x:0, y:0} : element.getBBox();
  			m = element.transform ? element.transform.baseVal : {}; // IE11 doesn't follow the spec.
  			if (m.numberOfItems) {
  				m = m.numberOfItems > 1 ? _consolidate(m) : m.getItem(0).matrix; // don't call m.consolidate().matrix because a bug in Firefox makes pointer events not work when consolidate() is called on the same tick as getBoundingClientRect()! See https://greensock.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800
  				x = m.a * b.x + m.c * b.y;
  				y = m.b * b.x + m.d * b.y;
  			} else {
  				m = _identityMatrix;
  				x = b.x;
  				y = b.y;
  			}
  			if (adjustGOffset && element.tagName.toLowerCase() === "g") {
  				x = y = 0;
  			}
  			container.setAttribute("transform", "matrix(" + m.a + "," + m.b + "," + m.c + "," + m.d + "," + (m.e + x) + "," + (m.f + y) + ")");
  			(isRootSVG ? svg : element.parentNode).appendChild(container);
  		} else {
  			x = y = 0;
  			if (_hasOffsetBug) { // some browsers (like Safari) have a bug that causes them to misreport offset values. When an ancestor element has a transform applied, it's supposed to treat it as if it's position: relative (new context). Safari botches this, so we need to find the closest ancestor (between the element and its offsetParent) that has a transform applied and if one is found, grab its offsetTop/Left and subtract them to compensate.
  				m = element.offsetParent;
  				b = element;
  				while (b && (b = b.parentNode) && b !== m && b.parentNode) {
  					if ((_win$3.getComputedStyle(b)[_transformProp$1] + "").length > 4) {
  						x = b.offsetLeft;
  						y = b.offsetTop;
  						b = 0;
  					}
  				}
  			}
  			b = container.style;
  			b.top = (element.offsetTop - y) + "px";
  			b.left = (element.offsetLeft - x) + "px";
  			m = _win$3.getComputedStyle(element);
  			b[_transformProp$1] = m[_transformProp$1];
  			b[_transformOriginProp$1] = m[_transformOriginProp$1];
  			b.border = m.border;
  			b.borderLeftStyle = m.borderLeftStyle;
  			b.borderTopStyle = m.borderTopStyle;
  			b.borderLeftWidth = m.borderLeftWidth;
  			b.borderTopWidth = m.borderTopWidth;
  			b.position = m.position === "fixed" ? "fixed" : "absolute";
  			element.parentNode.appendChild(container);
  		}
  		return container;
  	},
  	_setMatrix = (m, a, b, c, d, e, f) => {
  		m.a = a;
  		m.b = b;
  		m.c = c;
  		m.d = d;
  		m.e = e;
  		m.f = f;
  		return m;
  	};

  class Matrix2D {
  	constructor(a=1, b=0, c=0, d=1, e=0, f=0) {
  		_setMatrix(this, a, b, c, d, e, f);
  	}

  	inverse() {
  		let {a, b, c, d, e, f} = this,
  			determinant = (a * d - b * c) || 1e-10;
  		return _setMatrix(
  			this,
  			d / determinant,
  			-b / determinant,
  			-c / determinant,
  			a / determinant,
  			(c * f - d * e) / determinant,
  			-(a * f - b * e) / determinant
  		);
  	}

  	multiply(matrix) {
  		let {a, b, c, d, e, f} = this,
  			a2 = matrix.a,
  			b2 = matrix.c,
  			c2 = matrix.b,
  			d2 = matrix.d,
  			e2 = matrix.e,
  			f2 = matrix.f;
  		return _setMatrix(this,
  			a2 * a + c2 * c,
  			a2 * b + c2 * d,
  			b2 * a + d2 * c,
  			b2 * b + d2 * d,
  			e + e2 * a + f2 * c,
  			f + e2 * b + f2 * d);
  	}

  	clone() {
  		return new Matrix2D(this.a, this.b, this.c, this.d, this.e, this.f);
  	}

  	equals(matrix) {
  		let {a, b, c, d, e, f} = this;
  		return (a === matrix.a && b === matrix.b && c === matrix.c && d === matrix.d && e === matrix.e && f === matrix.f);
  	}

  	apply(point, decoratee={}) {
  		let {x, y} = point,
  			{a, b, c, d, e, f} = this;
  		decoratee.x = (x * a + y * c + e) || 0;
  		decoratee.y = (x * b + y * d + f) || 0;
  		return decoratee;
  	}

  }

  //feed in an element and it'll return a 2D matrix (optionally inverted) so that you can translate between coordinate spaces.
  // Inverting lets you translate a global point into a local coordinate space. No inverting lets you go the other way.
  // We needed this to work around various browser bugs, like Firefox doesn't accurately report getScreenCTM() when there
  // are transforms applied to ancestor elements.
  // The matrix math to convert any x/y coordinate is as follows, which is wrapped in a convenient apply() method of Matrix2D above:
  //     tx = m.a * x + m.c * y + m.e
  //     ty = m.b * x + m.d * y + m.f
  function getGlobalMatrix(element, inverse, adjustGOffset) { // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.
  	if (!element || !element.parentNode || (_doc$2 || _setDoc(element)).documentElement === element) {
  		return new Matrix2D();
  	}
  	let zeroScales = _forceNonZeroScale(element.parentNode),
  		svg = _svgOwner(element),
  		temps = svg ? _svgTemps : _divTemps,
  		container = _placeSiblings(element, adjustGOffset),
  		b1 = temps[0].getBoundingClientRect(),
  		b2 = temps[1].getBoundingClientRect(),
  		b3 = temps[2].getBoundingClientRect(),
  		parent = container.parentNode,
  		isFixed = _isFixed(element),
  		m = new Matrix2D(
  			(b2.left - b1.left) / 100,
  			(b2.top - b1.top) / 100,
  			(b3.left - b1.left) / 100,
  			(b3.top - b1.top) / 100,
  			b1.left + (isFixed ? 0 : _getDocScrollLeft()),
  			b1.top + (isFixed ? 0 : _getDocScrollTop())
  		);
  	parent.removeChild(container);
  	if (zeroScales) {
  		b1 = zeroScales.length;
  		while (b1--) {
  			b2 = zeroScales[b1];
  			b2.scaleX = b2.scaleY = 0;
  			b2.renderTransform(1, b2);
  		}
  	}
  	return inverse ? m.inverse() : m;
  }

  // export function getMatrix(element) {
  // 	_doc || _setDoc(element);
  // 	let m = (_win.getComputedStyle(element)[_transformProp] + "").substr(7).match(/[-.]*\d+[.e\-+]*\d*[e\-\+]*\d*/g),
  // 		is2D = m && m.length === 6;
  // 	return !m || m.length < 6 ? new Matrix2D() : new Matrix2D(+m[0], +m[1], +m[is2D ? 2 : 4], +m[is2D ? 3 : 5], +m[is2D ? 4 : 12], +m[is2D ? 5 : 13]);
  // }

  /*!
   * Draggable 3.4.0
   * https://greensock.com
   *
   * @license Copyright 2008-2020, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
   */

  let gsap$3, _win$4, _doc$3, _docElement$2, _body$1, _tempDiv$1, _placeholderDiv, _coreInitted$3, _checkPrefix, _toArray$2, _supportsPassive, _isTouchDevice, _touchEventLookup, _dragCount, _isMultiTouching, _isAndroid, InertiaPlugin, _defaultCursor, _supportsPointer,
  	_windowExists$3 = () => typeof(window) !== "undefined",
  	_getGSAP$2 = () => gsap$3 || (_windowExists$3() && (gsap$3 = window.gsap) && gsap$3.registerPlugin && gsap$3),
  	_isFunction$2 = value => typeof(value) === "function",
  	_isObject$1 = value => typeof(value) === "object",
  	_isUndefined$1 = value => typeof(value) === "undefined",
  	_emptyFunc$1 = () => false,
  	_transformProp$2 = "transform",
  	_transformOriginProp$2 = "transformOrigin",
  	_round$3 = value => Math.round(value * 10000) / 10000,
  	_isArray$1 = Array.isArray,
  	_createElement$1 = (type, ns) => {
  		let e = _doc$3.createElementNS ? _doc$3.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc$3.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.
  		return e.style ? e : _doc$3.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
  	},
  	_RAD2DEG$1 = 180 / Math.PI,
  	_bigNum$3 = 1e20,
  	_identityMatrix$1 = new Matrix2D(),
  	_getTime = Date.now || (() => new Date().getTime()),
  	_renderQueue = [],
  	_lookup = {}, //when a Draggable is created, the target gets a unique _gsDragID property that allows gets associated with the Draggable instance for quick lookups in Draggable.get(). This avoids circular references that could cause gc problems.
  	_lookupCount = 0,
  	_clickableTagExp = /^(?:a|input|textarea|button|select)$/i,
  	_lastDragTime = 0,
  	_temp1 = {}, // a simple object we reuse and populate (usually x/y properties) to conserve memory and improve performance.
  	_windowProxy = {}, //memory/performance optimization - we reuse this object during autoScroll to store window-related bounds/offsets.
  	_copy = (obj, factor) => {
  		let copy = {}, p;
  		for (p in obj) {
  			copy[p] = factor ? obj[p] * factor : obj[p];
  		}
  		return copy;
  	},
  	_extend = (obj, defaults) => {
  		for (let p in defaults) {
  			if (!(p in obj)) {
  				obj[p] = defaults[p];
  			}
  		}
  		return obj;
  	},
  	_renderQueueTick = () => _renderQueue.forEach(func => func()),
  	_addToRenderQueue = func => {
  		_renderQueue.push(func);
  		if (_renderQueue.length === 1) {
  			gsap$3.ticker.add(_renderQueueTick);
  		}
  	},
  	_renderQueueTimeout = () => !_renderQueue.length && gsap$3.ticker.remove(_renderQueueTick),
  	_removeFromRenderQueue = func => {
  		let i = _renderQueue.length;
  		while (i--) {
  			if (_renderQueue[i] === func) {
  				_renderQueue.splice(i, 1);
  			}
  		}
  		gsap$3.to(_renderQueueTimeout, {overwrite:true, delay:15, duration:0, onComplete:_renderQueueTimeout, data:"_draggable"}); //remove the "tick" listener only after the render queue is empty for 15 seconds (to improve performance). Adding/removing it constantly for every click/touch wouldn't deliver optimal speed, and we also don't want the ticker to keep calling the render method when things are idle for long periods of time (we want to improve battery life on mobile devices).
  	},
  	_setDefaults$1 = (obj, defaults) => {
  		for (let p in defaults) {
  			if (!(p in obj)) {
  				obj[p] = defaults[p];
  			}
  		}
  		return obj;
  	},
  	_addListener = (element, type, func, capture) => {
  		if (element.addEventListener) {
  			let touchType = _touchEventLookup[type];
  			capture = capture || (_supportsPassive ? {passive: false} : null);
  			element.addEventListener(touchType || type, func, capture);
  			(touchType && type !== touchType) && element.addEventListener(type, func, capture);//some browsers actually support both, so must we. But pointer events cover all.
  		}
  	},
  	_removeListener = (element, type, func) => {
  		if (element.removeEventListener) {
  			let touchType = _touchEventLookup[type];
  			element.removeEventListener(touchType || type, func);
  			(touchType && type !== touchType) && element.removeEventListener(type, func);
  		}
  	},
  	_preventDefault = event => {
  		event.preventDefault && event.preventDefault();
  		event.preventManipulation && event.preventManipulation();  //for some Microsoft browsers
  	},
  	_hasTouchID = (list, ID) => {
  		let i = list.length;
  		while (i--) {
  			if (list[i].identifier === ID) {
  				return true;
  			}
  		}
  	},
  	_onMultiTouchDocumentEnd = event => {
  		_isMultiTouching = (event.touches && _dragCount < event.touches.length);
  		_removeListener(event.target, "touchend", _onMultiTouchDocumentEnd);
  	},

  	_onMultiTouchDocument = event => {
  		_isMultiTouching = (event.touches && _dragCount < event.touches.length);
  		_addListener(event.target, "touchend", _onMultiTouchDocumentEnd);
  	},
  	_getDocScrollTop$1 = doc => _win$4.pageYOffset  || doc.scrollTop || doc.documentElement.scrollTop || doc.body.scrollTop || 0,
  	_getDocScrollLeft$1 = doc => _win$4.pageXOffset || doc.scrollLeft || doc.documentElement.scrollLeft || doc.body.scrollLeft || 0,
  	_addScrollListener = (e, callback) => {
  		_addListener(e, "scroll", callback);
  		if (!_isRoot(e.parentNode)) {
  			_addScrollListener(e.parentNode, callback);
  		}
  	},
  	_removeScrollListener = (e, callback) => {
  		_removeListener(e, "scroll", callback);
  		if (!_isRoot(e.parentNode)) {
  			_removeScrollListener(e.parentNode, callback);
  		}
  	},
  	_isRoot = e => !!(!e || e === _docElement$2 || e.nodeType === 9 || e === _doc$3.body || e === _win$4 || !e.nodeType || !e.parentNode),
  	_getMaxScroll = (element, axis) => {
  		let dim = (axis === "x") ? "Width" : "Height",
  			scroll = "scroll" + dim,
  			client = "client" + dim;
  		return Math.max(0, _isRoot(element) ? Math.max(_docElement$2[scroll], _body$1[scroll]) - (_win$4["inner" + dim] || _docElement$2[client] || _body$1[client]) : element[scroll] - element[client]);
  	},
  	_recordMaxScrolls = (e, skipCurrent) => { //records _gsMaxScrollX and _gsMaxScrollY properties for the element and all ancestors up the chain so that we can cap it, otherwise dragging beyond the edges with autoScroll on can endlessly scroll.
  		let x = _getMaxScroll(e, "x"),
  			y = _getMaxScroll(e, "y");
  		if (_isRoot(e)) {
  			e = _windowProxy;
  		} else {
  			_recordMaxScrolls(e.parentNode, skipCurrent);
  		}
  		e._gsMaxScrollX = x;
  		e._gsMaxScrollY = y;
  		if (!skipCurrent) {
  			e._gsScrollX = e.scrollLeft || 0;
  			e._gsScrollY = e.scrollTop || 0;
  		}
  	},
  	_setStyle = (element, property, value) => {
  		let style = element.style;
  		if (!style) {
  			return;
  		}
  		if (_isUndefined$1(style[property])) {
  			property = _checkPrefix(property, element) || property;
  		}
  		if (value == null) {
  			style.removeProperty && style.removeProperty(property.replace(/([A-Z])/g, "-$1").toLowerCase());
  		} else {
  			style[property] = value;
  		}
  	},
  	_getComputedStyle = element => _win$4.getComputedStyle((element instanceof Element) ? element : element.host || (element.parentNode || {}).host || element), //the "host" stuff helps to accommodate ShadowDom objects.

  	_tempRect = {}, //reuse to reduce garbage collection tasks
  	_parseRect = e => { //accepts a DOM element, a mouse event, or a rectangle object and returns the corresponding rectangle with left, right, width, height, top, and bottom properties
  		if (e === _win$4) {
  			_tempRect.left = _tempRect.top = 0;
  			_tempRect.width = _tempRect.right = _docElement$2.clientWidth || e.innerWidth || _body$1.clientWidth || 0;
  			_tempRect.height = _tempRect.bottom = ((e.innerHeight || 0) - 20 < _docElement$2.clientHeight) ? _docElement$2.clientHeight : e.innerHeight || _body$1.clientHeight || 0;
  			return _tempRect;
  		}
  		let doc = e.ownerDocument || _doc$3,
  			r = !_isUndefined$1(e.pageX) ? {left: e.pageX - _getDocScrollLeft$1(doc), top: e.pageY - _getDocScrollTop$1(doc), right: e.pageX - _getDocScrollLeft$1(doc) + 1, bottom: e.pageY - _getDocScrollTop$1(doc) + 1} : (!e.nodeType && !_isUndefined$1(e.left) && !_isUndefined$1(e.top)) ? e : _toArray$2(e)[0].getBoundingClientRect();
  		if (_isUndefined$1(r.right) && !_isUndefined$1(r.width)) {
  			r.right = r.left + r.width;
  			r.bottom = r.top + r.height;
  		} else if (_isUndefined$1(r.width)) { //some browsers don't include width and height properties. We can't just set them directly on r because some browsers throw errors, so create a new generic object.
  			r = {width: r.right - r.left, height: r.bottom - r.top, right: r.right, left: r.left, bottom: r.bottom, top: r.top};
  		}
  		return r;
  	},

  	_dispatchEvent = (target, type, callbackName) => {
  		let vars = target.vars,
  			callback = vars[callbackName],
  			listeners = target._listeners[type],
  			result;
  		if (_isFunction$2(callback)) {
  			result = callback.apply(vars.callbackScope || target, vars[callbackName + "Params"] || [target.pointerEvent]);
  		}
  		if (listeners && target.dispatchEvent(type) === false) {
  			result = false;
  		}
  		return result;
  	},
  	_getBounds = (target, context) => { //accepts any of the following: a DOM element, jQuery object, selector text, or an object defining bounds as {top, left, width, height} or {minX, maxX, minY, maxY}. Returns an object with left, top, width, and height properties.
  		let e = _toArray$2(target)[0],
  			top, left, offset;
  		if (!e.nodeType && e !== _win$4) {
  			if (!_isUndefined$1(target.left)) {
  				offset = {x:0, y:0}; //_getOffsetTransformOrigin(context); //the bounds should be relative to the origin
  				return {left: target.left - offset.x, top: target.top - offset.y, width: target.width, height: target.height};
  			}
  			left = target.min || target.minX || target.minRotation || 0;
  			top = target.min || target.minY || 0;
  			return {left:left, top:top, width:(target.max || target.maxX || target.maxRotation || 0) - left, height:(target.max || target.maxY || 0) - top};
  		}
  		return _getElementBounds(e, context);
  	},
  	_point1 = {}, //we reuse to minimize garbage collection tasks.
  	_getElementBounds = (element, context) => {
  		context = _toArray$2(context)[0];
  		let isSVG = (element.getBBox && element.ownerSVGElement),
  			doc = element.ownerDocument || _doc$3,
  			left, right, top, bottom, matrix, p1, p2, p3, p4, bbox, width, height, cs, contextParent;
  		if (element === _win$4) {
  			top = _getDocScrollTop$1(doc);
  			left = _getDocScrollLeft$1(doc);
  			right = left + (doc.documentElement.clientWidth || element.innerWidth || doc.body.clientWidth || 0);
  			bottom = top + (((element.innerHeight || 0) - 20 < doc.documentElement.clientHeight) ? doc.documentElement.clientHeight : element.innerHeight || doc.body.clientHeight || 0); //some browsers (like Firefox) ignore absolutely positioned elements, and collapse the height of the documentElement, so it could be 8px, for example, if you have just an absolutely positioned div. In that case, we use the innerHeight to resolve this.
  		} else if (context === _win$4 || _isUndefined$1(context)) {
  			return element.getBoundingClientRect();
  		} else {
  			left = top =  0;
  			if (isSVG) {
  				bbox = element.getBBox();
  				width = bbox.width;
  				height = bbox.height;
  			} else {
  				if (element.viewBox && (bbox = element.viewBox.baseVal)) {
  					left = bbox.x || 0;
  					top = bbox.y || 0;
  					width = bbox.width;
  					height = bbox.height;
  				}
  				if (!width) {
  					cs = _getComputedStyle(element);
  					bbox = cs.boxSizing === "border-box";
  					width = (parseFloat(cs.width) || element.clientWidth || 0) + (bbox ? 0 : parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth));
  					height = (parseFloat(cs.height) || element.clientHeight || 0) + (bbox ? 0 : parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth));
  				}
  			}
  			right = width;
  			bottom = height;
  		}
  		if (element === context) {
  			return {left:left, top:top, width: right - left, height: bottom - top};
  		}
  		matrix = getGlobalMatrix(context, true).multiply(getGlobalMatrix(element));
  		p1 = matrix.apply({x:left, y:top});
  		p2 = matrix.apply({x:right, y:top});
  		p3 = matrix.apply({x:right, y:bottom});
  		p4 = matrix.apply({x:left, y:bottom});
  		left = Math.min(p1.x, p2.x, p3.x, p4.x);
  		top = Math.min(p1.y, p2.y, p3.y, p4.y);
  		contextParent = context.parentNode || {};
  		return {left: left + (contextParent.scrollLeft || 0), top: top + (contextParent.scrollTop || 0), width: Math.max(p1.x, p2.x, p3.x, p4.x) - left, height: Math.max(p1.y, p2.y, p3.y, p4.y) - top};
  	},
  	_parseInertia = (draggable, snap, max, min, factor, forceZeroVelocity) => {
  		let vars = {},
  			a, i, l;
  		if (snap) {
  			if (factor !== 1 && snap instanceof Array) { //some data must be altered to make sense, like if the user passes in an array of rotational values in degrees, we must convert it to radians. Or for scrollLeft and scrollTop, we invert the values.
  				vars.end = a = [];
  				l = snap.length;
  				if (_isObject$1(snap[0])) { //if the array is populated with objects, like points ({x:100, y:200}), make copies before multiplying by the factor, otherwise we'll mess up the originals and the user may reuse it elsewhere.
  					for (i = 0; i < l; i++) {
  						a[i] = _copy(snap[i], factor);
  					}
  				} else {
  					for (i = 0; i < l; i++) {
  						a[i] = snap[i] * factor;
  					}
  				}
  				max += 1.1; //allow 1.1 pixels of wiggle room when snapping in order to work around some browser inconsistencies in the way bounds are reported which can make them roughly a pixel off. For example, if "snap:[-$('#menu').width(), 0]" was defined and #menu had a wrapper that was used as the bounds, some browsers would be one pixel off, making the minimum -752 for example when snap was [-753,0], thus instead of snapping to -753, it would snap to 0 since -753 was below the minimum.
  				min -= 1.1;
  			} else if (_isFunction$2(snap)) {
  				vars.end = value => {
  					let result = snap.call(draggable, value),
  						copy, p;
  					if (factor !== 1) {
  						if (_isObject$1(result)) {
  							copy = {};
  							for (p in result) {
  								copy[p] = result[p] * factor;
  							}
  							result = copy;
  						} else {
  							result *= factor;
  						}
  					}
  					return result; //we need to ensure that we can scope the function call to the Draggable instance itself so that users can access important values like maxX, minX, maxY, minY, x, and y from within that function.
  				};
  			} else {
  				vars.end = snap;
  			}
  		}
  		if (max || max === 0) {
  			vars.max = max;
  		}
  		if (min || min === 0) {
  			vars.min = min;
  		}
  		if (forceZeroVelocity) {
  			vars.velocity = 0;
  		}
  		return vars;
  	},
  	_isClickable = element => { //sometimes it's convenient to mark an element as clickable by adding a data-clickable="true" attribute (in which case we won't preventDefault() the mouse/touch event). This method checks if the element is an <a>, <input>, or <button> or has an onclick or has the data-clickable or contentEditable attribute set to true (or any of its parent elements).
  		let data;
  		return (!element || !element.getAttribute || element === _body$1) ? false : ((data = element.getAttribute("data-clickable")) === "true" || (data !== "false" && (element.onclick || _clickableTagExp.test(element.nodeName + "") || element.getAttribute("contentEditable") === "true"))) ? true : _isClickable(element.parentNode);
  	},
  	_setSelectable = (elements, selectable) => {
  		let i = elements.length,
  			e;
  		while (i--) {
  			e = elements[i];
  			e.ondragstart = e.onselectstart = selectable ? null : _emptyFunc$1;
  			//setStyle(e, "userSelect", (selectable ? "text" : "none"));
  			gsap$3.set(e, {lazy:true, userSelect: (selectable ? "text" : "none")});
  		}
  	},
  	_isFixed$1 = element => {
  		if (_getComputedStyle(element).position === "fixed") {
  			return true;
  		}
  		element = element.parentNode;
  		if (element && element.nodeType === 1) { // avoid document fragments which will throw an error.
  			return _isFixed$1(element);
  		}
  	},
  	_supports3D$1, _addPaddingBR,

  	//The ScrollProxy class wraps an element's contents into another div (we call it "content") that we either add padding when necessary or apply a translate3d() transform in order to overscroll (scroll past the boundaries). This allows us to simply set the scrollTop/scrollLeft (or top/left for easier reverse-axis orientation, which is what we do in Draggable) and it'll do all the work for us. For example, if we tried setting scrollTop to -100 on a normal DOM element, it wouldn't work - it'd look the same as setting it to 0, but if we set scrollTop of a ScrollProxy to -100, it'll give the correct appearance by either setting paddingTop of the wrapper to 100 or applying a 100-pixel translateY.
  	ScrollProxy = function(element, vars) {
  		element = gsap$3.utils.toArray(element)[0];
  		vars = vars || {};
  		let content = document.createElement("div"),
  			style = content.style,
  			node = element.firstChild,
  			offsetTop = 0,
  			offsetLeft = 0,
  			prevTop = element.scrollTop,
  			prevLeft = element.scrollLeft,
  			scrollWidth = element.scrollWidth,
  			scrollHeight = element.scrollHeight,
  			extraPadRight = 0,
  			maxLeft = 0,
  			maxTop = 0,
  			elementWidth, elementHeight, contentHeight, nextNode, transformStart, transformEnd;
  		if (_supports3D$1 && vars.force3D !== false) {
  			transformStart = "translate3d(";
  			transformEnd = "px,0px)";
  		} else if (_transformProp$2) {
  			transformStart = "translate(";
  			transformEnd = "px)";
  		}
  		this.scrollTop = function(value, force) {
  			if (!arguments.length) {
  				return -this.top();
  			}
  			this.top(-value, force);
  		};
  		this.scrollLeft = function(value, force) {
  			if (!arguments.length) {
  				return -this.left();
  			}
  			this.left(-value, force);
  		};
  		this.left = function(value, force) {
  			if (!arguments.length) {
  				return -(element.scrollLeft + offsetLeft);
  			}
  			let dif = element.scrollLeft - prevLeft,
  				oldOffset = offsetLeft;
  			if ((dif > 2 || dif < -2) && !force) { //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.
  				prevLeft = element.scrollLeft;
  				gsap$3.killTweensOf(this, {left:1, scrollLeft:1});
  				this.left(-prevLeft);
  				if (vars.onKill) {
  					vars.onKill();
  				}
  				return;
  			}
  			value = -value; //invert because scrolling works in the opposite direction
  			if (value < 0) {
  				offsetLeft = (value - 0.5) | 0;
  				value = 0;
  			} else if (value > maxLeft) {
  				offsetLeft = (value - maxLeft) | 0;
  				value = maxLeft;
  			} else {
  				offsetLeft = 0;
  			}
  			if (offsetLeft || oldOffset) {
  				if (!this._skip) {
  					style[_transformProp$2] = transformStart + -offsetLeft + "px," + -offsetTop + transformEnd;
  				}
  				if (offsetLeft + extraPadRight >= 0) {
  					style.paddingRight =  offsetLeft + extraPadRight + "px";
  				}
  			}
  			element.scrollLeft = value | 0;
  			prevLeft = element.scrollLeft; //don't merge this with the line above because some browsers adjust the scrollLeft after it's set, so in order to be 100% accurate in tracking it, we need to ask the browser to report it.
  		};
  		this.top = function(value, force) {
  			if (!arguments.length) {
  				return -(element.scrollTop + offsetTop);
  			}
  			let dif = element.scrollTop - prevTop,
  				oldOffset = offsetTop;
  			if ((dif > 2 || dif < -2) && !force) { //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.
  				prevTop = element.scrollTop;
  				gsap$3.killTweensOf(this, {top:1, scrollTop:1});
  				this.top(-prevTop);
  				if (vars.onKill) {
  					vars.onKill();
  				}
  				return;
  			}
  			value = -value; //invert because scrolling works in the opposite direction
  			if (value < 0) {
  				offsetTop = (value - 0.5) | 0;
  				value = 0;
  			} else if (value > maxTop) {
  				offsetTop = (value - maxTop) | 0;
  				value = maxTop;
  			} else {
  				offsetTop = 0;
  			}
  			if (offsetTop || oldOffset) {
  				if (!this._skip) {
  					style[_transformProp$2] = transformStart + -offsetLeft + "px," + -offsetTop + transformEnd;
  				}
  			}
  			element.scrollTop = value | 0;
  			prevTop = element.scrollTop;
  		};

  		this.maxScrollTop = () => maxTop;
  		this.maxScrollLeft = () => maxLeft;

  		this.disable = function() {
  			node = content.firstChild;
  			while (node) {
  				nextNode = node.nextSibling;
  				element.appendChild(node);
  				node = nextNode;
  			}
  			if (element === content.parentNode) { //in case disable() is called when it's already disabled.
  				element.removeChild(content);
  			}
  		};
  		this.enable = function() {
  			node = element.firstChild;
  			if (node === content) {
  				return;
  			}
  			while (node) {
  				nextNode = node.nextSibling;
  				content.appendChild(node);
  				node = nextNode;
  			}
  			element.appendChild(content);
  			this.calibrate();
  		};
  		this.calibrate = function(force) {
  			let widthMatches = (element.clientWidth === elementWidth),
  				cs, x, y;
  			prevTop = element.scrollTop;
  			prevLeft = element.scrollLeft;
  			if (widthMatches && element.clientHeight === elementHeight && content.offsetHeight === contentHeight && scrollWidth === element.scrollWidth && scrollHeight === element.scrollHeight && !force) {
  				return; //no need to recalculate things if the width and height haven't changed.
  			}
  			if (offsetTop || offsetLeft) {
  				x = this.left();
  				y = this.top();
  				this.left(-element.scrollLeft);
  				this.top(-element.scrollTop);
  			}
  			cs = _getComputedStyle(element);
  			//first, we need to remove any width constraints to see how the content naturally flows so that we can see if it's wider than the containing element. If so, we've got to record the amount of overage so that we can apply that as padding in order for browsers to correctly handle things. Then we switch back to a width of 100% (without that, some browsers don't flow the content correctly)
  			if (!widthMatches || force) {
  				style.display = "block";
  				style.width = "auto";
  				style.paddingRight = "0px";
  				extraPadRight = Math.max(0, element.scrollWidth - element.clientWidth);
  				//if the content is wider than the container, we need to add the paddingLeft and paddingRight in order for things to behave correctly.
  				if (extraPadRight) {
  					extraPadRight += parseFloat(cs.paddingLeft) + (_addPaddingBR ? parseFloat(cs.paddingRight) : 0);
  				}
  			}
  			style.display = "inline-block";
  			style.position = "relative";
  			style.overflow = "visible";
  			style.verticalAlign = "top";
  			style.boxSizing = "content-box";
  			style.width = "100%";
  			style.paddingRight = extraPadRight + "px";
  			//some browsers neglect to factor in the bottom padding when calculating the scrollHeight, so we need to add that padding to the content when that happens. Allow a 2px margin for error
  			if (_addPaddingBR) {
  				style.paddingBottom = cs.paddingBottom;
  			}
  			elementWidth = element.clientWidth;
  			elementHeight = element.clientHeight;
  			scrollWidth = element.scrollWidth;
  			scrollHeight = element.scrollHeight;
  			maxLeft = element.scrollWidth - elementWidth;
  			maxTop = element.scrollHeight - elementHeight;
  			contentHeight = content.offsetHeight;
  			style.display = "block";
  			if (x || y) {
  				this.left(x);
  				this.top(y);
  			}
  		};
  		this.content = content;
  		this.element = element;
  		this._skip = false;
  		this.enable();
  	},
  	_initCore$3 = required => {
  		if (_windowExists$3() && document.body) {
  			let nav = window && window.navigator;
  			_win$4 = window;
  			_doc$3 = document;
  			_docElement$2 = _doc$3.documentElement;
  			_body$1 = _doc$3.body;
  			_tempDiv$1 = _createElement$1("div");
  			_supportsPointer = !!window.PointerEvent;
  			_placeholderDiv = _createElement$1("div");
  			_placeholderDiv.style.cssText = "visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;cursor:grab";
  			_defaultCursor = _placeholderDiv.style.cursor === "grab" ? "grab" : "move";
  			_isAndroid = (nav && nav.userAgent.toLowerCase().indexOf("android") !== -1); //Android handles touch events in an odd way and it's virtually impossible to "feature test" so we resort to UA sniffing
  			_isTouchDevice = (("ontouchstart" in _docElement$2) && ("orientation" in _win$4)) || (nav && (nav.MaxTouchPoints > 0 || nav.msMaxTouchPoints > 0));
  			_addPaddingBR = (function() { //this function is in charge of analyzing browser behavior related to padding. It sets the _addPaddingBR to true if the browser doesn't normally factor in the bottom or right padding on the element inside the scrolling area, and it sets _addPaddingLeft to true if it's a browser that requires the extra offset (offsetLeft) to be added to the paddingRight (like Opera).
  				let div = _createElement$1("div"),
  					child = _createElement$1("div"),
  					childStyle = child.style,
  					parent = _body$1,
  					val;
  				childStyle.display = "inline-block";
  				childStyle.position = "relative";
  				div.style.cssText = child.innerHTML = "width:90px;height:40px;padding:10px;overflow:auto;visibility:hidden";
  				div.appendChild(child);
  				parent.appendChild(div);
  				val = (child.offsetHeight + 18 > div.scrollHeight); //div.scrollHeight should be child.offsetHeight + 20 because of the 10px of padding on each side, but some browsers ignore one side. We allow a 2px margin of error.
  				parent.removeChild(div);
  				return val;
  			}());
  			_touchEventLookup = (function(types) { //we create an object that makes it easy to translate touch event types into their "pointer" counterparts if we're in a browser that uses those instead. Like IE10 uses "MSPointerDown" instead of "touchstart", for example.
  				let standard = types.split(","),
  					converted = (!_isUndefined$1(_tempDiv$1.onpointerdown) ? "pointerdown,pointermove,pointerup,pointercancel" : !_isUndefined$1(_tempDiv$1.onmspointerdown) ? "MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel" : types).split(","),
  					obj = {},
  					i = 4;
  				while (--i > -1) {
  					obj[standard[i]] = converted[i];
  					obj[converted[i]] = standard[i];
  				}
  				//to avoid problems in iOS 9, test to see if the browser supports the "passive" option on addEventListener().
  				try {
  					_docElement$2.addEventListener("test", null, Object.defineProperty({}, "passive", {
  						get: function () {
  							_supportsPassive = 1;
  						}
  					}));
  				} catch (e) {}
  				return obj;
  			}("touchstart,touchmove,touchend,touchcancel"));
  			_addListener(_doc$3, "touchcancel", _emptyFunc$1); //some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document. Very strange indeed.
  			_addListener(_win$4, "touchmove", _emptyFunc$1); //works around Safari bugs that still allow the page to scroll even when we preventDefault() on the touchmove event.
  			_body$1 && _body$1.addEventListener("touchstart", _emptyFunc$1); //works around Safari bug: https://greensock.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
  			_addListener(_doc$3, "contextmenu", function() {
  				for (let p in _lookup) {
  					if (_lookup[p].isPressed) {
  						_lookup[p].endDrag();
  					}
  				}
  			});
  			gsap$3 = _coreInitted$3 = _getGSAP$2();
  		}
  		if (gsap$3) {
  			InertiaPlugin = gsap$3.plugins.inertia;
  			_checkPrefix = gsap$3.utils.checkPrefix;
  			_transformProp$2 = _checkPrefix(_transformProp$2);
  			_transformOriginProp$2 = _checkPrefix(_transformOriginProp$2);
  			_toArray$2 = gsap$3.utils.toArray;
  			_supports3D$1 = !!_checkPrefix("perspective");
  		} else if (required) {
  			console.warn("Please gsap.registerPlugin(Draggable)");
  		}
  	};






  class EventDispatcher {

  	constructor(target) {
  		this._listeners = {};
  		this.target = target || this;
  	}

  	addEventListener(type, callback) {
  		let list = this._listeners[type] || (this._listeners[type] = []);
  		if (!~list.indexOf(callback)) {
  			list.push(callback);
  		}
  	}

  	removeEventListener(type, callback) {
  		let list = this._listeners[type],
  			i = (list && list.indexOf(callback)) || -1;
  		(i > -1) && list.splice(i, 1);
  	}

  	dispatchEvent(type) {
  		let result;
  		(this._listeners[type] || []).forEach(callback => (callback.call(this, {type: type, target: this.target}) === false) && (result = false));
  		return result; //if any of the callbacks return false, pass that along.
  	}
  }









  class Draggable extends EventDispatcher {

  	constructor(target, vars) {
  		super();
  		if (!gsap$3) {
  			_initCore$3(1);
  		}
  		target = _toArray$2(target)[0]; //in case the target is a selector object or selector text
  		if (!InertiaPlugin) {
  			InertiaPlugin = gsap$3.plugins.inertia;
  		}
  		this.vars = vars = _copy(vars || {});
  		this.target = target;
  		this.x = this.y = this.rotation = 0;
  		this.dragResistance = parseFloat(vars.dragResistance) || 0;
  		this.edgeResistance = isNaN(vars.edgeResistance) ? 1 : parseFloat(vars.edgeResistance) || 0;
  		this.lockAxis = vars.lockAxis;
  		this.autoScroll = vars.autoScroll || 0;
  		this.lockedAxis = null;
  		this.allowEventDefault = !!vars.allowEventDefault;

  		gsap$3.getProperty(target, "x"); // to ensure that transforms are instantiated.

  		let type = (vars.type || "x,y").toLowerCase(),
  			xyMode = (~type.indexOf("x") || ~type.indexOf("y")),
  			rotationMode = (type.indexOf("rotation") !== -1),
  			xProp = rotationMode ? "rotation" : xyMode ? "x" : "left",
  			yProp = xyMode ? "y" : "top",
  			allowX = !!(~type.indexOf("x") || ~type.indexOf("left") || type === "scroll"),
  			allowY = !!(~type.indexOf("y") || ~type.indexOf("top") || type === "scroll"),
  			minimumMovement = vars.minimumMovement || 2,
  			self = this,
  			triggers = _toArray$2(vars.trigger || vars.handle || target),
  			killProps = {},
  			dragEndTime = 0,
  			checkAutoScrollBounds = false,
  			autoScrollMarginTop = vars.autoScrollMarginTop || 40,
  			autoScrollMarginRight = vars.autoScrollMarginRight || 40,
  			autoScrollMarginBottom = vars.autoScrollMarginBottom || 40,
  			autoScrollMarginLeft = vars.autoScrollMarginLeft || 40,
  			isClickable = vars.clickableTest || _isClickable,
  			clickTime = 0,
  			gsCache = target._gsap || gsap$3.core.getCache(target),
  			isFixed = _isFixed$1(target),
  			getPropAsNum = (property, unit) => parseFloat(gsCache.get(target, property, unit)),
  			ownerDoc = target.ownerDocument || _doc$3,
  			enabled, scrollProxy, startPointerX, startPointerY, startElementX, startElementY, hasBounds, hasDragCallback, hasMoveCallback, maxX, minX, maxY, minY, touch, touchID, rotationOrigin, dirty, old, snapX, snapY, snapXY, isClicking, touchEventTarget, matrix, interrupted, allowNativeTouchScrolling, touchDragAxis, isDispatching, clickDispatch, trustedClickDispatch, isPreventingDefault,

  			onContextMenu = e => { //used to prevent long-touch from triggering a context menu.
  				// (self.isPressed && e.which < 2) && self.endDrag() // previously ended drag when context menu was triggered, but instead we should just stop propagation and prevent the default event behavior.
  				_preventDefault(e);
  				e.stopImmediatePropagation && e.stopImmediatePropagation();
  				return false;
  			},

  			//this method gets called on every tick of TweenLite.ticker which allows us to synchronize the renders to the core engine (which is typically synchronized with the display refresh via requestAnimationFrame). This is an optimization - it's better than applying the values inside the "mousemove" or "touchmove" event handler which may get called many times inbetween refreshes.
  			render = suppressEvents => {
  				if (self.autoScroll && self.isDragging && (checkAutoScrollBounds || dirty)) {
  					let e = target,
  						autoScrollFactor = self.autoScroll * 15, //multiplying by 15 just gives us a better "feel" speed-wise.
  						parent, isRoot, rect, pointerX, pointerY, changeX, changeY, gap;
  					checkAutoScrollBounds = false;
  					_windowProxy.scrollTop = ((_win$4.pageYOffset != null) ? _win$4.pageYOffset : (ownerDoc.documentElement.scrollTop != null) ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop);
  					_windowProxy.scrollLeft = ((_win$4.pageXOffset != null) ? _win$4.pageXOffset : (ownerDoc.documentElement.scrollLeft != null) ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft);
  					pointerX = self.pointerX - _windowProxy.scrollLeft;
  					pointerY = self.pointerY - _windowProxy.scrollTop;
  					while (e && !isRoot) { //walk up the chain and sense wherever the pointer is within 40px of an edge that's scrollable.
  						isRoot = _isRoot(e.parentNode);
  						parent = isRoot ? _windowProxy : e.parentNode;
  						rect = isRoot ? {bottom:Math.max(_docElement$2.clientHeight, _win$4.innerHeight || 0), right: Math.max(_docElement$2.clientWidth, _win$4.innerWidth || 0), left:0, top:0} : parent.getBoundingClientRect();
  						changeX = changeY = 0;
  						if (allowY) {
  							gap = parent._gsMaxScrollY - parent.scrollTop;
  							if (gap < 0) {
  								changeY = gap;
  							} else if (pointerY > rect.bottom - autoScrollMarginBottom && gap) {
  								checkAutoScrollBounds = true;
  								changeY = Math.min(gap, (autoScrollFactor * (1 - Math.max(0, (rect.bottom - pointerY)) / autoScrollMarginBottom)) | 0);
  							} else if (pointerY < rect.top + autoScrollMarginTop && parent.scrollTop) {
  								checkAutoScrollBounds = true;
  								changeY = -Math.min(parent.scrollTop, (autoScrollFactor * (1 - Math.max(0, (pointerY - rect.top)) / autoScrollMarginTop)) | 0);
  							}
  							if (changeY) {
  								parent.scrollTop += changeY;
  							}
  						}
  						if (allowX) {
  							gap = parent._gsMaxScrollX - parent.scrollLeft;
  							if (gap < 0) {
  								changeX = gap;
  							} else if (pointerX > rect.right - autoScrollMarginRight && gap) {
  								checkAutoScrollBounds = true;
  								changeX = Math.min(gap, (autoScrollFactor * (1 - Math.max(0, (rect.right - pointerX)) / autoScrollMarginRight)) | 0);
  							} else if (pointerX < rect.left + autoScrollMarginLeft && parent.scrollLeft) {
  								checkAutoScrollBounds = true;
  								changeX = -Math.min(parent.scrollLeft, (autoScrollFactor * (1 - Math.max(0, (pointerX - rect.left)) / autoScrollMarginLeft)) | 0);
  							}
  							if (changeX) {
  								parent.scrollLeft += changeX;
  							}
  						}

  						if (isRoot && (changeX || changeY)) {
  							_win$4.scrollTo(parent.scrollLeft, parent.scrollTop);
  							setPointerPosition(self.pointerX + changeX, self.pointerY + changeY);
  						}
  						e = parent;
  					}
  				}
  				if (dirty) {
  					let {x, y} = self;
  					if (rotationMode) {
  						self.deltaX = x - parseFloat(gsCache.rotation);
  						self.rotation = x;
  						gsCache.rotation = x + "deg";
  						gsCache.renderTransform(1, gsCache);
  					} else {
  						if (scrollProxy) {
  							if (allowY) {
  								self.deltaY = y - scrollProxy.top();
  								scrollProxy.top(y);
  							}
  							if (allowX) {
  								self.deltaX = x - scrollProxy.left();
  								scrollProxy.left(x);
  							}
  						} else if (xyMode) {
  							if (allowY) {
  								self.deltaY = y - parseFloat(gsCache.y);
  								gsCache.y = y + "px";
  							}
  							if (allowX) {
  								self.deltaX = x - parseFloat(gsCache.x);
  								gsCache.x = x + "px";
  							}
  							gsCache.renderTransform(1, gsCache);
  						} else {
  							if (allowY) {
  								self.deltaY = y - parseFloat(target.style.top || 0);
  								target.style.top = y + "px";
  							}
  							if (allowX) {
  								self.deltaY = x - parseFloat(target.style.left || 0);
  								target.style.left = x + "px";
  							}
  						}
  					}
  					if (hasDragCallback && !suppressEvents && !isDispatching) {
  						isDispatching = true; //in case onDrag has an update() call (avoid endless loop)
  						if (_dispatchEvent(self, "drag", "onDrag") === false) {
  							if (allowX) {
  								self.x -= self.deltaX;
  							}
  							if (allowY) {
  								self.y -= self.deltaY;
  							}
  							render(true);
  						}
  						isDispatching = false;
  					}
  				}
  				dirty = false;
  			},

  			//copies the x/y from the element (whether that be transforms, top/left, or ScrollProxy's top/left) to the Draggable's x and y (and rotation if necessary) properties so that they reflect reality and it also (optionally) applies any snapping necessary. This is used by the InertiaPlugin tween in an onUpdate to ensure things are synced and snapped.
  			syncXY = (skipOnUpdate, skipSnap) => {
  				let { x, y } = self,
  					snappedValue, cs;
  				if (!target._gsap) { //just in case the _gsap cache got wiped, like if the user called clearProps on the transform or something (very rare).
  					gsCache = gsap$3.core.getCache(target);
  				}
  				if (xyMode) {
  					self.x = parseFloat(gsCache.x);
  					self.y = parseFloat(gsCache.y);
  				} else if (rotationMode) {
  					self.x = self.rotation = parseFloat(gsCache.rotation);
  				} else if (scrollProxy) {
  					self.y = scrollProxy.top();
  					self.x = scrollProxy.left();
  				} else {
  					self.y = parseInt(target.style.top || ((cs = _getComputedStyle(target)) && cs.top), 10) || 0;
  					self.x = parseInt(target.style.left || (cs || {}).left, 10) || 0;
  				}
  				if ((snapX || snapY || snapXY) && !skipSnap && (self.isDragging || self.isThrowing)) {
  					if (snapXY) {
  						_temp1.x = self.x;
  						_temp1.y = self.y;
  						snappedValue = snapXY(_temp1);
  						if (snappedValue.x !== self.x) {
  							self.x = snappedValue.x;
  							dirty = true;
  						}
  						if (snappedValue.y !== self.y) {
  							self.y = snappedValue.y;
  							dirty = true;
  						}
  					}
  					if (snapX) {
  						snappedValue = snapX(self.x);
  						if (snappedValue !== self.x) {
  							self.x = snappedValue;
  							if (rotationMode) {
  								self.rotation = snappedValue;
  							}
  							dirty = true;
  						}
  					}
  					if (snapY) {
  						snappedValue = snapY(self.y);
  						if (snappedValue !== self.y) {
  							self.y = snappedValue;
  						}
  						dirty = true;
  					}
  				}
  				if (dirty) {
  					render(true);
  				}
  				if (!skipOnUpdate) {
  					self.deltaX = self.x - x;
  					self.deltaY = self.y - y;
  					_dispatchEvent(self, "throwupdate", "onThrowUpdate");
  				}
  			},

  			buildSnapFunc = (snap, min, max, factor) => {
  				if (min == null) {
  					min = -_bigNum$3;
  				}
  				if (max == null) {
  					max = _bigNum$3;
  				}
  				if (_isFunction$2(snap)) {
  					return n => {
  						let edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)
  						return snap.call(self, (n > max ? max + (n - max) * edgeTolerance : (n < min) ? min + (n - min) * edgeTolerance : n)) * factor;
  					};
  				}
  				if (_isArray$1(snap)) {
  					return n => {
  						let i = snap.length,
  							closest = 0,
  							absDif = _bigNum$3,
  							val, dif;
  						while (--i > -1) {
  							val = snap[i];
  							dif = val - n;
  							if (dif < 0) {
  								dif = -dif;
  							}
  							if (dif < absDif && val >= min && val <= max) {
  								closest = i;
  								absDif = dif;
  							}
  						}
  						return snap[closest];
  					};
  				}
  				return isNaN(snap) ? n => n : () => snap * factor;
  			},

  			buildPointSnapFunc = (snap, minX, maxX, minY, maxY, radius, factor) => {
  				radius = (radius && radius < _bigNum$3) ? radius * radius : _bigNum$3; //so we don't have to Math.sqrt() in the functions. Performance optimization.
  				if (_isFunction$2(snap)) {
  					return point => {
  						let edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance,
  							x = point.x,
  							y = point.y,
  							result, dx, dy; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)
  						point.x = x = (x > maxX ? maxX + (x - maxX) * edgeTolerance : (x < minX) ? minX + (x - minX) * edgeTolerance : x);
  						point.y = y = (y > maxY ? maxY + (y - maxY) * edgeTolerance : (y < minY) ? minY + (y - minY) * edgeTolerance : y);
  						result = snap.call(self, point);
  						if (result !== point) {
  							point.x = result.x;
  							point.y = result.y;
  						}
  						if (factor !== 1) {
  							point.x *= factor;
  							point.y *= factor;
  						}
  						if (radius < _bigNum$3) {
  							dx = point.x - x;
  							dy = point.y - y;
  							if (dx * dx + dy * dy > radius) {
  								point.x = x;
  								point.y = y;
  							}
  						}
  						return point;
  					};
  				}
  				if (_isArray$1(snap)) {
  					return p => {
  						let i = snap.length,
  							closest = 0,
  							minDist = _bigNum$3,
  							x, y, point, dist;
  						while (--i > -1) {
  							point = snap[i];
  							x = point.x - p.x;
  							y = point.y - p.y;
  							dist = x * x + y * y;
  							if (dist < minDist) {
  								closest = i;
  								minDist = dist;
  							}
  						}
  						return (minDist <= radius) ? snap[closest] : p;
  					};
  				}
  				return n => n;
  			},

  			calculateBounds = () => {
  				let bounds, targetBounds, snap, snapIsRaw;
  				hasBounds = false;
  				if (scrollProxy) {
  					scrollProxy.calibrate();
  					self.minX = minX = -scrollProxy.maxScrollLeft();
  					self.minY = minY = -scrollProxy.maxScrollTop();
  					self.maxX = maxX = self.maxY = maxY = 0;
  					hasBounds = true;
  				} else if (!!vars.bounds) {
  					bounds = _getBounds(vars.bounds, target.parentNode); //could be a selector/jQuery object or a DOM element or a generic object like {top:0, left:100, width:1000, height:800} or {minX:100, maxX:1100, minY:0, maxY:800}
  					if (rotationMode) {
  						self.minX = minX = bounds.left;
  						self.maxX = maxX = bounds.left + bounds.width;
  						self.minY = minY = self.maxY = maxY = 0;
  					} else if (!_isUndefined$1(vars.bounds.maxX) || !_isUndefined$1(vars.bounds.maxY)) {
  						bounds = vars.bounds;
  						self.minX = minX = bounds.minX;
  						self.minY = minY = bounds.minY;
  						self.maxX = maxX = bounds.maxX;
  						self.maxY = maxY = bounds.maxY;
  					} else {
  						targetBounds = _getBounds(target, target.parentNode);
  						self.minX = minX = Math.round(getPropAsNum(xProp, "px") + bounds.left - targetBounds.left - 0.5);
  						self.minY = minY = Math.round(getPropAsNum(yProp, "px") + bounds.top - targetBounds.top - 0.5);
  						self.maxX = maxX = Math.round(minX + (bounds.width - targetBounds.width));
  						self.maxY = maxY = Math.round(minY + (bounds.height - targetBounds.height));
  					}
  					if (minX > maxX) {
  						self.minX = maxX;
  						self.maxX = maxX = minX;
  						minX = self.minX;
  					}
  					if (minY > maxY) {
  						self.minY = maxY;
  						self.maxY = maxY = minY;
  						minY = self.minY;
  					}
  					if (rotationMode) {
  						self.minRotation = minX;
  						self.maxRotation = maxX;
  					}
  					hasBounds = true;
  				}
  				if (vars.liveSnap) {
  					snap = (vars.liveSnap === true) ? (vars.snap || {}) : vars.liveSnap;
  					snapIsRaw = (_isArray$1(snap) || _isFunction$2(snap));
  					if (rotationMode) {
  						snapX = buildSnapFunc((snapIsRaw ? snap : snap.rotation), minX, maxX, 1);
  						snapY = null;
  					} else {
  						if (snap.points) {
  							snapXY = buildPointSnapFunc((snapIsRaw ? snap : snap.points), minX, maxX, minY, maxY, snap.radius, scrollProxy ? -1 : 1);
  						} else {
  							if (allowX) {
  								snapX = buildSnapFunc((snapIsRaw ? snap : snap.x || snap.left || snap.scrollLeft), minX, maxX, scrollProxy ? -1 : 1);
  							}
  							if (allowY) {
  								snapY = buildSnapFunc((snapIsRaw ? snap : snap.y || snap.top || snap.scrollTop), minY, maxY, scrollProxy ? -1 : 1);
  							}
  						}
  					}
  				}
  			},

  			onThrowComplete = () => {
  				self.isThrowing = false;
  				_dispatchEvent(self, "throwcomplete", "onThrowComplete");
  			},
  			onThrowInterrupt = () => {
  				self.isThrowing = false;
  			},

  			animate = (inertia, forceZeroVelocity) => {
  				let snap, snapIsRaw, tween, overshootTolerance;
  				if (inertia && InertiaPlugin) {
  					if (inertia === true) {
  						snap = vars.snap || vars.liveSnap || {};
  						snapIsRaw = (_isArray$1(snap) || _isFunction$2(snap));
  						inertia = {resistance:(vars.throwResistance || vars.resistance || 1000) / (rotationMode ? 10 : 1)};
  						if (rotationMode) {
  							inertia.rotation = _parseInertia(self, snapIsRaw ? snap : snap.rotation, maxX, minX, 1, forceZeroVelocity);
  						} else {
  							if (allowX) {
  								inertia[xProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.x || snap.left, maxX, minX, scrollProxy ? -1 : 1, forceZeroVelocity || (self.lockedAxis === "x"));
  							}
  							if (allowY) {
  								inertia[yProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.y || snap.top, maxY, minY, scrollProxy ? -1 : 1, forceZeroVelocity || (self.lockedAxis === "y"));
  							}
  							if (snap.points || (_isArray$1(snap) && _isObject$1(snap[0]))) {
  								inertia.linkedProps = xProp + "," + yProp;
  								inertia.radius = snap.radius; //note: we also disable liveSnapping while throwing if there's a "radius" defined, otherwise it looks weird to have the item thrown past a snapping point but live-snapping mid-tween. We do this by altering the onUpdateParams so that "skipSnap" parameter is true for syncXY.
  							}
  						}
  					}
  					self.isThrowing = true;
  					overshootTolerance = (!isNaN(vars.overshootTolerance)) ? vars.overshootTolerance : (vars.edgeResistance === 1) ? 0 : (1 - self.edgeResistance) + 0.2;
  					if (!inertia.duration) {
  						inertia.duration = {max: Math.max(vars.minDuration || 0, ("maxDuration" in vars) ? vars.maxDuration : 2), min: (!isNaN(vars.minDuration) ? vars.minDuration : (overshootTolerance === 0 || (_isObject$1(inertia) && inertia.resistance > 1000)) ? 0 : 0.5), overshoot: overshootTolerance};
  					}
  					self.tween = tween = gsap$3.to(scrollProxy || target, {
  						inertia: inertia,
  						data: "_draggable",
  						onComplete: onThrowComplete,
  						onInterrupt: onThrowInterrupt,
  						onUpdate: (vars.fastMode ? _dispatchEvent : syncXY),
  						onUpdateParams: (vars.fastMode ? [self, "onthrowupdate", "onThrowUpdate"] : (snap && snap.radius) ? [false, true] : [])
  					});
  					if (!vars.fastMode) {
  						if (scrollProxy) {
  							scrollProxy._skip = true; // Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.
  						}
  						tween.render(1e9, true, true); // force to the end. Remember, the duration will likely change upon initting because that's when InertiaPlugin calculates it.
  						syncXY(true, true);
  						self.endX = self.x;
  						self.endY = self.y;
  						if (rotationMode) {
  							self.endRotation = self.x;
  						}
  						tween.play(0);
  						syncXY(true, true);
  						if (scrollProxy) {
  							scrollProxy._skip = false; //Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.
  						}
  					}
  				} else if (hasBounds) {
  					self.applyBounds();
  				}
  			},

  			updateMatrix = shiftStart => {
  				let start = matrix,
  					p;
  				matrix = getGlobalMatrix(target.parentNode, true);
  				if (shiftStart && self.isPressed && !matrix.equals(start || new Matrix2D())) { //if the matrix changes WHILE the element is pressed, we must adjust the startPointerX and startPointerY accordingly, so we invert the original matrix and figure out where the pointerX and pointerY were in the global space, then apply the new matrix to get the updated coordinates.
  					p = start.inverse().apply({x:startPointerX, y:startPointerY});
  					matrix.apply(p, p);
  					startPointerX = p.x;
  					startPointerY = p.y;
  				}
  				if (matrix.equals(_identityMatrix$1)) { //if there are no transforms, we can optimize performance by not factoring in the matrix
  					matrix = null;
  				}
  			},

  			recordStartPositions = () => {
  				let edgeTolerance = 1 - self.edgeResistance,
  					parsedOrigin, x, y;
  				updateMatrix(false);
  				if (matrix) {
  					_point1.x = self.pointerX;
  					_point1.y = self.pointerY;
  					matrix.apply(_point1, _point1);
  					startPointerX = _point1.x; //translate to local coordinate system
  					startPointerY = _point1.y;
  				}
  				if (dirty) {
  					setPointerPosition(self.pointerX, self.pointerY);
  					render(true);
  				}
  				if (scrollProxy) {
  					calculateBounds();
  					startElementY = scrollProxy.top();
  					startElementX = scrollProxy.left();
  				} else {
  					//if the element is in the process of tweening, don't force snapping to occur because it could make it jump. Imagine the user throwing, then before it's done, clicking on the element in its inbetween state.
  					if (isTweening()) {
  						syncXY(true, true);
  						calculateBounds();
  					} else {
  						self.applyBounds();
  					}
  					if (rotationMode) {
  						parsedOrigin = target.ownerSVGElement ? [gsCache.xOrigin - target.getBBox().x, gsCache.yOrigin - target.getBBox().y] : (_getComputedStyle(target)[_transformOriginProp$2] || "0 0").split(" ");
  						rotationOrigin = self.rotationOrigin = getGlobalMatrix(target).apply({x: parseFloat(parsedOrigin[0]) || 0, y: parseFloat(parsedOrigin[1]) || 0});
  						syncXY(true, true);
  						x = self.pointerX - rotationOrigin.x;
  						y = rotationOrigin.y - self.pointerY;
  						if (isFixed) {
  							x -= _getDocScrollLeft$1(ownerDoc);
  							y += _getDocScrollTop$1(ownerDoc);
  						}
  						startElementX = self.x; //starting rotation (x always refers to rotation in type:"rotation", measured in degrees)
  						startElementY = self.y = Math.atan2(y, x) * _RAD2DEG$1;
  					} else {
  						//parent = !isFixed && target.parentNode;
  						//startScrollTop = parent ? parent.scrollTop || 0 : 0;
  						//startScrollLeft = parent ? parent.scrollLeft || 0 : 0;
  						startElementY = getPropAsNum(yProp, "px"); //record the starting top and left values so that we can just add the mouse's movement to them later.
  						startElementX = getPropAsNum(xProp, "px");
  					}
  				}

  				if (hasBounds && edgeTolerance) {
  					if (startElementX > maxX) {
  						startElementX = maxX + (startElementX - maxX) / edgeTolerance;
  					} else if (startElementX < minX) {
  						startElementX = minX - (minX - startElementX) / edgeTolerance;
  					}
  					if (!rotationMode) {
  						if (startElementY > maxY) {
  							startElementY = maxY + (startElementY - maxY) / edgeTolerance;
  						} else if (startElementY < minY) {
  							startElementY = minY - (minY - startElementY) / edgeTolerance;
  						}
  					}
  				}
  				self.startX = startElementX;
  				self.startY = startElementY;
  			},

  			isTweening = () => self.tween && self.tween.isActive(),

  			removePlaceholder = () => {
  				if (_placeholderDiv.parentNode && !isTweening() && !self.isDragging) { //_placeholderDiv just props open auto-scrolling containers so they don't collapse as the user drags left/up. We remove it after dragging (and throwing, if necessary) finishes.
  					_placeholderDiv.parentNode.removeChild(_placeholderDiv);
  				}
  			},

  			//called when the mouse is pressed (or touch starts)
  			onPress = (e, force) => {
  				let i;
  				if (!enabled || self.isPressed || !e || ((e.type === "mousedown" || e.type === "pointerdown") && !force && _getTime() - clickTime < 30 && _touchEventLookup[self.pointerEvent.type])) { //when we DON'T preventDefault() in order to accommodate touch-scrolling and the user just taps, many browsers also fire a mousedown/mouseup sequence AFTER the touchstart/touchend sequence, thus it'd result in two quick "click" events being dispatched. This line senses that condition and halts it on the subsequent mousedown.
  					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchstart, pointerdown, mousedown. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
  					return;
  				}
  				interrupted = isTweening();
  				self.pointerEvent = e;
  				if (_touchEventLookup[e.type]) { //note: on iOS, BOTH touchmove and mousemove are dispatched, but the mousemove has pageY and pageX of 0 which would mess up the calculations and needlessly hurt performance.
  					touchEventTarget = ~e.type.indexOf("touch") ? (e.currentTarget || e.target) : ownerDoc; //pointer-based touches (for Microsoft browsers) don't remain locked to the original target like other browsers, so we must use the document instead. The event type would be "MSPointerDown" or "pointerdown".
  					_addListener(touchEventTarget, "touchend", onRelease);
  					_addListener(touchEventTarget, "touchmove", onMove);
  					_addListener(touchEventTarget, "touchcancel", onRelease);
  					_addListener(ownerDoc, "touchstart", _onMultiTouchDocument);
  				} else {
  					touchEventTarget = null;
  					_addListener(ownerDoc, "mousemove", onMove); //attach these to the document instead of the box itself so that if the user's mouse moves too quickly (and off of the box), things still work.
  				}
  				touchDragAxis = null;
  				if (!_supportsPointer  || !touchEventTarget) {
  					_addListener(ownerDoc, "mouseup", onRelease);
  					if (e && e.target) {
  						_addListener(e.target, "mouseup", onRelease); //we also have to listen directly on the element because some browsers don't bubble up the event to the _doc on elements with contentEditable="true"
  					}
  				}
  				isClicking = (isClickable.call(self, e.target) && vars.dragClickables === false && !force);
  				if (isClicking) {
  					_addListener(e.target, "change", onRelease); //in some browsers, when you mousedown on a <select> element, no mouseup gets dispatched! So we listen for a "change" event instead.
  					_dispatchEvent(self, "pressInit", "onPressInit");
  					_dispatchEvent(self, "press", "onPress");
  					_setSelectable(triggers, true); //accommodates things like inputs and elements with contentEditable="true" (otherwise user couldn't drag to select text)
  					return;
  				}
  				allowNativeTouchScrolling = (!touchEventTarget || allowX === allowY || self.vars.allowNativeTouchScrolling === false || (self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2))) ? false : allowX ? "y" : "x"; //note: in Chrome, right-clicking (for a context menu) fires onPress and it doesn't have the event.which set properly, so we must look for event.ctrlKey. If the user wants to allow context menus we should of course sense it here and not allow native touch scrolling.
  				isPreventingDefault = !allowNativeTouchScrolling && !self.allowEventDefault;
  				if (isPreventingDefault) {
  					_preventDefault(e);
  					_addListener(_win$4, "touchforcechange", _preventDefault); //works around safari bug: https://greensock.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
  				}
  				if (e.changedTouches) { //touch events store the data slightly differently
  					e = touch = e.changedTouches[0];
  					touchID = e.identifier;
  				} else if (e.pointerId) {
  					touchID = e.pointerId; //for some Microsoft browsers
  				} else {
  					touch = touchID = null;
  				}
  				_dragCount++;
  				_addToRenderQueue(render); //causes the Draggable to render on each "tick" of TweenLite.ticker (performance optimization - updating values in a mousemove can cause them to happen too frequently, like multiple times between frame redraws which is wasteful, and it also prevents values from updating properly in IE8)
  				startPointerY = self.pointerY = e.pageY; //record the starting x and y so that we can calculate the movement from the original in _onMouseMove
  				startPointerX = self.pointerX = e.pageX;
  				_dispatchEvent(self, "pressInit", "onPressInit");
  				if (allowNativeTouchScrolling || self.autoScroll) {
  					_recordMaxScrolls(target.parentNode);
  				}
  				if (target.parentNode && self.autoScroll && !scrollProxy && !rotationMode && target.parentNode._gsMaxScrollX && !_placeholderDiv.parentNode && !target.getBBox) { //add a placeholder div to prevent the parent container from collapsing when the user drags the element left.
  					_placeholderDiv.style.width = target.parentNode.scrollWidth + "px";
  					target.parentNode.appendChild(_placeholderDiv);
  				}
  				recordStartPositions();
  				self.tween && self.tween.kill();
  				self.isThrowing = false;
  				gsap$3.killTweensOf(scrollProxy || target, killProps, true); //in case the user tries to drag it before the last tween is done.
  				scrollProxy && gsap$3.killTweensOf(target, {scrollTo:1}, true); //just in case the original target's scroll position is being tweened somewhere else.
  				self.tween = self.lockedAxis = null;
  				if (vars.zIndexBoost || (!rotationMode && !scrollProxy && vars.zIndexBoost !== false)) {
  					target.style.zIndex = Draggable.zIndex++;
  				}
  				self.isPressed = true;
  				hasDragCallback = !!(vars.onDrag || self._listeners.drag);
  				hasMoveCallback = !!(vars.onMove || self._listeners.move);
  				if (!rotationMode && (vars.cursor !== false || vars.activeCursor)) {
  					i = triggers.length;
  					while (--i > -1) {
  						//_setStyle(triggers[i], "cursor", vars.activeCursor || vars.cursor || (_defaultCursor === "grab" ? "grabbing" : _defaultCursor));
  						gsap$3.set(triggers[i], {cursor: vars.activeCursor || vars.cursor || (_defaultCursor === "grab" ? "grabbing" : _defaultCursor)});
  					}
  				}
  				_dispatchEvent(self, "press", "onPress");
  			},

  			//called every time the mouse/touch moves
  			onMove = e => {
  				let originalEvent = e,
  					touches, pointerX, pointerY, i, dx, dy;
  				if (!enabled || _isMultiTouching || !self.isPressed || !e) {
  					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchmove, pointermove, mousemove. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
  					return;
  				}
  				self.pointerEvent = e;
  				touches = e.changedTouches;
  				if (touches) { //touch events store the data slightly differently
  					e = touches[0];
  					if (e !== touch && e.identifier !== touchID) { //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)
  						i = touches.length;
  						while (--i > -1 && (e = touches[i]).identifier !== touchID) {}
  						if (i < 0) {
  							return;
  						}
  					}
  				} else if (e.pointerId && touchID && e.pointerId !== touchID) { //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)
  					return;
  				}

  				if (touchEventTarget && allowNativeTouchScrolling && !touchDragAxis) { //Android browsers force us to decide on the first "touchmove" event if we should allow the default (scrolling) behavior or preventDefault(). Otherwise, a "touchcancel" will be fired and then no "touchmove" or "touchend" will fire during the scrolling (no good).
  					_point1.x = e.pageX;
  					_point1.y = e.pageY;
  					matrix && matrix.apply(_point1, _point1);
  					pointerX = _point1.x;
  					pointerY = _point1.y;
  					dx = Math.abs(pointerX - startPointerX);
  					dy = Math.abs(pointerY - startPointerY);
  					if ((dx !== dy && (dx > minimumMovement || dy > minimumMovement)) || (_isAndroid && allowNativeTouchScrolling === touchDragAxis)) {
  						touchDragAxis = (dx > dy && allowX) ? "x" : "y";
  						if (allowNativeTouchScrolling && touchDragAxis !== allowNativeTouchScrolling) {
  							_addListener(_win$4, "touchforcechange", _preventDefault); // prevents native touch scrolling from taking over if the user started dragging in the other direction in iOS Safari
  						}
  						if (self.vars.lockAxisOnTouchScroll !== false && allowX && allowY) {
  							self.lockedAxis = (touchDragAxis === "x") ? "y" : "x";
  							_isFunction$2(self.vars.onLockAxis) && self.vars.onLockAxis.call(self, originalEvent);
  						}
  						if (_isAndroid && allowNativeTouchScrolling === touchDragAxis) {
  							onRelease(originalEvent);
  							return;
  						}
  					}
  				}
  				if (!self.allowEventDefault && (!allowNativeTouchScrolling || (touchDragAxis && allowNativeTouchScrolling !== touchDragAxis)) && originalEvent.cancelable !== false) {
  					_preventDefault(originalEvent);
  					isPreventingDefault = true;
  				} else if (isPreventingDefault) {
  					isPreventingDefault = false;
  				}

  				if (self.autoScroll) {
  					checkAutoScrollBounds = true;
  				}
  				setPointerPosition(e.pageX - (isFixed && rotationMode ? _getDocScrollLeft$1(ownerDoc) : 0), e.pageY - (isFixed && rotationMode ? _getDocScrollTop$1(ownerDoc) : 0), hasMoveCallback);
  			},

  			setPointerPosition = (pointerX, pointerY, invokeOnMove) => {
  				let dragTolerance = 1 - self.dragResistance,
  					edgeTolerance = 1 - self.edgeResistance,
  					prevPointerX = self.pointerX,
  					prevPointerY = self.pointerY,
  					prevStartElementY = startElementY,
  					prevX = self.x,
  					prevY = self.y,
  					prevEndX = self.endX,
  					prevEndY = self.endY,
  					prevEndRotation = self.endRotation,
  					prevDirty = dirty,
  					xChange, yChange, x, y, dif, temp;
  				self.pointerX = pointerX;
  				self.pointerY = pointerY;
  				if (rotationMode) {
  					y = Math.atan2(rotationOrigin.y - pointerY, pointerX - rotationOrigin.x) * _RAD2DEG$1;
  					dif = self.y - y;
  					if (dif > 180) {
  						startElementY -= 360;
  						self.y = y;
  					} else if (dif < -180) {
  						startElementY += 360;
  						self.y = y;
  					}
  					if (self.x !== startElementX || Math.abs(startElementY - y) > minimumMovement) {
  						self.y = y;
  						x = startElementX + (startElementY - y) * dragTolerance;
  					} else {
  						x = startElementX;
  					}

  				} else {
  					if (matrix) {
  						temp = pointerX * matrix.a + pointerY * matrix.c + matrix.e;
  						pointerY = pointerX * matrix.b + pointerY * matrix.d + matrix.f;
  						pointerX = temp;
  					}
  					yChange = (pointerY - startPointerY);
  					xChange = (pointerX - startPointerX);
  					if (yChange < minimumMovement && yChange > -minimumMovement) {
  						yChange = 0;
  					}
  					if (xChange < minimumMovement && xChange > -minimumMovement) {
  						xChange = 0;
  					}
  					if ((self.lockAxis || self.lockedAxis) && (xChange || yChange)) {
  						temp = self.lockedAxis;
  						if (!temp) {
  							self.lockedAxis = temp = (allowX && Math.abs(xChange) > Math.abs(yChange)) ? "y" : allowY ? "x" : null;
  							if (temp && _isFunction$2(self.vars.onLockAxis)) {
  								self.vars.onLockAxis.call(self, self.pointerEvent);
  							}
  						}
  						if (temp === "y") {
  							yChange = 0;
  						} else if (temp === "x") {
  							xChange = 0;
  						}
  					}
  					x = _round$3(startElementX + xChange * dragTolerance);
  					y = _round$3(startElementY + yChange * dragTolerance);
  				}

  				if ((snapX || snapY || snapXY) && (self.x !== x || (self.y !== y && !rotationMode))) {
  					if (snapXY) {
  						_temp1.x = x;
  						_temp1.y = y;
  						temp = snapXY(_temp1);
  						x = _round$3(temp.x);
  						y = _round$3(temp.y);
  					}
  					if (snapX) {
  						x = _round$3(snapX(x));
  					}
  					if (snapY) {
  						y = _round$3(snapY(y));
  					}
  				} else if (hasBounds) {
  					if (x > maxX) {
  						x = maxX + Math.round((x - maxX) * edgeTolerance);
  					} else if (x < minX) {
  						x = minX + Math.round((x - minX) * edgeTolerance);
  					}
  					if (!rotationMode) {
  						if (y > maxY) {
  							y = Math.round(maxY + (y - maxY) * edgeTolerance);
  						} else if (y < minY) {
  							y = Math.round(minY + (y - minY) * edgeTolerance);
  						}
  					}
  				}
  				if (self.x !== x || (self.y !== y && !rotationMode)) {
  					if (rotationMode) {
  						self.endRotation = self.x = self.endX = x;
  						dirty = true;
  					} else {
  						if (allowY) {
  							self.y = self.endY = y;
  							dirty = true; //a flag that indicates we need to render the target next time the TweenLite.ticker dispatches a "tick" event (typically on a requestAnimationFrame) - this is a performance optimization (we shouldn't render on every move because sometimes many move events can get dispatched between screen refreshes, and that'd be wasteful to render every time)
  						}
  						if (allowX) {
  							self.x = self.endX = x;
  							dirty = true;
  						}
  					}
  					if (!invokeOnMove || _dispatchEvent(self, "move", "onMove") !== false) {
  						if (!self.isDragging && self.isPressed) {
  							self.isDragging = true;
  							_dispatchEvent(self, "dragstart", "onDragStart");
  						}
  					} else { //revert because the onMove returned false!
  						self.pointerX = prevPointerX;
  						self.pointerY = prevPointerY;
  						startElementY = prevStartElementY;
  						self.x = prevX;
  						self.y = prevY;
  						self.endX = prevEndX;
  						self.endY = prevEndY;
  						self.endRotation = prevEndRotation;
  						dirty = prevDirty;
  					}
  				}
  			},

  			//called when the mouse/touch is released
  			onRelease = (e, force) => {
  				if (!enabled || !self.isPressed || (e && touchID != null && !force && ((e.pointerId && e.pointerId !== touchID) || (e.changedTouches && !_hasTouchID(e.changedTouches, touchID))))) {  //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)
  					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchend, pointerup, mouseup. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
  					return;
  				}
  				self.isPressed = false;
  				let originalEvent = e,
  					wasDragging = self.isDragging,
  					isContextMenuRelease = (self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2)),
  					placeholderDelayedCall = gsap$3.delayedCall(0.001, removePlaceholder),
  					touches, i, syntheticEvent, eventTarget, syntheticClick;
  				if (touchEventTarget) {
  					_removeListener(touchEventTarget, "touchend", onRelease);
  					_removeListener(touchEventTarget, "touchmove", onMove);
  					_removeListener(touchEventTarget, "touchcancel", onRelease);
  					_removeListener(ownerDoc, "touchstart", _onMultiTouchDocument);
  				} else {
  					_removeListener(ownerDoc, "mousemove", onMove);
  				}
  				_removeListener(_win$4, "touchforcechange", _preventDefault);
  				if (!_supportsPointer || !touchEventTarget) {
  					_removeListener(ownerDoc, "mouseup", onRelease);
  					if (e && e.target) {
  						_removeListener(e.target, "mouseup", onRelease);
  					}
  				}
  				dirty = false;
  				if (isClicking && !isContextMenuRelease) {
  					if (e) {
  						_removeListener(e.target, "change", onRelease);
  						self.pointerEvent = originalEvent;
  					}
  					_setSelectable(triggers, false);
  					_dispatchEvent(self, "release", "onRelease");
  					_dispatchEvent(self, "click", "onClick");
  					isClicking = false;
  					return;
  				}
  				_removeFromRenderQueue(render);
  				if (!rotationMode) {
  					i = triggers.length;
  					while (--i > -1) {
  						_setStyle(triggers[i], "cursor", vars.cursor || (vars.cursor !== false ? _defaultCursor : null));
  					}
  				}
  				if (wasDragging) {
  					dragEndTime = _lastDragTime = _getTime();
  					self.isDragging = false;
  				}
  				_dragCount--;
  				if (e) {
  					touches = e.changedTouches;
  					if (touches) { //touch events store the data slightly differently
  						e = touches[0];
  						if (e !== touch && e.identifier !== touchID) { //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)
  							i = touches.length;
  							while (--i > -1 && (e = touches[i]).identifier !== touchID) {}
  							if (i < 0) {
  								return;
  							}
  						}
  					}
  					self.pointerEvent = originalEvent;
  					self.pointerX = e.pageX;
  					self.pointerY = e.pageY;
  				}
  				if (isContextMenuRelease && originalEvent) {
  					_preventDefault(originalEvent);
  					isPreventingDefault = true;
  					_dispatchEvent(self, "release", "onRelease");
  				} else if (originalEvent && !wasDragging) {
  					isPreventingDefault = false;
  					if (interrupted && (vars.snap || vars.bounds)) { //otherwise, if the user clicks on the object while it's animating to a snapped position, and then releases without moving 3 pixels, it will just stay there (it should animate/snap)
  						animate(vars.inertia || vars.throwProps);
  					}
  					_dispatchEvent(self, "release", "onRelease");
  					if ((!_isAndroid || originalEvent.type !== "touchmove") && originalEvent.type.indexOf("cancel") === -1) { //to accommodate native scrolling on Android devices, we have to immediately call onRelease() on the first touchmove event, but that shouldn't trigger a "click".
  						_dispatchEvent(self, "click", "onClick");
  						if (_getTime() - clickTime < 300) {
  							_dispatchEvent(self, "doubleclick", "onDoubleClick");
  						}
  						eventTarget = originalEvent.target || target; //old IE uses srcElement
  						clickTime = _getTime();
  						syntheticClick = () => { // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
  							if (clickTime !== clickDispatch && self.enabled() && !self.isPressed && !originalEvent.defaultPrevented) {
  								if (eventTarget.click) { //some browsers (like mobile Safari) don't properly trigger the click event
  									eventTarget.click();
  								} else if (ownerDoc.createEvent) {
  									syntheticEvent = ownerDoc.createEvent("MouseEvents");
  									syntheticEvent.initMouseEvent("click", true, true, _win$4, 1, self.pointerEvent.screenX, self.pointerEvent.screenY, self.pointerX, self.pointerY, false, false, false, false, 0, null);
  									eventTarget.dispatchEvent(syntheticEvent);
  								}
  							}
  						};
  						if (!_isAndroid && !originalEvent.defaultPrevented) { //iOS Safari requires the synthetic click to happen immediately or else it simply won't work, but Android doesn't play nice.
  							gsap$3.delayedCall(0.05, syntheticClick); //in addition to the iOS bug workaround, there's a Firefox issue with clicking on things like a video to play, so we must fake a click event in a slightly delayed fashion. Previously, we listened for the "click" event with "capture" false which solved the video-click-to-play issue, but it would allow the "click" event to be dispatched twice like if you were using a jQuery.click() because that was handled in the capture phase, thus we had to switch to the capture phase to avoid the double-dispatching, but do the delayed synthetic click. Don't fire it too fast (like 0.00001) because we want to give the native event a chance to fire first as it's "trusted".
  						}
  					}
  				} else {
  					animate(vars.inertia || vars.throwProps); //will skip if inertia/throwProps isn't defined or IntertiaPlugin isn't loaded.
  					if (!self.allowEventDefault && originalEvent && (vars.dragClickables !== false || !isClickable.call(self, originalEvent.target)) && wasDragging && (!allowNativeTouchScrolling || (touchDragAxis && allowNativeTouchScrolling === touchDragAxis)) && originalEvent.cancelable !== false) {
  						isPreventingDefault = true;
  						_preventDefault(originalEvent);
  					} else {
  						isPreventingDefault = false;
  					}
  					_dispatchEvent(self, "release", "onRelease");
  				}
  				isTweening() && placeholderDelayedCall.duration( self.tween.duration() ); //sync the timing so that the placeholder DIV gets
  				wasDragging && _dispatchEvent(self, "dragend", "onDragEnd");
  				return true;
  			},

  			updateScroll = e => {
  				if (e && self.isDragging && !scrollProxy) {
  					let parent = e.target || target.parentNode,
  						deltaX = parent.scrollLeft - parent._gsScrollX,
  						deltaY = parent.scrollTop - parent._gsScrollY;
  					if (deltaX || deltaY) {
  						if (matrix) {
  							startPointerX -= deltaX * matrix.a + deltaY * matrix.c;
  							startPointerY -= deltaY * matrix.d + deltaX * matrix.b;
  						} else {
  							startPointerX -= deltaX;
  							startPointerY -= deltaY;
  						}
  						parent._gsScrollX += deltaX;
  						parent._gsScrollY += deltaY;
  						setPointerPosition(self.pointerX, self.pointerY);
  					}
  				}
  			},

  			onClick = e => { //this was a huge pain in the neck to align all the various browsers and their behaviors. Chrome, Firefox, Safari, Opera, Android, and Microsoft Edge all handle events differently! Some will only trigger native behavior (like checkbox toggling) from trusted events. Others don't even support isTrusted, but require 2 events to flow through before triggering native behavior. Edge treats everything as trusted but also mandates that 2 flow through to trigger the correct native behavior.
  				let time = _getTime(),
  					recentlyClicked = (time - clickTime < 40),
  					recentlyDragged = (time - dragEndTime < 40),
  					alreadyDispatched = (recentlyClicked && clickDispatch === clickTime),
  					defaultPrevented = (self.pointerEvent && self.pointerEvent.defaultPrevented),
  					alreadyDispatchedTrusted = (recentlyClicked && trustedClickDispatch === clickTime),
  					trusted = e.isTrusted || (e.isTrusted == null && recentlyClicked && alreadyDispatched); //note: Safari doesn't support isTrusted, and it won't properly execute native behavior (like toggling checkboxes) on the first synthetic "click" event - we must wait for the 2nd and treat it as trusted (but stop propagation at that point). Confusing, I know. Don't you love cross-browser compatibility challenges?
  				if ((alreadyDispatched || (recentlyDragged && self.vars.suppressClickOnDrag !== false) ) && e.stopImmediatePropagation) {
  					e.stopImmediatePropagation();
  				}
  				if (recentlyClicked && !(self.pointerEvent && self.pointerEvent.defaultPrevented) && (!alreadyDispatched || (trusted && !alreadyDispatchedTrusted))) { //let the first click pass through unhindered. Let the next one only if it's trusted, then no more (stop quick-succession ones)
  					if (trusted && alreadyDispatched) {
  						trustedClickDispatch = clickTime;
  					}
  					clickDispatch = clickTime;
  					return;
  				}
  				if (self.isPressed || recentlyDragged || recentlyClicked) {
  					if (!trusted || !e.detail || !recentlyClicked || defaultPrevented) {
  						_preventDefault(e);
  					}
  				}
  			},

  			localizePoint = p => matrix ? {x:p.x * matrix.a + p.y * matrix.c + matrix.e, y:p.x * matrix.b + p.y * matrix.d + matrix.f} : {x:p.x, y:p.y};

  		old = Draggable.get(target);
  		if (old) {
  			old.kill(); // avoids duplicates (an element can only be controlled by one Draggable)
  		}

  		//give the user access to start/stop dragging...
  		this.startDrag = (event, align) => {
  			let r1, r2, p1, p2;
  			onPress(event || self.pointerEvent, true);
  			//if the pointer isn't on top of the element, adjust things accordingly
  			if (align && !self.hitTest(event || self.pointerEvent)) {
  				r1 = _parseRect(event || self.pointerEvent);
  				r2 = _parseRect(target);
  				p1 = localizePoint({x:r1.left + r1.width / 2, y:r1.top + r1.height / 2});
  				p2 = localizePoint({x:r2.left + r2.width / 2, y:r2.top + r2.height / 2});
  				startPointerX -= p1.x - p2.x;
  				startPointerY -= p1.y - p2.y;
  			}
  			if (!self.isDragging) {
  				self.isDragging = true;
  				_dispatchEvent(self, "dragstart", "onDragStart");
  			}
  		};
  		this.drag = onMove;
  		this.endDrag = e =>	onRelease(e || self.pointerEvent, true);
  		this.timeSinceDrag = () => self.isDragging ? 0 : (_getTime() - dragEndTime) / 1000;
  		this.timeSinceClick = () => (_getTime() - clickTime) / 1000;
  		this.hitTest = (target, threshold) => Draggable.hitTest(self.target, target, threshold);

  		this.getDirection = (from, diagonalThreshold) => { //from can be "start" (default), "velocity", or an element
  			let mode = (from === "velocity" && InertiaPlugin) ? from : (_isObject$1(from) && !rotationMode) ? "element" : "start",
  				xChange, yChange, ratio, direction, r1, r2;
  			if (mode === "element") {
  				r1 = _parseRect(self.target);
  				r2 = _parseRect(from);
  			}
  			xChange = (mode === "start") ? self.x - startElementX : (mode === "velocity") ? InertiaPlugin.getVelocity(target, xProp) : (r1.left + r1.width / 2) - (r2.left + r2.width / 2);
  			if (rotationMode) {
  				return xChange < 0 ? "counter-clockwise" : "clockwise";
  			} else {
  				diagonalThreshold = diagonalThreshold || 2;
  				yChange = (mode === "start") ? self.y - startElementY : (mode === "velocity") ? InertiaPlugin.getVelocity(target, yProp) : (r1.top + r1.height / 2) - (r2.top + r2.height / 2);
  				ratio = Math.abs(xChange / yChange);
  				direction = (ratio < 1 / diagonalThreshold) ? "" : (xChange < 0) ? "left" : "right";
  				if (ratio < diagonalThreshold) {
  					if (direction !== "") {
  						direction += "-";
  					}
  					direction += (yChange < 0) ? "up" : "down";
  				}
  			}
  			return direction;
  		};

  		this.applyBounds = (newBounds, sticky) => {
  			let x, y, forceZeroVelocity, e, parent, isRoot;
  			if (newBounds && vars.bounds !== newBounds) {
  				vars.bounds = newBounds;
  				return self.update(true, sticky);
  			}
  			syncXY(true);
  			calculateBounds();
  			if (hasBounds && !isTweening()) {
  				x = self.x;
  				y = self.y;
  				if (x > maxX) {
  					x = maxX;
  				} else if (x < minX) {
  					x = minX;
  				}
  				if (y > maxY) {
  					y = maxY;
  				} else if (y < minY) {
  					y = minY;
  				}
  				if (self.x !== x || self.y !== y) {
  					forceZeroVelocity = true;
  					self.x = self.endX = x;
  					if (rotationMode) {
  						self.endRotation = x;
  					} else {
  						self.y = self.endY = y;
  					}
  					dirty = true;
  					render(true);
  					if (self.autoScroll && !self.isDragging) {
  						_recordMaxScrolls(target.parentNode);
  						e = target;
  						_windowProxy.scrollTop = ((_win$4.pageYOffset != null) ? _win$4.pageYOffset : (ownerDoc.documentElement.scrollTop != null) ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop);
  						_windowProxy.scrollLeft = ((_win$4.pageXOffset != null) ? _win$4.pageXOffset : (ownerDoc.documentElement.scrollLeft != null) ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft);
  						while (e && !isRoot) { //walk up the chain and sense wherever the scrollTop/scrollLeft exceeds the maximum.
  							isRoot = _isRoot(e.parentNode);
  							parent = isRoot ? _windowProxy : e.parentNode;
  							if (allowY && parent.scrollTop > parent._gsMaxScrollY) {
  								parent.scrollTop = parent._gsMaxScrollY;
  							}
  							if (allowX && parent.scrollLeft > parent._gsMaxScrollX) {
  								parent.scrollLeft = parent._gsMaxScrollX;
  							}
  							e = parent;
  						}
  					}
  				}
  				if (self.isThrowing && (forceZeroVelocity || self.endX > maxX || self.endX < minX || self.endY > maxY || self.endY < minY)) {
  					animate(vars.inertia || vars.throwProps, forceZeroVelocity);
  				}
  			}
  			return self;
  		};

  		this.update = (applyBounds, sticky, ignoreExternalChanges) => {
  			let { x, y } = self;
  			updateMatrix(!sticky);
  			if (applyBounds) {
  				self.applyBounds();
  			} else {
  				if (dirty && ignoreExternalChanges) {
  					render(true);
  				}
  				syncXY(true);
  			}
  			if (sticky) {
  				setPointerPosition(self.pointerX, self.pointerY);
  				dirty && render(true);
  			}
  			if (self.isPressed && !sticky && ((allowX && Math.abs(x - self.x) > 0.01) || (allowY && (Math.abs(y - self.y) > 0.01 && !rotationMode)))) {
  				recordStartPositions();
  			}
  			if (self.autoScroll) {
  				_recordMaxScrolls(target.parentNode, self.isDragging);
  				checkAutoScrollBounds = self.isDragging;
  				render(true);
  				//in case reparenting occurred.
  				_removeScrollListener(target, updateScroll);
  				_addScrollListener(target, updateScroll);
  			}
  			return self;
  		};

  		this.enable = type => {
  			let setVars = {lazy: true},
  				id, i, trigger;
  			if (!rotationMode && vars.cursor !== false) {
  				setVars.cursor = vars.cursor || _defaultCursor;
  			}
  			if (gsap$3.utils.checkPrefix("touchCallout")) {
  				setVars.touchCallout = "none";
  			}
  			setVars.touchAction = (allowX === allowY) ? "none" : vars.allowNativeTouchScrolling || vars.allowEventDefault ? "manipulation" : allowX ? "pan-y" : "pan-x";
  			if (type !== "soft") {
  				i = triggers.length;
  				while (--i > -1) {
  					trigger = triggers[i];
  					_supportsPointer || _addListener(trigger, "mousedown", onPress);
  					_addListener(trigger, "touchstart", onPress);
  					_addListener(trigger, "click", onClick, true); //note: used to pass true for capture but it prevented click-to-play-video functionality in Firefox.
  					gsap$3.set(trigger, setVars);
  					if (trigger.getBBox && trigger.ownerSVGElement) { // a bug in chrome doesn't respect touch-action on SVG elements - it only works if we set it on the parent SVG.
  						gsap$3.set(trigger.ownerSVGElement, {touchAction: (allowX === allowY) ? "none" : vars.allowNativeTouchScrolling || vars.allowEventDefault ? "manipulation" : allowX ? "pan-y" : "pan-x"});
  					}
  					vars.allowContextMenu || _addListener(trigger, "contextmenu", onContextMenu);
  				}
  				_setSelectable(triggers, false);
  			}
  			_addScrollListener(target, updateScroll);
  			enabled = true;
  			if (InertiaPlugin && type !== "soft") {
  				InertiaPlugin.track(scrollProxy || target, (xyMode ? "x,y" : rotationMode ? "rotation" : "top,left"));
  			}
  			target._gsDragID = id = "d" + (_lookupCount++);
  			_lookup[id] = self;
  			if (scrollProxy) {
  				scrollProxy.enable();
  				scrollProxy.element._gsDragID = id;
  			}
  			(vars.bounds || rotationMode) && recordStartPositions();
  			vars.bounds && self.applyBounds();
  			return self;
  		};

  		this.disable = type => {
  			let dragging = self.isDragging,
  				i, trigger;
  			if (!rotationMode) {
  				i = triggers.length;
  				while (--i > -1) {
  					_setStyle(triggers[i], "cursor", null);
  				}
  			}
  			if (type !== "soft") {
  				i = triggers.length;
  				while (--i > -1) {
  					trigger = triggers[i];
  					_setStyle(trigger, "touchCallout", null);
  					_setStyle(trigger, "touchAction", null);
  					_removeListener(trigger, "mousedown", onPress);
  					_removeListener(trigger, "touchstart", onPress);
  					_removeListener(trigger, "click", onClick);
  					_removeListener(trigger, "contextmenu", onContextMenu);
  				}
  				_setSelectable(triggers, true);
  				if (touchEventTarget) {
  					_removeListener(touchEventTarget, "touchcancel", onRelease);
  					_removeListener(touchEventTarget, "touchend", onRelease);
  					_removeListener(touchEventTarget, "touchmove", onMove);
  				}
  				_removeListener(ownerDoc, "mouseup", onRelease);
  				_removeListener(ownerDoc, "mousemove", onMove);
  			}
  			_removeScrollListener(target, updateScroll);
  			enabled = false;
  			if (InertiaPlugin && type !== "soft") {
  				InertiaPlugin.untrack(scrollProxy || target, (xyMode ? "x,y" : rotationMode ? "rotation" : "top,left"));
  			}
  			if (scrollProxy) {
  				scrollProxy.disable();
  			}
  			_removeFromRenderQueue(render);
  			self.isDragging = self.isPressed = isClicking = false;
  			if (dragging) {
  				_dispatchEvent(self, "dragend", "onDragEnd");
  			}
  			return self;
  		};

  		this.enabled = function(value, type) {
  			return arguments.length ? (value ? self.enable(type) : self.disable(type)) : enabled;
  		};

  		this.kill = function() {
  			self.isThrowing = false;
  			if (self.tween) {
  				self.tween.kill();
  			}
  			self.disable();
  			gsap$3.set(triggers, {clearProps:"userSelect"});
  			delete _lookup[target._gsDragID];
  			return self;
  		};

  		if (~type.indexOf("scroll")) {
  			scrollProxy = this.scrollProxy = new ScrollProxy(target, _extend({onKill:function() { //ScrollProxy's onKill() gets called if/when the ScrollProxy senses that the user interacted with the scroll position manually (like using the scrollbar). IE9 doesn't fire the "mouseup" properly when users drag the scrollbar of an element, so this works around that issue.
  					if (self.isPressed) {
  						onRelease(null);
  					}}}, vars));
  			//a bug in many Android devices' stock browser causes scrollTop to get forced back to 0 after it is altered via JS, so we set overflow to "hidden" on mobile/touch devices (they hide the scroll bar anyway). That works around the bug. (This bug is discussed at https://code.google.com/p/android/issues/detail?id=19625)
  			target.style.overflowY = (allowY && !_isTouchDevice) ? "auto" : "hidden";
  			target.style.overflowX = (allowX && !_isTouchDevice) ? "auto" : "hidden";
  			target = scrollProxy.content;
  		}

  		if (rotationMode) {
  			killProps.rotation = 1;
  		} else {
  			if (allowX) {
  				killProps[xProp] = 1;
  			}
  			if (allowY) {
  				killProps[yProp] = 1;
  			}
  		}

  		gsCache.force3D = ("force3D" in vars) ? vars.force3D : true; //otherwise, normal dragging would be in 2D and then as soon as it's released and there's an inertia tween, it'd jump to 3D which can create an initial jump due to the work the browser must to do layerize it.

  		this.enable();
  	}




  	static register(core) {
  		gsap$3 = core;
  		_initCore$3();
  	}

  	static create(targets, vars) {
  		if (!_coreInitted$3) {
  			_initCore$3(true);
  		}
  		return _toArray$2(targets).map(target => new Draggable(target, vars));
  	}

  	static get(target) {
  		return _lookup[(_toArray$2(target)[0] || {})._gsDragID];
  	}

  	static timeSinceDrag() {
  		return (_getTime() - _lastDragTime) / 1000;
  	}

  	static hitTest(obj1, obj2, threshold) {
  		if (obj1 === obj2) {
  			return false;
  		}
  		let r1 = _parseRect(obj1),
  			r2 = _parseRect(obj2),
  			{ top, left, right, bottom, width, height } = r1,
  			isOutside = (r2.left > right || r2.right < left || r2.top > bottom || r2.bottom < top),
  			overlap, area, isRatio;
  		if (isOutside || !threshold) {
  			return !isOutside;
  		}
  		isRatio = ((threshold + "").indexOf("%") !== -1);
  		threshold = parseFloat(threshold) || 0;
  		overlap = {left: Math.max(left, r2.left), top: Math.max(top, r2.top)};
  		overlap.width = Math.min(right, r2.right) - overlap.left;
  		overlap.height = Math.min(bottom, r2.bottom) - overlap.top;
  		if (overlap.width < 0 || overlap.height < 0) {
  			return false;
  		}
  		if (isRatio) {
  			threshold *= 0.01;
  			area = overlap.width * overlap.height;
  			return (area >= width * height * threshold || area >= r2.width * r2.height * threshold);
  		}
  		return (overlap.width > threshold && overlap.height > threshold);
  	}

  }

  _setDefaults$1(Draggable.prototype, {pointerX:0, pointerY: 0, startX: 0, startY: 0, deltaX: 0, deltaY: 0, isDragging: false, isPressed: false});

  Draggable.zIndex = 1000;
  Draggable.version = "3.4.0";

  _getGSAP$2() && gsap$3.registerPlugin(Draggable);

  /*!
   * GSDevTools 3.4.0
   * https://greensock.com
   *
   * @license Copyright 2008-2020, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */

  let gsap$4, _coreInitted$4, _doc$4, _docEl, _win$5, _recordedRoot, Animation$1, _rootTween, _rootInstance, _keyboardInstance, _globalTimeline$1, _independentRoot, _delayedCall,
  	_startupPhase = true, //for the first 2 seconds, we don't record any zero-duration tweens because they're typically just setup stuff and/or the "from" or "startAt" tweens. In version 1.20.3 we started flagging those with data:"isStart"|"isFromStart" but this logic helps GSDevTools work with older versions too.
  	_globalStartTime = 0,
  	_windowExists$4 = () => typeof(window) !== "undefined",
  	_getGSAP$3 = () => gsap$4 || (_windowExists$4() && (gsap$4 = window.gsap) && gsap$4.registerPlugin && gsap$4),
  	_isString$2 = value => typeof(value) === "string",
  	_isFunction$3 = value => typeof(value) === "function",
  	_isObject$2 = value => typeof(value) === "object",
  	_isUndefined$2 = value => typeof(value) === "undefined",
  	_svgNS = "http://www.w3.org/2000/svg",
  	_domNS = "http://www.w3.org/1999/xhtml",
  	_idSeed = 0, //we assign an ID to each GSDevTools instance so that we can segregate the sessionStorage data accordingly.
  	_lookup$1 = {},
  	_supportsStorage = (function() {
  		try {
  			sessionStorage.setItem("gsTest", "1");
  			sessionStorage.removeItem("gsTest");
  			return true;
  		} catch (e) {
  			return false;
  		}
  	}()),
  	_parseAnimation = animationOrId => (animationOrId instanceof Animation$1) ? animationOrId : animationOrId ? gsap$4.getById(animationOrId) : null,
  	_createElement$2 = (type, container, cssText) => {
  		let element = _doc$4.createElementNS ? _doc$4.createElementNS(type === "svg" ? _svgNS : _domNS, type) : _doc$4.createElement(type);
  		if (container) {
  			if (_isString$2(container)) {
  				container = _doc$4.querySelector(container);
  			}
  			container.appendChild(element);
  		}
  		if (type === "svg") {
  			element.setAttribute("xmlns", _svgNS);
  			element.setAttribute("xmlns:xlink", _domNS);
  		}
  		if (cssText) {
  			element.style.cssText = cssText;
  		}
  		return element;
  	},
  	_clearSelection = () => {
  		if (_doc$4.selection) {
  			_doc$4.selection.empty();
  		} else if (_win$5.getSelection) {
  			_win$5.getSelection().removeAllRanges();
  		}
  	},
  	_getChildrenOf = (timeline, includeTimelines) => {
  		let a = [],
  			cnt = 0,
  			Tween = gsap$4.core.Tween,
  			tween = timeline._first;
  		while (tween) {
  			if (tween instanceof Tween) {
  				if (tween.vars.id) {
  					a[cnt++] = tween;
  				}
  			} else {
  				if (includeTimelines && tween.vars.id) {
  					a[cnt++] = tween;
  				}
  				a = a.concat(_getChildrenOf(tween, includeTimelines));
  				cnt = a.length;
  			}
  			tween = tween._next;
  		}
  		return a;
  	},
  	_getClippedDuration = (animation, excludeRootRepeats) => {
  		let max = 0,
  			repeat = Math.max(0, animation._repeat),
  			t = animation._first;
  		if (!t) {
  			max = animation.duration();
  		}
  		while (t) {
  			max = Math.max(max, t.totalDuration() > 999 ? t.endTime(false) : t._start + t._tDur / t._ts);
  			t = t._next;
  		}
  		return (!excludeRootRepeats && repeat) ? max * (repeat + 1) + (animation._rDelay * repeat) : max;
  	},
  	_globalizeTime = function(animation, rawTime) {
  		let a = animation,
  			time = arguments.length > 1 ? +rawTime : a.rawTime();
  		while (a) {
  			time = a._start + time / (a._ts || 1);
  			a = a.parent;
  		}
  		return time;
  	},
  	_timeToProgress = (time, animation, defaultValue, relativeProgress) => {
  		let add, i, a;
  		if (_isString$2(time)) {
  			if (time.charAt(1) === "=") {
  				add = parseInt(time.charAt(0) + "1", 10) * parseFloat(time.substr(2));
  				if (add < 0 && relativeProgress === 0) { //if something like inTime:"-=2", we measure it from the END, not the beginning
  					relativeProgress = 100;
  				}
  				time = (relativeProgress / 100 * animation.duration()) + add;
  			} else if (isNaN(time) && animation.labels && animation.labels[time] !== -1) {
  				time = animation.labels[time];
  			} else if (animation === _recordedRoot) { //perhaps they defined an id of an animation, like "myAnimation+=2"
  				i = time.indexOf("=");
  				if (i > 0) {
  					add = parseInt(time.charAt(i-1) + "1", 10) * parseFloat(time.substr(i+1));
  					time = time.substr(0, i-1);
  				} else {
  					add = 0;
  				}
  				a = gsap$4.getById(time);
  				if (a) {
  					time = _globalizeTime(a, defaultValue / 100 * a.duration()) + add;
  				}
  			}
  		}

  		time = isNaN(time) ? defaultValue : parseFloat(time);
  		return Math.min(100, Math.max(0, time / animation.duration() * 100));
  	},
  	_addedCSS,
  	_createRootElement = (element, minimal, css) => {
  		if (!_addedCSS) {
  			_createElement$2("style", _docEl).innerHTML = '.gs-dev-tools{height:51px;bottom:0;left:0;right:0;display:block;position:fixed;overflow:visible;padding:0}.gs-dev-tools *{box-sizing:content-box;visibility:visible}.gs-dev-tools .gs-top{position:relative;z-index:499}.gs-dev-tools .gs-bottom{display:flex;align-items:center;justify-content:space-between;background-color:rgba(0,0,0,.6);height:42px;border-top:1px solid #999;position:relative}.gs-dev-tools .timeline{position:relative;height:8px;margin-left:15px;margin-right:15px;overflow:visible}.gs-dev-tools .progress-bar,.gs-dev-tools .timeline-track{height:8px;width:100%;position:absolute;top:0;left:0}.gs-dev-tools .timeline-track{background-color:#999;opacity:.6}.gs-dev-tools .progress-bar{background-color:#91e600;height:8px;top:0;width:0;pointer-events:none}.gs-dev-tools .seek-bar{width:100%;position:absolute;height:24px;top:-12px;left:0;background-color:transparent}.gs-dev-tools .in-point,.gs-dev-tools .out-point{width:15px;height:26px;position:absolute;top:-18px}.gs-dev-tools .in-point-shape{fill:#6d9900;stroke:rgba(0,0,0,.5);stroke-width:1}.gs-dev-tools .out-point-shape{fill:#994242;stroke:rgba(0,0,0,.5);stroke-width:1}.gs-dev-tools .in-point{transform:translateX(-100%)}.gs-dev-tools .out-point{left:100%}.gs-dev-tools .grab{stroke:rgba(255,255,255,.3);stroke-width:1}.gs-dev-tools .playhead{position:absolute;top:-5px;transform:translate(-50%,0);left:0;border-radius:50%;width:16px;height:16px;border:1px solid #6d9900;background-color:#91e600}.gs-dev-tools .gs-btn-white{fill:#fff}.gs-dev-tools .pause{opacity:0}.gs-dev-tools .select-animation{vertical-align:middle;position:relative;padding:6px 10px}.gs-dev-tools .select-animation-container{flex-grow:4;width:40%}.gs-dev-tools .select-arrow{display:inline-block;width:12px;height:7px;margin:0 7px;transform:translate(0,-2px)}.gs-dev-tools .select-arrow-shape{stroke:rgba(255,255,255,.6);stroke-width:2px;fill:none}.gs-dev-tools .rewind{height:16px;width:19px;padding:10px 4px;min-width:24px}.gs-dev-tools .rewind-path{opacity:.6}.gs-dev-tools .play-pause{width:24px;height:24px;padding:6px 10px;min-width:24px}.gs-dev-tools .ease{width:30px;height:30px;padding:10px;min-width:30px;display:none}.gs-dev-tools .ease-path{fill:none;stroke:rgba(255,255,255,.6);stroke-width:2px}.gs-dev-tools .ease-border{fill:rgba(255,255,255,.25)}.gs-dev-tools .time-scale{font-family:monospace;font-size:18px;text-align:center;color:rgba(255,255,255,.6);padding:4px 4px 4px 0;min-width:30px;margin-left:7px}.gs-dev-tools .loop{width:20px;padding:5px;min-width:20px}.gs-dev-tools .loop-path{fill:rgba(255,255,255,.6)}.gs-dev-tools label span{color:#fff;font-family:monospace;text-decoration:none;font-size:16px;line-height:18px}.gs-dev-tools .time-scale span{color:rgba(255,255,255,.6)}.gs-dev-tools button:focus,.gs-dev-tools select:focus{outline:0}.gs-dev-tools label{position:relative;cursor:pointer}.gs-dev-tools label.locked{text-decoration:none;cursor:auto}.gs-dev-tools label input,.gs-dev-tools label select{position:absolute;left:0;top:0;z-index:1;font:inherit;font-size:inherit;line-height:inherit;height:100%;width:100%;color:#000!important;opacity:0;background:0 0;border:none;padding:0;margin:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer}.gs-dev-tools label input+.display{position:relative;z-index:2}.gs-dev-tools .gs-bottom-right{vertical-align:middle;display:flex;align-items:center;flex-grow:4;width:40%;justify-content:flex-end}.gs-dev-tools .time-container{font-size:18px;font-family:monospace;color:rgba(255,255,255,.6);margin:0 5px}.gs-dev-tools .logo{width:32px;height:32px;position:relative;top:2px;margin:0 12px}.gs-dev-tools .gs-hit-area{background-color:transparent;width:100%;height:100%;top:0;position:absolute}.gs-dev-tools.minimal{height:auto;display:flex;align-items:stretch}.gs-dev-tools.minimal .gs-top{order:2;flex-grow:4;background-color:rgba(0,0,0,1)}.gs-dev-tools.minimal .gs-bottom{background-color:rgba(0,0,0,1);border-top:none}.gs-dev-tools.minimal .timeline{top:50%;transform:translate(0,-50%)}.gs-dev-tools.minimal .in-point,.gs-dev-tools.minimal .out-point{display:none}.gs-dev-tools.minimal .select-animation-container{display:none}.gs-dev-tools.minimal .rewind{display:none}.gs-dev-tools.minimal .play-pause{width:20px;height:20px;padding:4px 6px;margin-left:14px}.gs-dev-tools.minimal .time-scale{min-width:26px}.gs-dev-tools.minimal .loop{width:18px;min-width:18px;display:none}.gs-dev-tools.minimal .gs-bottom-right{display:none}@media only screen and (max-width:600px){.gs-dev-tools{height:auto;display:flex;align-items:stretch}.gs-dev-tools .gs-top{order:2;flex-grow:4;background-color:rgba(0,0,0,1);height:42px}.gs-dev-tools .gs-bottom{background-color:rgba(0,0,0,1);border-top:none}.gs-dev-tools .timeline{top:50%;transform:translate(0,-50%)}.gs-dev-tools .in-point,.gs-dev-tools .out-point{display:none}.gs-dev-tools .select-animation-container{display:none}.gs-dev-tools .rewind{display:none}.gs-dev-tools .play-pause{width:20px;height:20px;padding:4px 6px;margin-left:14px}.gs-dev-tools .time-scale{min-width:26px}.gs-dev-tools .loop{width:18px;min-width:18px;display:none}.gs-dev-tools .gs-bottom-right{display:none}}';
  			_addedCSS = true;
  		}
  		if (_isString$2(element)) {
  			element = _doc$4.querySelector(element);
  		}
  		let root = _createElement$2("div", element || _docEl.getElementsByTagName("body")[0] || _docEl);
  		root.setAttribute("class", "gs-dev-tools" + (minimal ? " minimal" : ""));
  		root.innerHTML = '<div class=gs-hit-area></div><div class=gs-top><div class=timeline><div class=timeline-track></div><div class=progress-bar></div><div class=seek-bar></div><svg class=in-point viewBox="0 0 15 26"xmlns=http://www.w3.org/2000/svg><polygon class=in-point-shape points=".5 .5 14.5 .5 14.5 25.5 .5 17.5"/><polyline class=grab points="5.5 4 5.5 15"/><polyline class=grab points="9.5 4 9.5 17"/></svg> <svg class=out-point viewBox="0 0 15 26"xmlns=http://www.w3.org/2000/svg><polygon class=out-point-shape points=".5 .5 14.5 .5 14.5 17.5 .5 25.5"/><polyline class=grab points="5.5 4 5.5 17"/><polyline class=grab points="9.5 4 9.5 15"/></svg><div class=playhead></div></div></div><div class=gs-bottom><div class=select-animation-container><label class=select-animation><select class=animation-list><option>Global Timeline<option>myTimeline</select><nobr><span class="display animation-label">Global Timeline</span> <svg class=select-arrow viewBox="0 0 12.05 6.73"xmlns=http://www.w3.org/2000/svg><polyline class=select-arrow-shape points="0.35 0.35 6.03 6.03 11.7 0.35"/></svg></nobr></label></div><svg class=rewind viewBox="0 0 12 15.38"xmlns=http://www.w3.org/2000/svg><path d=M0,.38H2v15H0Zm2,7,10,7.36V0Z class="gs-btn-white rewind-path"/></svg> <svg class=play-pause viewBox="0 0 20.97 25.67"xmlns=http://www.w3.org/2000/svg><g class=play><path d="M8,4.88 C8,10.18 8,15.48 8,20.79 5.33,22.41 2.66,24.04 0,25.67 0,17.11 0,8.55 0,0 2.66,1.62 5.33,3.25 8,4.88"class="gs-btn-white play-1"style=stroke:#fff;stroke-width:.6px /><path d="M14.485,8.855 C16.64,10.18 18.8,11.5 20.97,12.83 16.64,15.48 12.32,18.13 8,20.79 8,15.48 8,10.18 8,4.88 10.16,6.2 12.32,7.53 14.48,8.85"class="gs-btn-white play-2"style=stroke:#fff;stroke-width:.6px /></g></svg> <svg class=loop viewBox="0 0 29 25.38"xmlns=http://www.w3.org/2000/svg><path d=M27.44,5.44,20.19,0V3.06H9.06A9.31,9.31,0,0,0,0,12.41,9.74,9.74,0,0,0,.69,16l3.06-2.23a6,6,0,0,1-.12-1.22,5.49,5.49,0,0,1,5.43-5.5H20.19v3.81Z class=loop-path /><path d=M25.25,11.54a5.18,5.18,0,0,1,.12,1.12,5.41,5.41,0,0,1-5.43,5.41H9.19V14.5L1.94,19.94l7.25,5.44V22.06H19.94A9.2,9.2,0,0,0,29,12.84a9.42,9.42,0,0,0-.68-3.53Z class=loop-path /></svg> <svg class=ease viewBox="0 0 25.67 25.67"xmlns=http://www.w3.org/2000/svg><path d=M.48,25.12c1.74-3.57,4.28-12.6,8.8-10.7s4.75,1.43,6.5-1.11S19.89,1.19,25.2.55 class=ease-path /><path d=M24.67,1V24.67H1V1H24.67m1-1H0V25.67H25.67V0Z class=ease-border /></svg><label class=time-scale><select><option value=10>10x<option value=5>5x<option value=2>2x<option value=1 selected>1x<option value=0.5>0.5x<option value=0.25>0.25x<option value=0.1>0.1x</select><span class="display time-scale-label">1x</span></label><div class=gs-bottom-right><div class=time-container><span class=time>0.00</span> / <span class=duration>0.00</span></div><a href="https://greensock.com/docs/v3/Plugins/GSDevTools?source=GSDevTools"target=_blank title=Docs><svg class=logo viewBox="0 0 100 100"xmlns=http://www.w3.org/2000/svg><path d="M60 15.4c-.3-.4-.5-.6-.5-.7.1-.6.2-1 .2-1.7v-.4c.6.6 1.3 1.3 1.8 1.7.2.2.5.3.8.3.2 0 .3 0 .5.1h1.6c.8 0 1.6.1 2 0 .1 0 .2 0 .3-.1.6-.3 1.4-1 2.1-1.6 0 .6.1 1.2.1 1.7v1.5c0 .3 0 .5.1.7-.1.1-.2.1-.4.2-.7.4-1.7 1-2.3.9-.5-.1-1.5-.3-2.6-.7-1.2-.3-2.4-.8-3.2-1.2 0 0-.1 0-.1-.1s-.2-.4-.4-.6zm24.6 21.9c-.5-1.7-1.9-2-4.2-.7.9-1.5 2.1-1.5 2.3-2.1.9-2.5-.6-4.6-1.2-5.3.7-1.8 1.4-4.5-1-6.8-1-1-2.4-1.2-3.6-1.1 1.8 1.7 3.4 4.4 2.5 7.2-.1.3-.9.7-1.7 1 0 0 .4 2-.3 3.5-.3.6-.8 1.5-1.3 2.6 1 .9 1.6 1 3 1.3-.9.1-1.2.4-1.2.5-.7 3 1 3.4 1.4 4.8 0 .1 0 .2.1.3v.4c-.3.3-1.4.5-2.5.5s-1.8 1-1.8 1c-.2.1-.3.3-.4.4v1c0 .1 0 .4.1.6.1.5.3 1.3.4 1.8.9.6 1.4.9 2.2 1.1.5.1 1 .2 1.5.1.3-.1.7-.3 1-.7 1.5-1.7 1.9-3.2 2.2-4.1 0-.1 0-.2.1-.2 0 .1.1.1.1.2 0 0 .1-.1.1-.2l.1-.1c1.3-1.6 2.9-4.5 2.1-7zM74.3 49.9c-.1-.3-.1-.7-.2-1.1v-.2c-.1-.2-.1-.4-.2-.6 0-.1-.1-.3-.1-.5s-.1-.5-.1-.7v-.1c0-.2-.1-.5-.1-.7-.1-.3-.1-.7-.2-1.1v-.1c0-.2 0-.3-.1-.5v-.9c0-.1 0-.2.1-.3V43h-.3c-1.1.1-3.8.4-6.7.2-1.2-.1-2.4-.3-3.6-.6-1-.3-1.8-.5-2.3-.7-1.2-.4-1.6-.6-1.8-.7 0 .2-.1.4-.1.7 0 .3-.1.5-.1.8-.1.2-.1.4-.2.6l.1.1c.5.5 1.5 1.3 1.5 2.1v.2c-.1.4-.4.5-.8.9-.1.1-.6.7-1.1 1.1l-.6.6c-.1 0-.1.1-.2.1-.1.1-.3.2-.4.3-.2.1-.7.5-.8.6-.1.1-.2.1-.3.1-2.8 8.8-2.2 13.5-1.5 16.1.1.5.3 1 .4 1.3-.4.5-.8 1-1.2 1.4-1.2 1.5-2 2.6-2.6 4.2 0 .1 0 .1-.1.2 0 .1 0 .2-.1.2-.2.5-.3 1-.4 1.5-.6 2.3-.8 4.5-.9 6.6-.1 2.4-.2 4.6-.5 6.9.7.3 3.1.9 4.7.6.2-.1 0-3.9.6-5.7l.6-1.5c.4-.9.9-1.9 1.3-3.1.3-.7.5-1.5.7-2.4.1-.5.2-1 .3-1.6V74v-.1c.1-.6.1-1.3.1-2 0-.2-.7.3-1.1.9.3-1.8 1.3-2.1 2-3.2.3-.5.6-1.1.6-2 2.5-1.7 4-3.7 5-5.7.2-.4.4-.9.6-1.4.3-.8.5-1.6.7-2.4.3-1.4.8-3.2 1.2-4.8v-.1c.4-1.2.8-2.2 1.2-2.6-.2.9-.4 1.7-.6 2.5v.2c-.6 3.5-.7 6.2-2 9.2 1 2.6 1.9 3.9 2 7.6-2 0-3.2 1.6-3.7 3.2 1.2.3 3.9.7 8.3.1h.3c.1-.5.3-1.1.5-1.5.3-.8.5-1.5.6-2.2.2-1.3.1-2.4 0-3.2 3.9-3.7 2.6-11 1.6-16.6zm.3-15.1c.1-.3.2-.6.4-.8.2-.3.3-.7.5-1 .1-.3.3-.6.4-.9.5-1.5.4-2.8.3-3.5-.1 0-.1-.1-.2-.1-.5-.2-.9-.4-1.4-.6-.1 0-.2-.1-.3-.1-3.8-1.2-7.9-.9-11.9.1-1 .2-1.9.5-2.9.1-2.3-.8-3.9-1.9-4.6-2.8l-.2-.2c-.1.2-.2.4-.4.6.2 2.3-.5 3.9-1.4 5.1.9 1.2 2.6 2.8 3.6 3.4 1.1.6 1.7.7 3.4.4-.6.7-1.1 1-1.9 1.4.1.7.2 2 .5 3.4.3.3 1.2.8 2.3 1.3.5.3 1.1.5 1.7.7.8.3 1.7.6 2.4.8.1 0 .2.1.3.1.5.1 1.1.2 1.8.2h.9c2.1 0 4.5-.2 5.4-.3h.1c-.1-2.7.2-4.6.7-6.2.2-.3.4-.7.5-1.1zm-23.2 9.3v.2c-.3 1.7.5 2.4 1.9 3.4.6.5 0 .5.5.8.3.2.7.3 1 .3.3 0 .5 0 .8-.1.2-.1.4-.3.6-.5.1-.1.3-.2.5-.4.3-.2.6-.5.7-.6.1-.1.2-.1.3-.2.2-.2.5-.5.6-.7.2-.2.4-.5.5-.7 0-.1.1-.1.1-.1v-.1c.1-.4-.3-.8-.8-1.3-.2-.2-.4-.3-.5-.5-.3-.3-.6-.5-1-.7-.9-.5-1.9-.7-3-.7l-.3-.3c-2.2-2.5-3.2-4.8-3.9-6.5-.9-2.1-1.9-3.3-3.9-4.9 1 .4 1.8.8 2.3 1.1.5.4 1.3.4 1.9.2.2-.1.5-.2.7-.3.2-.1.4-.2.6-.4 1.6-1.3 2.5-3.8 2.6-5.6v-.1c.2-.3.6-1.1.8-1.4l.1.1c.1.1.3.2.6.5.1 0 .1.1.2.1.1.1.2.1.2.2.8.6 1.9 1.3 2.6 1.7 1.4.7 2.3.7 5.3-.1 2.2-.6 4.8-.8 6.8-.8 1.4 0 2.7.3 4 .7.2.1.4.1.5.2.3.1.6.2.9.4 0 0 .1 0 .1.1.8.4 2.1 1.2 2.5-.3.1-2-.6-3.9-1.6-5.3 0 0-.1 0-.1-.1-.1-.1-.2-.2-.4-.3-.1-.1-.2-.1-.3-.2-.1-.1-.2-.2-.4-.2-.6-.4-1.2-.8-1.6-.9-.1-.1-.3-.1-.4-.2h-.1-.1c-.1 0-.3-.1-.4-.1-.1 0-.1 0-.2-.1h-.1l-.2-.4c-.2-.1-.4-.2-.5-.2h-.6c-.3 0-.5.1-.7.1-.7.1-1.2.3-1.7.4-.2 0-.3.1-.5.1-.5.1-1 .2-1.6.2-.4 0-.9-.1-1.5-.2-.4-.1-.8-.2-1.1-.3-.2-.1-.4-.1-.6-.2-.6-.2-1.1-.3-1.7-.4h-.2-1.8c-.3 0-.6.1-1 .1H57.9c-.8 0-1.5 0-2.3-.1-.2 0-.5-.1-.7-.1-.5-.1-.9-.2-1.3-.4-.2-.1-.3-.1-.4-.2-.1 0-.2 0-.2-.1-.3-.1-.6-.1-.9-.1H51h-.1c-.4 0-.9.1-1.4.2-1.1.2-2.1.6-3 1.3-.3.2-.6.5-.8.8-.1.1-.2.2-.2.3-.4.6-.8 1.2-.9 2 0 .2-.1.4-.1.6 0 .2 1.7.7 2.3 2.8-.8-1.2-2.3-2.5-4.1-1.4-1.5 1-1.1 3.1-2.4 5.4-.3.5-.6.9-1 1.4-.8 1-.7 2.1.2 4.4 1.4 3.4 7.6 5.3 11.5 8.3l.4.4zm8.7-36.3c0 .6.1 1 .2 1.6v.1c0 .3.1.6.1.9.1 1.2.4 2 1 2.9 0 .1.1.1.1.2.3.2.5.3.8.4 1.1.2 3.1.3 4.2 0 .2-.1.5-.3.7-.5.4-.4.7-1.1.9-1.7.1-.7.3-1.3.4-1.8 0-.2.1-.4.1-.5v-.1c0-.2 0-.3.1-.5.2-.7.2-2.4.3-2.8.1-.7 0-1.8-.1-2.5 0-.2-.1-.4-.1-.5v-.1c-.2-.5-1.4-1.4-4.3-1.4-3.1 0-4 1-4.1 1.5v.1c0 .1 0 .3-.1.5-.1.4-.2 1.4-.2 1.9v2.3zm-6 88.6c0-.1-.1-.2-.1-.3-.7-1.5-1.1-3.5-1.3-4.6.4.1.7.6.8.3.2-.5-.4-1.5-.5-2.2v-.1c-.5-.5-4-.5-3.7-.3-.4.8-1 .6-1.3 2.1-.1.7.8.1 1.7.1-1.4.9-3 2.1-3.4 3.2-.1.1-.1.2-.1.3 0 .2-.1.4-.1.5-.1 1.2.5 1.6 2 2.4H48.4c1.4.3 3 .3 4.3.3 1.2-.2 1.6-.7 1.6-1.4-.2-.1-.2-.2-.2-.3z"style=fill:#efefef /><path d="M56.1 36.5c.3 1.4.5 2.4.8 4.2h-.2c-.1.5-.1.9-.1 1.3-1-.4-2.2-.5-2.6-.5-3.7-4.4-2.9-6.1-4.4-8.3.4-.2 1-.4 1.5-.8 1.6 1.9 3.3 3 5 4.1zm-1.7 13.2s-1.4 0-2.3-1c0 0-.1-.5.1-.7 0 0-1.2-1-1.5-1.7-.2-.5-.3-1.1-.2-1.6-4.4-3.7-10.9-4.2-12.9-9.1-.5-1.2-1.3-2.9-.9-3.9-.3.1-.5.2-.8.3-2.9.9-11.7 5.3-17.9 8.8 1.6 1.7 2.6 4.3 3.2 7.2l.3 1.5c.1.5.1 1 .2 1.5.1 1.4.4 2.7.8 3.9.2.8.6 1.5.9 2.2.6 1 1.2 1.9 2.1 2.6.6.5 1.2.9 1.9 1.3 2.1 1.1 5 1.6 8.6 1.5H37.9c.5 0 1 .1 1.5.1h.1c.4.1.9.1 1.3.2h.2c.4.1.9.2 1.3.4h.1c.4.1.8.3 1.1.5h.1c.4.2.7.4 1.1.6h.1c.7.4 1.3.9 1.9 1.5l.1.1c.6.5 1.1 1.1 1.5 1.8 0 .1.1.1.1.2s.1.1.1.2c.4.6 1.2 1.1 1.9 1.3.7-.9 1.5-1.8 2.2-2.8-1.6-6 0-11.7 1.8-16.9zm-26-15.9c5-2.4 9-4.1 9.9-4.5.3-.6.6-1.4.9-2.6.1-.3.2-.5.3-.8 1-2.7 2.7-2.8 3.5-3v-.2c.1-1.1.5-2 1-2.8-8.8 2.5-18 5.5-28 11.7-.1.1-.2.2-.4.2C11.3 34.5 3 40.3 1.3 51c2.4-2.7 6-5.6 10.5-8.5.1-.1.3-.2.5-.3.2-.1.5-.3.7-.4 1.2-.7 2.4-1.4 3.6-2.2 2.2-1.2 4.5-2.4 6.7-3.5 1.8-.8 3.5-1.6 5.1-2.3zm54.9 61.3l-.3-.3c-.8-.6-4.1-1.2-5.5-2.3-.4-.3-1.1-.7-1.7-1.1-1.6-.9-3.5-1.8-3.5-2.1v-.1c-.2-1.7-.2-7 .1-8.8.3-1.8.7-4.4.8-5.1.1-.6.5-1.2.1-1.2h-.4c-.2 0-.4.1-.8.1-1.5.3-4.3.6-6.6.4-.9-.1-1.6-.2-2-.3-.5-.1-.7-.2-.9-.3H62.3c-.4.5 0 2.7.6 4.8.3 1.1.8 2 1.2 3 .3.8.6 1.8.8 3.1 0 .2.1.4.1.7.2 2.8.3 3.6-.2 4.9-.1.3-.3.6-.4 1-.4.9-.7 1.7-.6 2.3 0 .2.1.4.1.5.2.4.6.7 1.2.8.2 0 .3.1.5.1.3 0 .6.1.9.1 3.4 0 5.2 0 8.6.4 2.5.4 3.9.6 5.1.5.4 0 .9-.1 1.4-.1 1.2-.2 1.8-.5 1.9-.9-.1.2-.1.1-.2-.1zM60.2 16.4zm-.5 1.7zm3.8.5c.1 0 .3.1.5.1.4.1.7.2 1.2.3.3.1.6.1.9.1h1.3c.3-.1.7-.1 1-.2.7-.2 1.5-.4 2.7-.6h.3c.3 0 .6.1.9.3.1.1.2.1.4.2.3.2.8.2 1.2.4h.1c.1 0 .1.1.2.1.6.3 1.3.7 1.9 1.1l.3.3c.9-.1 1.6-.2 2.1-.2h.1c-.2-.4-.3-1.3-1.8-.6-.6-.7-.8-1.3-2.1-.9-.1-.2-.2-.3-.3-.4l-.1-.1c-.1-.1-.2-.3-.3-.4 0-.1-.1-.1-.1-.2-.2-.3-.5-.5-.9-.7-.7-.4-1.5-.6-2.3-.5-.2 0-.4.1-.6.2-.1 0-.2.1-.2.1-.1 0-.2.1-.3.2-.5.3-1.3.8-2.1 1-.1 0-.1 0-.2.1-.2 0-.4.1-.5.1H66.5h-.1c-.4-.1-1.1-.2-2-.5-.1 0-.2-.1-.3-.1-.9-.2-1.8-.5-2.7-.8-.3-.1-.7-.2-1-.3-.1 0-.1 0-.2-.1h-.1s-.1 0-.1-.1c-.3-.3-.7-.6-1.3-.8-.5-.2-1.2-.4-2.1-.5-.2 0-.5 0-.7.1-.4.2-.8.6-1.2.9.1.1.3.3.4.5.1.2.2.4.3.7l-.6-.6c-.5-.4-1.1-.8-1.7-.9-.8-.2-1.4.4-2.3.9 1 0 1.8.1 2.5.4.1 0 .1 0 .2.1h.1c.1 0 .2.1.3.1.9.4 1.8.6 2.7.6h1.3c.5 0 .8-.1 1.1-.1.1 0 .4 0 .7-.1h2.2c.4.4.9.6 1.6.8z"style=fill:#88ce02 /><path d="M100 51.8c0-19.5-12.5-36.1-30-42.1.1-1.2.2-2.4.3-3.1.1-1.5.2-3.9-.5-4.9-1.6-2.3-9.1-2.1-10.5-.1-.4.6-.7 3.6-.6 5.9-1.1-.1-2.2-.1-3.3-.1-16.5 0-30.9 9-38.6 22.3-2.4 1.4-4.7 2.8-6.1 4C5.4 38 2.2 43.2 1 47c-1.6 4.7-1.1 7.6.4 5.8 1.2-1.5 6.6-5.9 10.1-8.2-.4 2.3-.6 4.8-.6 7.2 0 21 14.5 38.5 34 43.3-.1 1.1.1 2 .7 2.6.9.8 3.2 2 6.4 1.6 2.9-.3 3.5-.5 3.2-2.9h.2c2.7 0 5.3-.2 7.8-.7.1.1.2.2.4.3 1.5 1 7.1.8 9.6.7s6.2.9 8.6.5c2.9-.5 3.4-2.3 1.6-3.2-1.5-.8-3.8-1.3-6.7-3.1C90.6 83.4 100 68.7 100 51.8zM60.1 5.5c0-.5.1-1.5.2-2.1 0-.2 0-.4.1-.5v-.1c.1-.5 1-1.5 4.1-1.5 2.9 0 4.2.9 4.3 1.4v.1c0 .1 0 .3.1.5.1.8.2 1.9.1 2.7 0 .5-.1 2.1-.2 2.9 0 .1 0 .3-.1.5v.1c0 .2-.1.3-.1.5-.1.5-.2 1.1-.4 1.8-.1.6-.5 1.2-.9 1.7-.2.3-.5.5-.7.5-1.1.3-3.1.3-4.2 0-.3-.1-.5-.2-.8-.4 0-.1-.1-.1-.1-.2-.6-.9-.9-1.7-1-2.9 0-.4-.1-.6-.1-.9v-.1c-.1-.6-.2-1-.2-1.6v-.3c-.1-1.3-.1-2.1-.1-2.1zm-.4 7.5v-.4c.6.6 1.3 1.3 1.8 1.7.2.2.5.3.8.3.2 0 .3 0 .5.1h1.6c.8 0 1.6.1 2 0 .1 0 .2 0 .3-.1.6-.3 1.4-1 2.1-1.6 0 .6.1 1.2.1 1.7v1.5c0 .3 0 .5.1.7-.1.1-.2.1-.4.2-.7.4-1.7 1-2.3.9-.5-.1-1.5-.3-2.6-.7-1.2-.3-2.4-.8-3.2-1.2 0 0-.1 0-.1-.1-.2-.3-.4-.5-.6-.7-.3-.4-.5-.6-.5-.7.3-.4.4-.9.4-1.6zm.5 3.4zm-7.3-.3c.6.1 1.2.5 1.7.9.2.2.5.4.6.6-.1-.2-.2-.5-.3-.7-.1-.2-.3-.4-.4-.5.4-.3.8-.7 1.2-.9.2-.1.4-.1.7-.1.9.1 1.6.2 2.1.5.6.2 1 .5 1.3.8 0 0 .1 0 .1.1h.1c.1 0 .1 0 .2.1.3.1.6.2 1 .3.9.3 1.9.6 2.7.8.1 0 .2.1.3.1.9.2 1.6.4 2 .5h.4c.2 0 .4 0 .5-.1.1 0 .1 0 .2-.1.7-.2 1.5-.7 2.1-1 .1-.1.2-.1.3-.2.1 0 .2-.1.2-.1.2-.1.4-.2.6-.2.8-.2 1.7.1 2.3.5.3.2.6.4.9.7 0 .1.1.1.1.2.1.2.2.3.3.4l.1.1c.1.1.2.2.3.4 1.3-.4 1.5.2 2.1.9 1.6-.7 1.7.2 1.8.6h-.1c-.5 0-1.2 0-2.1.2l-.3-.3c-.5-.4-1.2-.8-1.9-1.1-.1 0-.1-.1-.2-.1h-.1c-.4-.2-.8-.2-1.2-.4-.1-.1-.2-.1-.4-.2-.3-.1-.6-.3-.9-.3h-.3c-1.2.1-2 .4-2.7.6-.3.1-.7.2-1 .2-.4.1-.8.1-1.3 0-.3 0-.6-.1-.9-.1-.5-.1-.8-.2-1.2-.3-.2 0-.3-.1-.5-.1h-.1c-.6-.2-1.2-.3-1.8-.4h-.1-2.1c-.4.1-.6.1-.7.1-.3 0-.7.1-1.1.1h-1.3c-.9 0-1.9-.2-2.7-.6-.1 0-.2-.1-.3-.1H53c-.1 0-.1 0-.2-.1-.7-.3-1.6-.4-2.5-.4 1.2-.8 1.8-1.4 2.6-1.3zm6.8 2zm-15.2 4.1c.1-.7.4-1.4.9-2 .1-.1.2-.2.2-.3l.8-.8c.9-.6 1.9-1.1 3-1.3.5-.1 1-.2 1.4-.2H52c.3 0 .6.1.9.1.1 0 .2 0 .2.1.1.1.2.1.4.2.4.2.8.3 1.3.4.2 0 .5.1.7.1.7.1 1.5.1 2.3.1H58.7c.4 0 .7-.1 1-.1H61.7c.6.1 1.1.2 1.7.4.2 0 .4.1.6.2.3.1.7.2 1.1.3.6.1 1.1.2 1.5.2.6 0 1.1-.1 1.6-.2.2 0 .3-.1.5-.1.5-.1 1-.3 1.7-.4.2 0 .5-.1.7-.1h.6c.2 0 .4.1.5.2l.1.1h.1c.1 0 .1 0 .2.1.2.1.3.1.4.1h.2c.1.1.3.1.4.2.4.2 1 .6 1.6.9.1.1.2.2.4.2.1.1.2.1.3.2.2.1.3.3.4.3l.1.1c1.1 1.4 1.8 3.3 1.6 5.3-.3 1.5-1.6.7-2.5.3 0 0-.1 0-.1-.1-.3-.1-.6-.2-.9-.4-.2-.1-.4-.1-.5-.2-1.2-.4-2.5-.7-4-.7-2 0-4.6.1-6.8.8-3 .8-4 .8-5.3.1-.8-.4-1.8-1.1-2.6-1.7-.1-.1-.2-.1-.2-.2-.1-.1-.1-.1-.2-.1-.3-.2-.6-.4-.6-.5l-.1-.1c-.2.3-.6 1-.8 1.4v.1c-.1 1.7-1 4.2-2.6 5.6-.2.1-.4.3-.6.4-.2.1-.5.2-.7.3-.7.2-1.4.2-1.9-.2-.5-.3-1.3-.7-2.3-1.1 2 1.6 3 2.8 3.9 4.9.7 1.7 1.7 4 3.9 6.5l.3.3c1.1 0 2.1.2 3 .7.4.2.7.4 1 .7.2.2.4.3.5.5.5.4.9.8.8 1.3v.1s0 .1-.1.1c-.1.2-.3.5-.5.7-.1.1-.4.4-.6.7-.1.1-.2.2-.3.2-.1.1-.4.3-.7.6-.2.2-.4.3-.5.4-.2.1-.4.4-.6.5-.3.1-.5.2-.8.1-.3 0-.7-.2-1-.3-.5-.3.1-.3-.5-.8-1.4-1-2.2-1.7-1.9-3.4v-.2c-.2-.1-.3-.3-.5-.4-3.9-3-10.1-4.9-11.5-8.3-.9-2.3-1-3.4-.2-4.4.4-.5.8-1 1-1.4 1.3-2.3.9-4.4 2.4-5.4 1.8-1.2 3.3.2 4.1 1.4-.5-2.1-2.3-2.6-2.3-2.8.3.1.3-.1.3-.3zm29 20s-.1 0 0 0c-.1 0-.1 0 0 0-.9.1-3.3.3-5.4.3h-.9c-.7 0-1.3-.1-1.8-.2-.1 0-.2 0-.3-.1-.7-.2-1.6-.5-2.4-.8-.6-.2-1.2-.5-1.7-.7-1.1-.5-2.1-1.1-2.3-1.3-.5-1.4-.7-2.7-.7-3.4.8-.4 1.3-.7 1.9-1.4-1.7.3-2.4.2-3.4-.4-1-.5-2.6-2.2-3.6-3.4 1-1.2 1.7-2.9 1.4-5.1.1-.2.3-.4.4-.6 0 .1.1.1.2.2.7.9 2.4 2 4.6 2.8 1.1.4 2 .1 2.9-.1 4-1 8.1-1.3 11.9-.1.1 0 .2.1.3.1.5.2.9.4 1.4.6.1 0 .1.1.2.1.1.7.2 2-.3 3.5-.1.3-.2.6-.4.9-.2.3-.3.6-.5 1-.1.3-.2.5-.4.8-.2.4-.3.8-.5 1.3-.4 1.4-.7 3.4-.6 6zm-23.9-9c.4-.2 1-.4 1.5-.8 1.6 1.8 3.3 3 5 4.1.3 1.4.5 2.4.8 4.2h-.2c-.1.5-.1.9-.1 1.3-1-.4-2.2-.5-2.6-.5-3.7-4.3-3-6-4.4-8.3zm-32.9 6.5c-1.3.7-2.5 1.4-3.6 2.2-.2.1-.5.3-.7.4-.1.1-.3.2-.5.3-4.5 2.9-8.1 5.8-10.5 8.5 1.7-10.8 10-16.5 14.3-19.2.1-.1.2-.2.4-.2 10-6.2 19.2-9.2 28-11.7-.5.8-.9 1.7-1 2.8v.2c-.8.1-2.5.2-3.5 3-.1.2-.2.5-.3.8-.3 1.2-.6 2-.9 2.6-.9.4-5 2.2-9.9 4.5-1.6.8-3.3 1.6-5 2.4-2.3 1-4.6 2.2-6.8 3.4zm28 24.8s0-.1 0 0c-.4-.3-.8-.5-1.2-.7h-.1c-.4-.2-.7-.3-1.1-.5h-.1c-.4-.1-.8-.3-1.3-.4h-.2c-.4-.1-.8-.2-1.3-.2h-.1c-.5-.1-1-.1-1.5-.1H35.9c-3.7.1-6.5-.4-8.6-1.5-.7-.4-1.4-.8-1.9-1.3-.9-.7-1.5-1.6-2.1-2.6-.4-.7-.7-1.4-.9-2.2-.4-1.2-.6-2.5-.8-3.9 0-.5-.1-1-.2-1.5l-.3-1.5c-.6-2.9-1.6-5.5-3.2-7.2 6.3-3.5 15-7.9 17.8-8.8.3-.1.6-.2.8-.3-.3 1.1.4 2.7.9 3.9 2.1 4.9 8.6 5.4 12.9 9.1 0 .5 0 1.1.2 1.6.5.6 1.7 1.6 1.7 1.6-.2.2-.1.7-.1.7.9 1 2.3 1 2.3 1-1.8 5.2-3.4 10.9-1.9 16.9-.7 1-1.5 1.8-2.2 2.8-.7-.2-1.4-.6-1.9-1.3 0-.1-.1-.1-.1-.2s-.1-.1-.1-.2l-1.5-1.8-.1-.1c-.5-.4-1.2-.9-1.9-1.3zm7.9 33.6c-1.3.1-2.9 0-4.3-.3h-.2-.1c-1.5-.8-2.1-1.2-2-2.4 0-.2 0-.3.1-.5 0-.1.1-.2.1-.3.5-1.1 2.1-2.2 3.4-3.2-.8 0-1.8.7-1.7-.1.2-1.5.9-1.3 1.3-2.1-.2-.3 3.3-.2 3.8.3v.1c0 .7.7 1.7.5 2.2-.1.3-.4-.2-.8-.3.2 1.1.6 3.1 1.3 4.6.1.1.1.2.1.3 0 .1.1.2.1.3 0 .7-.4 1.2-1.6 1.4zM59 67.7c0 .9-.3 1.6-.6 2-.7 1.1-1.7 1.4-2 3.2.4-.6 1.1-1.1 1.1-.9 0 .8-.1 1.4-.1 2v.2c-.1.6-.2 1.1-.3 1.6-.2.9-.5 1.7-.7 2.4-.4 1.2-.9 2.1-1.3 3.1l-.6 1.5c-.6 1.7-.4 5.6-.6 5.7-1.6.3-4.1-.3-4.7-.6.3-2.2.4-4.5.5-6.9.1-2.1.3-4.3.9-6.6.1-.5.3-1 .4-1.5 0-.1 0-.2.1-.2 0-.1 0-.1.1-.2.5-1.6 1.4-2.7 2.6-4.2.4-.4.7-.9 1.2-1.4-.1-.4-.2-.8-.4-1.3-.7-2.6-1.3-7.3 1.5-16.1.1 0 .2-.1.3-.1.2-.1.7-.5.8-.6.1-.1.3-.2.4-.3.1 0 .1-.1.2-.1l.6-.6 1.1-1.1c.4-.4.7-.5.8-.9v-.2c0-.8-1.1-1.5-1.5-2.1l-.1-.1c.1-.2.1-.4.2-.6 0-.2.1-.5.1-.8 0-.2.1-.5.1-.7.1.1.6.4 1.8.7.6.2 1.3.4 2.3.7 1.1.3 2.4.5 3.6.6 2.9.2 5.6 0 6.7-.2h.3v.1c0 .1 0 .2-.1.3v.9c0 .2 0 .3.1.5v.1c0 .4.1.7.2 1.1 0 .3.1.5.1.7v.1c0 .3.1.5.1.7 0 .2.1.3.1.5.1.2.1.4.2.6v.2c.1.4.2.8.2 1.1 1 5.7 2.3 12.9-1.1 16.7.2.8.3 1.9 0 3.2-.1.7-.3 1.4-.6 2.2-.2.5-.3 1-.5 1.5h-.3c-4.5.6-7.1.2-8.3-.1.5-1.6 1.7-3.3 3.7-3.2-.1-3.7-1.1-5-2-7.6 1.3-3 1.3-5.7 2-9.2v-.2c.2-.8.3-1.6.6-2.5-.4.5-.8 1.5-1.2 2.6v.1c-.5 1.5-.9 3.4-1.2 4.8-.2.8-.4 1.6-.7 2.4-.2.5-.4.9-.6 1.4-1.5 1.9-3 3.9-5.5 5.6zm18.5 24.9c1.5 1.1 4.7 1.8 5.5 2.3l.3.3c.1.1.1.2.1.3-.1.4-.7.7-1.9.9-.5.1-.9.1-1.4.1-1.3 0-2.6-.2-5.1-.5-3.4-.5-5.2-.4-8.6-.4-.3 0-.6 0-.9-.1-.2 0-.4-.1-.5-.1-.6-.2-1-.5-1.2-.8-.1-.2-.1-.3-.1-.5-.1-.7.2-1.5.6-2.3.2-.4.3-.7.4-1 .5-1.3.4-2.1.2-4.9 0-.2-.1-.4-.1-.7-.2-1.3-.5-2.3-.8-3.1-.4-1.1-.9-1.9-1.2-3-.6-2.1-1-4.3-.6-4.8H62.5c.2.1.5.2.9.3.5.1 1.1.2 2 .3 2.2.2 5.1-.2 6.6-.4.3-.1.6-.1.8-.1h.4c.4 0 .1.6-.1 1.2-.1.7-.5 3.3-.8 5.1-.3 1.8-.2 7.1-.1 8.8v.1c0 .3 1.9 1.2 3.5 2.1.7.2 1.4.5 1.8.9zm4.8-48.2c0 .1 0 .1 0 0-.1.1-.2.2-.2.3 0-.1-.1-.1-.1-.2 0 .1 0 .2-.1.2-.2.9-.6 2.4-2.2 4.1-.4.4-.7.6-1 .7-.5.1-.9 0-1.5-.1-.9-.2-1.3-.6-2.2-1.1-.1-.6-.3-1.3-.4-1.8 0-.3-.1-.5-.1-.6v-1l.4-.4s.7-1 1.8-1 2.2-.2 2.5-.5v-.1-.3c0-.1 0-.2-.1-.3-.4-1.4-2.1-1.8-1.4-4.8 0-.2.3-.5 1.2-.5-1.4-.3-2-.4-3-1.3.5-1.1 1-1.9 1.3-2.6.8-1.5.3-3.5.3-3.5.8-.3 1.6-.7 1.7-1 .9-2.8-.7-5.5-2.5-7.2 1.2-.1 2.6.1 3.6 1.1 2.4 2.4 1.8 5 1 6.8.6.7 2.1 2.9 1.2 5.3-.2.6-1.4.6-2.3 2.1 2.3-1.3 3.7-1 4.2.7 1 2.4-.6 5.3-2.1 7z"/><path d="M22 53.4v-.2c0-.2-.1-.5-.2-.9s-.1-.8-.2-1.3c-.5-4.7-1.9-9.4-4.9-11.3 3.7-2 16.8-8.5 21.9-10.5 2.9-1.2.8-.4-.2 1.4-.8 1.4-.3 2.9-.5 3.2-.6.8-12.6 10.5-15.9 19.6zm32.2-2.3c-3.4 3.8-12 11-18.2 11.4 8.7-.2 12.2 4.1 14.7 9.7 2.6-5.2 2.7-10.3 2.6-16.1 0-2.6 1.8-6 .9-5zm5.3-23L54.3 24s-1.1 3.1-1 4.6c.1 1.6-1.8 2.7-.9 3.6.9.9 3.2 2.5 4 3.4.7.9 1.1 7.1 1.1 7.1l2.2 2.7s1-1.8 1.1-6.3c.2-5.4-2.9-7.1-3.3-8.6-.4-1.4.6-2.9 2-2.4zm3.1 45.6l3.9.3s1.2-2.2 2.1-3.5c.9-1.4.4-1.6 0-4.6-.4-3-1.4-9.3-1.2-13.6l-3.1 10.2s1.8 5.6 1.6 6.4c-.1.8-3.3 4.8-3.3 4.8zm5 18.8c-1.1 0-2.5-.4-3.5-.8l-1 .3.2 4s5.2.7 4.6-.4c-.6-1.2-.3-3.1-.3-3.1zm12 .6c-1 0-.3.2.4 1.2.8 1 .1 2-.8 2.3l3.2.5 1.9-1.7c.1 0-3.7-2.3-4.7-2.3zM73 76c-1.6.5-4.2.8-5.9.8-1.7.1-3.7-.1-5-.5v1.4s1.2.5 5.4.5c3.5.1 5.7-.8 5.7-.8l.9-.8c-.1.1.5-1.1-1.1-.6zm-.2 3.1c-1.6.6-3.9.6-5.6.7-1.7.1-3.7-.1-5-.5l.1 1.4s.7.3 4.9.4c3.5.1 5.7-.7 5.7-.7l.3-.5c-.1-.1.3-1-.4-.8zm5.9-42.7c-.9-.8-1.4-2.4-1.5-3.3l-1.9 2.5.7 1.2s2.5.1 2.8.1c.4 0 .3-.1-.1-.5zM69 14.7c.6-.7.2-2.7.2-2.7L66 14.6l-4.4-.8-.5-1.3-1.3-.1c.8 1.8 1.8 2.5 3.3 3.1.9.4 4.5.9 5.9-.8z"style=opacity:.4;fill-rule:evenodd;clip-rule:evenodd /></svg></a></div></div>';
  		if (element) {
  			root.style.position = "absolute";
  			root.style.top = minimal ? "calc(100% - 42px)" : "calc(100% - 51px)";
  		}
  		if (css) {
  			if (_isString$2(css)) {
  				root.style.cssText = css;
  			} else if (_isObject$2(css)) {
  				css.data = "root";
  				gsap$4.set(root, css).kill();
  			}
  			if (root.style.top) {
  				root.style.bottom = "auto";
  			}
  			if (root.style.width) {
  				gsap$4.set(root, {xPercent: -50, left: "50%", right: "auto", data:"root"}).kill();
  			}
  		}
  		if (!minimal && root.offsetWidth < 600) {
  			root.setAttribute("class", "gs-dev-tools minimal");
  			if (element) {
  				root.style.top = "calc(100% - 42px)";
  			}
  		}
  		return root;
  	},
  	_clickedOnce = true, //perhaps we shouldn't preventDefault() on the first mousedown/touchstart/pointerdown so that iframes get focus properly. Did that previously, but now it seems to prevent interaction on the first click (annoying).
  	_addListener$1 = (e, type, callback, capture) => {
  		let handler, altType;
  		if (type === "mousedown" || type === "mouseup") {
  			e.style.cursor = "pointer";
  		}
  		if (type === "mousedown") {
  			//some browsers call BOTH mousedown AND touchstart, for example, on a single interaction so we need to skip one of them if both are called within 100ms.
  			altType = !_isUndefined$2(e.onpointerdown) ? "pointerdown" : !_isUndefined$2(e.ontouchstart) ? "touchstart" : null;
  			if (altType) {
  				handler = event => {
  					if (event.target.nodeName.toLowerCase() !== "select" && event.type === altType) { //don't preventDefault() on a <select> or else it won't open!
  						event.stopPropagation();
  						if (_clickedOnce) { //otherwise, both touchstart and mousedown will get called.
  							event.preventDefault();
  							callback.call(e, event);
  						}
  					} else if (event.type !== altType) {
  						callback.call(e, event);
  					}
  					_clickedOnce = true;
  				};
  				e.addEventListener(altType, handler, capture);
  				if (altType !== "pointerdown") {
  					e.addEventListener(type, handler, capture);
  				}
  				return;
  			}
  		}
  		e.addEventListener(type, callback, capture);
  	},
  	_removeListener$1 = (e, type, callback) => {
  		e.removeEventListener(type, callback);
  		type = type !== "mousedown" ? null : !_isUndefined$2(e.onpointerdown) ? "pointerdown" : !_isUndefined$2(e.ontouchstart) ? "touchstart" : null;
  		if (type) {
  			e.removeEventListener(type, callback);
  		}
  	},
  	_selectValue = (element, value, label, insertIfAbsent) => {
  		let options = element.options,
  			i = options.length,
  			option;
  		value += "";
  		while (--i > -1) {
  			if (options[i].innerHTML === value || options[i].value === value) {
  				element.selectedIndex = i;
  				label.innerHTML = options[i].innerHTML;
  				return options[i];
  			}
  		}
  		if (insertIfAbsent) {
  			option = _createElement$2("option", element);
  			option.setAttribute("value", value);
  			option.innerHTML = label.innerHTML = _isString$2(insertIfAbsent) ? insertIfAbsent : value;
  			element.selectedIndex = options.length - 1;
  		}
  	},
  	//increments the selected value of a <select> up or down by a certain amount.
  	_shiftSelectedValue = (element, amount, label) => {
  		let options = element.options,
  			i = Math.min(options.length - 1, Math.max(0, element.selectedIndex + amount));
  		element.selectedIndex = i;
  		if (label) {
  			label.innerHTML = options[i].innerHTML;
  		}
  		return options[i].value;
  	},
  	//moves everything from _globalTimeline into _recordedRoot and updates the _rootTween if it is currently controlling the Global timeline (_recordedRoot). _recordedTemp is just a temporary recording area for anything that happens while _recordedRoot is paused. Returns true if the _recordedRoot's duration changed due to the merge.
  	_merge$1 = () => {
  		let t = _globalTimeline$1._first,
  			duration, next, target;
  		if (_rootInstance) {
  			duration = _recordedRoot._dur;
  			while (t) {
  				next = t._next;
  				target = t._targets && t._targets[0];
  				if (!(_isFunction$3(target) && target === t.vars.onComplete && !t._dur) && !(target && target._gsIgnore)) { //typically, delayedCalls aren't included in the _recordedTemp, but since the hijacked add() below fires BEFORE TweenLite's constructor sets the target, we couldn't check that target === vars.onComplete there. And Draggable creates a tween with just an onComplete (no onReverseComplete), thus it fails that test. Therefore, we test again here to avoid merging that in.
  					_recordedRoot.add(t, t._start - t._delay);
  				}
  				t = next;
  			}
  			return (duration !== _recordedRoot.duration());
  		}
  	},
  	_buildPlayPauseMorph = svg => {
  		let tl = gsap$4.timeline({data:"root", parent:_independentRoot, onComplete:() => tl.kill() });
  		tl.to(svg.querySelector(".play-1"), {duration:0.4, attr:{d:"M5.75,3.13 C5.75,9.79 5.75,16.46 5.75,23.13 4.08,23.13 2.41,23.13 0.75,23.13 0.75,16.46 0.75,9.79 0.75,3.12 2.41,3.12 4.08,3.12 5.75,3.12"}, ease:"power2.inOut", rotation:360, transformOrigin:"50% 50%"})
  		  .to(svg.querySelector(".play-2"), {duration:0.4, attr:{d:"M16.38,3.13 C16.38,9.79 16.38,16.46 16.38,23.13 14.71,23.13 13.04,23.13 11.38,23.13 11.38,16.46 11.38,9.79 11.38,3.12 13.04,3.12 14.71,3.12 16.38,3.12"}, ease:"power2.inOut", rotation:360, transformOrigin:"50% 50%"}, 0.05);
  		return tl;
  	},

  	_buildLoopAnimation = svg => {
  		let tl = gsap$4.timeline({data:"root", id:"loop", parent:_independentRoot, paused:true, onComplete:() => tl.kill() });
  		tl.to(svg, {duration: 0.5, rotation:360, ease:"power3.inOut", transformOrigin:"50% 50%"})
  		  .to(svg.querySelectorAll(".loop-path"), {duration:0.5, fill:"#91e600", ease:"none"}, 0);
  		return tl;
  	},

  	_getAnimationById = id => gsap$4.getById(id) || _independentRoot.getById(id) || (id === _recordedRoot.vars.id && _recordedRoot),



  	_initCore$4 = core => {
  		gsap$4 = core || _getGSAP$3();
  		if (!_coreInitted$4) {
  			if (gsap$4 && _windowExists$4()) {
  				_doc$4 = document;
  				_docEl = _doc$4.documentElement;
  				_win$5 = window;
  				gsap$4.registerPlugin(Draggable);
  				_globalTimeline$1 = gsap$4.globalTimeline;
  				_globalTimeline$1._sort = true;
  				_globalTimeline$1.autoRemoveChildren = false;
  				Animation$1 = gsap$4.core.Animation;
  				_independentRoot = gsap$4.timeline({data:"indy", autoRemoveChildren:true, smoothChildTiming:true});
  				_independentRoot.kill();
  				_independentRoot._dp = 0; //don't let it revert to the global timeline as its parent.
  				_independentRoot.to({}, {duration:1e12});
  				_recordedRoot = gsap$4.timeline({data:"root", id:"Global Timeline", autoRemoveChildren:false, smoothChildTiming:true, parent:_independentRoot});
  				_rootTween = gsap$4.to(_recordedRoot, {duration:1, time:1, ease:"none", data:"root", id:"_rootTween", paused:true, immediateRender:false, parent:_independentRoot});
  				// so that auto-overwriting works. Initially we transferred the tweens to the _recordedRoot.
  				_globalTimeline$1.killTweensOf = function(targets, props, onlyActive) {
  					_recordedRoot.killTweensOf(targets, props, onlyActive);
  					_recordedRoot.killTweensOf.call(_globalTimeline$1, targets, props, onlyActive);
  				};
  				_independentRoot._start = gsap$4.ticker.time;
  				gsap$4.ticker.add(time => _independentRoot.render(time - _independentRoot._start));

  				//align the all of the playheads so they're starting at 0 now.
  				_globalTimeline$1._start += _globalTimeline$1._time;
  				_recordedRoot._start = _globalTimeline$1._time = _globalTimeline$1._tTime = 0;
  				_delayedCall = (delay, callback, params, scope) => gsap$4.to(callback, {delay:delay, duration:0, onComplete:callback, onReverseComplete:callback, onCompleteParams:params, onReverseCompleteParams:params, callbackScope:scope, parent:_independentRoot});

  				//in case GSDevTools.create() is called before anything is actually on the global timeline, we've gotta update it or else the duration will be 0 and it'll be stuck.
  				_delayedCall(0.01, () => _rootInstance ? _rootInstance.update() : _merge$1());

  				//initially we record everything into the _recordedRoot Timeline because developers might call GSDevTools.create() AFTER some of their code executes, but after 2 seconds if there aren't any GSDevTool instances that have globalSync enabled, we should dump all the stuff from _recordedRoot into the global timeline to improve performance and avoid issues where _recordedRoot is paused and reaches its end and wants to stop the playhead.
  				_delayedCall(2, () => {
  					let t, next, offset;
  					if (!_rootInstance) {
  						_merge$1();
  						t = _recordedRoot._first;
  						offset = _recordedRoot._start;
  						while (t) {
  							next = t._next;
  							//any animations that aren't finished should be dumped into the root timeline. If they're done, just kill them.
  							if (t._tDur !== t._tTime || (!t._dur && t.progress() !== 1)) {
  								_globalTimeline$1.add(t, t._start - t._delay + offset);
  							} else {
  								t.kill();
  							}
  							t = next;
  						}
  					}
  					if (GSDevTools.globalRecordingTime > 2) {
  						_delayedCall(GSDevTools.globalRecordingTime - 2, () => {
  							_rootInstance && _rootInstance.update();
  							_globalTimeline$1.autoRemoveChildren = true;
  						});
  					} else {
  						_globalTimeline$1.autoRemoveChildren = true;
  					}
  					_startupPhase = false;
  				});
  				_coreInitted$4 = 1;
  			}
  		}
  	},
  	_checkIndependence = (animation, vars) => {
  		if (!vars.globalSync && animation.parent !== _globalTimeline$1) { //in case it's nested in a timeline (playing it won't help if the parent timeline isn't playing).
  			_globalTimeline$1.add(animation, _globalTimeline$1.time());
  		}
  	},







  	GSDevTools = function(vars) {
  		if (!_coreInitted$4) {
  			_initCore$4();
  			gsap$4 || console.warn("Please gsap.registerPlugin(GSDevTools)");
  		}

  		this.vars = vars = vars || {};
  		if (vars.animation) {
  			(GSDevTools.getByAnimation(vars.animation) || {kill:() => 0}).kill();
  		}
  		vars.id = vars.id || (_isString$2(vars.animation) ? vars.animation : _idSeed++); //try to find a unique ID so that sessionStorage can be mapped to it (otherwise, for example, all the embedded codepens on a page would share the same settings). So if no id is defined, see if there's a string-based "animation" defined. Last of all, we default to a numeric counter that we increment.
  		_lookup$1[vars.id + ""] = this;

  		("globalSync" in vars) || (vars.globalSync = !vars.animation); //if the user calls create() and passes in an animation AFTER the initial recording time has elapsed, there's a good chance the animation won't be in the recordedRoot, so we change the default globalSync to false because that's the most intuitive behavior.

  		//GENERAL/UTILITY
  		let _self = this,
  			root = _createRootElement(vars.container, vars.minimal, vars.css),
  			find = s => root.querySelector(s),
  			record = (key, value) => {
  				if (vars.persist !== false && _supportsStorage) {
  					sessionStorage.setItem("gs-dev-" + key + vars.id, value);
  				}
  				return value;
  			},
  			recall = key => {
  				let value;
  				if (vars.persist !== false && _supportsStorage) {
  					value = sessionStorage.getItem("gs-dev-" + key + vars.id);
  					return (key === "animation") ? value : (key === "loop") ? (value === "true") : parseFloat(value); // handle data typing too.
  				}
  			},


  			//SCRUBBER/PROGRESS
  			playhead = find(".playhead"),
  			timelineTrack = find(".timeline-track"),
  			progressBar = find(".progress-bar"),
  			timeLabel = find(".time"),
  			durationLabel = find(".duration"),
  			pixelToTimeRatio, timeAtDragStart, dragged, skipDragUpdates,
  			progress = 0,
  			inPoint = find(".in-point"),
  			outPoint = find(".out-point"),
  			inProgress = 0,
  			outProgress = 100,
  			pausedWhenDragStarted,
  			list = find(".animation-list"),
  			animationLabel = find(".animation-label"),
  			selectedAnimation, //the currently selected animation
  			linkedAnimation, //the animation that's linked to all the controls and scrubber. This is always _rootTween if globalSync is true, so it can be different than the selectedAnimation!
  			declaredAnimation, //whatever the user defines in the config object initially (often this will be null). If the user defines a string, it'll be resolved to a real Animation instance for this variable.
  			startTime, endTime,
  			_fullyInitialized, //we call initialize() initially, and then again on the very next tick just in case someone called GSDevTools.create() BEFORE they create their animations. This variable tracks that state. Note: we don't record sessionStorage.setItem() until we're fully initialized, otherwise we may inadvertently set in/out points to the defaults just because the animation couldn't be found (yet).
  			keyboardHandler,
  			playPauseButton = find(".play-pause"),
  			playPauseMorph = _buildPlayPauseMorph(playPauseButton),
  			paused = false,
  			loopButton = find(".loop"),
  			loopAnimation = _buildLoopAnimation(loopButton),
  			loopEnabled,
  			timeScale = find(".time-scale select"),
  			timeScaleLabel = find(".time-scale-label"),
  			//spits back a common onPress function for anything that's dragged along the timeline (playhead, inPoint, outPoint). The originRatio is a value from 0-1 indicating how far along the x-axis the origin is located (0.5 is in the center, 0 is left, 1 is on right side). limitElement is optional, and sets the bounds such that the element can't be dragged past the limitElement.
  			onPressTimeline = (element, originRatio, limitToInOut) => {
  				return function(e) {
  					let trackBounds = timelineTrack.getBoundingClientRect(),
  						elementBounds = element.getBoundingClientRect(),
  						left = elementBounds.width * originRatio,
  						x = gsap$4.getProperty(element, "x"),
  						minX = trackBounds.left - elementBounds.left - left + x,
  						maxX = trackBounds.right - elementBounds.right + (elementBounds.width - left) + x,
  						unlimitedMinX = minX,
  						limitBounds;
  					if (limitToInOut) {
  						if (element !== inPoint) {
  							limitBounds = inPoint.getBoundingClientRect();
  							if (limitBounds.left) { //if inPoint is hidden (like display:none), ignore.
  								minX += (limitBounds.left + limitBounds.width) - trackBounds.left;
  							}
  						}
  						if (element !== outPoint) {
  							limitBounds = outPoint.getBoundingClientRect();
  							if (limitBounds.left) { //if outPoint is hidden (like display:none), ignore.
  								maxX -= (trackBounds.left + trackBounds.width) - limitBounds.left;
  							}
  						}
  					}
  					pausedWhenDragStarted = paused;
  					this.applyBounds({minX:minX, maxX:maxX});
  					pixelToTimeRatio = linkedAnimation.duration() / trackBounds.width;
  					timeAtDragStart = -unlimitedMinX * pixelToTimeRatio;
  					if (!skipDragUpdates) {
  						linkedAnimation.pause(timeAtDragStart + pixelToTimeRatio * this.x);
  					} else {
  						linkedAnimation.pause();
  					}
  					if (this.target === playhead) {
  						if (this.activated) {
  							this.allowEventDefault = false;
  						}
  						this.activated = true;
  					}
  					dragged = true;
  				};
  			},
  			progressDrag = Draggable.create(playhead, {
  				type:"x",
  				cursor: "ew-resize",
  				allowNativeTouchScrolling: false,
  				allowEventDefault: true, //otherwise, when dragged outside an iframe, the mouseup doesn't bubble up so it could seem "stuck" to the mouse.
  				onPress: onPressTimeline(playhead, 0.5, true),
  				onDrag: function() {
  					let time = timeAtDragStart + pixelToTimeRatio * this.x;
  					if (time < 0) {
  						time = 0;
  					} else if (time > linkedAnimation._dur) {
  						time = linkedAnimation._dur;
  					}
  					if (!skipDragUpdates) {
  						linkedAnimation.time(time);
  					}
  					progressBar.style.width = Math.min(outProgress - inProgress, Math.max(0, (time / linkedAnimation._dur) * 100 - inProgress)) + "%";
  					timeLabel.innerHTML = time.toFixed(2);
  				},
  				onRelease: function() {
  					if (!paused) {
  						linkedAnimation.resume();
  					}
  				}
  			})[0],
  			resetInOut = () => {
  				inProgress = 0;
  				outProgress = 100;
  				inPoint.style.left = "0%";
  				outPoint.style.left = "100%";
  				record("in", inProgress);
  				record("out", outProgress);
  				updateProgress(true);
  			},
  			inDrag = Draggable.create(inPoint, {
  				type: "x",
  				cursor: "ew-resize",
  				zIndexBoost: false,
  				allowNativeTouchScrolling: false,
  				allowEventDefault: true, //otherwise, when dragged outside an iframe, the mouseup doesn't bubble up so it could seem "stuck" to the mouse.
  				onPress: onPressTimeline(inPoint, 1, true),
  				onDoubleClick: resetInOut,
  				onDrag: function() {
  					inProgress = (timeAtDragStart + pixelToTimeRatio * this.x) / linkedAnimation.duration() * 100;
  					linkedAnimation.progress(inProgress / 100);
  					updateProgress(true);
  				},
  				onRelease: function() {
  					if (inProgress < 0) {
  						inProgress = 0;
  					}
  					_clearSelection();
  					//for responsiveness, convert the px-based transform into %-based left position.
  					inPoint.style.left = inProgress + "%";
  					record("in", inProgress);
  					gsap$4.set(inPoint, {x:0, data:"root", display:"block"}); //set display:block so that it remains visible even when the minimal skin is enabled.
  					if (!paused) {
  						linkedAnimation.resume();
  					}
  				}
  			})[0],
  			outDrag = Draggable.create(outPoint, {
  				type: "x",
  				cursor: "ew-resize",
  				allowNativeTouchScrolling: false,
  				allowEventDefault: true, //otherwise, when dragged outside an iframe, the mouseup doesn't bubble up so it could seem "stuck" to the mouse.
  				zIndexBoost: false,
  				onPress: onPressTimeline(outPoint, 0, true),
  				onDoubleClick: resetInOut,
  				onDrag: function() {
  					outProgress = (timeAtDragStart + pixelToTimeRatio * this.x) / linkedAnimation.duration() * 100;
  					linkedAnimation.progress(outProgress / 100);
  					updateProgress(true);
  				},
  				onRelease: function() {
  					if (outProgress > 100) {
  						outProgress = 100;
  					}
  					_clearSelection();
  					//for responsiveness, convert the px-based transform into %-based left position.
  					outPoint.style.left = outProgress + "%";
  					record("out", outProgress);
  					gsap$4.set(outPoint, {x:0, data:"root", display:"block"}); //set display:block so that it remains visible even when the minimal skin is enabled.
  					if (!pausedWhenDragStarted) {
  						play();
  						linkedAnimation.resume();
  					}
  				}
  			})[0],
  			updateProgress = function(force) { // NOTE: "force" is actually the "time" when this method gets called by the gsap.ticker!
  				if (progressDrag.isPressed && force !== true) {
  					return;
  				}
  				let p = (!loopEnabled && selectedAnimation._repeat === -1) ? selectedAnimation.totalTime() / selectedAnimation.duration() * 100 : (linkedAnimation.progress() * 100) || 0,
  					repeatDelayPhase = (selectedAnimation._repeat && selectedAnimation._rDelay && selectedAnimation.totalTime() % (selectedAnimation.duration() + selectedAnimation._rDelay) > selectedAnimation.duration()),
  					target;
  				if (p > 100) {
  					p = 100;
  				}
  				if (p >= outProgress) {
  					if (loopEnabled && !linkedAnimation.paused() && !progressDrag.isDragging) {
  						if (!repeatDelayPhase) {
  							p = inProgress;
  							target = linkedAnimation._targets && linkedAnimation._targets[0];
  							if (target === selectedAnimation) { //in case there are callbacks on the timeline, when we jump back to the start we should seek() so that the playhead doesn't drag [backward] past those and trigger them.
  								target.seek(startTime + ((endTime - startTime) * inProgress / 100));
  							}
  							if (selectedAnimation._repeat > 0 && !inProgress && outProgress === 100) {
  								if (selectedAnimation.totalProgress() === 1) {
  									linkedAnimation.totalProgress(0, true).resume();
  								}
  							} else {
  								linkedAnimation.progress(p / 100, true).resume();
  							}
  						}
  					} else {
  						if (p !== outProgress || selectedAnimation._repeat === -1) {
  							p = outProgress;
  							linkedAnimation.progress(p / 100);
  						}
  						if (!paused && (outProgress < 100 || selectedAnimation.totalProgress() === 1 || selectedAnimation._repeat === -1)) {
  							pause();
  						}
  					}

  				} else if (p < inProgress) {
  					p = inProgress;
  					linkedAnimation.progress(p / 100, true);
  				}
  				if (p !== progress || force === true) {
  					progressBar.style.left = inProgress + "%";
  					progressBar.style.width = Math.max(0, p - inProgress) + "%";
  					playhead.style.left = p + "%";
  					timeLabel.innerHTML = linkedAnimation._time.toFixed(2);
  					durationLabel.innerHTML = linkedAnimation._dur.toFixed(2);
  					if (dragged) {
  						playhead.style.transform = "translate(-50%,0)";
  						playhead._gsap.x = "0px";
  						playhead._gsap.xPercent = -50;
  						dragged = false;
  					}
  					progress = p;
  				} else if (linkedAnimation.paused() !== paused) { //like if the user has an addPause() in the middle of the animation.
  					togglePlayPause();
  				}
  			},
  			onPressSeekBar = function(e) {
  				if (progressDrag.isPressed) {
  					return;
  				}
  				let bounds = e.target.getBoundingClientRect(),
  					x = (e.changedTouches ? e.changedTouches[0] : e).clientX,
  					p = ((x - bounds.left) / bounds.width) * 100;
  				if (p < inProgress) {
  					inProgress = p = Math.max(0, p);
  					inPoint.style.left = inProgress + "%";
  					inDrag.startDrag(e);
  					return;
  				} else if (p > outProgress) {
  					outProgress = p = Math.min(100, p);
  					outPoint.style.left = outProgress + "%";
  					outDrag.startDrag(e);
  					return;
  				}
  				linkedAnimation.progress(p / 100).pause();
  				updateProgress(true);
  				progressDrag.startDrag(e);
  			},



  			//PLAY/PAUSE button
  			play = () => {
  				if (linkedAnimation.progress() >= outProgress / 100) {
  					_checkIndependence(linkedAnimation, vars);
  					let target = linkedAnimation._targets && linkedAnimation._targets[0];
  					if (target === selectedAnimation) { //in case there are callbacks on the timeline, when we jump back to the start we should seek() so that the playhead doesn't drag [backward] past those and trigger them.
  						target.seek(startTime + ((endTime - startTime) * inProgress / 100));
  					}
  					if (linkedAnimation._repeat && !inProgress) {
  						linkedAnimation.totalProgress(0, true); //for repeating animations, don't get stuck in the last iteration - jump all the way back to the start.
  					} else if (!linkedAnimation.reversed()) {
  						linkedAnimation.progress(inProgress / 100, true);
  					}
  				}
  				playPauseMorph.play();
  				linkedAnimation.resume();
  				if (paused) {
  					_self.update();
  				}
  				paused = false;
  			},
  			pause = () => {
  				playPauseMorph.reverse();
  				if (linkedAnimation) {
  					linkedAnimation.pause();
  				}
  				paused = true;
  			},
  			togglePlayPause = () => {
  				if (paused) {
  					play();
  				} else {
  					pause();
  				}
  			},



  			//REWIND button
  			onPressRewind = e => {
  				if (progressDrag.isPressed) {
  					return;
  				}
  				//_self.update();
  				_checkIndependence(linkedAnimation, vars);
  				let target = linkedAnimation._targets && linkedAnimation._targets[0];
  				if (target === selectedAnimation) { //in case there are callbacks on the timeline, when we jump back to the start we should seek() so that the playhead doesn't drag [backward] past those and trigger them.
  					target.seek(startTime + ((endTime - startTime) * inProgress / 100));
  				}
  				linkedAnimation.progress(inProgress / 100, true);
  				if (!paused) {
  					linkedAnimation.resume();
  				}
  			},



  			//LOOP button
  			loop = value => {
  				loopEnabled = value;
  				record("loop", loopEnabled);
  				if (loopEnabled) {
  					loopAnimation.play();
  					if (linkedAnimation.progress() >= outProgress / 100) {
  						let target = linkedAnimation._targets && linkedAnimation._targets[0];
  						if (target === selectedAnimation) { //in case there are callbacks on the timeline, when we jump back to the start we should seek() so that the playhead doesn't drag [backward] past those and trigger them.
  							target.seek(startTime + ((endTime - startTime) * inProgress / 100));
  						}
  						if (selectedAnimation._repeat && !inProgress && outProgress === 100) {
  							linkedAnimation.totalProgress(0, true);
  						} else {
  							linkedAnimation.progress(inProgress / 100, true);
  						}
  						play();
  					}
  				} else {
  					loopAnimation.reverse();
  				}
  			},

  			toggleLoop = () => loop(!loopEnabled),



  			//ANIMATIONS list
  			updateList = () => {
  				let animations = _getChildrenOf((declaredAnimation && !vars.globalSync) ? declaredAnimation : _recordedRoot, true),
  					options = list.children,
  					matches = 0,
  					option,	i;
  				if (declaredAnimation && !vars.globalSync) {
  					animations.unshift(declaredAnimation);
  				} else if (!vars.hideGlobalTimeline) {
  					animations.unshift(_recordedRoot);
  				}
  				for (i = 0; i < animations.length; i++) {
  					option = options[i] || _createElement$2("option", list);
  					option.animation = animations[i];
  					matches = (i && animations[i].vars.id === animations[i-1].vars.id) ? matches + 1 : 0;
  					option.setAttribute("value", (option.innerHTML = animations[i].vars.id + (matches ? " [" + matches + "]" : (animations[i+1] && animations[i+1].vars.id === animations[i].vars.id) ? " [0]" : "")));
  				}
  				for (; i < options.length; i++) {
  					list.removeChild(options[i]);
  				}
  			},
  			animation = function(anim) {
  				let ts = parseFloat(timeScale.options[timeScale.selectedIndex].value) || 1,
  					tl, maxDuration;
  				if (!arguments.length) {
  					return selectedAnimation;
  				}
  				if (_isString$2(anim)) {
  					anim = _getAnimationById(anim);
  				}
  				//console.log("animation() ", anim.vars.id);
  				if (!(anim instanceof Animation$1)) {
  					console.warn("GSDevTools error: invalid animation.");
  				}
  				if (anim === selectedAnimation) {
  					return;
  				}
  				if (selectedAnimation) {
  					selectedAnimation._inProgress = inProgress;
  					selectedAnimation._outProgress = outProgress;
  				}
  				selectedAnimation = anim;
  				if (linkedAnimation) {
  					ts = linkedAnimation.timeScale();
  					if (linkedAnimation._targets && linkedAnimation._targets[0] === declaredAnimation) {
  						declaredAnimation.resume();
  						linkedAnimation.kill();
  					}
  				}
  				inProgress = selectedAnimation._inProgress || 0;
  				outProgress = selectedAnimation._outProgress || 100;
  				inPoint.style.left = inProgress + "%";
  				outPoint.style.left = outProgress + "%";
  				if (_fullyInitialized) { //don't record inProgress/outProgress unless we're fully instantiated because people may call GSDevTools.create() before creating/defining their animations, thus the inTime/outTime may not exist yet.
  					record("animation", selectedAnimation.vars.id);
  					record("in", inProgress);
  					record("out", outProgress);
  				}
  				startTime = 0;
  				maxDuration = vars.maxDuration || Math.min(1000, _getClippedDuration(selectedAnimation));
  				if (selectedAnimation === _recordedRoot || vars.globalSync) {
  					_merge$1();
  					linkedAnimation = _rootTween;
  					_rootInstance && _rootInstance !== _self && console.warn("Error: GSDevTools can only have one instance that's globally synchronized.");
  					_rootInstance = _self;
  					//_recording = true;
  					if (selectedAnimation !== _recordedRoot) {
  						tl = selectedAnimation;
  						endTime = tl.totalDuration();
  						if (endTime > 99999999) { //in the case of an infinitely repeating animation, just use a single iteration's duration instead.
  							endTime = tl.duration();
  						}
  						while (tl.parent.parent) {
  							startTime = (startTime / tl._ts) + tl._start;
  							endTime = (endTime / tl._ts) + tl._start;
  							tl = tl.parent;
  						}
  					} else {
  						endTime = _recordedRoot.duration();
  					}
  					if (endTime - startTime > maxDuration) { //cap end time at 1000 because it doesn't seem reasonable to accommodate super long stuff.
  						endTime = startTime + maxDuration;
  					}
  					_recordedRoot.pause(startTime);
  					_rootTween.vars.time = endTime;
  					_rootTween.invalidate();
  					_rootTween.duration(endTime - startTime).timeScale(ts);
  					//wait for a tick before starting because some browsers freeze things immediately following a <select> selection, like on MacOS it flashes a few times before disappearing, so this prevents a "jump".
  					if (paused) {
  						//jump forward and then back in order to make sure the start/end values are recorded internally right away and don't drift outside this tween.
  						_rootTween.progress(1).pause(0);
  					} else {
  						_delayedCall(0.01, () => {
  							_rootTween.resume().progress(inProgress / 100);
  							if (paused) {
  								play();
  							}
  						});
  					}

  				} else {
  					if (_rootInstance === _self) {
  						_rootInstance = null;
  					}
  					if (selectedAnimation === declaredAnimation || !declaredAnimation) {
  						linkedAnimation = selectedAnimation;
  						if (!loopEnabled && linkedAnimation._repeat) {
  							loop(true);
  						}
  					} else { //if an animation is declared in the config object, and the user chooses a sub-animation (nested), we tween the playhead of the declaredAnimation to keep everything synchronized even though globalSync isn't true.
  						tl = selectedAnimation;
  						endTime = tl.totalDuration();
  						if (endTime > 99999999) { //in the case of an infinitely repeating animation, just use a single iteration's duration instead.
  							endTime = tl.duration();
  						}
  						while (tl.parent.parent && tl !== declaredAnimation) {
  							startTime = (startTime / (tl._ts || tl._pauseTS)) + tl._start;
  							endTime = (endTime / (tl._ts || tl._pauseTS)) + tl._start;
  							tl = tl.parent;
  						}
  						if (endTime - startTime > maxDuration) { //cap end time at 1000 because it doesn't seem reasonable to accommodate super long stuff.
  							endTime = startTime + maxDuration;
  						}
  						declaredAnimation.pause(startTime);
  						linkedAnimation = gsap$4.to(declaredAnimation, {duration: endTime - startTime, time:endTime, ease:"none", data:"root", parent:_independentRoot});
  					}
  					linkedAnimation.timeScale(ts);
  					_rootTween.pause();
  					_recordedRoot.resume();
  					linkedAnimation.seek(0);
  				}

  				durationLabel.innerHTML = linkedAnimation.duration().toFixed(2);
  				_selectValue(list, selectedAnimation.vars.id, animationLabel);
  			},
  			updateRootDuration = () => {
  				let time, ratio, duration;
  				if (selectedAnimation === _recordedRoot) {
  					time = _recordedRoot._time;
  					_recordedRoot.progress(1, true).time(time, true); //jump to the end and back again because sometimes a tween that hasn't rendered yet will affect duration, like a TimelineMax.tweenTo() where the duration gets set in the onStart.
  					time = (_rootTween._dp._time - _rootTween._start) * _rootTween._ts;
  					duration = Math.min(1000, _recordedRoot.duration());
  					if (duration === 1000) {
  						duration = Math.min(1000, _getClippedDuration(_recordedRoot));
  					}
  					ratio = _rootTween.duration() / duration;
  					if (ratio !== 1 && duration) {
  						inProgress *= ratio;
  						if (outProgress < 100) {
  							outProgress *= ratio;
  						}
  						_rootTween.seek(0);
  						_rootTween.vars.time = duration;
  						_rootTween.invalidate();
  						_rootTween.duration(duration);
  						_rootTween.time(time);
  						durationLabel.innerHTML = duration.toFixed(2);
  						inPoint.style.left = inProgress + "%";
  						outPoint.style.left = outProgress + "%";
  						updateProgress(true);
  					}
  				}
  			},
  			onChangeAnimation = e => {
  				animation(list.options[list.selectedIndex].animation);
  				if (e.target && e.target.blur) { //so that if an option is selected, and then the user tries to hit the up/down arrow, it doesn't just try selecting something else in the <select>.
  					e.target.blur();
  				}
  				paused && play();
  			},



  			//TIMESCALE button
  			onChangeTimeScale = e => {
  				let ts = parseFloat(timeScale.options[timeScale.selectedIndex].value) || 1,
  					target;
  				linkedAnimation.timeScale(ts);
  				record("timeScale", ts);
  				if (!paused) {
  					if (linkedAnimation.progress() >= outProgress / 100) {
  						target = linkedAnimation._targets && linkedAnimation._targets[0];
  						if (target === selectedAnimation) { //in case there are callbacks on the timeline, when we jump back to the start we should seek() so that the playhead doesn't drag [backward] past those and trigger them.
  							target.seek(startTime + ((endTime - startTime) * inProgress / 100));
  						}
  						linkedAnimation.progress(inProgress / 100, true).pause();
  					} else {
  						linkedAnimation.pause();
  					}
  					_delayedCall(0.01, () => linkedAnimation.resume());
  				}
  				timeScaleLabel.innerHTML = ts + "x";
  				if (timeScale.blur) { //so that if an option is selected, and then the user tries to hit the up/down arrow, it doesn't just try selecting something else in the <select>.
  					timeScale.blur();
  				}
  			},



  			//AUTOHIDE
  			autoHideTween = gsap$4.to([find(".gs-bottom"), find(".gs-top")], {duration:0.3, autoAlpha:0, y:50, ease:"power2.in", data:"root", paused:true, parent:_independentRoot}),
  			hidden = false,
  			onMouseOut = e => {
  				if (!Draggable.hitTest(e, root) && !progressDrag.isDragging && !inDrag.isDragging && !outDrag.isDragging) {
  					autoHideDelayedCall.restart(true);
  				}
  			},
  			hide = () => {
  				if (!hidden) {
  					autoHideTween.play();
  					autoHideDelayedCall.pause();
  					hidden = true;
  				}
  			},
  			show = () => {
  				autoHideDelayedCall.pause();
  				if (hidden) {
  					autoHideTween.reverse();
  					hidden = false;
  				}
  			},
  			toggleHide = () => {
  				if (hidden) {
  					show();
  				} else {
  					hide();
  				}
  			},
  			autoHideDelayedCall = _delayedCall(1.3, hide).pause(),
  			initialize = preliminary => {
  				//if on startup, someone does a timeline.seek(), we must honor it, so when initialize() is called, we record _recordedRoot._start so that we can use that as an offset. Remember, however, that we call initialize() twice on startup, once after a tick has elapsed just in case someone called GSDevTools.create() before their animation code, so we must record the value (once).
  				if (_startupPhase && !_globalStartTime) {
  					_globalStartTime = _recordedRoot._start;
  				}
  				_fullyInitialized = !preliminary;
  				declaredAnimation = _parseAnimation(vars.animation);
  				if (declaredAnimation && !declaredAnimation.vars.id) {
  					declaredAnimation.vars.id = "[no id]";
  				}
  				_merge$1();
  				updateList();
  				let savedAnimation = _getAnimationById(recall("animation"));
  				if (savedAnimation) {
  					savedAnimation._inProgress = recall("in") || 0;
  					savedAnimation._outProgress = recall("out") || 100;
  				}
  				vars.paused && pause();
  				selectedAnimation = null;
  				animation(declaredAnimation || savedAnimation || _recordedRoot);
  				let ts = vars.timeScale || recall("timeScale"),
  					savedInOut = (savedAnimation === selectedAnimation);
  				if (ts) {
  					_selectValue(timeScale, ts, timeScaleLabel, ts + "x");
  					linkedAnimation.timeScale(ts);
  				}
  				inProgress = (("inTime" in vars) ? _timeToProgress(vars.inTime, selectedAnimation, 0, 0) : savedInOut ? savedAnimation._inProgress : 0) || 0;
  				if (inProgress === 100 && !vars.animation && savedAnimation) { //in case there's a recorded animation (sessionStorage) and then the user defines an inTime that exceeds that animation's duration, just default back to the Global Timeline. Otherwise the in/out point will be at the very end and it'd be weird.
  					animation(_recordedRoot);
  					inProgress = _timeToProgress(vars.inTime, selectedAnimation, 0, 0) || 0;
  				}
  				if (inProgress) {
  					inPoint.style.left = inProgress + "%";
  					inPoint.style.display = outPoint.style.display = "block"; //set display:block so that it remains visible even when the minimal skin is enabled.
  				}
  				outProgress = (("outTime" in vars) ? _timeToProgress(vars.outTime, selectedAnimation, 100, inProgress) : savedInOut ? savedAnimation._outProgress : 0) || 100;
  				if (outProgress < inProgress) {
  					outProgress = 100;
  				}
  				if (outProgress !== 100) {
  					outPoint.style.left = outProgress + "%";
  					inPoint.style.display = outPoint.style.display = "block"; //set display:block so that it remains visible even when the minimal skin is enabled.
  				}
  				loopEnabled = ("loop" in vars) ? vars.loop : recall("loop");
  				loopEnabled && loop(true);
  				vars.paused && linkedAnimation.progress(inProgress / 100, true).pause();
  				if (_startupPhase && selectedAnimation === _recordedRoot && _globalStartTime && vars.globalSync && !paused) {
  					linkedAnimation.time(-_globalStartTime, true);
  				}
  				updateProgress(true);
  			};



  		//INITIALIZATION TASKS
  		_addListener$1(list, "change", onChangeAnimation);
  		_addListener$1(list, "mousedown", updateList);
  		_addListener$1(playPauseButton, "mousedown", togglePlayPause);
  		_addListener$1(find(".seek-bar"), "mousedown", onPressSeekBar);
  		_addListener$1(find(".rewind"), "mousedown", onPressRewind);
  		_addListener$1(loopButton, "mousedown", toggleLoop);
  		_addListener$1(timeScale, "change", onChangeTimeScale);

  		if (vars.visibility === "auto") {
  			_addListener$1(root, "mouseout", onMouseOut);
  			//_addListener(find(".gs-hit-area"), "mouseover", show);
  			_addListener$1(root, "mouseover", show);

  		} else if (vars.visibility === "hidden") {
  			hidden = true;
  			autoHideTween.progress(1);
  		}

  		if (vars.keyboard !== false) {
  			if (_keyboardInstance && vars.keyboard) {
  				console.warn("[GSDevTools warning] only one instance can be affected by keyboard shortcuts. There is already one active.");
  			} else {
  				_keyboardInstance = _self; //we can't have multiple instances all affected by the keyboard.
  				keyboardHandler = e => { //window.parent allows things to work inside of an iframe, like on codepen.
  					let key = e.keyCode ? e.keyCode : e.which,
  						ts;
  					if (key === 32) { //spacebar
  						togglePlayPause();
  					} else if (key === 38) { //up arrow
  						ts = parseFloat(_shiftSelectedValue(timeScale, -1, timeScaleLabel));
  						linkedAnimation.timeScale(ts);
  						record("timeScale", ts);
  					} else if (key === 40) { //down arrow
  						ts = parseFloat(_shiftSelectedValue(timeScale, 1, timeScaleLabel));
  						linkedAnimation.timeScale(ts);
  						record("timeScale", ts);
  					} else if (key === 37) { //left arrow
  						onPressRewind();
  					} else if (key === 39) { //right arrow
  						linkedAnimation.progress(outProgress / 100);
  					} else if (key === 76) { //"L" key
  						toggleLoop();
  					} else if (key === 72) { //"H" key
  						toggleHide();
  					} else if (key === 73) { //"I" key
  						inProgress = linkedAnimation.progress() * 100;
  						record("in", inProgress);
  						inPoint.style.left = inProgress + "%";
  						updateProgress(true);
  					} else if (key === 79) { //"O" key
  						outProgress = linkedAnimation.progress() * 100;
  						record("out", outProgress);
  						outPoint.style.left = outProgress + "%";
  						updateProgress(true);
  					}
  				};
  				_addListener$1(_docEl, "keydown", keyboardHandler);
  			}
  		}


  		gsap$4.set(playhead, {xPercent:-50, x:0, data:"root"}); //so that when we drag, x is properly discerned (browsers report in pure pixels rather than percents)
  		gsap$4.set(inPoint, {xPercent:-100, x:0, data:"root"});
  		inPoint._gsIgnore = outPoint._gsIgnore = playhead._gsIgnore = playPauseButton._gsIgnore = loopButton._gsIgnore = true;

  		//Draggable fires off a TweenLite.set() that affects the transforms, and we don't want them to get into the _recordedRoot, so kill those tweens.
  		gsap$4.killTweensOf([inPoint, outPoint, playhead]);


  		initialize(_startupPhase);
  		if (_startupPhase) {
  			//developers may call GSDevTools.create() before they even create some of their animations, so the inTime/outTime or animation values may not exist, thus we wait for 1 tick and initialize again, just in case.
  			_delayedCall(0.0001, initialize, [false], this);
  		}
  		gsap$4.ticker.add(updateProgress);

  		this.update = forceMerge => {
  			if (_rootInstance === _self) {
  				if (!_rootTween.paused() || forceMerge) {
  					_merge$1();
  				}
  				updateRootDuration();
  			}
  		};

  		this.kill = () => {
  			_removeListener$1(list, "change", onChangeAnimation);
  			_removeListener$1(list, "mousedown", updateList);
  			_removeListener$1(playPauseButton, "mousedown", togglePlayPause);
  			_removeListener$1(find(".seek-bar"), "mousedown", onPressSeekBar);
  			_removeListener$1(find(".rewind"), "mousedown", onPressRewind);
  			_removeListener$1(loopButton, "mousedown", toggleLoop);
  			_removeListener$1(timeScale, "change", onChangeTimeScale);
  			progressDrag.disable();
  			inDrag.disable();
  			outDrag.disable();
  			gsap$4.ticker.remove(updateProgress);
  			_removeListener$1(root, "mouseout", onMouseOut);
  			_removeListener$1(root, "mouseover", show);
  			_removeListener$1(_docEl, "keydown", keyboardHandler);
  			root.parentNode.removeChild(root);
  			if (_rootInstance === _self) {
  				_rootInstance = null;
  			}
  			delete _lookup$1[vars.id + ""];
  		};

  		this.minimal = function(value) {
  			let isMinimal = root.classList.contains("minimal"),
  				p;
  			if (!arguments.length || isMinimal === value) {
  				return isMinimal;
  			}
  			if (value) {
  				root.classList.add("minimal");
  			} else {
  				root.classList.remove("minimal");
  			}
  			if (vars.container) {
  				root.style.top = value ? "calc(100% - 42px)" : "calc(100% - 51px)";
  			}
  			if (progressDrag.isPressed) {
  				skipDragUpdates = true; //just in case there's actually a tween/timeline in the linkedAnimation that is altering this GSDevTool instance's "minimal()" value, it could trigger a recursive loop in the drag handlers, like if they update linkedAnimation's time/progress which in turn triggers this minimal() function which in turn dues the same, and so on.
  				progressDrag.endDrag(progressDrag.pointerEvent);
  				skipDragUpdates = false;

  				p = linkedAnimation.progress() * 100;
  				progressBar.style.width = Math.max(0, p - inProgress) + "%";
  				playhead.style.left = p + "%";
  				playhead.style.transform = "translate(-50%,0)";
  				playhead._gsap.x = "0px";
  				playhead._gsap.xPercent = -50;

  				progressDrag.startDrag(progressDrag.pointerEvent, true);
  			}
  		};

  		//expose methods:
  		this.animation = animation;
  		this.updateList = updateList;

  	}; //if on startup, someone does a timeline.seek(), we need to honor it, so when initialize() is called, it'll check the _recordedRoot._start so that we can use that as an offset. Remember, however, that we call initialize() twice on startup, once after a tick has elapsed just in case someone called GSDevTools.create() before their animation code, so we must record the value (once).



  GSDevTools.version = "3.4.0";
  GSDevTools.globalRecordingTime = 2;

  GSDevTools.getById = id => id ? _lookup$1[id] : _rootInstance;

  GSDevTools.getByAnimation = animation => {
  	if (_isString$2(animation)) {
  		animation = gsap$4.getById(animation);
  	}
  	for (let p in _lookup$1) {
  		if (_lookup$1[p].animation() === animation) {
  			return _lookup$1[p];
  		}
  	}
  };

  GSDevTools.create = vars => new GSDevTools(vars);

  GSDevTools.register = _initCore$4;

  _getGSAP$3() && gsap$4.registerPlugin(GSDevTools);

  /*!
   * ScrollTrigger 3.4.0
   * https://greensock.com
   *
   * @license Copyright 2008-2020, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  /* eslint-disable */

  let gsap$5, _coreInitted$5, _win$6, _doc$5, _docEl$1, _body$2, _root, _resizeDelay, _raf, _request, _toArray$3, _clamp$1, _time2, _syncInterval, _refreshing, _pointerIsDown, _transformProp$3, _i, _prevWidth, _prevHeight, _autoRefresh,
  	_limitCallbacks, // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.
  	_startup = 1,
  	_proxies = [],
  	_scrollers = [],
  	_getTime$1 = Date.now,
  	_time1 = _getTime$1(),
  	_lastScrollTime = 0,
  	_enabled = 1,
  	_passThrough$1 = v => v,
  	_windowExists$5 = () => typeof(window) !== "undefined",
  	_getGSAP$4 = () => gsap$5 || (_windowExists$5() && (gsap$5 = window.gsap) && gsap$5.registerPlugin && gsap$5),
  	_isViewport = e => !!~_root.indexOf(e),
  	_getProxyProp = (element, property) => ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property],
  	_getScrollFunc = (element, {s, sc}) => {
  		let i = _scrollers.indexOf(element),
  			func = ~i ? _scrollers[i+1] : _getProxyProp(element, s) || (_isViewport(element) ? sc : function(value) { return arguments.length ? (element[s] = value) : element[s]; });
  		!~i && _scrollers.push(element, func);
  		return func;
  	},
  	_getBoundsFunc = element => _getProxyProp(element, "getBoundingClientRect") || (_isViewport(element) ? () => {_winOffsets.width = _win$6.innerWidth; _winOffsets.height = _win$6.innerHeight; return _winOffsets;} : () => _getBounds$1(element)),
  	_getSizeFunc = (scroller, isViewport, {d, d2, a}) => (a = _getProxyProp(scroller, "getBoundingClientRect")) ? () => a()[d] : () => (isViewport ? _win$6["inner" + d2] : scroller["client" + d2]) || 0,
  	_getOffsetsFunc = (element, isViewport) => !isViewport || ~_proxies.indexOf(element) ? _getBoundsFunc(element) : () => _winOffsets,
  	_maxScroll = (element, {s, d2, d, a}) => (s = "scroll" + d2) && (a = _getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport(element) ? Math.max(_docEl$1[s], _body$2[s]) - (_win$6["inner" + d2] || _docEl$1["client" + d2] || _body$2["client" + d2]) : element[s] - element["offset" + d2],
  	_iterateAutoRefresh = (func, events) => {
  		for (let i = 0; i < _autoRefresh.length; i += 3) {
  			(!events || ~events.indexOf(_autoRefresh[i+1])) && func(_autoRefresh[i], _autoRefresh[i+1], _autoRefresh[i+2]);
  		}
  	},
  	_isString$3 = value => typeof(value) === "string",
  	_isFunction$4 = value => typeof(value) === "function",
  	_isNumber$2 = value => typeof(value) === "number",
  	_isObject$3 = value => typeof(value) === "object",
  	_abs$1 = Math.abs,
  	_scrollLeft = "scrollLeft",
  	_scrollTop = "scrollTop",
  	_left = "left",
  	_top = "top",
  	_right = "right",
  	_bottom = "bottom",
  	_width = "width",
  	_height = "height",
  	_Right = "Right",
  	_Left = "Left",
  	_Top = "Top",
  	_Bottom = "Bottom",
  	_padding = "padding",
  	_margin = "margin",
  	_Width = "Width",
  	_Height = "Height",
  	_px = "px",
  	_horizontal = {s: _scrollLeft, p: _left, p2: _Left, os: _right, os2: _Right, d: _width, d2: _Width, a: "x", sc: function(value) { return arguments.length ? _win$6.scrollTo(value, _vertical.sc()) : _win$6.pageXOffset || _doc$5[_scrollLeft] || _docEl$1[_scrollLeft] || _body$2[_scrollLeft] || 0}},
  	_vertical = {s: _scrollTop, p: _top, p2: _Top, os: _bottom, os2: _Bottom, d: _height, d2: _Height, a: "y", op: _horizontal, sc: function(value) { return arguments.length ? _win$6.scrollTo(_horizontal.sc(), value) : _win$6.pageYOffset || _doc$5[_scrollTop] || _docEl$1[_scrollTop] || _body$2[_scrollTop] || 0}},
  	_getComputedStyle$1 = element => _win$6.getComputedStyle(element),
  	_makePositionable = element => element.style.position = (_getComputedStyle$1(element).position === "absolute") ? "absolute" : "relative", // if the element already has position: absolute, leave that, otherwise make it position: relative
  	_setDefaults$2 = (obj, defaults) => {
  		for (let p in defaults) {
  			(p in obj) || (obj[p] = defaults[p]);
  		}
  		return obj;
  	},
  	//_isInViewport = element => (element = _getBounds(element)) && !(element.top > (_win.innerHeight || _docEl.clientHeight) || element.bottom < 0 || element.left > (_win.innerWidth || _docEl.clientWidth) || element.right < 0) && element,
  	_getBounds$1 = (element, withoutTransforms) => {
  		let tween = withoutTransforms && _getComputedStyle$1(element)[_transformProp$3] !== "matrix(1, 0, 0, 1, 0, 0)" && gsap$5.to(element, {x: 0, y: 0, xPercent: 0, yPercent: 0, rotation: 0, rotationX: 0, rotationY: 0, scale: 1, skewX: 0, skewY: 0}).progress(1),
  			bounds = element.getBoundingClientRect();
  		tween && tween.progress(0).kill();
  		return bounds;
  	},
  	_getSize$1 = (element, {d2}) => element["offset" + d2] || element["client" + d2] || 0,
  	_getLabels = animation => {
  		return value => {
  			let a = [],
  				labels = animation.labels,
  				duration = animation.duration(),
  				p;
  			for (p in labels) {
  				a.push(labels[p] / duration);
  			}
  			return gsap$5.utils.snap(a, value);
  		};
  	},
  	_multiListener = (func, element, types, callback) => types.split(",").forEach(type => func(element, type, callback)),
  	_addListener$2 = (element, type, func) => element.addEventListener(type, func, {passive: true}),
  	_removeListener$2 = (element, type, func) => element.removeEventListener(type, func),
  	_markerDefaults = {startColor: "green", endColor: "red", indent: 0, fontSize: "16px", fontWeight:"normal"},
  	_defaults$1 = {toggleActions: "play", anticipatePin: 0},
  	_keywords = {top: 0, left: 0, center: 0.5, bottom: 1, right: 1},
  	_offsetToPx = (value, size) => {
  		if (_isString$3(value)) {
  			let eqIndex = value.indexOf("="),
  				relative = ~eqIndex ? +(value.charAt(eqIndex-1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;
  			if (relative) {
  				(value.indexOf("%") > eqIndex) && (relative *= size / 100);
  				value = value.substr(0, eqIndex-1);
  			}
  			value = relative + ((value in _keywords) ? _keywords[value] * size : ~value.indexOf("%") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);
  		}
  		return value;
  	},
  	_createMarker = (type, name, container, direction, {startColor, endColor, fontSize, indent, fontWeight}, offset, matchWidthEl) => {
  		let e = _doc$5.createElement("div"),
  			useFixedPosition = _isViewport(container) || _getProxyProp(container, "pinType") === "fixed",
  			isScroller = type.indexOf("scroller") !== -1,
  			parent = useFixedPosition ? _body$2 : container,
  			isStart = type.indexOf("start") !== -1,
  			color = isStart ? startColor : endColor,
  			css = "border-color:" + color + ";font-size:" + fontSize + ";color:" + color + ";font-weight:" + fontWeight + ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";
  		css += "position:" + (isScroller && useFixedPosition ? "fixed;" : "absolute;");
  		(isScroller || !useFixedPosition) && (css += (direction === _vertical ? _right : _bottom) + ":" + (offset + parseFloat(indent)) + "px;");
  		matchWidthEl && (css += "box-sizing:border-box;text-align:left;width:" + matchWidthEl.offsetWidth + "px;");
  		e._isStart = isStart;
  		e.setAttribute("class", "gsap-marker-" + type);
  		e.style.cssText = css;
  		e.innerText = name || name === 0 ? type + "-" + name : type;
  		parent.insertBefore(e, parent.children[0]);
  		e._offset = e["offset" + direction.op.d2];
  		_positionMarker(e, 0, direction, isStart);
  		return e;
  	},
  	_positionMarker = (marker, start, direction, flipped) => {
  		let vars = {display: "block"},
  			side = direction[flipped ? "os2" : "p2"],
  			oppositeSide = direction[flipped ? "p2" : "os2"];
  		marker._isFlipped = flipped;
  		vars[direction.a + "Percent"] = flipped ? -100 : 0;
  		vars[direction.a] = flipped ? 1 : 0;
  		vars["border" + side + _Width] = 1;
  		vars["border" + oppositeSide + _Width] = 0;
  		vars[direction.p] = start;
  		gsap$5.set(marker, vars);
  	},
  	_triggers = [],
  	_ids = {},
  	_sync = () => _request || (_request = _raf(_updateAll)),
  	_onScroll = () => {
  		if (!_request) {
  			_request = _raf(_updateAll);
  			_lastScrollTime || _dispatch("scrollStart");
  			_lastScrollTime = _getTime$1();
  		}
  	},
  	_onResize = () => !_refreshing && _resizeDelay.restart(true), // ignore resizes triggered by refresh()
  	_listeners = {},
  	_emptyArray = [],
  	_media = [],
  	_creatingMedia, // when ScrollTrigger.matchMedia() is called, we record the current media key here (like "(min-width: 800px)") so that we can assign it to everything that's created during that call. Then we can revert just those when necessary. In the ScrollTrigger's init() call, the _creatingMedia is recorded as a "media" property on the instance.
  	_lastMediaTick,
  	_onMediaChange = e => {
  		let tick = gsap$5.ticker.frame,
  			matches = [],
  			i = 0;
  		if (_lastMediaTick !== tick) {
  			_revertAll();
  			for (; i < _media.length; i+=2) {
  				_win$6.matchMedia(_media[i]).matches ? matches.push(i) : _revertAll(1, _media[i]); // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.
  			}
  			_revertRecorded(); // in case killing/reverting any of the animations actually added inline styles back.
  			for (i = 0; i < matches.length; i++) {
  				_creatingMedia = _media[matches[i]];
  				_media[matches[i]+1](e);
  			}
  			_creatingMedia = 0;
  			_refreshAll(0, 1);
  			_lastMediaTick = tick;
  		}
  	},
  	_softRefresh = () => _removeListener$2(ScrollTrigger, "scrollEnd", _softRefresh) || _refreshAll(true),
  	_dispatch = type => (_listeners[type] && _listeners[type].map(f => f())) || _emptyArray,
  	_savedStyles = [], // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.
  	_revertRecorded = media => {
  		for (let i = 0; i < _savedStyles.length; i+=4) {
  			if (!media || _savedStyles[i+3] === media) {
  				_savedStyles[i].style.cssText = _savedStyles[i+1];
  				_savedStyles[i+2].uncache = 1;
  			}
  		}
  	},
  	_revertAll = (kill, media) => {
  		let trigger;
  		for (_i = 0; _i < _triggers.length; _i++) {
  			trigger = _triggers[_i];
  			if (!media || trigger.media === media) {
  				if (kill) {
  					trigger.kill(1);
  				} else {
  					trigger.scroll.rec || (trigger.scroll.rec = trigger.scroll()); // record the scroll positions so that in each refresh() we can ensure that it doesn't shift. Remember, pinning can make things change around, especially if the same element is pinned multiple times. If one was already recorded, don't re-record because unpinning may have occurred and made it shorter.
  					trigger.revert();
  				}
  			}
  		}
  		_revertRecorded(media);
  		media || _dispatch("revert");
  	},
  	_refreshAll = (force, skipRevert) => {
  		if (_lastScrollTime && !force) {
  			_addListener$2(ScrollTrigger, "scrollEnd", _softRefresh);
  			return;
  		}
  		let refreshInits = _dispatch("refreshInit");
  		skipRevert || _revertAll();
  		for (_i = 0; _i < _triggers.length; _i++) {
  			_triggers[_i].refresh();
  		}
  		refreshInits.forEach(result => result && result.render && result.render(-1)); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.
  		_i = _triggers.length;
  		while (_i--) {
  			_triggers[_i].scroll.rec = 0;
  		}
  		_dispatch("refresh");
  	},
  	_updateAll = () => {
  		let l = _triggers.length,
  			time = _getTime$1(),
  			recordVelocity = time - _time1 >= 50;
  		if (recordVelocity) {
  			if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {
  				_lastScrollTime = 0;
  				_dispatch("scrollEnd");
  			}
  			_time2 = _time1;
  			_time1 = time;
  		}
  		for (_i = 0; _i < l; _i++) {
  			_triggers[_i] && _triggers[_i].update(0, recordVelocity);
  		}
  		_request = 0;
  	},
  	_propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, "display", "flexShrink"],
  	_stateProps = _propNamesToCopy.concat([_width, _height, "boxSizing", "max" + _Width, "max" + _Height, "position", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),
  	_swapPinOut = (pin, spacer, state) => {
  		_setState(state);
  		if (pin.parentNode === spacer) {
  			let parent = spacer.parentNode;
  			if (parent) {
  				parent.insertBefore(pin, spacer);
  				parent.removeChild(spacer);
  			}
  		}
  	},
  	_swapPinIn = (pin, spacer, cs) => {
  		if (pin.parentNode !== spacer) {
  			let i = _propNamesToCopy.length,
  				spacerStyle = spacer.style,
  				pinStyle = pin.style,
  				p;
  			while (i--) {
  				p = _propNamesToCopy[i];
  				spacerStyle[p] = cs[p];
  			}
  			spacerStyle.position = cs.position === "absolute" ? "absolute" : "relative";
  			(cs.display === "inline") && (spacerStyle.display = "inline-block");
  			pinStyle[_bottom] = pinStyle[_right] = "auto";
  			spacerStyle.overflow = "visible";
  			spacerStyle.boxSizing = "border-box";
  			spacerStyle[_width] = _getSize$1(pin, _horizontal) + _px;
  			spacerStyle[_height] = _getSize$1(pin, _vertical) + _px;
  			spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = "0";
  			pinStyle[_width] = cs[_width];
  			pinStyle[_height] = cs[_height];
  			pinStyle[_padding] = cs[_padding];
  			pin.parentNode.insertBefore(spacer, pin);
  			spacer.appendChild(pin);
  		}
  	},
  	_capsExp$1 = /([A-Z])/g,
  	_setState = state => {
  		if (state) {
  			let style = state.t.style,
  				l = state.length,
  				i = 0,
  				p, value;
  			for (; i < l; i +=2) {
  				value = state[i+1];
  				p = state[i];
  				if (value) {
  					style[p] = value;
  				} else if (style[p]) {
  					style.removeProperty(p.replace(_capsExp$1, "-$1").toLowerCase());
  				}
  			}
  		}
  	},
  	_getState = element => { // returns an array with alternating values like [property, value, property, value] and a "t" property pointing to the target (element). Makes it fast and cheap.
  		let l = _stateProps.length,
  			style = element.style,
  			state = [],
  			i = 0;
  		for (; i < l; i++) {
  			state.push(_stateProps[i], style[_stateProps[i]]);
  		}
  		state.t = element;
  		return state;
  	},
  	_copyState = (state, override, omitOffsets) => {
  		let result = [],
  			l = state.length,
  			i = omitOffsets ? 8 : 0, // skip top, left, right, bottom if omitOffsets is true
  			p;
  		for (; i < l; i += 2) {
  			p = state[i];
  			result.push(p, (p in override) ? override[p] : state[i+1]);
  		}
  		result.t = state.t;
  		return result;
  	},
  	_winOffsets = {left:0, top:0},
  	_parsePosition$1 = (value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax) => {
  		_isFunction$4(value) && (value = value(self));
  		if (_isString$3(value) && value.substr(0,3) === "max") {
  			value = scrollerMax + (value.charAt(4) === "=" ? _offsetToPx("0" + value.substr(3), scrollerSize) : 0);
  		}
  		if (!_isNumber$2(value)) {
  			_isFunction$4(trigger) && (trigger = trigger(self));
  			let element = _toArray$3(trigger)[0] || _body$2,
  				bounds = _getBounds$1(element) || {},
  				offsets = value.split(" "),
  				localOffset, globalOffset, display;
  			if ((!bounds || (!bounds.left && !bounds.top)) && _getComputedStyle$1(element).display === "none") { // if display is "none", it won't report getBoundingClientRect() properly
  				display = element.style.display;
  				element.style.display = "block";
  				bounds = _getBounds$1(element);
  				display ? (element.style.display = display) : element.style.removeProperty("display");
  			}
  			localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
  			globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
  			value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;
  			markerScroller && _positionMarker(markerScroller, globalOffset, direction, (scrollerSize - globalOffset < 20 || (markerScroller._isStart && globalOffset > 20)));
  			scrollerSize -= scrollerSize - globalOffset; // adjust for the marker
  		} else if (markerScroller) {
  			_positionMarker(markerScroller, scrollerSize, direction, true);
  		}
  		if (marker) {
  			let position = value + scrollerSize,
  				isStart = marker._isStart;
  			scrollerMax = "scroll" + direction.d2;
  			_positionMarker(marker, position, direction, (isStart && position > 20) || (!isStart && (useFixedPosition ? Math.max(_body$2[scrollerMax], _docEl$1[scrollerMax]) : marker.parentNode[scrollerMax]) <= position + 1));
  			if (useFixedPosition) {
  				scrollerBounds = _getBounds$1(markerScroller);
  				useFixedPosition && (marker.style[direction.op.p] = (scrollerBounds[direction.op.p] - direction.op.m - marker._offset) + _px);
  			}
  		}
  		return Math.round(value);
  	},
  	_prefixExp = /(?:webkit|moz|length)/i,
  	_reparent = (element, parent) => {
  		if (element.parentNode !== parent) {
  			let style = element.style,
  				p, cs;
  			if (parent === _body$2) {
  				element._stOrig = style.cssText; // record original inline styles so we can revert them later
  				cs = _getComputedStyle$1(element);
  				for (p in cs) { // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.
  					if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === "string" && p !== "0") {
  						style[p] = cs[p];
  					}
  				}
  			} else {
  				style.cssText = element._stOrig;
  			}
  			parent.appendChild(element);
  		}
  	},
  	// returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)
  	_getTweenCreator = (scroller, direction) => {
  		let getScroll = _getScrollFunc(scroller, direction),
  			prop = "_scroll" + direction.p2, // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.
  			lastScroll,
  			getTween = (scrollTo, vars, initialValue, change1, change2) => {
  				let tween = getTween.tween,
  					onComplete = vars.onComplete,
  					modifiers = {};
  				tween && tween.kill();
  				lastScroll = getScroll();
  				vars[prop] = scrollTo;
  				vars.modifiers = modifiers;
  				modifiers[prop] = value => {
  					if (Math.abs(getScroll() - lastScroll) > 7) { // if the user scrolls, kill the tween. Need a margin of error because some browsers like iOS Safari misreport the scroll position!
  						tween.kill();
  						getTween.tween = 0;
  						value = getScroll();
  					} else if (change1) {
  						value = initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio;
  					}
  					return (lastScroll = Math.round(value));
  				};
  				vars.onComplete = () => {
  					getTween.tween = 0;
  					onComplete && onComplete.call(tween);
  				};
  				tween = getTween.tween = gsap$5.to(scroller, vars);
  				return tween;
  			};
  		scroller[prop] = getScroll;
  		return getTween;
  	};

  _horizontal.op = _vertical;



  class ScrollTrigger {

  	constructor(vars, animation) {
  		_coreInitted$5 || ScrollTrigger.register(gsap$5) || console.warn("Please gsap.registerPlugin(ScrollTrigger)");
  		this.init(vars, animation);
  	}

  	init(vars, animation) {
  		this.progress = 0;
  		this.vars && this.kill(1); // in case it's being initted again
  		if (!_enabled) {
  			this.update = this.refresh = this.kill = _passThrough$1;
  			return;
  		}
  		vars = _setDefaults$2((_isString$3(vars) || _isNumber$2(vars) || vars.nodeType) ? {trigger: vars} : vars, _defaults$1);
  		let direction = vars.horizontal ? _horizontal : _vertical,
  			{onUpdate, toggleClass, id, onToggle, onRefresh, scrub, trigger, pin, pinSpacing, invalidateOnRefresh, anticipatePin, onScrubComplete, onSnapComplete, once, snap, pinReparent} = vars,
  			isToggle = !scrub && scrub !== 0,
  			scroller = _toArray$3(vars.scroller || _win$6)[0],
  			scrollerCache = gsap$5.core.getCache(scroller),
  			isViewport = _isViewport(scroller),
  			useFixedPosition = isViewport || _getProxyProp(scroller, "pinType") === "fixed",
  			callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],
  			toggleActions = isToggle && (once ? "play" : vars.toggleActions).split(" "),
  			markers = "markers" in vars ? vars.markers : _defaults$1.markers,
  			borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle$1(scroller)["border" + direction.p2 + _Width]) || 0,
  			self = this,
  			onRefreshInit = vars.onRefreshInit && (() => vars.onRefreshInit(self)),
  			getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
  			getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
  			tweenTo, pinCache, snapFunc, isReverted, scroll1, scroll2, start, end, markerStart, markerEnd, markerStartTrigger, markerEndTrigger, markerVars,
  			change, pinOriginalState, pinActiveState, pinState, spacer, offset, pinGetter, pinSetter, pinStart, pinChange, spacingStart, spacingActive, markerStartSetter,
  			markerEndSetter, cs, snap1, snap2, scrubScrollTime, scrubTween, scrubSmooth, snapDurClamp, snapDelayedCall, enabled, prevProgress, prevScroll, prevAnimProgress;

  		self.media = _creatingMedia;
  		anticipatePin *= 45;
  		_triggers.push(self);
  		self.scroller = scroller;
  		self.scroll = _getScrollFunc(scroller, direction);
  		scroll1 = self.scroll();
  		self.vars = vars;
  		animation = animation || vars.animation;
  		scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
  			top: _getTweenCreator(scroller, _vertical),
  			left: _getTweenCreator(scroller, _horizontal)
  		};
  		self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];
  		if (animation) {
  			animation.vars.lazy = false;
  			animation._initted || (animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.render(0, true, true));
  			self.animation = animation.pause();
  			animation.scrollTrigger = self;
  			scrubSmooth = _isNumber$2(scrub) && scrub;
  			scrubSmooth && (scrubTween = gsap$5.to(animation, {ease: "power3", duration: scrubSmooth, onComplete: () => onScrubComplete && onScrubComplete(self)}));
  			snap1 = 0;
  			id || (id = animation.vars.id);
  		}
  		if (snap) {
  			_isObject$3(snap) || (snap = {snapTo: snap});
  			gsap$5.set(isViewport ? [_body$2, _docEl$1] : scroller, {scrollBehavior: "auto"}); // smooth scrolling doesn't work with snap.
  			snapFunc = _isFunction$4(snap.snapTo) ? snap.snapTo : snap.snapTo === "labels" ? _getLabels(animation) : gsap$5.utils.snap(snap.snapTo);
  			snapDurClamp = snap.duration || {min: 0.1, max: 2};
  			snapDurClamp = _isObject$3(snapDurClamp) ? _clamp$1(snapDurClamp.min, snapDurClamp.max) : _clamp$1(snapDurClamp, snapDurClamp);
  			snapDelayedCall = gsap$5.delayedCall(snap.delay || (scrubSmooth / 2) || 0.1, () => {
  				if (!_lastScrollTime || (_lastScrollTime === scrubScrollTime && !_pointerIsDown)) {
  					let totalProgress = animation && !isToggle ? animation.totalProgress() : self.progress,
  						velocity = ((totalProgress - snap2) / (_getTime$1() - _time2) * 1000) || 0,
  						change1 = _abs$1(velocity / 2) * velocity / 0.185,
  						naturalEnd = totalProgress + change1,
  						endValue = _clamp$1(0, 1, snapFunc(naturalEnd, self)),
  						change2 = endValue - totalProgress - change1,
  						scroll = self.scroll(),
  						endScroll = Math.round(start + endValue * change),
  						tween = tweenTo.tween;
  					if (scroll <= end && scroll >= start) {
  						if (tween && !tween._initted) { // there's an overlapping snap! So we must figure out which one is closer and let that tween live.
  							if (tween.data <= Math.abs(endScroll - scroll)) {
  								return;
  							}
  							tween.kill();
  						}
  						tweenTo(endScroll, {
  							duration: snapDurClamp(_abs$1( (Math.max(_abs$1(naturalEnd - totalProgress), _abs$1(endValue - totalProgress)) * 0.185 / velocity / 0.05) || 0)),
  							ease: snap.ease || "power3",
  							data: Math.abs(endScroll - scroll), // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.
  							onComplete: () => {
  								snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;
  								onSnapComplete && onSnapComplete(self);
  							}
  						}, start + totalProgress * change, change1 * change, change2 * change);
  					}
  				} else {
  					snapDelayedCall.restart(true);
  				}
  			}).pause();
  		}
  		id && (_ids[id] = self);
  		trigger = self.trigger = _toArray$3(trigger || pin)[0];
  		pin = pin === true ? trigger : _toArray$3(pin)[0];
  		_isString$3(toggleClass) && (toggleClass = {targets: trigger, className: toggleClass});
  		if (pin) {
  			(pinSpacing === false || pinSpacing === _margin) || (pinSpacing = _getComputedStyle$1(pin.parentNode).display === "flex" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default.
  			self.pin = pin;
  			vars.force3D !== false && gsap$5.set(pin, {force3D: true});
  			pinCache = gsap$5.core.getCache(pin);
  			if (!pinCache.spacer) { // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the "original" pin state after it has already been affected by another ScrollTrigger.
  				pinCache.spacer = spacer = _doc$5.createElement("div");
  				spacer.setAttribute("class", "pin-spacer" + (id ? " pin-spacer-" + id : ""));
  				pinCache.pinState = pinOriginalState = _getState(pin);
  			} else {
  				pinOriginalState = pinCache.pinState;
  			}
  			self.spacer = spacer = pinCache.spacer;
  			cs = _getComputedStyle$1(pin);
  			spacingStart = cs[pinSpacing + direction.os2];
  			pinGetter = gsap$5.getProperty(pin);
  			pinSetter = gsap$5.quickSetter(pin, direction.a, _px);
  			_swapPinIn(pin, spacer, cs);
  			pinState = _getState(pin);
  		}
  		if (markers) {
  			markerVars = _isObject$3(markers) ? _setDefaults$2(markers, _markerDefaults) : _markerDefaults;
  			markerStartTrigger = _createMarker("scroller-start", id, scroller, direction, markerVars, 0);
  			markerEndTrigger = _createMarker("scroller-end", id, scroller, direction, markerVars, 0, markerStartTrigger);
  			offset = markerStartTrigger["offset" + direction.op.d2];
  			markerStart = _createMarker("start", id, scroller, direction, markerVars, offset);
  			markerEnd =_createMarker("end", id, scroller, direction, markerVars, offset);
  			if (!useFixedPosition) {
  				_makePositionable(scroller);
  				gsap$5.set([markerStartTrigger, markerEndTrigger], {force3D: true});
  				markerStartSetter = gsap$5.quickSetter(markerStartTrigger, direction.a, _px);
  				markerEndSetter = gsap$5.quickSetter(markerEndTrigger, direction.a, _px);
  			}
  		}

  		self.revert = revert => {
  			let r = revert !== false,
  				prevRefreshing = _refreshing;
  			if (r !== isReverted) {
  				if (r) {
  					prevScroll = Math.max(self.scroll(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.
  					prevProgress = self.progress;
  					prevAnimProgress = animation && animation.progress();
  					markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(m => m.style.display = "none");
  				}

  				_refreshing = 1;
  				self.update(r); // make sure the pin is back in its original position so that all the measurements are correct.
  				_refreshing = prevRefreshing;
  				pin && r && _swapPinOut(pin, spacer, pinOriginalState);
  				isReverted = r;
  			}
  		};


  		self.refresh = soft => {
  			if (_refreshing || !enabled) {
  				return;
  			}
  			if (pin && soft && _lastScrollTime) {
  				_addListener$2(ScrollTrigger, "scrollEnd", _softRefresh);
  				return;
  			}

  			_refreshing = 1;
  			scrubTween && scrubTween.kill();
  			invalidateOnRefresh && animation && animation.progress(0).invalidate();
  			isReverted || self.revert();
  			let size = getScrollerSize(),
  				scrollerBounds = getScrollerOffsets(),
  				max = _maxScroll(scroller, direction),
  				offset = 0,
  				otherPinOffset = 0,
  				parsedEnd = vars.end,
  				parsedEndTrigger = vars.endTrigger || trigger,
  				parsedStart = vars.start || (pin || !trigger ? "0 0" : "0 100%"),
  				pinIndex = pin && Math.max(0, _triggers.indexOf(self)) || 0,
  				cs, bounds, scroll, isVertical, override, i, curTrigger;
  			if (pinIndex) { // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things "rewind" properly.
  				i = pinIndex;
  				while (i--) {
  					_triggers[i].pin === pin && _triggers[i].revert();
  				}
  			}
  			start = _parsePosition$1(parsedStart, trigger, size, direction, self.scroll(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max) || (pin ? -0.001 : 0);
  			_isFunction$4(parsedEnd) && (parsedEnd = parsedEnd(self));
  			if (_isString$3(parsedEnd) && !parsedEnd.indexOf("+=")) {
  				if (~parsedEnd.indexOf(" ")) {
  					parsedEnd = (_isString$3(parsedStart) ? parsedStart.split(" ")[0] : "") + parsedEnd;
  				} else {
  					offset = _offsetToPx(parsedEnd.substr(2), size);
  					parsedEnd = _isString$3(parsedStart) ? parsedStart : start + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.
  					parsedEndTrigger = trigger;
  				}
  			}
  			end = Math.max(start, _parsePosition$1(parsedEnd || (parsedEndTrigger ? "100% 0" : max), parsedEndTrigger, size, direction, self.scroll() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max)) || -0.001;
  			change = (end - start) || ((start -= 0.01) && 0.001);
  			if (pin) {
  				i = pinIndex;
  				while (i--) {
  					curTrigger = _triggers[i];
  					if (curTrigger.pin === pin && curTrigger.start - curTrigger._pinPush < start) {
  						otherPinOffset += curTrigger.end - curTrigger.start;
  					}
  				}
  				start += otherPinOffset;
  				end += otherPinOffset;
  				self._pinPush = otherPinOffset;
  				if (markerStart && otherPinOffset) { // offset the markers if necessary
  					cs = {};
  					cs[direction.a] = "+=" + otherPinOffset;
  					gsap$5.set([markerStart, markerEnd], cs);
  				}
  				cs = _getComputedStyle$1(pin);
  				isVertical = (direction === _vertical);
  				scroll = self.scroll(); // recalculate because the triggers can affect the scroll
  				pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;
  				_swapPinIn(pin, spacer, cs);
  				pinState = _getState(pin);
  				// transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.
  				bounds = _getBounds$1(pin, true);
  				if (pinSpacing) {
  					spacer.style[pinSpacing + direction.os2] = change + otherPinOffset + _px;
  					spacingActive = (pinSpacing === _padding) ? _getSize$1(pin, direction) + change + otherPinOffset : 0;
  					spacingActive && (spacer.style[direction.d] = spacingActive + _px); // for box-sizing: border-box (must include padding).
  					useFixedPosition && self.scroll(prevScroll);
  				}
  				if (useFixedPosition) {
  					override = {
  						top: (bounds.top + (isVertical ? scroll - start : 0)) + _px,
  						left: (bounds.left + (isVertical ? 0 : scroll - start)) + _px,
  						boxSizing: "border-box",
  						position: "fixed"
  					};
  					override[_width] = override["max" + _Width] = Math.ceil(bounds.width) + _px;
  					override[_height] = override["max" + _Height] = Math.ceil(bounds.height) + _px;
  					override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = "0";
  					override[_padding] = cs[_padding];
  					override[_padding + _Top] = cs[_padding + _Top];
  					override[_padding + _Right] = cs[_padding + _Right];
  					override[_padding + _Bottom] = cs[_padding + _Bottom];
  					override[_padding + _Left] = cs[_padding + _Left];
  					pinActiveState = _copyState(pinOriginalState, override, pinReparent);
  				}
  				if (animation) { // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.
  					animation.progress(1, true);
  					pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;
  					change !== pinChange && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.
  					animation.progress(0, true);
  				} else {
  					pinChange = change;
  				}
  				if (pinIndex) { // make sure we revert from first to last to make sure things reach their end state properly
  					for (i = 0; i < pinIndex; i++) {
  						_triggers[i].pin === pin && _triggers[i].revert(false);
  					}
  				}
  			} else if (trigger && self.scroll()) { // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()
  				bounds = trigger.parentNode;
  				while (bounds && bounds !== _body$2) {
  					if (bounds._pinOffset) {
  						start -= bounds._pinOffset;
  						end -= bounds._pinOffset;
  					}
  					bounds = bounds.parentNode;
  				}
  			}
  			self.start = start;
  			self.end = end;
  			scroll1 = scroll2 = self.scroll(); // reset velocity
  			scroll1 < prevScroll && self.scroll(prevScroll);
  			self.revert(false);
  			_refreshing = 0;
  			prevAnimProgress && isToggle && animation.progress(prevAnimProgress, true);
  			if (prevProgress !== self.progress) { // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.
  				scrubTween && animation.totalProgress(prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.
  				self.progress = prevProgress;
  				self.update();
  			}
  			pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));
  			onRefresh && onRefresh(self);
  		};

  		self.getVelocity = () => ((self.scroll() - scroll2) / (_getTime$1() - _time2) * 1000) || 0;

  		self.update = (reset, recordVelocity) => {
  			let scroll = self.scroll(),
  				p = reset ? 0 : (scroll - start) / change,
  				clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
  				prevProgress = self.progress,
  				isActive, wasActive, toggleState, action, stateChanged, toggled;
  			if (recordVelocity) {
  				scroll2 = scroll1;
  				scroll1 = scroll;
  				if (snap) {
  					snap2 = snap1;
  					snap1 = animation && !isToggle ? animation.totalProgress() : clipped;
  				}
  			}
  			// anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).
  			(anticipatePin && !clipped && pin && !_refreshing && !_startup && _lastScrollTime && start < scroll + ((scroll - scroll2) / (_getTime$1() - _time2)) * anticipatePin) && (clipped = 0.0001);
  			if (clipped !== prevProgress && enabled) {
  				isActive = self.isActive = !!clipped && clipped < 1;
  				wasActive = !!prevProgress && prevProgress < 1;
  				toggled = isActive !== wasActive;
  				stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)
  				self.direction = clipped > prevProgress ? 1 : -1;
  				self.progress = clipped;
  				if (!isToggle) {
  					if (scrubTween && !_refreshing && !_startup) {
  						scrubTween.vars.totalProgress = clipped;
  						scrubTween.invalidate().restart();
  					} else if (animation) {
  						animation.totalProgress(clipped, !!_refreshing);
  					}
  				}
  				if (pin) {
  					reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);
  					if (!useFixedPosition) {
  						pinSetter(pinStart + pinChange * clipped);
  					} else if (stateChanged) {
  						action = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)
  						if (pinReparent) {
  							if (!_refreshing && (isActive || action)) {
  								let bounds = _getBounds$1(pin, true),
  									offset = scroll - start;
  								pin.style.top = (bounds.top + (direction === _vertical ? offset : 0)) + _px;
  								pin.style.left = (bounds.left + (direction === _vertical ? 0 : offset)) + _px;
  							}
  							_reparent(pin, !_refreshing && (isActive || action) ? _body$2 : spacer);
  						}
  						_setState(isActive || action ? pinActiveState : pinState);
  						(pinChange !== change && clipped < 1 && isActive) || pinSetter(pinStart + (clipped === 1 && !action ? pinChange : 0));
  					}
  				}
  				if (snap && !tweenTo.tween && !_refreshing && !_startup) {
  					scrubScrollTime = _lastScrollTime;
  					snapDelayedCall.restart(true);
  				}
  				toggleClass && toggled && (!once || isActive) && _toArray$3(toggleClass.targets).forEach(el => el.classList[isActive ? "add" : "remove"](toggleClass.className)); // classes could affect positioning, so do it even if reset or refreshing is true.
  				onUpdate && !isToggle && !reset && onUpdate(self);
  				if (stateChanged && !_refreshing) {
  					toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.
  					if (isToggle) {
  						action = (!toggled && toggleActions[toggleState + 1] !== "none" && toggleActions[toggleState + 1]) || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the "enter" action, we should switch to the "leave" in this case (but only if one is defined)
  						if (animation && (action === "complete" || action === "reset" || action in animation)) {
  							if (action === "complete") {
  								animation.pause().totalProgress(1);
  							} else if (action === "reset") {
  								animation.restart(true).pause();
  							} else {
  								animation[action]();
  							}
  						}
  						onUpdate && onUpdate(self);
  					}
  					if (toggled || !_limitCallbacks) { // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.
  						onToggle && toggled && onToggle(self);
  						callbacks[toggleState] && callbacks[toggleState](self);
  						once && (clipped === 1 ? self.kill() : (callbacks[toggleState] = 0)); // a callback shouldn't be called again if once is true.
  						if (!toggled) { // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order
  							toggleState = clipped === 1 ? 1 : 3;
  							callbacks[toggleState] && callbacks[toggleState](self);
  						}
  					}
  				} else if (isToggle && onUpdate && !_refreshing) {
  					onUpdate(self);
  				}
  			}
  			// update absolutely-positioned markers (only if the scroller isn't the viewport)
  			if (markerEndSetter) {
  				markerStartSetter(scroll + (markerStartTrigger._isFlipped ? 1 : 0));
  				markerEndSetter(scroll);
  			}
  		};

  		self.enable = () => {
  			if (!enabled) {
  				enabled = true;
  				_addListener$2(scroller, "resize", _onResize);
  				_addListener$2(scroller, "scroll", _onScroll);
  				onRefreshInit && _addListener$2(ScrollTrigger, "refreshInit", onRefreshInit);
  				!animation || !animation.add ? self.refresh() : gsap$5.delayedCall(0.01, self.refresh) && (change = 0.01) && (start = end = 0); // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick.
  			}
  		};

  		self.disable = reset => {
  			if (enabled) {
  				reset !== false && self.revert();
  				enabled = self.isActive = false;
  				scrubTween && scrubTween.pause();
  				pin && _swapPinOut(pin, spacer, pinOriginalState);
  				pinCache && (pinCache.uncache = 1);
  				onRefreshInit && _removeListener$2(ScrollTrigger, "refreshInit", onRefreshInit);
  				if (snapDelayedCall) {
  					snapDelayedCall.pause();
  					tweenTo.tween && tweenTo.tween.kill();
  				}
  				if (!isViewport) {
  					let i = _triggers.length;
  					while (i--) {
  						if (_triggers[i].scroller === scroller && _triggers[i] !== self) {
  							return; //don't remove the listeners if there are still other triggers referencing it.
  						}
  					}
  					_removeListener$2(scroller, "resize", _onResize);
  					_removeListener$2(scroller, "scroll", _onScroll);
  				}
  			}
  		};

  		self.kill = revert => {
  			self.disable(revert);
  			id && (delete _ids[id]);
  			let i = _triggers.indexOf(self);
  			_triggers.splice(i, 1);
  			i === _i && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...
  			if (animation) {
  				animation.scrollTrigger = null;
  				revert && animation.render(-1);
  				animation.kill();
  			}
  			markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(m => m.parentNode.removeChild(m));
  			pinCache && (pinCache.uncache = 1);
  		};

  		self.enable();
  	}


  	static register(core) {
  		if (!_coreInitted$5) {
  			gsap$5 = core || _getGSAP$4();
  			if (_windowExists$5() && window.document) {
  				_win$6 = window;
  				_doc$5 = document;
  				_docEl$1 = _doc$5.documentElement;
  				_body$2 = _doc$5.body;
  			}
  			if (gsap$5) {
  				_toArray$3 = gsap$5.utils.toArray;
  				_clamp$1 = gsap$5.utils.clamp;
  				gsap$5.core.globals("ScrollTrigger", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a "name" property.
  				if (_body$2) {
  					_raf = _win$6.requestAnimationFrame || (f => setTimeout(f, 16));
  					_addListener$2(_win$6, "mousewheel", _onScroll);
  					_root = [_win$6, _doc$5, _docEl$1, _body$2];
  					_addListener$2(_doc$5, "scroll", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!
  					let bodyStyle = _body$2.style,
  						border = bodyStyle.borderTop,
  						bounds;
  					bodyStyle.borderTop = "1px solid #000"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.
  					bounds = _getBounds$1(_body$2);
  					_vertical.m = Math.round(bounds.top + _vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding
  					_horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;
  					border ? (bodyStyle.borderTop = border) : bodyStyle.removeProperty("border-top");
  					_syncInterval = setInterval(_sync, 200);
  					gsap$5.delayedCall(0.5, () => _startup = 0);
  					_addListener$2(_doc$5, "touchcancel", _passThrough$1); // some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document.
  					_addListener$2(_body$2, "touchstart", _passThrough$1); //works around Safari bug: https://greensock.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
  					_multiListener(_addListener$2, _doc$5, "pointerdown,touchstart,mousedown", () => _pointerIsDown = 1);
  					_multiListener(_addListener$2, _doc$5, "pointerup,touchend,mouseup", () => _pointerIsDown = 0);
  					_transformProp$3 = gsap$5.utils.checkPrefix("transform");
  					_stateProps.push(_transformProp$3);
  					_coreInitted$5 = _getTime$1();
  					_resizeDelay = gsap$5.delayedCall(0.2, _refreshAll).pause();
  					_autoRefresh = [_doc$5, "visibilitychange", () => {
  						let w = _win$6.innerWidth,
  							h = _win$6.innerHeight;
  						if (_doc$5.hidden) {
  							_prevWidth = w;
  							_prevHeight = h;
  						} else if (_prevWidth !== w || _prevHeight !== h) {
  							_onResize();
  						}
  					}, _doc$5, "DOMContentLoaded", _refreshAll, _win$6, "load", () => _lastScrollTime || _refreshAll(), _win$6, "resize", _onResize];
  					_iterateAutoRefresh(_addListener$2);

  				}
  			}
  		}
  		return _coreInitted$5;
  	}

  	static defaults(config) {
  		for (let p in config) {
  			_defaults$1[p] = config[p];
  		}
  	}

  	static kill() {
  		_enabled = 0;
  		_triggers.slice(0).forEach(trigger => trigger.kill(1));
  	}

  	static config(vars) {
  		("limitCallbacks" in vars) && (_limitCallbacks = !!vars.limitCallbacks);
  		let ms = vars.syncInterval;
  		ms && clearInterval(_syncInterval) || ((_syncInterval = ms) && setInterval(_sync, ms));
  		("autoRefreshEvents" in vars) && (_iterateAutoRefresh(_removeListener$2) || _iterateAutoRefresh(_addListener$2, vars.autoRefreshEvents || "none"));
  	}

  	static scrollerProxy(target, vars) {
  		let t = _toArray$3(target)[0];
  		_isViewport(t) ? _proxies.unshift(_win$6, vars, _body$2, vars, _docEl$1, vars) : _proxies.unshift(t, vars);
  	}

  	static matchMedia(vars) {
  		let mq, p;
  		for (p in vars) {
  			if (p === "all") {
  				_creatingMedia = p;
  				vars[p]();
  				_creatingMedia = 0;
  			} else {
  				mq = _win$6.matchMedia(p);
  				if (mq) {
  					_media.push(p, vars[p]);
  					mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
  				}
  			}
  		}
  		_onMediaChange();
  		return _media;
  	}

  }

  ScrollTrigger.version = "3.4.0";
  ScrollTrigger.saveStyles = targets => targets ? _toArray$3(targets).forEach(target => {
  	let i = _savedStyles.indexOf(target);
  	i >= 0 && _savedStyles.splice(i, 4);
  	_savedStyles.push(target, target.style.cssText, gsap$5.core.getCache(target), _creatingMedia);
  }) : _savedStyles;
  ScrollTrigger.revert = (soft, media) => _revertAll(!soft, media);
  ScrollTrigger.create = (vars, animation) => new ScrollTrigger(vars, animation);
  ScrollTrigger.refresh = safe => safe ? _onResize() : _refreshAll(true);
  ScrollTrigger.update = _updateAll;
  ScrollTrigger.maxScroll = (element, horizontal) => _maxScroll(element, horizontal ? _horizontal : _vertical);
  ScrollTrigger.getScrollFunc = (element, horizontal) => _getScrollFunc(_toArray$3(element)[0], horizontal ? _horizontal : _vertical);
  ScrollTrigger.getById = id => _ids[id];
  ScrollTrigger.getAll = () => _triggers.slice(0);
  ScrollTrigger.isScrolling = () => !!_lastScrollTime;
  ScrollTrigger.addEventListener = (type, callback) => {
  	let a = _listeners[type] || (_listeners[type] = []);
  	~a.indexOf(callback) || a.push(callback);
  };
  ScrollTrigger.removeEventListener = (type, callback) => {
  	let a = _listeners[type],
  		i = a && a.indexOf(callback);
  	i >= 0 && a.splice(i, 1);
  };
  ScrollTrigger.batch = (targets, vars) => {
  	let result = [],
  		varsCopy = {},
  		interval = vars.interval || 0.016,
  		batchMax = vars.batchMax || 1e9,
  		proxyCallback = (type, callback) => {
  			let elements = [],
  				triggers = [],
  				delay = gsap$5.delayedCall(interval, () => {callback(elements, triggers); elements = []; triggers = [];}).pause();
  			return self => {
  				elements.length || delay.restart(true);
  				elements.push(self.trigger);
  				triggers.push(self);
  				batchMax <= elements.length && delay.progress(1);
  			};
  		},
  		p;
  	for (p in vars) {
  		varsCopy[p] = (p.substr(0, 2) === "on" && _isFunction$4(vars[p]) && p !== "onRefreshInit") ? proxyCallback(p, vars[p]) : vars[p];
  	}
  	if (_isFunction$4(batchMax)) {
  		batchMax = batchMax();
  		_addListener$2(ScrollTrigger, "refresh", () => batchMax = vars.batchMax());
  	}
  	_toArray$3(targets).forEach(target => {
  		let config = {};
  		for (p in varsCopy) {
  			config[p] = varsCopy[p];
  		}
  		config.trigger = target;
  		result.push(ScrollTrigger.create(config));
  	});
  	return result;
  };

  _getGSAP$4() && gsap$5.registerPlugin(ScrollTrigger);

  // Used in two objects below, hence declared out here.
  var baseStops = {
    stop0: '#4D4054',
    stop1: '#040509'
  };
  var state = {
    // General.
    width: null,
    height: null,
    tabletUp: 800,
    transform: {
      shape: null,
      scape: null,
      bottle: null,
      // all the animal transforms
      // are being added in `update`
      dataset: null
    },
    ctx: {
      scape: null,
      glassBottle: null,
      bottleText: null,
      bottleWave: null,
      chart: null,
      blackBox: null,
      globe: null
    },
    rough: {
      chart: null,
      globe: null,
      wave: null
    },
    // Tweens.
    tween: {
      wineScape: null,
      glassBottle: null,
      bottleText: null,
      bottleWave: null,
      lolliChart: null,
      lolliUpdate1: null,
      lolliUpdate2: null,
      lolliUpdate3: null,
      // blackbox/arrow tweens are being added in tween func.
      blackBox: null,
      cleanup: null,
      bottleEmpty: null,
      bottleTextOut: null,
      // animal tweens are being added in tween func.
      bottleFill: null,
      // bottle colour tweens are being added in tween func.
      bottleGrid: null,
      bottleGridColour: null,
      bottleGridSort: null,
      bottleGridOut: null,
      // dataset tweens are being added in tween func.
      globe: null,
      importance: null,
      importanceRemove: null,
      modelBottleIn: null,
      modelBottleOut: null,
      modelWaveInit: null
    },
    scape: {
      image: null,
      alpha: null,
      alphaTarget: 0.2
    },
    glassBottle: {
      bottleBox: null,
      bottleTop: null,
      // % of bottle's top position
      bottleLeft: null,
      // % of bottle's top position
      path: null,
      colour: null,
      alpha: 0
    },
    bottleText: {
      paths: null,
      maxLength: null,
      dashOffset: null,
      colour: null
    },
    bottleColour: {
      base: _objectSpread2({}, baseStops),
      good: {
        // stop0: '#88BFF2',
        // stop1: '#4D8ECA',
        stop0: '#98A5DA',
        stop1: '#5566aa',
        // dot: '#5566aa', // ezplan blue
        dot: '#1773C9' // original

      },
      bad: {
        stop0: '#CE6A8C',
        stop1: '#993355',
        // vinoez bordeaux
        // dot: '#E5A0BF', // original
        dot: 'rgba(229, 160, 191, 0.7)' // original light
        // dot: 'rgba(153, 51, 85, 0.4)', // transparent stop1

      }
    },
    bottleWave: {
      bottlePath: null,
      wavePoints: null,
      lift: null,
      liftTarget: null,
      r: null,
      n: 20,
      xWaveScale: null,
      waveLine: null,
      waveAlpha: null
    },
    lolli: {
      data: null,
      values: null,
      radiusTarget: null,
      area: null,
      x: null,
      y: null
    },
    blackBox: {
      box: null,
      boxDims: null,
      model: null,
      xOffset: null
    },
    animals: {
      data: null // box info for each animal added in `init`.

    },
    bottleGrid: {
      baseData: null,
      dataOrigin: null,
      dataTarget: null,
      dataSorted: null,
      dataOut: null,
      colour: {
        // initially base colours.
        good: _objectSpread2({}, baseStops),
        bad: _objectSpread2({}, baseStops)
      }
    },
    dataset: {
      info: null,
      box: null // all the column path data
      // are being added in `init`

    },
    globe: {
      data: null,
      scroll: {
        progress: null,
        direction: null
      }
    },
    stats: {
      data: null,
      links: null,
      current: [],
      alpha: {
        value: 1
      },
      colourDots: false,
      lr: false,
      // linear regression
      progress: {
        draw: 0,
        extend: 0,
        point: 0,
        logistic: 0
      },
      pointTickInfo: null
    },
    varImp: {
      data: null
    },
    model: {
      intercept: null,
      weights: null,
      values: null,
      ranges: null,
      probability: 0
    },
    modelBottle: {
      paths: null,
      maxLength: null,
      dashOffset: null,
      alpha: 0,
      points: false,
      info: [''],
      infoColour: '#777'
    },
    modelWave: {
      alpha: 0
    }
  };

  var gsapWithCSS$1 = gsap.registerPlugin(CSSPlugin) || gsap,
      // to protect from tree shaking
  TweenMaxWithCSS$1 = gsapWithCSS$1.core.Tween;

  function initRange(domain, range) {
    switch (arguments.length) {
      case 0: break;
      case 1: this.range(domain); break;
      default: this.range(range).domain(domain); break;
    }
    return this;
  }

  var array = Array.prototype;

  var map$1 = array.map;
  var slice = array.slice;

  var implicit = {name: "implicit"};

  function ordinal() {
    var index = map(),
        domain = [],
        range = [],
        unknown = implicit;

    function scale(d) {
      var key = d + "", i = index.get(key);
      if (!i) {
        if (unknown !== implicit) return unknown;
        index.set(key, i = domain.push(d));
      }
      return range[(i - 1) % range.length];
    }

    scale.domain = function(_) {
      if (!arguments.length) return domain.slice();
      domain = [], index = map();
      var i = -1, n = _.length, d, key;
      while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
      return scale;
    };

    scale.range = function(_) {
      return arguments.length ? (range = slice.call(_), scale) : range.slice();
    };

    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };

    scale.copy = function() {
      return ordinal(domain, range).unknown(unknown);
    };

    initRange.apply(scale, arguments);

    return scale;
  }

  function band() {
    var scale = ordinal().unknown(undefined),
        domain = scale.domain,
        ordinalRange = scale.range,
        range$1 = [0, 1],
        step,
        bandwidth,
        round = false,
        paddingInner = 0,
        paddingOuter = 0,
        align = 0.5;

    delete scale.unknown;

    function rescale() {
      var n = domain().length,
          reverse = range$1[1] < range$1[0],
          start = range$1[reverse - 0],
          stop = range$1[1 - reverse];
      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
      if (round) step = Math.floor(step);
      start += (stop - start - step * (n - paddingInner)) * align;
      bandwidth = step * (1 - paddingInner);
      if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
      var values = range(n).map(function(i) { return start + step * i; });
      return ordinalRange(reverse ? values.reverse() : values);
    }

    scale.domain = function(_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };

    scale.range = function(_) {
      return arguments.length ? (range$1 = [+_[0], +_[1]], rescale()) : range$1.slice();
    };

    scale.rangeRound = function(_) {
      return range$1 = [+_[0], +_[1]], round = true, rescale();
    };

    scale.bandwidth = function() {
      return bandwidth;
    };

    scale.step = function() {
      return step;
    };

    scale.round = function(_) {
      return arguments.length ? (round = !!_, rescale()) : round;
    };

    scale.padding = function(_) {
      return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
    };

    scale.paddingInner = function(_) {
      return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
    };

    scale.paddingOuter = function(_) {
      return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
    };

    scale.align = function(_) {
      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
    };

    scale.copy = function() {
      return band(domain(), range$1)
          .round(round)
          .paddingInner(paddingInner)
          .paddingOuter(paddingOuter)
          .align(align);
    };

    return initRange.apply(rescale(), arguments);
  }

  function pointish(scale) {
    var copy = scale.copy;

    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    delete scale.paddingOuter;

    scale.copy = function() {
      return pointish(copy());
    };

    return scale;
  }

  function point$1() {
    return pointish(band.apply(null, arguments).paddingInner(1));
  }

  function constant$2(x) {
    return function() {
      return x;
    };
  }

  function number$1(x) {
    return +x;
  }

  var unit = [0, 1];

  function identity$1(x) {
    return x;
  }

  function normalize$1(a, b) {
    return (b -= (a = +a))
        ? function(x) { return (x - a) / b; }
        : constant$2(isNaN(b) ? NaN : 0.5);
  }

  function clamper(domain) {
    var a = domain[0], b = domain[domain.length - 1], t;
    if (a > b) t = a, a = b, b = t;
    return function(x) { return Math.max(a, Math.min(b, x)); };
  }

  // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
  // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
  function bimap(domain, range, interpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
    if (d1 < d0) d0 = normalize$1(d1, d0), r0 = interpolate(r1, r0);
    else d0 = normalize$1(d0, d1), r0 = interpolate(r0, r1);
    return function(x) { return r0(d0(x)); };
  }

  function polymap(domain, range, interpolate) {
    var j = Math.min(domain.length, range.length) - 1,
        d = new Array(j),
        r = new Array(j),
        i = -1;

    // Reverse descending domains.
    if (domain[j] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }

    while (++i < j) {
      d[i] = normalize$1(domain[i], domain[i + 1]);
      r[i] = interpolate(range[i], range[i + 1]);
    }

    return function(x) {
      var i = bisectRight(domain, x, 1, j) - 1;
      return r[i](d[i](x));
    };
  }

  function copy(source, target) {
    return target
        .domain(source.domain())
        .range(source.range())
        .interpolate(source.interpolate())
        .clamp(source.clamp())
        .unknown(source.unknown());
  }

  function transformer() {
    var domain = unit,
        range = unit,
        interpolate = interpolateValue,
        transform,
        untransform,
        unknown,
        clamp = identity$1,
        piecewise,
        output,
        input;

    function rescale() {
      piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
      output = input = null;
      return scale;
    }

    function scale(x) {
      return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
    }

    scale.invert = function(y) {
      return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
    };

    scale.domain = function(_) {
      return arguments.length ? (domain = map$1.call(_, number$1), clamp === identity$1 || (clamp = clamper(domain)), rescale()) : domain.slice();
    };

    scale.range = function(_) {
      return arguments.length ? (range = slice.call(_), rescale()) : range.slice();
    };

    scale.rangeRound = function(_) {
      return range = slice.call(_), interpolate = interpolateRound, rescale();
    };

    scale.clamp = function(_) {
      return arguments.length ? (clamp = _ ? clamper(domain) : identity$1, scale) : clamp !== identity$1;
    };

    scale.interpolate = function(_) {
      return arguments.length ? (interpolate = _, rescale()) : interpolate;
    };

    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };

    return function(t, u) {
      transform = t, untransform = u;
      return rescale();
    };
  }

  function continuous(transform, untransform) {
    return transformer()(transform, untransform);
  }

  function formatDecimal(x) {
    return Math.abs(x = Math.round(x)) >= 1e21
        ? x.toLocaleString("en").replace(/,/g, "")
        : x.toString(10);
  }

  // Computes the decimal coefficient and exponent of the specified number x with
  // significant digits p, where x is positive and p is in [1, 21] or undefined.
  // For example, formatDecimalParts(1.23) returns ["123", 0].
  function formatDecimalParts(x, p) {
    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
    var i, coefficient = x.slice(0, i);

    // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
    // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
    return [
      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
      +x.slice(i + 1)
    ];
  }

  function exponent(x) {
    return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
  }

  function formatGroup(grouping, thousands) {
    return function(value, width) {
      var i = value.length,
          t = [],
          j = 0,
          g = grouping[0],
          length = 0;

      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = grouping[j = (j + 1) % grouping.length];
      }

      return t.reverse().join(thousands);
    };
  }

  function formatNumerals(numerals) {
    return function(value) {
      return value.replace(/[0-9]/g, function(i) {
        return numerals[+i];
      });
    };
  }

  // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
  var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

  function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }

  formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
    this.align = specifier.align === undefined ? ">" : specifier.align + "";
    this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === undefined ? undefined : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === undefined ? "" : specifier.type + "";
  }

  FormatSpecifier.prototype.toString = function() {
    return this.fill
        + this.align
        + this.sign
        + this.symbol
        + (this.zero ? "0" : "")
        + (this.width === undefined ? "" : Math.max(1, this.width | 0))
        + (this.comma ? "," : "")
        + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
        + (this.trim ? "~" : "")
        + this.type;
  };

  // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
  function formatTrim(s) {
    out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case ".": i0 = i1 = i; break;
        case "0": if (i0 === 0) i0 = i; i1 = i; break;
        default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
      }
    }
    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
  }

  var prefixExponent;

  function formatPrefixAuto(x, p) {
    var d = formatDecimalParts(x, p);
    if (!d) return x + "";
    var coefficient = d[0],
        exponent = d[1],
        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
        n = coefficient.length;
    return i === n ? coefficient
        : i > n ? coefficient + new Array(i - n + 1).join("0")
        : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
        : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
  }

  function formatRounded(x, p) {
    var d = formatDecimalParts(x, p);
    if (!d) return x + "";
    var coefficient = d[0],
        exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
        : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
        : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }

  var formatTypes = {
    "%": function(x, p) { return (x * 100).toFixed(p); },
    "b": function(x) { return Math.round(x).toString(2); },
    "c": function(x) { return x + ""; },
    "d": formatDecimal,
    "e": function(x, p) { return x.toExponential(p); },
    "f": function(x, p) { return x.toFixed(p); },
    "g": function(x, p) { return x.toPrecision(p); },
    "o": function(x) { return Math.round(x).toString(8); },
    "p": function(x, p) { return formatRounded(x * 100, p); },
    "r": formatRounded,
    "s": formatPrefixAuto,
    "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
    "x": function(x) { return Math.round(x).toString(16); }
  };

  function identity$2(x) {
    return x;
  }

  var map$2 = Array.prototype.map,
      prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

  function formatLocale(locale) {
    var group = locale.grouping === undefined || locale.thousands === undefined ? identity$2 : formatGroup(map$2.call(locale.grouping, Number), locale.thousands + ""),
        currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
        currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
        decimal = locale.decimal === undefined ? "." : locale.decimal + "",
        numerals = locale.numerals === undefined ? identity$2 : formatNumerals(map$2.call(locale.numerals, String)),
        percent = locale.percent === undefined ? "%" : locale.percent + "",
        minus = locale.minus === undefined ? "-" : locale.minus + "",
        nan = locale.nan === undefined ? "NaN" : locale.nan + "";

    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);

      var fill = specifier.fill,
          align = specifier.align,
          sign = specifier.sign,
          symbol = specifier.symbol,
          zero = specifier.zero,
          width = specifier.width,
          comma = specifier.comma,
          precision = specifier.precision,
          trim = specifier.trim,
          type = specifier.type;

      // The "n" type is an alias for ",g".
      if (type === "n") comma = true, type = "g";

      // The "" type, and any invalid type, is an alias for ".12~g".
      else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

      // If zero fill is specified, padding goes after sign and before digits.
      if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

      // Compute the prefix and suffix.
      // For SI-prefix, the suffix is lazily computed.
      var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
          suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

      // What format function should we use?
      // Is this an integer type?
      // Can this type generate exponential notation?
      var formatType = formatTypes[type],
          maybeSuffix = /[defgprs%]/.test(type);

      // Set the default precision if not specified,
      // or clamp the specified precision to the supported range.
      // For significant precision, it must be in [1, 21].
      // For fixed precision, it must be in [0, 20].
      precision = precision === undefined ? 6
          : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
          : Math.max(0, Math.min(20, precision));

      function format(value) {
        var valuePrefix = prefix,
            valueSuffix = suffix,
            i, n, c;

        if (type === "c") {
          valueSuffix = formatType(value) + valueSuffix;
          value = "";
        } else {
          value = +value;

          // Determine the sign. -0 is not less than 0, but 1 / -0 is!
          var valueNegative = value < 0 || 1 / value < 0;

          // Perform the initial formatting.
          value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

          // Trim insignificant zeros.
          if (trim) value = formatTrim(value);

          // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
          if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

          // Compute the prefix and suffix.
          valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
          valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

          // Break the formatted value into the integer “value” part that can be
          // grouped, and fractional or exponential “suffix” part that is not.
          if (maybeSuffix) {
            i = -1, n = value.length;
            while (++i < n) {
              if (c = value.charCodeAt(i), 48 > c || c > 57) {
                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                value = value.slice(0, i);
                break;
              }
            }
          }
        }

        // If the fill character is not "0", grouping is applied before padding.
        if (comma && !zero) value = group(value, Infinity);

        // Compute the padding.
        var length = valuePrefix.length + value.length + valueSuffix.length,
            padding = length < width ? new Array(width - length + 1).join(fill) : "";

        // If the fill character is "0", grouping is applied after padding.
        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

        // Reconstruct the final output based on the desired alignment.
        switch (align) {
          case "<": value = valuePrefix + value + valueSuffix + padding; break;
          case "=": value = valuePrefix + padding + value + valueSuffix; break;
          case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
          default: value = padding + valuePrefix + value + valueSuffix; break;
        }

        return numerals(value);
      }

      format.toString = function() {
        return specifier + "";
      };

      return format;
    }

    function formatPrefix(specifier, value) {
      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
          e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
          k = Math.pow(10, -e),
          prefix = prefixes[8 + e / 3];
      return function(value) {
        return f(k * value) + prefix;
      };
    }

    return {
      format: newFormat,
      formatPrefix: formatPrefix
    };
  }

  var locale;
  var format;
  var formatPrefix;

  defaultLocale({
    decimal: ".",
    thousands: ",",
    grouping: [3],
    currency: ["$", ""],
    minus: "-"
  });

  function defaultLocale(definition) {
    locale = formatLocale(definition);
    format = locale.format;
    formatPrefix = locale.formatPrefix;
    return locale;
  }

  function precisionFixed(step) {
    return Math.max(0, -exponent(Math.abs(step)));
  }

  function precisionPrefix(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
  }

  function precisionRound(step, max) {
    step = Math.abs(step), max = Math.abs(max) - step;
    return Math.max(0, exponent(max) - exponent(step)) + 1;
  }

  function tickFormat(start, stop, count, specifier) {
    var step = tickStep(start, stop, count),
        precision;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s": {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
        return formatPrefix(specifier, value);
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }
      case "f":
      case "%": {
        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
    }
    return format(specifier);
  }

  function linearish(scale) {
    var domain = scale.domain;

    scale.ticks = function(count) {
      var d = domain();
      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
    };

    scale.tickFormat = function(count, specifier) {
      var d = domain();
      return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
    };

    scale.nice = function(count) {
      if (count == null) count = 10;

      var d = domain(),
          i0 = 0,
          i1 = d.length - 1,
          start = d[i0],
          stop = d[i1],
          step;

      if (stop < start) {
        step = start, start = stop, stop = step;
        step = i0, i0 = i1, i1 = step;
      }

      step = tickIncrement(start, stop, count);

      if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
        step = tickIncrement(start, stop, count);
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
        step = tickIncrement(start, stop, count);
      }

      if (step > 0) {
        d[i0] = Math.floor(start / step) * step;
        d[i1] = Math.ceil(stop / step) * step;
        domain(d);
      } else if (step < 0) {
        d[i0] = Math.ceil(start * step) / step;
        d[i1] = Math.floor(stop * step) / step;
        domain(d);
      }

      return scale;
    };

    return scale;
  }

  function linear$1() {
    var scale = continuous(identity$1, identity$1);

    scale.copy = function() {
      return copy(scale, linear$1());
    };

    initRange.apply(scale, arguments);

    return linearish(scale);
  }

  /* eslint-disable no-param-reassign */

  function prettyLabel(string) {
    var capitals = string.charAt(0).toUpperCase() + string.slice(1);
    return capitals.replace(/_/g, ' ');
  }

  function isSelection(el) {
    if (typeof el === 'string') return false;
    if (el instanceof selection) return true;
    return false;
  }
  /**
   * Get the bounding box of either a DOM element, a D3 selection
   *  or a path string. Either `el` or `path` needs to be falsey.
   * @param { node|selection } el either a DOM node or a D3 selection
   * @param { string } path an svg path
   * @return An SVG rect with (most importantly) width and height
   */


  function getBox(el, path) {
    var box;

    if (el) {
      var sel = isSelection(el) ? el : select(el);
      box = sel.node().getBBox();
    } else if (path) {
      var domPath = select('body').append('svg').attr('class', 'svg-temp').append('path').attr('d', path);
      box = domPath.node().getBBox();
      domPath.remove();
    } else {
      throw Error('Either el or path must be defined');
    }

    return box;
  } // Update functions.


  function resizeCanvas(canvas, width, height) {
    var context = canvas.getContext('2d'); // Give each device pixel an element and drawing surface pixel.
    // This should make it bigger for retina displays for example.

    canvas.width = width * window.devicePixelRatio;
    canvas.height = height * window.devicePixelRatio; // Scale only the element's size down to the given width on the site.

    canvas.style.width = "".concat(width, "px");
    canvas.style.height = "".concat(height, "px"); // Scale the drawing surface (up).

    context.scale(window.devicePixelRatio, window.devicePixelRatio);
  }
  /**
   * This fn calculates the translate and scale values for the object based on the parent visual's
   * dimensions. `fit` decides how big in relation to width or height it should be (width: 1 would
   * be full width). Note, it can only fit towards one measure as skewing is not worked in.
   * `pos` decides which x, y place it should have. Leave this empty if you want to centre the image.
   * @param { SVGRect|Object } object The object's bounding box - at least with width and height. Required.
   * @param { Object } fit  { width: 0-1, height: 0-1 } The percentage of the width or height the
   *                        object should fit with. One must be 0! Required.
   * @param { Object } pos  { x: 0-1, y: 0-1 } The percentage of the full width or height
   *                        x or y should be at. 1 represents the centre. Optional.
   * @returns { Object }    { x, y, scale } The translate and scale values to be used for positioning.
   */


  function getTransform(object, fit, nudge) {
    if (fit.width !== 0 && fit.height !== 0) throw Error('One fit value must be 0'); // Get the parent visual.

    var frame = document.querySelector('#canvas-main-container');
    var visual = {
      width: frame.clientWidth,
      height: frame.clientHeight
    }; // Establish the object scale. fit.width and fit.height decide the scale
    // in relation to either the height or the width. You can't have both,
    // becasue we don't skew. These two terms ↓ don't become a sum, but one
    // will be 0 when the other one is not.

    var scale = visual.width / object.width * fit.width + visual.height / object.height * fit.height; // Establish the object's position. The default value is the centre:

    var position = {
      x: visual.width / 2 - object.width * scale / 2,
      y: visual.height / 2 - object.height * scale / 2
    }; // If `nudge` is defined, then `nudge.x` and `nudge.y` are both
    // expressed  as % of width and/or height. 1 would be full width/height,
    // 0.5 would be the (default) centre and 0.25 half the centre (25% width).

    if (nudge && nudge.x) position.x *= nudge.x * 2; // *2 as the default position

    if (nudge && nudge.y) position.y *= nudge.y * 2; // is the centre (see above).
    // Nice all the values up.

    return {
      x: Math.round(position.x),
      y: Math.round(position.y),
      scale: Math.round(scale * 100) / 100
    };
  }
  /**
   * Splits the path at the M commands.
   * Much more readable than reduce 🥂.
   * @param { String } path
   * @returns { Array } an array of paths
   */


  function splitPath(path) {
    return path.split('M').filter(function (d) {
      return d;
    }).map(function (d) {
      return "M".concat(d);
    });
  }

  function getPathDims(pathData) {
    var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path.setAttribute('d', pathData);
    var domPath = select('#stage-group').append('path').attr('class', 'remove').attr('d', pathData);
    var dims = domPath.node().getBBox();
    var pathDims = {
      x: Math.round(dims.x),
      y: Math.round(dims.y),
      width: Math.round(dims.width),
      height: Math.round(dims.height),
      length: Math.round(path.getTotalLength() || 0)
    };
    domPath.remove();
    return pathDims;
  }

  function getPathData(path) {
    var splitPaths = splitPath(path);
    var paths = splitPaths.map(function (p) {
      return new Path2D(p);
    });
    var dims = splitPaths.map(getPathDims);
    var length = max(dims, function (d) {
      return d.length;
    });
    var offset = length;
    return {
      paths: paths,
      dims: dims,
      length: length,
      offset: offset
    };
  }
  /**
   * Drwa canvas arrows. From:
   * (https://riptutorial.com/html5-canvas/example/18138/cubic---quadratic-bezier-curve-with-arrowheads)
   * @param { objecr } ctx Canvas context to draw on.
   * @param { object } p0 {x, y} control point - start
   * @param { object } p1 {x, y} control point - control quadratic
   * @param { object } p2 {x, y} control point - end
   * @param { object } p3 {x, y} control point - control cubic if defined
   * @param { number } arrowLength Length of arrow head
   * @param { boolean } hasStartArrow Add start arrow
   * @param { boolean } hasEndArrow Add end arrow
   */


  function bezWithArrowheads(ctx, p0, p1, p2, p3, arrowLength, hasStartArrow, hasEndArrow) {
    var x;
    var y;
    var norm;
    var ex;
    var ey;

    function pointsToNormalisedVec(p, pp) {
      var len;
      norm.y = pp.x - p.x;
      norm.x = -(pp.y - p.y);
      len = Math.sqrt(norm.x * norm.x + norm.y * norm.y);
      norm.x /= len;
      norm.y /= len;
      return norm;
    }

    var arrowWidth = arrowLength / 2;
    norm = {}; // defaults to true for both arrows if arguments not included

    hasStartArrow = hasStartArrow === undefined || hasStartArrow === null ? true : hasStartArrow;
    hasEndArrow = hasEndArrow === undefined || hasEndArrow === null ? true : hasEndArrow;
    ctx.beginPath();
    ctx.moveTo(p0.x, p0.y);

    if (p3 === undefined) {
      ctx.quadraticCurveTo(p1.x, p1.y, p2.x, p2.y);
      ex = p2.x; // get end point

      ey = p2.y;
      norm = pointsToNormalisedVec(p1, p2);
    } else {
      ctx.bezierCurveTo(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
      ex = p3.x; // get end point

      ey = p3.y;
      norm = pointsToNormalisedVec(p2, p3);
    }

    if (hasEndArrow) {
      x = arrowWidth * norm.x + arrowLength * -norm.y;
      y = arrowWidth * norm.y + arrowLength * norm.x;
      ctx.moveTo(ex + x, ey + y);
      ctx.lineTo(ex, ey);
      x = arrowWidth * -norm.x + arrowLength * -norm.y;
      y = arrowWidth * -norm.y + arrowLength * norm.x;
      ctx.lineTo(ex + x, ey + y);
    }

    if (hasStartArrow) {
      norm = pointsToNormalisedVec(p0, p1);
      x = arrowWidth * norm.x - arrowLength * -norm.y;
      y = arrowWidth * norm.y - arrowLength * norm.x;
      ctx.moveTo(p0.x + x, p0.y + y);
      ctx.lineTo(p0.x, p0.y);
      x = arrowWidth * -norm.x - arrowLength * -norm.y;
      y = arrowWidth * -norm.y - arrowLength * norm.x;
      ctx.lineTo(p0.x + x, p0.y + y);
    }

    ctx.stroke();
  }

  function getLinearScale(variable) {
    return linear$1().domain(extent(state.stats.data, function (d) {
      return d[variable];
    }));
  }
  /**
   * Calculate Euclidean distance between two points.
   * @param {Array<number>} left First N-dimensional point.
   * @param {Array<number>} right Second N-dimensional point.
   * @returns {number} Distance.
   */


  function euclideanDistance(left, right) {
    var sum = 0;

    for (var i = 0; i < left.length; i++) {
      var diff = left[i] - right[i];
      sum += diff * diff;
    }

    return Math.sqrt(sum);
  }


  function getGradient(stops) {
    var gradient = state.ctx.bottleWave.createLinearGradient(0, state.glassBottle.bottleBox.height / 2, state.glassBottle.bottleBox.width, state.glassBottle.bottleBox.height / 2);
    gradient.addColorStop(0, stops.stop0);
    gradient.addColorStop(0.7, stops.stop1);
    return gradient;
  }

  function clear(ctx) {
    ctx.clearRect(0, 0, state.width, state.height);
  }

  var pi = Math.PI,
      tau = 2 * pi,
      epsilon = 1e-6,
      tauEpsilon = tau - epsilon;

  function Path() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null; // end of current subpath
    this._ = "";
  }

  function path() {
    return new Path;
  }

  Path.prototype = path.prototype = {
    constructor: Path,
    moveTo: function(x, y) {
      this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
    },
    closePath: function() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._ += "Z";
      }
    },
    lineTo: function(x, y) {
      this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    quadraticCurveTo: function(x1, y1, x, y) {
      this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x, y) {
      this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    arcTo: function(x1, y1, x2, y2, r) {
      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
      var x0 = this._x1,
          y0 = this._y1,
          x21 = x2 - x1,
          y21 = y2 - y1,
          x01 = x0 - x1,
          y01 = y0 - y1,
          l01_2 = x01 * x01 + y01 * y01;

      // Is the radius negative? Error.
      if (r < 0) throw new Error("negative radius: " + r);

      // Is this path empty? Move to (x1,y1).
      if (this._x1 === null) {
        this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
      }

      // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
      else if (!(l01_2 > epsilon));

      // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
        this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
      }

      // Otherwise, draw an arc!
      else {
        var x20 = x2 - x0,
            y20 = y2 - y0,
            l21_2 = x21 * x21 + y21 * y21,
            l20_2 = x20 * x20 + y20 * y20,
            l21 = Math.sqrt(l21_2),
            l01 = Math.sqrt(l01_2),
            l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
            t01 = l / l01,
            t21 = l / l21;

        // If the start tangent is not coincident with (x0,y0), line to.
        if (Math.abs(t01 - 1) > epsilon) {
          this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
        }

        this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
      }
    },
    arc: function(x, y, r, a0, a1, ccw) {
      x = +x, y = +y, r = +r, ccw = !!ccw;
      var dx = r * Math.cos(a0),
          dy = r * Math.sin(a0),
          x0 = x + dx,
          y0 = y + dy,
          cw = 1 ^ ccw,
          da = ccw ? a0 - a1 : a1 - a0;

      // Is the radius negative? Error.
      if (r < 0) throw new Error("negative radius: " + r);

      // Is this path empty? Move to (x0,y0).
      if (this._x1 === null) {
        this._ += "M" + x0 + "," + y0;
      }

      // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
      else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._ += "L" + x0 + "," + y0;
      }

      // Is this arc empty? We’re done.
      if (!r) return;

      // Does the angle go the wrong way? Flip the direction.
      if (da < 0) da = da % tau + tau;

      // Is this a complete circle? Draw two arcs to complete the circle.
      if (da > tauEpsilon) {
        this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
      }

      // Is this arc non-empty? Draw an arc!
      else if (da > epsilon) {
        this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
    },
    rect: function(x, y, w, h) {
      this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
    },
    toString: function() {
      return this._;
    }
  };

  function constant$3(x) {
    return function constant() {
      return x;
    };
  }

  function Linear(context) {
    this._context = context;
  }

  Linear.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x, y) {
      x = +x, y = +y;
      switch (this._point) {
        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
        case 1: this._point = 2; // proceed
        default: this._context.lineTo(x, y); break;
      }
    }
  };

  function curveLinear(context) {
    return new Linear(context);
  }

  function x$1(p) {
    return p[0];
  }

  function y$1(p) {
    return p[1];
  }

  function line() {
    var x = x$1,
        y = y$1,
        defined = constant$3(true),
        context = null,
        curve = curveLinear,
        output = null;

    function line(data) {
      var i,
          n = data.length,
          d,
          defined0 = false,
          buffer;

      if (context == null) output = curve(buffer = path());

      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) output.lineStart();
          else output.lineEnd();
        }
        if (defined0) output.point(+x(d, i, data), +y(d, i, data));
      }

      if (buffer) return output = null, buffer + "" || null;
    }

    line.x = function(_) {
      return arguments.length ? (x = typeof _ === "function" ? _ : constant$3(+_), line) : x;
    };

    line.y = function(_) {
      return arguments.length ? (y = typeof _ === "function" ? _ : constant$3(+_), line) : y;
    };

    line.defined = function(_) {
      return arguments.length ? (defined = typeof _ === "function" ? _ : constant$3(!!_), line) : defined;
    };

    line.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };

    line.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };

    return line;
  }

  function point$2(that, x, y) {
    that._context.bezierCurveTo(
      (2 * that._x0 + that._x1) / 3,
      (2 * that._y0 + that._y1) / 3,
      (that._x0 + 2 * that._x1) / 3,
      (that._y0 + 2 * that._y1) / 3,
      (that._x0 + 4 * that._x1 + x) / 6,
      (that._y0 + 4 * that._y1 + y) / 6
    );
  }

  function Basis(context) {
    this._context = context;
  }

  Basis.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 =
      this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 3: point$2(this, this._x1, this._y1); // proceed
        case 2: this._context.lineTo(this._x1, this._y1); break;
      }
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x, y) {
      x = +x, y = +y;
      switch (this._point) {
        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
        case 1: this._point = 2; break;
        case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
        default: point$2(this, x, y); break;
      }
      this._x0 = this._x1, this._x1 = x;
      this._y0 = this._y1, this._y1 = y;
    }
  };

  function curveBasis(context) {
    return new Basis(context);
  }

  /* eslint-disable no-use-before-define */
  var gradient; // Utils.

  /**
   * Calculate wave point coordinates.
   * @param { Number } r the base circle radius
   * @param { Number } alpha circle rotation delay
   * @param { Number } beta circle rotation speed
   * @param { Number } x0 initial x position
   * @param { Number } y0 initial y position
   * @param { Number } t time
   * @return { Array } wave point coordinates
   */

  function getWavePoints(r, alpha, beta, x0, y0, t) {
    var arg = alpha * x0 + beta * t;
    var x = x0 + r * Math.cos(arg);
    var y = y0 + r * Math.sin(arg);
    return [x, y];
  }
  /**
   * Makes the wave points and draws the wine.
   * @param { Number } time time ideally at each tick.
   * @returns { Array } 2d array of x, y coordinates.
   */


  function makeWave(time) {
    // 1) We get an array of n wave points and save it in state
    // for the draw function to feed from.
    state.bottleWave.wavePoints = range(state.bottleWave.n).map(function (d, i) {
      // For each point (indexed from 0 to n), we add
      // a few parameters. x0 and y0 decide the position.
      var x0 = state.bottleWave.xWaveScale(d);
      var y0 = (1 - state.bottleWave.lift) * state.glassBottle.bottleBox.height; // The main point generation function, which sets x and y
      // based on the time passed in.

      var xy = getWavePoints(state.bottleWave.r, state.bottleWave.waveAlpha, 1.5, x0, y0, time * 5); // The first and the last point are pinned to the sides.

      if (i === 0) xy[0] = state.glassBottle.bottleBox.x;
      if (i === state.bottleWave.n - 1) xy[0] = state.glassBottle.bottleBox.width;
      return xy;
    }); // 2) Kick off the rendering at each tick.

    renderBottleWave();
  }
  /**
   * Kicks of the wine wave draw on each tick.
   * Passes in the time at each tick implicitly.
   */


  function startWave() {
    // Throttle the ticker if necessary.
    // gsap.ticker.fps(30);
    gsapWithCSS.ticker.add(makeWave);
  }

  function stopWave() {
    gsapWithCSS.ticker.remove(makeWave);
  }
  /**
   * Little additional tween every time the user scrolls
   * to kickstart and slowly decay the wave.
   */


  function decayWave() {
    gsapWithCSS.timeline().to(state.bottleWave, {
      r: 10,
      duration: 0.2
    }).to(state.bottleWave, {
      r: 1,
      duration: 2
    });
  } // Tween and draw.


  function drawBottleWave(ctx, path, t) {
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save();
    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale); // Clip path.

    ctx.beginPath();
    state.bottleWave.waveLine.context(ctx)(state.bottleWave.wavePoints);
    ctx.lineTo(state.width, state.height);
    ctx.lineTo(0, state.height);
    ctx.closePath();
    ctx.clip(); // Background.

    ctx.fill(path);
    ctx.restore();
  }

  function renderBottleWave() {
    requestAnimationFrame(function () {
      state.ctx.bottleWave.save();
      state.ctx.bottleWave.fillStyle = gradient;
      drawBottleWave(state.ctx.bottleWave, state.bottleWave.bottlePath, state.transform.shape);
      state.ctx.bottleWave.restore();
    });
  }

  function defineTweenBottleWave(liftStart, liftTarget) {
    // The wave's x scale and line generator.
    state.bottleWave.xWaveScale = point$1().domain(range(state.bottleWave.n)).range([0, state.width]);
    state.bottleWave.waveLine = line().x(function (d) {
      return d[0];
    }).y(function (d) {
      return d[1];
    }).curve(curveBasis);
    state.bottleWave.waveAlpha = state.width / state.height < 0.5 ? 1 : 5; // The bottle's fill.

    gradient = getGradient(state.bottleColour.base); // Set up timeline.
    // On scroll the lift gets updated, which startWave's
    // canvas draw function picks up to lift the waving wave.
    // Note the lift's start and target are arguments as this tween is being
    // built in two situations.

    var tl = gsapWithCSS.timeline({
      onStart: startWave,
      onUpdate: decayWave
    });
    var lift = gsapWithCSS.fromTo(state.bottleWave, {
      lift: liftStart
    }, {
      lift: liftTarget
    });
    return tl.add(lift);
  }

  function tweenBottleWave() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('bottleWave');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.bottleWave) state.tween.bottleWave.kill();
    state.tween.bottleWave = defineTweenBottleWave(-0.1, 0.6);
    state.tween.bottleWave.totalProgress(progress);
  }

  function drawScape(ctx, img, t, alpha) {
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save();
    ctx.globalAlpha = alpha;
    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale);
    ctx.drawImage(img, 0, 0, img.width, img.height);
    ctx.restore();
  }

  function renderScape() {
    requestAnimationFrame(function () {
      return drawScape(state.ctx.scape, state.scape.image, state.transform.scape, state.scape.alpha);
    });
  }

  function defineTweenWineScape() {
    var tl = gsapWithCSS.timeline({
      onUpdate: renderScape
    });
    var imagealpha = gsapWithCSS.fromTo(state.scape, {
      alpha: 0
    }, {
      alpha: 1
    });
    return tl.add(imagealpha, 0);
  }

  function tweenWineScape() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('wineScape');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.wineScape) state.tween.wineScape.kill();
    state.tween.wineScape = defineTweenWineScape();
    state.tween.wineScape.totalProgress(progress);
  }

  function drawBottle(ctx, path, t) {
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save();
    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale);
    ctx.beginPath();

    for (var i = 0; i < path.length; i++) {
      var segment = path[i];
      var l = segment.length;
      ctx.moveTo(segment[0], segment[1]);

      for (var j = 2; j < l; j += 6) {
        ctx.bezierCurveTo(segment[j], segment[j + 1], segment[j + 2], segment[j + 3], segment[j + 4], segment[j + 5]);
      }

      if (segment.closed) {
        ctx.closePath();
      }
    }

    ctx.stroke();
    ctx.restore();
  }

  function renderBottle() {
    requestAnimationFrame(function () {
      // We need to draw on both contexts here, as the tween doesn't only cover
      // paramaters for the glassBottle but also the alpha for the scape context.
      drawScape(state.ctx.scape, state.scape.image, state.transform.scape, state.scape.alpha);
      state.ctx.glassBottle.save();
      state.ctx.glassBottle.strokeStyle = state.glassBottle.colour;
      drawBottle(state.ctx.glassBottle, state.glassBottle.path, state.transform.shape);
      state.ctx.glassBottle.restore();
    });
  }

  function defineTweenGlassBottle() {
    var tl = gsapWithCSS.timeline({
      onUpdate: renderBottle
    });
    var morph = gsapWithCSS.to('#glass-path', {
      morphSVG: {
        shape: '#bottle-path',
        map: 'complexity',
        updateTarget: false,
        render: function render(path) {
          state.glassBottle.path = path;
        }
      }
    });
    var colourvalue = gsapWithCSS.fromTo(state.glassBottle, {
      colour: 'rgba(0, 0, 0, 0)'
    }, {
      colour: 'rgba(0, 0, 0, 1)',
      ease: 'circ.out'
    });
    var retransform = gsapWithCSS.fromTo(state.transform.shape, {
      x: state.transform.scape.x,
      y: state.transform.scape.y,
      scale: state.transform.scape.scale
    }, {
      x: state.transform.bottle.x,
      y: state.transform.bottle.y,
      scale: state.transform.bottle.scale,
      ease: 'none'
    });
    var imagealpha = gsapWithCSS.fromTo(state.scape, {
      alpha: 1
    }, {
      alpha: state.scape.alphaTarget
    });
    return tl.add(retransform, 0).add(colourvalue, 0).add(morph, 0).add(imagealpha, 0);
  }

  function tweenGlassBottle() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('glassBottle');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.glassBottle) state.tween.glassBottle.kill();
    state.tween.glassBottle = defineTweenGlassBottle();
    state.tween.glassBottle.totalProgress(progress);
  }

  /**
   * Draws a path at a certain offset of its full length.
   * Can nicely be used to animate a path.
   * @param { Object } ctx Context to draw on
   * @param { Array|String} paths Path(s) to draw
   * @param { Object } t transform to apply to context
   * @param { Number } length Max length of the (longest) path
   * @param { Number } offset Length of the path to draw (ideally animated)
   */

  function drawTextPath(ctx, paths, t, length, offset) {
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save();
    state.ctx.bottleText.strokeStyle = state.bottleText.colour;
    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale);
    ctx.setLineDash([length - offset, offset]); // eslint-disable-next-line no-unused-expressions

    Array.isArray(paths) ? paths.forEach(function (path) {
      return ctx.stroke(path);
    }) : ctx.stroke(paths);
    ctx.restore();
  }

  function renderBottleText() {
    requestAnimationFrame(function () {
      state.ctx.bottleText.save();
      state.ctx.bottleText.lineWidth = 0.7;
      drawTextPath(state.ctx.bottleText, state.bottleText.paths, state.transform.shape, state.bottleText.maxLength, state.bottleText.dashOffset);
      state.ctx.bottleText.restore();
    });
  }

  function defineTweenBottleText(offsetDraw, alphaStart, alphaTarget) {
    var tl = gsapWithCSS.timeline({
      onUpdate: renderBottleText
    });
    var offsetIn = gsapWithCSS.fromTo(state.bottleText, {
      dashOffset: state.bottleText.maxLength
    }, {
      dashOffset: 0
    });
    var offsetOut = gsapWithCSS.fromTo(state.bottleText, {
      dashOffset: 0
    }, {
      dashOffset: state.bottleText.maxLength
    });
    var colourvalue = gsapWithCSS.fromTo(state.bottleText, {
      colour: "rgba(0, 0, 0, ".concat(alphaStart, ")")
    }, {
      colour: "rgba(0, 0, 0, ".concat(alphaTarget, ")"),
      ease: 'circ.out'
    });
    return tl.add(offsetDraw ? offsetIn : offsetOut).add(colourvalue, 0);
  }

  function tweenBottleText() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('bottleText');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.bottleText) state.tween.bottleText.kill();
    state.tween.bottleText = defineTweenBottleText(true, 0, 1);
    state.tween.bottleText.totalProgress(progress);
  }

  /* eslint-disable prefer-destructuring */
  state.lolli.area = {
    top: undefined,
    right: undefined,
    bottom: undefined,
    left: undefined,
    height: undefined,
    width: undefined
  }; // Utils.

  function setDimensions() {
    // Set the lolli area.
    var bottle = state.glassBottle; // Just for shortness.
    // Horizontal dims.

    state.lolli.area.left = Math.floor(bottle.bottleBox.width * 1.05);
    state.lolli.area.width = Math.floor(state.width / state.transform.bottle.scale * bottle.bottleLeft + bottle.bottleBox.width);
    state.lolli.area.right = Math.floor(state.lolli.area.left + state.lolli.area.width); // Vertical dims.

    state.lolli.area.top = Math.floor(bottle.bottleBox.height * 0.5);
    state.lolli.area.bottom = Math.floor(bottle.bottleBox.height * 0.9);
    state.lolli.area.height = Math.floor(state.lolli.area.bottom - state.lolli.area.top); // Set the lolli radius' target value.

    state.lolli.radiusTarget = 5 / state.transform.bottle.scale; // Set the lolly scales.

    state.lolli.x = linear$1([0, 1], [state.lolli.area.left, state.lolli.area.right]);
    state.lolli.y = point$1().domain(state.lolli.values).range([state.lolli.area.top, state.lolli.area.bottom]);
  } // Canvas draw function.


  function drawLolliChart(ctx, t) {
    var rough = state.rough.chart;
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save();
    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale);
    state.lolli.values.forEach(function (d, i) {
      var datapoint = state.lolli.data[d];
      var xValue = datapoint.value;
      var length = state.lolli.data[d].text.length;
      var offset = state.lolli.data[d].text.offset;
      var paths = state.lolli.data[d].text.paths; // Line.

      ctx.beginPath();
      rough.line(state.lolli.x(0), state.lolli.y(d), state.lolli.x(xValue), state.lolli.y(d), {
        seed: i + 1,
        roughness: 0.5
      }); // ctx.moveTo(state.lolli.x(0), state.lolli.y(d));
      // ctx.lineTo(state.lolli.x(xValue), state.lolli.y(d));

      ctx.stroke(); // Circle.

      ctx.beginPath();
      ctx.arc(state.lolli.x(xValue), state.lolli.y(d), datapoint.radius, 0, 2 * Math.PI);
      ctx.fill(); // Text.

      ctx.save();
      ctx.translate(state.lolli.x(0), state.lolli.y(d) + 2);
      ctx.lineWidth = 0.5;
      ctx.setLineDash([length - offset, offset]);
      paths.forEach(function (path) {
        return ctx.stroke(path);
      });
      ctx.restore();
    });
    ctx.restore();
  }

  function renderLolliChart() {
    requestAnimationFrame(function () {
      return drawLolliChart(state.ctx.chart, state.transform.bottle);
    });
  } // As tweenLolliUpdate and blackbos are set later, it seems to change
  // all initial values (.values[0]) as set by this tweenLolliChart. 🤷‍♂️


  function forceInitialValues() {
    Object.keys(state.lolli.data).forEach(function (d) {
      var datapoint = state.lolli.data[d];
      datapoint.value = datapoint.values[0];
      datapoint.radius = 0;
      datapoint.text.offset = datapoint.text.length;
    });
  }

  function defineTweenLolliChart() {
    setDimensions(); // Things to tween.

    var tl = gsapWithCSS.timeline({
      onStart: forceInitialValues,
      onUpdate: renderLolliChart
    }); // Loop through all lolli-data (which is an object).

    Object.keys(state.lolli.data).forEach(function (d) {
      // Datapoint to tween around with.
      var datapoint = state.lolli.data[d]; // Set up the tweens.

      var valueTween = gsapWithCSS.fromTo(datapoint, {
        value: datapoint.values[0]
      }, {
        value: datapoint.values[1]
      });
      var radiusTween = gsapWithCSS.fromTo(datapoint, {
        radius: 0
      }, {
        radius: state.lolli.radiusTarget
      });
      var offsetTween = gsapWithCSS.fromTo(datapoint.text, {
        offset: datapoint.text.length
      }, {
        offset: 0
      }); // Add the tweens to the timeline.
      // "<" start or ">" end of previous tween.

      tl.add(valueTween, '>').add(radiusTween, '<').add(offsetTween, '>');
    });
    return tl;
  }

  function tweenLolliChart() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('lolliChart');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.lolliChart) state.tween.lolliChart.kill();
    state.tween.lolliChart = defineTweenLolliChart();
    state.tween.lolliChart.totalProgress(progress);
  }

  function defineTweenLolliUpdate1() {
    // Things to tween.
    var tl = gsapWithCSS.timeline({
      onUpdate: renderLolliChart
    }); // Loop through all lolli-data (which is an object).

    Object.keys(state.lolli.data).forEach(function (d) {
      // Datapoint to tween around with.
      var datapoint = state.lolli.data[d]; // Set up the tweens.

      var valueTween = gsapWithCSS.fromTo(datapoint, {
        value: datapoint.values[1]
      }, {
        value: datapoint.values[2]
      }); // Add the tweens to the timeline.
      // "<" start or ">" end of previous tween.

      tl.add(valueTween, '<');
    });
    return tl;
  }

  function defineTweenLolliUpdate2() {
    // Things to tween.
    var tl = gsapWithCSS.timeline({
      onUpdate: renderLolliChart
    }); // Loop through all lolli-data (which is an object).

    Object.keys(state.lolli.data).forEach(function (d) {
      // Datapoint to tween around with.
      var datapoint = state.lolli.data[d]; // Set up the tweens.

      var valueTween = gsapWithCSS.fromTo(datapoint, {
        value: datapoint.values[2]
      }, {
        value: datapoint.values[3]
      }); // Add the tweens to the timeline.
      // "<" start or ">" end of previous tween.

      tl.add(valueTween, '<');
    });
    return tl;
  }

  function defineTweenLolliUpdate3() {
    // Things to tween.
    var tl = gsapWithCSS.timeline({
      onUpdate: renderLolliChart
    }); // Loop through all lolli-data (which is an object).

    Object.keys(state.lolli.data).forEach(function (d) {
      // Datapoint to tween around with.
      var datapoint = state.lolli.data[d]; // Set up the tweens.

      var valueTween = gsapWithCSS.fromTo(datapoint, {
        value: datapoint.values[3]
      }, {
        value: datapoint.values[4]
      });
      var radiusTween = gsapWithCSS.fromTo(datapoint, {
        radius: state.lolli.radiusTarget
      }, {
        radius: 0
      });
      tl.add(valueTween, '>').add(radiusTween, '<');

      if (d === 'quality') {
        var offsetTween = gsapWithCSS.fromTo(datapoint.text, {
          offset: 0
        }, {
          offset: datapoint.text.length
        });
        tl.add(offsetTween, '>');
      }
    });
    return tl;
  }

  function tweenLolliUpdate1() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('lolliUpdate1');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.lolliUpdate1) state.tween.lolliUpdate1.kill();
    state.tween.lolliUpdate1 = defineTweenLolliUpdate1();
    state.tween.lolliUpdate1.totalProgress(progress);
  }

  function tweenLolliUpdate2() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('lolliUpdate2');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.lolliUpdate2) state.tween.lolliUpdate2.kill();
    state.tween.lolliUpdate2 = defineTweenLolliUpdate2();
    state.tween.lolliUpdate2.totalProgress(progress);
  }

  function tweenLolliUpdate3() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('lolliUpdate3');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.lolliUpdate3) state.tween.lolliUpdate3.kill();
    state.tween.lolliUpdate3 = defineTweenLolliUpdate3();
    state.tween.lolliUpdate3.totalProgress(progress);
  }

  /* eslint-disable no-param-reassign */

  var inputProperties = ['alcohol', 'acid', 'chloride'];
  var outputProperties = ['quality'];
  var letterHeight;
  var bottleWidth;
  var input = {
    p1: {
      x: 0
    },
    p2: {
      x: 0
    },
    yEndAdd: [0, 0, 0],
    arrow: {
      size: 0
    }
  };
  var output = {
    p1: {
      x: 0
    },
    p2: {
      x: 0
    },
    y: {
      y: 0
    },
    arrow: {
      size: 0
    },
    yAdd: undefined
  }; // Canvas draw function.

  function drawBlackBox(ctx, t) {
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save(); // Scaling and translating with some added "pulse" to
    // suck up the predictors and spit out the dependent.

    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale); // Draw box (animate)

    ctx.strokeStyle = 'white';
    ctx.lineWidth = 0.1;
    state.blackBox.box.paths.forEach(function (path) {
      ctx.setLineDash([state.blackBox.box.length - state.blackBox.box.offset, state.blackBox.box.offset]);
      ctx.stroke(path);
    }); // Draw text (don't animate).

    ctx.strokeStyle = 'black';
    ctx.lineWidth = 0.5;
    state.blackBox.model.paths.forEach(function (path) {
      return ctx.stroke(path);
    });
    ctx.restore();
  }

  function drawProperties(ctx, t, inputVars, outputVars) {
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save();
    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale); // Draw input properties.

    inputVars.forEach(function (d, i) {
      var paths = state.lolli.data[d].text.paths;
      ctx.save();
      ctx.translate(state.lolli.x(0), state.lolli.y(d) + 2); // Draw text

      ctx.lineWidth = 0.5;
      paths.forEach(function (path) {
        return ctx.stroke(path);
      }); // Draw line

      ctx.lineWidth = 1.25;
      var p0 = {
        x: 0,
        y: letterHeight * 0.5
      };
      var p1 = {
        x: input.p1.x,
        y: letterHeight * 0.5
      };
      var p2 = {
        x: input.p2.x,
        y: letterHeight * 0.5 + input.yEndAdd[i]
      };
      ctx.strokeStyle = 'white';
      bezWithArrowheads(ctx, p0, p1, p2, undefined, input.arrow.size, false, true);
      ctx.restore();
    }); // Draw output property (or properties).

    outputVars.forEach(function (d) {
      var length = state.lolli.data[d].text.length;
      var offset = state.lolli.data[d].text.offset;
      var paths = state.lolli.data[d].text.paths;
      ctx.save();
      ctx.translate(state.lolli.x(0), state.lolli.y(d) + 2); // Draw text

      ctx.lineWidth = 0.5;
      ctx.setLineDash([length - offset, offset]);
      paths.forEach(function (path) {
        return ctx.stroke(path);
      }); // Draw line

      ctx.lineWidth = 1.25;
      var p0 = {
        x: -bottleWidth * 0.33,
        y: -letterHeight * 0.5 + output.yAdd
      };
      var p1 = {
        x: output.p1.x,
        y: output.y.y
      };
      var p2 = {
        x: output.p2.x,
        y: output.y.y
      };
      ctx.strokeStyle = 'white';
      bezWithArrowheads(ctx, p0, p1, p2, undefined, output.arrow.size, false, true);
      ctx.restore();
    });
    ctx.restore();
  }

  function renderBlackBox() {
    requestAnimationFrame(function () {
      drawBlackBox(state.ctx.blackBox, state.transform.bottle);
      drawProperties(state.ctx.chart, state.transform.bottle, inputProperties, outputProperties);
    });
  } // Tween function.


  function defineTweenBlackBox(type) {
    // Things to tween.
    var tl = gsapWithCSS.timeline({
      onUpdate: renderBlackBox
    }); // Arrow data.

    bottleWidth = state.glassBottle.bottleBox.width;
    letterHeight = max(state.lolli.data[outputProperties[0]].text.dims, function (d) {
      return d.height;
    });
    output.yAdd = -state.lolli.y.step() * 0.1;

    if (type === 'arrowIn') {
      // Box path.
      var boxoffset = gsapWithCSS.fromTo(state.blackBox.box, {
        offset: state.blackBox.box.length
      }, {
        offset: 0
      }); // Tween add.

      tl.add(boxoffset); // Input arrow tweens.

      var p1tween = gsapWithCSS.fromTo(input.p1, {
        x: 0
      }, {
        x: -bottleWidth * 0.125
      });
      var p2tween = gsapWithCSS.fromTo(input.p2, {
        x: 0
      }, {
        x: -bottleWidth * 0.33
      });
      var yEndTween = gsapWithCSS.fromTo(input.yEndAdd, [0, 0, 0], [+state.lolli.y.step() * 0.6, +state.lolli.y.step() * 0.1, -state.lolli.y.step() * 0.33]);
      var arrowtween = gsapWithCSS.fromTo(input.arrow, {
        size: 0
      }, {
        size: 5
      }); // Tween add.

      tl.add(p1tween, '>');
      tl.add(p2tween, '<');
      tl.add(yEndTween, '<');
      tl.add(arrowtween, '<');
    }

    if (type === 'arrowOut') {
      // Output arrow tweens.
      var p1outtween = gsapWithCSS.fromTo(output.p1, {
        x: -bottleWidth * 0.33
      }, {
        x: -bottleWidth * 0.2
      });
      var p2outtween = gsapWithCSS.fromTo(output.p2, {
        x: -bottleWidth * 0.33
      }, {
        x: -5
      });
      var ytween = gsapWithCSS.fromTo(output.y, {
        y: -letterHeight * 0.5 + output.yAdd
      }, {
        y: letterHeight * 0.5
      });
      var arrowOutTween = gsapWithCSS.fromTo(output.arrow, {
        size: 0
      }, {
        size: 5
      }); // Tween add.

      tl.add(p1outtween, '>');
      tl.add(p2outtween, '<');
      tl.add(ytween, '<');
      tl.add(arrowOutTween, '<'); // Path dash offset.

      var datapoint = state.lolli.data.quality;
      var offsettween = gsapWithCSS.fromTo(datapoint.text, {
        offset: datapoint.text.length
      }, {
        offset: 0
      }); // Tween add.

      tl.add(offsettween, '<');
    }

    return tl;
  }

  var arrows = ['arrowIn', 'arrowOut'];

  function tweenBlackBox() {
    arrows.forEach(function (d) {
      // Capture current progress.
      var scroll = ScrollTrigger.getById(d);
      var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

      if (state.tween[d]) state.tween[d].kill();
      state.tween[d] = defineTweenBlackBox(d);
      state.tween[d].totalProgress(progress);
    });
  }

  /* eslint-disable no-param-reassign */

  var inputProperties$1 = ['alcohol', 'acid', 'chloride'];
  var outputProperties$1 = ['quality'];
  var letterHeight$1;
  var bottleWidth$1;
  var input$1 = {
    p1: {
      x: 0
    },
    p2: {
      x: 0
    },
    yEndAdd: [0, 0, 0],
    arrow: {
      size: 0
    },
    paths: {
      length: 0,
      offset: 0
    }
  };
  var output$1 = {
    p1: {
      x: 0
    },
    p2: {
      x: 0
    },
    y: {
      y: 0
    },
    arrow: {
      size: 0
    },
    yAdd: undefined
  }; // Utils.

  function bezWithArrowheads$1(ctx, p0, p1, p2, p3, arrowLength, hasStartArrow, hasEndArrow) {
    var x;
    var y;
    var norm;
    var ex;
    var ey;

    function pointsToNormalisedVec(p, pp) {
      norm.y = pp.x - p.x;
      norm.x = -(pp.y - p.y);
      var len = Math.sqrt(norm.x * norm.x + norm.y * norm.y);
      norm.x /= len;
      norm.y /= len;
      return norm;
    }

    var arrowWidth = arrowLength / 2;
    norm = {}; // defaults to true for both arrows if arguments not included

    hasStartArrow = hasStartArrow === undefined || hasStartArrow === null ? true : hasStartArrow;
    hasEndArrow = hasEndArrow === undefined || hasEndArrow === null ? true : hasEndArrow;
    ctx.beginPath();
    ctx.moveTo(p0.x, p0.y);

    if (p3 === undefined) {
      ctx.quadraticCurveTo(p1.x, p1.y, p2.x, p2.y);
      ex = p2.x; // get end point

      ey = p2.y;
      norm = pointsToNormalisedVec(p1, p2);
    } else {
      ctx.bezierCurveTo(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
      ex = p3.x; // get end point

      ey = p3.y;
      norm = pointsToNormalisedVec(p2, p3);
    }

    if (hasEndArrow) {
      x = arrowWidth * norm.x + arrowLength * -norm.y;
      y = arrowWidth * norm.y + arrowLength * norm.x;
      ctx.moveTo(ex + x, ey + y);
      ctx.lineTo(ex, ey);
      x = arrowWidth * -norm.x + arrowLength * -norm.y;
      y = arrowWidth * -norm.y + arrowLength * norm.x;
      ctx.lineTo(ex + x, ey + y);
    }

    if (hasStartArrow) {
      norm = pointsToNormalisedVec(p0, p1);
      x = arrowWidth * norm.x - arrowLength * -norm.y;
      y = arrowWidth * norm.y - arrowLength * norm.x;
      ctx.moveTo(p0.x + x, p0.y + y);
      ctx.lineTo(p0.x, p0.y);
      x = arrowWidth * -norm.x - arrowLength * -norm.y;
      y = arrowWidth * -norm.y - arrowLength * norm.x;
      ctx.lineTo(p0.x + x, p0.y + y);
    }

    ctx.stroke();
  } // Canvas draw function.


  function drawBlackBox$1(ctx, t) {
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save(); // Scaling and translating with some added "pulse" to
    // suck up the predictors and spit out the dependent.

    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale); // Draw box (animate)

    ctx.strokeStyle = 'white';
    ctx.lineWidth = 0.1;
    state.blackBox.box.paths.forEach(function (path) {
      ctx.setLineDash([state.blackBox.box.length - state.blackBox.box.offset, state.blackBox.box.offset]);
      ctx.stroke(path);
    }); // Draw text (don't animate).

    ctx.strokeStyle = 'black';
    ctx.lineWidth = 0.5;
    state.blackBox.model.paths.forEach(function (path) {
      return ctx.stroke(path);
    });
    ctx.restore();
  }

  function drawProperties$1(ctx, t, inputVars, outputVars) {
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save();
    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale); // Draw input properties.

    inputVars.forEach(function (d, i) {
      var paths = state.lolli.data[d].text.paths;
      ctx.save();
      ctx.translate(state.lolli.x(0), state.lolli.y(d) + 2); // Draw text

      ctx.lineWidth = 0.5;
      ctx.setLineDash([input$1.paths.length - input$1.paths.offset, input$1.paths.offset]);
      paths.forEach(function (path) {
        return ctx.stroke(path);
      }); // Draw line

      ctx.lineWidth = 1.25;
      var p0 = {
        x: 0,
        y: letterHeight$1 * 0.5
      };
      var p1 = {
        x: input$1.p1.x,
        y: letterHeight$1 * 0.5
      };
      var p2 = {
        x: input$1.p2.x,
        y: letterHeight$1 * 0.5 + input$1.yEndAdd[i]
      };
      ctx.strokeStyle = 'white';
      bezWithArrowheads$1(ctx, p0, p1, p2, undefined, input$1.arrow.size, false, true);
      ctx.restore();
    }); // Draw output property (or properties).

    outputVars.forEach(function (d) {
      var length = state.lolli.data[d].text.length;
      var offset = state.lolli.data[d].text.offset;
      var paths = state.lolli.data[d].text.paths;
      ctx.save();
      ctx.translate(state.lolli.x(0), state.lolli.y(d) + 2); // Draw text

      ctx.lineWidth = 0.5;
      ctx.setLineDash([length - offset, offset]);
      paths.forEach(function (path) {
        return ctx.stroke(path);
      }); // Draw line

      ctx.lineWidth = 1.25;
      var p0 = {
        x: -bottleWidth$1 * 0.33,
        y: -letterHeight$1 * 0.5 + output$1.yAdd
      };
      var p1 = {
        x: output$1.p1.x,
        y: output$1.y.y
      };
      var p2 = {
        x: output$1.p2.x,
        y: output$1.y.y
      };
      ctx.strokeStyle = 'white';
      bezWithArrowheads$1(ctx, p0, p1, p2, undefined, 5, false, true);
      ctx.restore();
    });
    ctx.restore();
  }

  function renderCleanup() {
    requestAnimationFrame(function () {
      drawBlackBox$1(state.ctx.blackBox, state.transform.bottle);
      drawProperties$1(state.ctx.chart, state.transform.bottle, inputProperties$1, outputProperties$1);
    });
  } // Tween function.


  function defineTweenCleanup() {
    // Things to tween.
    var tl = gsapWithCSS.timeline({
      onUpdate: renderCleanup
    }); // Arrown tweens.

    bottleWidth$1 = state.glassBottle.bottleBox.width;
    letterHeight$1 = max(state.lolli.data[outputProperties$1[0]].text.dims, function (d) {
      return d.height;
    });
    output$1.yAdd = -state.lolli.y.step() * 0.1; // Input arrow tweens.

    var p1tween = gsapWithCSS.fromTo(input$1.p1, {
      x: -bottleWidth$1 * 0.125
    }, {
      x: 0
    });
    var p2tween = gsapWithCSS.fromTo(input$1.p2, {
      x: -bottleWidth$1 * 0.33
    }, {
      x: 0
    });
    var yEndTween = gsapWithCSS.fromTo(input$1.yEndAdd, [+state.lolli.y.step() * 0.6, +state.lolli.y.step() * 0.1, -state.lolli.y.step() * 0.33], [0, 0, 0]);
    var arrowtween = gsapWithCSS.fromTo(input$1.arrow, {
      size: 5
    }, {
      size: 0
    }); // Path dash offset.

    input$1.paths.length = max(inputProperties$1.map(function (d) {
      return state.lolli.data[d].text.length;
    }));
    var offsettween1 = gsapWithCSS.fromTo(input$1.paths, {
      offset: 0
    }, {
      offset: input$1.paths.length
    });
    tl.add(offsettween1, '<'); // Tween add.

    tl.add(p1tween, '<');
    tl.add(p2tween, '<');
    tl.add(yEndTween, '<');
    tl.add(arrowtween, '<'); // Output arrow tweens.

    var p1outtween = gsapWithCSS.fromTo(output$1.p1, {
      x: -bottleWidth$1 * 0.2
    }, {
      x: -bottleWidth$1 * 0.33
    });
    var p2outtween = gsapWithCSS.fromTo(output$1.p2, {
      x: -5
    }, {
      x: -bottleWidth$1 * 0.33
    });
    var ytween = gsapWithCSS.fromTo(output$1.y, {
      y: letterHeight$1 * 0.5
    }, {
      y: -letterHeight$1 * 0.5 + output$1.yAdd
    });
    var arrowOutTween = gsapWithCSS.fromTo(output$1.arrow, {
      size: 5
    }, {
      size: 0
    }); // Tween add.

    tl.add(p1outtween, '<');
    tl.add(p2outtween, '<');
    tl.add(ytween, '<');
    tl.add(arrowOutTween, '<'); // Path dash offset.

    var datapoint = state.lolli.data.quality;
    var offsettween = gsapWithCSS.fromTo(datapoint.text, {
      offset: 0
    }, {
      offset: datapoint.text.length
    }); // Tween add.

    tl.add(offsettween, '<'); // Box path.

    var boxoffset = gsapWithCSS.fromTo(state.blackBox.box, {
      offset: 0
    }, {
      offset: state.blackBox.box.length
    }); // Tween add.

    tl.add(boxoffset, '<');
    return tl;
  }

  function tweenCleanup() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('cleanup');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.cleanup) state.tween.cleanup.kill();
    state.tween.cleanup = defineTweenCleanup();
    state.tween.cleanup.totalProgress(progress);
  }

  /* eslint-disable no-use-before-define */

  function tweenBottleEmpty() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('bottleEmpty');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.bottleEmpty) state.tween.bottleEmpty.kill();
    state.tween.bottleEmpty = defineTweenBottleWave(0.6, -0.1);
    state.tween.bottleEmpty.totalProgress(progress);
  }

  /* eslint-disable no-use-before-define */

  function tweenBottleTextOut() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('bottleTextOut');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.bottleTextOut) state.tween.bottleTextOut.kill();
    state.tween.bottleTextOut = defineTweenBottleText(false, 1, 0);
    state.tween.bottleTextOut.totalProgress(progress);
  }

  // in the update function to set up the scroll triggers).

  var animalPaths = [{
    id: '#bottle-path',
    name: 'bottle'
  }, {
    id: '#animalPig',
    name: 'animalPig'
  }, {
    id: '#animalCroc',
    name: 'animalCroc'
  }, {
    id: '#animalGiraffe',
    name: 'animalGiraffe'
  }, {
    id: '#animalSloth1',
    name: 'animalSloth1'
  }, {
    id: '#animalWhale',
    name: 'animalWhale'
  }, {
    id: '#animalBird',
    name: 'animalBird'
  }, {
    id: '#animalSloth2',
    name: 'animalSloth2'
  }, {
    id: '#bottle-path',
    name: 'bottle'
  }];

  function drawAnimals(ctx, path, t) {
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save();
    ctx.strokeStyle = state.glassBottle.colour;
    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale);
    ctx.beginPath();

    for (var i = 0; i < path.length; i++) {
      var segment = path[i];
      var l = segment.length;
      ctx.moveTo(segment[0], segment[1]);

      for (var j = 2; j < l; j += 6) {
        ctx.bezierCurveTo(segment[j], segment[j + 1], segment[j + 2], segment[j + 3], segment[j + 4], segment[j + 5]);
      }

      if (segment.closed) {
        ctx.closePath();
      }
    }

    ctx.stroke();
    ctx.restore();
  }

  function renderAnimals() {
    requestAnimationFrame(function () {
      drawAnimals(state.ctx.glassBottle, state.glassBottle.path, state.transform.shape);
    });
  }

  function defineTweenAnimals(from, to) {
    // The timeline.
    var tl = gsapWithCSS.timeline({
      onUpdate: renderAnimals
    }); // The path morph.

    var morph = gsapWithCSS.to(from.id, {
      morphSVG: {
        shape: to.id,
        map: 'complexity',
        updateTarget: false,
        render: function render(path) {
          state.glassBottle.path = path;
        }
      }
    }); // The path's transforms.

    var trans = gsapWithCSS.fromTo(state.transform.shape, {
      x: state.transform[from.name].x,
      y: state.transform[from.name].y,
      scale: state.transform[from.name].scale
    }, {
      x: state.transform[to.name].x,
      y: state.transform[to.name].y,
      scale: state.transform[to.name].scale,
      ease: 'none'
    });
    tl.add(morph, from.pos).add(trans, '<');
    return tl;
  }

  function tweenAnimals() {
    // Build a tween for each path transition (1 less than
    // the array as each tween has a from and a to path).
    for (var i = 0; i < animalPaths.length - 1; i++) {
      // Get the from and the to element.
      var from = animalPaths[i];
      var to = animalPaths[i + 1]; // Capture current progress.

      var scroll = ScrollTrigger.getById(from.name);
      var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

      if (state.tween[from.name]) state.tween[from.name].kill();
      state.tween[from.name] = defineTweenAnimals(from, to);
      state.tween[from.name].totalProgress(progress);
    }
  }

  /* eslint-disable no-use-before-define */

  function tweenBottleFill() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('bottleFill');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.bottleFill) state.tween.bottleFill.kill();
    state.tween.bottleFill = defineTweenBottleWave(-0.1, 1.05);
    state.tween.bottleFill.totalProgress(progress);
  }

  /* eslint-disable camelcase */

  var colours = state.bottleColour;
  var bottleColours = [{
    name: 'colourGood',
    fromStop0: colours.base.stop0,
    toStop0: colours.good.stop0,
    fromStop1: colours.base.stop1,
    toStop1: colours.good.stop1
  }, {
    name: 'colourBad',
    fromStop0: colours.good.stop0,
    toStop0: colours.bad.stop0,
    fromStop1: colours.good.stop1,
    toStop1: colours.bad.stop1
  }, {
    name: 'colourBase',
    fromStop0: colours.bad.stop0,
    toStop0: colours.base.stop0,
    fromStop1: colours.bad.stop1,
    toStop1: colours.base.stop1
  }]; // The object to tween to and from.

  var colourStops = {
    stop0: null,
    stop1: null
  }; // When scrolling back to start from the end of the story,
  // the bottle wave points are below the bottle from the model.
  // app. We simply set them to above the bottle neck.

  function fillUpBottleWave() {
    state.bottleWave.wavePoints = [[0, -20], [state.width, -20]];
  } // Render.


  function renderBottleColour() {
    requestAnimationFrame(function () {
      // Save contexts.
      state.ctx.bottleWave.save();
      state.ctx.glassBottle.save(); // Set context styles.

      var gradient = getGradient(colourStops);
      state.ctx.bottleWave.fillStyle = gradient;
      state.ctx.glassBottle.strokeStyle = gradient; // Set the bottle wave line to be above bottle.

      fillUpBottleWave(); // Draw.

      drawBottleWave(state.ctx.bottleWave, state.bottleWave.bottlePath, state.transform.shape);
      drawBottle(state.ctx.glassBottle, state.glassBottle.path, state.transform.bottle); // Restore contexts.

      state.ctx.bottleWave.restore();
      state.ctx.glassBottle.restore();
    });
  } // Tween set up.


  function defineTweenBottleColour(col) {
    var tl = gsapWithCSS.timeline({
      onUpdate: renderBottleColour
    });
    var stop0Tween = gsapWithCSS.fromTo(colourStops, {
      stop0: col.fromStop0
    }, {
      stop0: col.toStop0
    });
    var stop1Tween = gsapWithCSS.fromTo(colourStops, {
      stop1: col.fromStop1
    }, {
      stop1: col.toStop1
    });
    return tl.add(stop0Tween).add(stop1Tween, '<');
  }

  function tweenBottleColour() {
    bottleColours.forEach(function (d) {
      // Capture current progress.
      var scroll = ScrollTrigger.getById(d.name);
      var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

      if (state.tween[d.name]) state.tween[d.name].kill();
      state.tween[d.name] = defineTweenBottleColour(d);
      state.tween[d.name].totalProgress(progress);
    });
  }

  /* eslint-disable no-return-assign */

  function gridLayout() {
    var rows = 15;
    var cols = 15;
    var scale = 0.15;
    var points = []; // Add layout to original data.

    function augmentData(baseData, grid) {
      baseData.forEach(function (d, i) {
        d.layout = {
          x: grid[i].x,
          y: grid[i].y,
          scale: grid[i].scale
        };
      });
    } // Layout function.


    function layout(data) {
      // Test.
      if (rows * cols !== data.length) throw Error('data needs to have rows * col length'); // Build layout.

      for (var r = 0; r < rows; r++) {
        for (var c = 0; c < cols; c++) {
          var point = {
            x: Math.round(c / (cols - 1) * 1e5) / 1e5,
            y: Math.round(r / (rows - 1) * 1e5) / 1e5,
            scale: scale
          };
          points.push(point);
        }
      } // Clone and augment original data.


      var dataCloned = data.map(function (d) {
        return lodash_clonedeep(d);
      });
      augmentData(dataCloned, points);
      return dataCloned;
    } // Getters|Setters.


    layout.rows = function (_) {
      return _ ? (rows = _, layout) : rows;
    };

    layout.cols = function (_) {
      return _ ? (cols = _, layout) : cols;
    };

    layout.scale = function (_) {
      return _ ? (scale = _, layout) : scale;
    };

    return layout;
  }

  /* eslint-disable no-param-reassign */
  var smallBottleScale = 0.15;
  var xScale;
  var yScale;
  var gradientGood;
  var gradientBad; // Helper functions.

  function getBaseData(rows, cols) {
    return range(rows * cols).map(function (d, i) {
      return {
        quality: Math.random() < 0.3,
        index: i
      };
    });
  }

  function setScales() {
    // Get scales (also determining the space for our visual)
    var xBottleCorrection = state.glassBottle.bottleBox.width / 2 * smallBottleScale;
    var yBottleCorrection = state.glassBottle.bottleBox.height / 2 * smallBottleScale;
    xScale = linear$1().range([state.width * 0.1 - xBottleCorrection, state.width * 0.9 - xBottleCorrection]);
    yScale = linear$1().range([state.height * 0.1 - yBottleCorrection, state.height * 0.9 - yBottleCorrection]);
  }

  function prepData() {
    // Base Data.
    var num = 10;
    state.bottleGrid.baseData = getBaseData(num, num); // Target data with layout.

    state.bottleGrid.dataTarget = gridLayout().rows(num).cols(num).scale(smallBottleScale)(state.bottleGrid.baseData); // Origin data with layout.

    state.bottleGrid.dataOrigin = state.bottleGrid.dataTarget.map(function (d) {
      return lodash_clonedeep(d);
    });
    state.bottleGrid.dataOrigin.forEach(function (d) {
      d.layout.y = -0.2;
      d.layout.scale = 0;
    }); // Add the initial position of the main bottle.

    state.bottleGrid.dataOrigin[0].layout.x = xScale.invert(state.transform.bottle.x);
    state.bottleGrid.dataOrigin[0].layout.y = yScale.invert(state.transform.bottle.y);
    state.bottleGrid.dataOrigin[0].layout.scale = state.transform.bottle.scale; // Sorted data (prep for sorted tween - this is complex!).
    // 1. Clone the base data and sort it by high - low quality.

    var sortedBaseData = state.bottleGrid.baseData.map(function (d) {
      return lodash_clonedeep(d);
    }).sort(function (a, b) {
      return b.quality - a.quality;
    }); // 2. Augment it with an updated layout.

    state.bottleGrid.dataSorted = gridLayout().rows(num).cols(num).scale(smallBottleScale)(sortedBaseData); // 3. Sort it into their original position.
    // Now we have the elements in orginal order
    // but the layout objects are sorted by quality.

    state.bottleGrid.dataSorted.sort(function (a, b) {
      return a.index - b.index;
    }); // Exit positions (out data).

    state.bottleGrid.dataOut = state.bottleGrid.dataTarget.map(function (d) {
      return lodash_clonedeep(d);
    });
    state.bottleGrid.dataOut.forEach(function (d) {
      d.layout.y = -0.2;
      d.layout.scale = 0;
    });
  } // Drawing functions.


  function drawBottles(ctx, path, points) {
    ctx.clearRect(0, 0, state.width, state.height);
    points.forEach(function (point) {
      var layout = point.layout;
      ctx.save();
      ctx.translate(xScale(layout.x), yScale(layout.y));
      ctx.scale(layout.scale, layout.scale);
      ctx.beginPath();

      for (var i = 0; i < path.length; i++) {
        var segment = path[i];
        var l = segment.length;
        ctx.moveTo(segment[0], segment[1]);

        for (var j = 2; j < l; j += 6) {
          ctx.bezierCurveTo(segment[j], segment[j + 1], segment[j + 2], segment[j + 3], segment[j + 4], segment[j + 5]);
        }

        if (segment.closed) {
          ctx.closePath();
        }
      }

      ctx.stroke();
      ctx.restore();
    });
  }

  function drawBottleWaves(ctx, path, points) {
    ctx.clearRect(0, 0, state.width, state.height);
    points.forEach(function (point) {
      var layout = point.layout;
      ctx.save();
      ctx.fillStyle = point.quality ? gradientGood : gradientBad;
      ctx.translate(xScale(layout.x), yScale(layout.y));
      ctx.scale(layout.scale, layout.scale); // Clip path.

      ctx.beginPath();
      ctx.moveTo(0, 0);
      ctx.lineTo(state.width, 0);
      ctx.lineTo(state.width, state.height);
      ctx.lineTo(0, state.height);
      ctx.closePath();
      ctx.clip(); // Background.

      ctx.fill(path);
      ctx.restore();
    });
  }

  function renderBottleGrid() {
    requestAnimationFrame(function () {
      gradientGood = getGradient(state.bottleGrid.colour.good);
      gradientBad = getGradient(state.bottleGrid.colour.bad);
      drawBottleWaves(state.ctx.bottleWave, state.bottleWave.bottlePath, state.bottleGrid.dataOrigin);
      drawBottles(state.ctx.glassBottle, state.glassBottle.path, state.bottleGrid.dataOrigin);
    });
  } // Tweening functions.


  function defineTweenBottleGrid() {
    // Prep.
    setScales();
    prepData(); // Tween

    var tl = gsapWithCSS.timeline({
      onUpdate: renderBottleGrid
    });
    var pointtween = gsapWithCSS.to(state.bottleGrid.dataOrigin.map(function (d) {
      return d.layout;
    }), {
      x: function x(i) {
        return state.bottleGrid.dataTarget[i].layout.x;
      },
      y: function y(i) {
        return state.bottleGrid.dataTarget[i].layout.y;
      },
      scale: function scale(i) {
        return state.bottleGrid.dataTarget[i].layout.scale;
      },
      stagger: 0.01
    });
    return tl.add(pointtween);
  }

  function tweenBottleGrid() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('bottleGrid');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.bottleGrid) state.tween.bottleGrid.kill();
    state.tween.bottleGrid = defineTweenBottleGrid();
    state.tween.bottleGrid.totalProgress(progress);
  }

  /* eslint-disable no-use-before-define */

  function defineTweenBottleGridColour() {
    // Tween
    var tl = gsapWithCSS.timeline({
      onUpdate: renderBottleGrid
    }); // For shortness.

    var colours = state.bottleColour; // Tween from the base to a good gradient.

    var colourGood0 = gsapWithCSS.fromTo(state.bottleGrid.colour.good, {
      stop0: colours.base.stop0
    }, {
      stop0: colours.good.stop0
    });
    var colourGood1 = gsapWithCSS.fromTo(state.bottleGrid.colour.good, {
      stop1: colours.base.stop1
    }, {
      stop1: colours.good.stop1
    }); // Tween from the base to a bad gradient.

    var colourBad0 = gsapWithCSS.fromTo(state.bottleGrid.colour.bad, {
      stop0: colours.base.stop0
    }, {
      stop0: colours.bad.stop0
    });
    var colourBad1 = gsapWithCSS.fromTo(state.bottleGrid.colour.bad, {
      stop1: colours.base.stop1
    }, {
      stop1: colours.bad.stop1
    });
    return tl.add(colourGood0).add(colourGood1, '<').add(colourBad0).add(colourBad1, '<');
  }

  function tweenBottleGridColour() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('bottleGridColour');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.bottleGridColour) state.tween.bottleGridColour.kill();
    state.tween.bottleGridColour = defineTweenBottleGridColour();
    state.tween.bottleGridColour.totalProgress(progress);
  }

  /* eslint-disable no-use-before-define */

  function renderBottleGridSorted() {
    requestAnimationFrame(function () {
      drawBottleWaves(state.ctx.bottleWave, state.bottleWave.bottlePath, state.bottleGrid.dataTarget);
      drawBottles(state.ctx.glassBottle, state.glassBottle.path, state.bottleGrid.dataTarget);
    });
  }

  function defineTweenBottleGridSort() {
    var tl = gsapWithCSS.timeline({
      onUpdate: renderBottleGridSorted
    });
    var pointtween = gsapWithCSS.to(state.bottleGrid.dataTarget.map(function (d) {
      return d.layout;
    }), {
      x: function x(i) {
        return state.bottleGrid.dataSorted[i].layout.x;
      },
      y: function y(i) {
        return state.bottleGrid.dataSorted[i].layout.y;
      },
      scale: function scale(i) {
        return state.bottleGrid.dataSorted[i].layout.scale;
      },
      stagger: 0.01
    });
    return tl.add(pointtween);
  }

  function tweenBottleGridSort() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('bottleGridSort');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.bottleGridSort) state.tween.bottleGridSort.kill();
    state.tween.bottleGridSort = defineTweenBottleGridSort();
    state.tween.bottleGridSort.totalProgress(progress);
  }

  /* eslint-disable no-use-before-define */

  function renderBottleGridSorted$1() {
    requestAnimationFrame(function () {
      drawBottleWaves(state.ctx.bottleWave, state.bottleWave.bottlePath, state.bottleGrid.dataSorted);
      drawBottles(state.ctx.glassBottle, state.glassBottle.path, state.bottleGrid.dataSorted);
    });
  }

  function defineTweenBottleGridOut() {
    var tl = gsapWithCSS.timeline({
      onUpdate: renderBottleGridSorted$1
    });
    var pointtween = gsapWithCSS.to(state.bottleGrid.dataSorted.map(function (d) {
      return d.layout;
    }), {
      x: function x(i) {
        return state.bottleGrid.dataOut[i].layout.x;
      },
      y: function y(i) {
        return state.bottleGrid.dataOut[i].layout.y;
      },
      scale: function scale(i) {
        return state.bottleGrid.dataOut[i].layout.scale;
      },
      stagger: 0.01
    });
    return tl.add(pointtween);
  }

  function tweenBottleGridOut() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('bottleGridOut');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.bottleGridOut) state.tween.bottleGridOut.kill();
    state.tween.bottleGridOut = defineTweenBottleGridOut();
    state.tween.bottleGridOut.totalProgress(progress);
  }

  function drawPath(ctx, paths, t, length, offset) {
    ctx.save();
    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale);
    ctx.setLineDash([length - offset, offset]); // eslint-disable-next-line no-unused-expressions

    Array.isArray(paths) ? paths.forEach(function (path) {
      return ctx.stroke(path);
    }) : ctx.stroke(paths);
    ctx.restore();
  }

  function renderPath() {
    requestAnimationFrame(function () {
      // Change global styles savely.
      state.ctx.glassBottle.save();
      state.ctx.glassBottle.globalAlpha = state.glassBottle.alpha; // 1

      state.ctx.glassBottle.strokeStyle = '#000000';
      state.ctx.glassBottle.lineWidth = 0.7; // We clear the canvas before we draw each column (and the grid).

      state.ctx.glassBottle.clearRect(0, 0, state.width, state.height); // We draw the grid and each dataset column with their very own
      // path offsets, that are tweened one by one by the scrolltriggers.

      state.dataset.info.forEach(function (d) {
        drawPath(state.ctx.glassBottle, state.dataset[d.name].paths, state.transform.dataset, state.dataset[d.name].length, state.dataset[d.name].offset);
      });
      state.ctx.glassBottle.restore();
    });
  }

  function defineTweenDataset(pathInfo) {
    var tl = gsapWithCSS.timeline({
      onUpdate: renderPath
    });
    var offset = gsapWithCSS.fromTo(pathInfo, {
      offset: pathInfo.length
    }, {
      offset: 0
    });
    return tl.add(offset);
  }

  function tweenDataset() {
    // We buld a tween for each dataset element (the grid and each column).
    state.dataset.info.forEach(function (d) {
      // Capture current progress.
      var scroll = ScrollTrigger.getById(d.tween);
      var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

      if (state.tween[d.tween]) state.tween[d.tween].kill();
      state.tween[d.tween] = defineTweenDataset(state.dataset[d.name]);
      state.tween[d.tween].totalProgress(progress);
    });
  }
  //    set the alpha value to 1 in the scrolltriggers when drawing the
  //    dataset as well as setting it to 0 and clearing it before and after.

  function identity$3(x) {
    return x;
  }

  function transform(transform) {
    if (transform == null) return identity$3;
    var x0,
        y0,
        kx = transform.scale[0],
        ky = transform.scale[1],
        dx = transform.translate[0],
        dy = transform.translate[1];
    return function(input, i) {
      if (!i) x0 = y0 = 0;
      var j = 2, n = input.length, output = new Array(n);
      output[0] = (x0 += input[0]) * kx + dx;
      output[1] = (y0 += input[1]) * ky + dy;
      while (j < n) output[j] = input[j], ++j;
      return output;
    };
  }

  function reverse(array, n) {
    var t, j = array.length, i = j - n;
    while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
  }

  function feature(topology, o) {
    if (typeof o === "string") o = topology.objects[o];
    return o.type === "GeometryCollection"
        ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature$1(topology, o); })}
        : feature$1(topology, o);
  }

  function feature$1(topology, o) {
    var id = o.id,
        bbox = o.bbox,
        properties = o.properties == null ? {} : o.properties,
        geometry = object$1(topology, o);
    return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}
        : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}
        : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};
  }

  function object$1(topology, o) {
    var transformPoint = transform(topology.transform),
        arcs = topology.arcs;

    function arc(i, points) {
      if (points.length) points.pop();
      for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
        points.push(transformPoint(a[k], k));
      }
      if (i < 0) reverse(points, n);
    }

    function point(p) {
      return transformPoint(p);
    }

    function line(arcs) {
      var points = [];
      for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
      if (points.length < 2) points.push(points[0]); // This should never happen per the specification.
      return points;
    }

    function ring(arcs) {
      var points = line(arcs);
      while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.
      return points;
    }

    function polygon(arcs) {
      return arcs.map(ring);
    }

    function geometry(o) {
      var type = o.type, coordinates;
      switch (type) {
        case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};
        case "Point": coordinates = point(o.coordinates); break;
        case "MultiPoint": coordinates = o.coordinates.map(point); break;
        case "LineString": coordinates = line(o.arcs); break;
        case "MultiLineString": coordinates = o.arcs.map(line); break;
        case "Polygon": coordinates = polygon(o.arcs); break;
        case "MultiPolygon": coordinates = o.arcs.map(polygon); break;
        default: return null;
      }
      return {type: type, coordinates: coordinates};
    }

    return geometry(o);
  }

  // Adds floating point numbers with twice the normal precision.
  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
  // 305–363 (1997).
  // Code adapted from GeographicLib by Charles F. F. Karney,
  // http://geographiclib.sourceforge.net/

  function adder() {
    return new Adder;
  }

  function Adder() {
    this.reset();
  }

  Adder.prototype = {
    constructor: Adder,
    reset: function() {
      this.s = // rounded value
      this.t = 0; // exact error
    },
    add: function(y) {
      add(temp, y, this.t);
      add(this, temp.s, this.s);
      if (this.s) this.t += temp.t;
      else this.s = temp.t;
    },
    valueOf: function() {
      return this.s;
    }
  };

  var temp = new Adder;

  function add(adder, a, b) {
    var x = adder.s = a + b,
        bv = x - a,
        av = x - bv;
    adder.t = (a - av) + (b - bv);
  }

  var epsilon$1 = 1e-6;
  var pi$1 = Math.PI;
  var halfPi = pi$1 / 2;
  var quarterPi = pi$1 / 4;
  var tau$1 = pi$1 * 2;

  var degrees$1 = 180 / pi$1;
  var radians = pi$1 / 180;

  var abs = Math.abs;
  var atan = Math.atan;
  var atan2 = Math.atan2;
  var cos = Math.cos;
  var ceil = Math.ceil;
  var sin = Math.sin;
  var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
  var sqrt = Math.sqrt;

  function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi$1 : Math.acos(x);
  }

  function asin(x) {
    return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
  }

  function noop$1() {}

  function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
      streamGeometryType[geometry.type](geometry, stream);
    }
  }

  var streamObjectType = {
    Feature: function(object, stream) {
      streamGeometry(object.geometry, stream);
    },
    FeatureCollection: function(object, stream) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) streamGeometry(features[i].geometry, stream);
    }
  };

  var streamGeometryType = {
    Sphere: function(object, stream) {
      stream.sphere();
    },
    Point: function(object, stream) {
      object = object.coordinates;
      stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
    },
    LineString: function(object, stream) {
      streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function(object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) streamLine(coordinates[i], stream, 0);
    },
    Polygon: function(object, stream) {
      streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function(object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) streamPolygon(coordinates[i], stream);
    },
    GeometryCollection: function(object, stream) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) streamGeometry(geometries[i], stream);
    }
  };

  function streamLine(coordinates, stream, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    stream.lineStart();
    while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    stream.lineEnd();
  }

  function streamPolygon(coordinates, stream) {
    var i = -1, n = coordinates.length;
    stream.polygonStart();
    while (++i < n) streamLine(coordinates[i], stream, 1);
    stream.polygonEnd();
  }

  function geoStream(object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) {
      streamObjectType[object.type](object, stream);
    } else {
      streamGeometry(object, stream);
    }
  }

  function spherical(cartesian) {
    return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
  }

  function cartesian(spherical) {
    var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);
    return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
  }

  function cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }

  function cartesianCross(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
  }

  // TODO return a
  function cartesianAddInPlace(a, b) {
    a[0] += b[0], a[1] += b[1], a[2] += b[2];
  }

  function cartesianScale(vector, k) {
    return [vector[0] * k, vector[1] * k, vector[2] * k];
  }

  // TODO return d
  function cartesianNormalizeInPlace(d) {
    var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l, d[1] /= l, d[2] /= l;
  }

  function compose(a, b) {

    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }

    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };

    return compose;
  }

  function rotationIdentity(lambda, phi) {
    return [abs(lambda) > pi$1 ? lambda + Math.round(-lambda / tau$1) * tau$1 : lambda, phi];
  }

  rotationIdentity.invert = rotationIdentity;

  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= tau$1) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
      : rotationLambda(deltaLambda))
      : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
      : rotationIdentity);
  }

  function forwardRotationLambda(deltaLambda) {
    return function(lambda, phi) {
      return lambda += deltaLambda, [lambda > pi$1 ? lambda - tau$1 : lambda < -pi$1 ? lambda + tau$1 : lambda, phi];
    };
  }

  function rotationLambda(deltaLambda) {
    var rotation = forwardRotationLambda(deltaLambda);
    rotation.invert = forwardRotationLambda(-deltaLambda);
    return rotation;
  }

  function rotationPhiGamma(deltaPhi, deltaGamma) {
    var cosDeltaPhi = cos(deltaPhi),
        sinDeltaPhi = sin(deltaPhi),
        cosDeltaGamma = cos(deltaGamma),
        sinDeltaGamma = sin(deltaGamma);

    function rotation(lambda, phi) {
      var cosPhi = cos(phi),
          x = cos(lambda) * cosPhi,
          y = sin(lambda) * cosPhi,
          z = sin(phi),
          k = z * cosDeltaPhi + x * sinDeltaPhi;
      return [
        atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
        asin(k * cosDeltaGamma + y * sinDeltaGamma)
      ];
    }

    rotation.invert = function(lambda, phi) {
      var cosPhi = cos(phi),
          x = cos(lambda) * cosPhi,
          y = sin(lambda) * cosPhi,
          z = sin(phi),
          k = z * cosDeltaGamma - y * sinDeltaGamma;
      return [
        atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
        asin(k * cosDeltaPhi - x * sinDeltaPhi)
      ];
    };

    return rotation;
  }

  // Generates a circle centered at [0°, 0°], with a given radius and precision.
  function circleStream(stream, radius, delta, direction, t0, t1) {
    if (!delta) return;
    var cosRadius = cos(radius),
        sinRadius = sin(radius),
        step = direction * delta;
    if (t0 == null) {
      t0 = radius + direction * tau$1;
      t1 = radius - step / 2;
    } else {
      t0 = circleRadius(cosRadius, t0);
      t1 = circleRadius(cosRadius, t1);
      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$1;
    }
    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
      point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
      stream.point(point[0], point[1]);
    }
  }

  // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
  function circleRadius(cosRadius, point) {
    point = cartesian(point), point[0] -= cosRadius;
    cartesianNormalizeInPlace(point);
    var radius = acos(-point[1]);
    return ((-point[2] < 0 ? -radius : radius) + tau$1 - epsilon$1) % tau$1;
  }

  function clipBuffer() {
    var lines = [],
        line;
    return {
      point: function(x, y, m) {
        line.push([x, y, m]);
      },
      lineStart: function() {
        lines.push(line = []);
      },
      lineEnd: noop$1,
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      },
      result: function() {
        var result = lines;
        lines = [];
        line = null;
        return result;
      }
    };
  }

  function pointEqual(a, b) {
    return abs(a[0] - b[0]) < epsilon$1 && abs(a[1] - b[1]) < epsilon$1;
  }

  function Intersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other; // another intersection
    this.e = entry; // is an entry?
    this.v = false; // visited
    this.n = this.p = null; // next & previous
  }

  // A generalized polygon clipping algorithm: given a polygon that has been cut
  // into its visible line segments, and rejoins the segments by interpolating
  // along the clip edge.
  function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {
    var subject = [],
        clip = [],
        i,
        n;

    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n], x;

      if (pointEqual(p0, p1)) {
        if (!p0[2] && !p1[2]) {
          stream.lineStart();
          for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
          stream.lineEnd();
          return;
        }
        // handle degenerate cases by moving the point
        p1[0] += 2 * epsilon$1;
      }

      subject.push(x = new Intersection(p0, segment, null, true));
      clip.push(x.o = new Intersection(p0, null, x, false));
      subject.push(x = new Intersection(p1, segment, null, false));
      clip.push(x.o = new Intersection(p1, null, x, true));
    });

    if (!subject.length) return;

    clip.sort(compareIntersection);
    link(subject);
    link(clip);

    for (i = 0, n = clip.length; i < n; ++i) {
      clip[i].e = startInside = !startInside;
    }

    var start = subject[0],
        points,
        point;

    while (1) {
      // Find first unvisited intersection.
      var current = start,
          isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      stream.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, stream);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, stream);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      stream.lineEnd();
    }
  }

  function link(array) {
    if (!(n = array.length)) return;
    var n,
        i = 0,
        a = array[0],
        b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }

  var sum = adder();

  function longitude(point) {
    if (abs(point[0]) <= pi$1)
      return point[0];
    else
      return sign(point[0]) * ((abs(point[0]) + pi$1) % tau$1 - pi$1);
  }

  function polygonContains(polygon, point) {
    var lambda = longitude(point),
        phi = point[1],
        sinPhi = sin(phi),
        normal = [sin(lambda), -cos(lambda), 0],
        angle = 0,
        winding = 0;

    sum.reset();

    if (sinPhi === 1) phi = halfPi + epsilon$1;
    else if (sinPhi === -1) phi = -halfPi - epsilon$1;

    for (var i = 0, n = polygon.length; i < n; ++i) {
      if (!(m = (ring = polygon[i]).length)) continue;
      var ring,
          m,
          point0 = ring[m - 1],
          lambda0 = longitude(point0),
          phi0 = point0[1] / 2 + quarterPi,
          sinPhi0 = sin(phi0),
          cosPhi0 = cos(phi0);

      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
        var point1 = ring[j],
            lambda1 = longitude(point1),
            phi1 = point1[1] / 2 + quarterPi,
            sinPhi1 = sin(phi1),
            cosPhi1 = cos(phi1),
            delta = lambda1 - lambda0,
            sign = delta >= 0 ? 1 : -1,
            absDelta = sign * delta,
            antimeridian = absDelta > pi$1,
            k = sinPhi0 * sinPhi1;

        sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
        angle += antimeridian ? delta + sign * tau$1 : delta;

        // Are the longitudes either side of the point’s meridian (lambda),
        // and are the latitudes smaller than the parallel (phi)?
        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
          var arc = cartesianCross(cartesian(point0), cartesian(point1));
          cartesianNormalizeInPlace(arc);
          var intersection = cartesianCross(normal, arc);
          cartesianNormalizeInPlace(intersection);
          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
            winding += antimeridian ^ delta >= 0 ? 1 : -1;
          }
        }
      }
    }

    // First, determine whether the South pole is inside or outside:
    //
    // It is inside if:
    // * the polygon winds around it in a clockwise direction.
    // * the polygon does not (cumulatively) wind around it, but has a negative
    //   (counter-clockwise) area.
    //
    // Second, count the (signed) number of times a segment crosses a lambda
    // from the point to the South pole.  If it is zero, then the point is the
    // same side as the South pole.

    return (angle < -epsilon$1 || angle < epsilon$1 && sum < -epsilon$1) ^ (winding & 1);
  }

  function clip(pointVisible, clipLine, interpolate, start) {
    return function(sink) {
      var line = clipLine(sink),
          ringBuffer = clipBuffer(),
          ringSink = clipLine(ringBuffer),
          polygonStarted = false,
          polygon,
          segments,
          ring;

      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = merge(segments);
          var startInside = polygonContains(polygon, start);
          if (segments.length) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
          } else if (startInside) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            sink.lineStart();
            interpolate(null, null, 1, sink);
            sink.lineEnd();
          }
          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          sink.polygonStart();
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
          sink.polygonEnd();
        }
      };

      function point(lambda, phi) {
        if (pointVisible(lambda, phi)) sink.point(lambda, phi);
      }

      function pointLine(lambda, phi) {
        line.point(lambda, phi);
      }

      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }

      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }

      function pointRing(lambda, phi) {
        ring.push([lambda, phi]);
        ringSink.point(lambda, phi);
      }

      function ringStart() {
        ringSink.lineStart();
        ring = [];
      }

      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringSink.lineEnd();

        var clean = ringSink.clean(),
            ringSegments = ringBuffer.result(),
            i, n = ringSegments.length, m,
            segment,
            point;

        ring.pop();
        polygon.push(ring);
        ring = null;

        if (!n) return;

        // No intersections.
        if (clean & 1) {
          segment = ringSegments[0];
          if ((m = segment.length - 1) > 0) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            sink.lineStart();
            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
            sink.lineEnd();
          }
          return;
        }

        // Rejoin connected segments.
        // TODO reuse ringBuffer.rejoin()?
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

        segments.push(ringSegments.filter(validSegment));
      }

      return clip;
    };
  }

  function validSegment(segment) {
    return segment.length > 1;
  }

  // Intersections are sorted along the clip edge. For both antimeridian cutting
  // and circle clipping, the same comparison is used.
  function compareIntersection(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon$1 : halfPi - a[1])
         - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon$1 : halfPi - b[1]);
  }

  var clipAntimeridian = clip(
    function() { return true; },
    clipAntimeridianLine,
    clipAntimeridianInterpolate,
    [-pi$1, -halfPi]
  );

  // Takes a line and cuts into visible segments. Return values: 0 - there were
  // intersections or the line was empty; 1 - no intersections; 2 - there were
  // intersections, and the first and last segments should be rejoined.
  function clipAntimeridianLine(stream) {
    var lambda0 = NaN,
        phi0 = NaN,
        sign0 = NaN,
        clean; // no intersections

    return {
      lineStart: function() {
        stream.lineStart();
        clean = 1;
      },
      point: function(lambda1, phi1) {
        var sign1 = lambda1 > 0 ? pi$1 : -pi$1,
            delta = abs(lambda1 - lambda0);
        if (abs(delta - pi$1) < epsilon$1) { // line crosses a pole
          stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
          stream.point(sign0, phi0);
          stream.lineEnd();
          stream.lineStart();
          stream.point(sign1, phi0);
          stream.point(lambda1, phi0);
          clean = 0;
        } else if (sign0 !== sign1 && delta >= pi$1) { // line crosses antimeridian
          if (abs(lambda0 - sign0) < epsilon$1) lambda0 -= sign0 * epsilon$1; // handle degeneracies
          if (abs(lambda1 - sign1) < epsilon$1) lambda1 -= sign1 * epsilon$1;
          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
          stream.point(sign0, phi0);
          stream.lineEnd();
          stream.lineStart();
          stream.point(sign1, phi0);
          clean = 0;
        }
        stream.point(lambda0 = lambda1, phi0 = phi1);
        sign0 = sign1;
      },
      lineEnd: function() {
        stream.lineEnd();
        lambda0 = phi0 = NaN;
      },
      clean: function() {
        return 2 - clean; // if intersections, rejoin first and last segments
      }
    };
  }

  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
    var cosPhi0,
        cosPhi1,
        sinLambda0Lambda1 = sin(lambda0 - lambda1);
    return abs(sinLambda0Lambda1) > epsilon$1
        ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)
            - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))
            / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
        : (phi0 + phi1) / 2;
  }

  function clipAntimeridianInterpolate(from, to, direction, stream) {
    var phi;
    if (from == null) {
      phi = direction * halfPi;
      stream.point(-pi$1, phi);
      stream.point(0, phi);
      stream.point(pi$1, phi);
      stream.point(pi$1, 0);
      stream.point(pi$1, -phi);
      stream.point(0, -phi);
      stream.point(-pi$1, -phi);
      stream.point(-pi$1, 0);
      stream.point(-pi$1, phi);
    } else if (abs(from[0] - to[0]) > epsilon$1) {
      var lambda = from[0] < to[0] ? pi$1 : -pi$1;
      phi = direction * lambda / 2;
      stream.point(-lambda, phi);
      stream.point(0, phi);
      stream.point(lambda, phi);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function clipCircle(radius) {
    var cr = cos(radius),
        delta = 6 * radians,
        smallRadius = cr > 0,
        notHemisphere = abs(cr) > epsilon$1; // TODO optimise for this common case

    function interpolate(from, to, direction, stream) {
      circleStream(stream, radius, delta, direction, from, to);
    }

    function visible(lambda, phi) {
      return cos(lambda) * cos(phi) > cr;
    }

    // Takes a line and cuts into visible segments. Return values used for polygon
    // clipping: 0 - there were intersections or the line was empty; 1 - no
    // intersections 2 - there were intersections, and the first and last segments
    // should be rejoined.
    function clipLine(stream) {
      var point0, // previous point
          c0, // code for previous point
          v0, // visibility of previous point
          v00, // visibility of first point
          clean; // no intersections
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(lambda, phi) {
          var point1 = [lambda, phi],
              point2,
              v = visible(lambda, phi),
              c = smallRadius
                ? v ? 0 : code(lambda, phi)
                : v ? code(lambda + (lambda < 0 ? pi$1 : -pi$1), phi) : 0;
          if (!point0 && (v00 = v0 = v)) stream.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))
              point1[2] = 1;
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              // outside going in
              stream.lineStart();
              point2 = intersect(point1, point0);
              stream.point(point2[0], point2[1]);
            } else {
              // inside going out
              point2 = intersect(point0, point1);
              stream.point(point2[0], point2[1], 2);
              stream.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            // If the codes for two points are different, or are both zero,
            // and there this segment intersects with the small circle.
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                stream.lineStart();
                stream.point(t[0][0], t[0][1]);
                stream.point(t[1][0], t[1][1]);
                stream.lineEnd();
              } else {
                stream.point(t[1][0], t[1][1]);
                stream.lineEnd();
                stream.lineStart();
                stream.point(t[0][0], t[0][1], 3);
              }
            }
          }
          if (v && (!point0 || !pointEqual(point0, point1))) {
            stream.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) stream.lineEnd();
          point0 = null;
        },
        // Rejoin first and last segments if there were intersections and the first
        // and last points were visible.
        clean: function() {
          return clean | ((v00 && v0) << 1);
        }
      };
    }

    // Intersects the great circle between a and b with the clip circle.
    function intersect(a, b, two) {
      var pa = cartesian(a),
          pb = cartesian(b);

      // We have two planes, n1.p = d1 and n2.p = d2.
      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
      var n1 = [1, 0, 0], // normal
          n2 = cartesianCross(pa, pb),
          n2n2 = cartesianDot(n2, n2),
          n1n2 = n2[0], // cartesianDot(n1, n2),
          determinant = n2n2 - n1n2 * n1n2;

      // Two polar points.
      if (!determinant) return !two && a;

      var c1 =  cr * n2n2 / determinant,
          c2 = -cr * n1n2 / determinant,
          n1xn2 = cartesianCross(n1, n2),
          A = cartesianScale(n1, c1),
          B = cartesianScale(n2, c2);
      cartesianAddInPlace(A, B);

      // Solve |p(t)|^2 = 1.
      var u = n1xn2,
          w = cartesianDot(A, u),
          uu = cartesianDot(u, u),
          t2 = w * w - uu * (cartesianDot(A, A) - 1);

      if (t2 < 0) return;

      var t = sqrt(t2),
          q = cartesianScale(u, (-w - t) / uu);
      cartesianAddInPlace(q, A);
      q = spherical(q);

      if (!two) return q;

      // Two intersection points.
      var lambda0 = a[0],
          lambda1 = b[0],
          phi0 = a[1],
          phi1 = b[1],
          z;

      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

      var delta = lambda1 - lambda0,
          polar = abs(delta - pi$1) < epsilon$1,
          meridian = polar || delta < epsilon$1;

      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

      // Check that the first point is between a and b.
      if (meridian
          ? polar
            ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$1 ? phi0 : phi1)
            : phi0 <= q[1] && q[1] <= phi1
          : delta > pi$1 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
        var q1 = cartesianScale(u, (-w + t) / uu);
        cartesianAddInPlace(q1, A);
        return [q, spherical(q1)];
      }
    }

    // Generates a 4-bit vector representing the location of a point relative to
    // the small circle's bounding box.
    function code(lambda, phi) {
      var r = smallRadius ? radius : pi$1 - radius,
          code = 0;
      if (lambda < -r) code |= 1; // left
      else if (lambda > r) code |= 2; // right
      if (phi < -r) code |= 4; // below
      else if (phi > r) code |= 8; // above
      return code;
    }

    return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$1, radius - pi$1]);
  }

  function clipLine(a, b, x0, y0, x1, y1) {
    var ax = a[0],
        ay = a[1],
        bx = b[0],
        by = b[1],
        t0 = 0,
        t1 = 1,
        dx = bx - ax,
        dy = by - ay,
        r;

    r = x0 - ax;
    if (!dx && r > 0) return;
    r /= dx;
    if (dx < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dx > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = x1 - ax;
    if (!dx && r < 0) return;
    r /= dx;
    if (dx < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dx > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    r = y0 - ay;
    if (!dy && r > 0) return;
    r /= dy;
    if (dy < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dy > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = y1 - ay;
    if (!dy && r < 0) return;
    r /= dy;
    if (dy < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dy > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
    return true;
  }

  var clipMax = 1e9, clipMin = -clipMax;

  // TODO Use d3-polygon’s polygonContains here for the ring check?
  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

  function clipRectangle(x0, y0, x1, y1) {

    function visible(x, y) {
      return x0 <= x && x <= x1 && y0 <= y && y <= y1;
    }

    function interpolate(from, to, direction, stream) {
      var a = 0, a1 = 0;
      if (from == null
          || (a = corner(from, direction)) !== (a1 = corner(to, direction))
          || comparePoint(from, to) < 0 ^ direction > 0) {
        do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
        while ((a = (a + direction + 4) % 4) !== a1);
      } else {
        stream.point(to[0], to[1]);
      }
    }

    function corner(p, direction) {
      return abs(p[0] - x0) < epsilon$1 ? direction > 0 ? 0 : 3
          : abs(p[0] - x1) < epsilon$1 ? direction > 0 ? 2 : 1
          : abs(p[1] - y0) < epsilon$1 ? direction > 0 ? 1 : 0
          : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
    }

    function compareIntersection(a, b) {
      return comparePoint(a.x, b.x);
    }

    function comparePoint(a, b) {
      var ca = corner(a, 1),
          cb = corner(b, 1);
      return ca !== cb ? ca - cb
          : ca === 0 ? b[1] - a[1]
          : ca === 1 ? a[0] - b[0]
          : ca === 2 ? a[1] - b[1]
          : b[0] - a[0];
    }

    return function(stream) {
      var activeStream = stream,
          bufferStream = clipBuffer(),
          segments,
          polygon,
          ring,
          x__, y__, v__, // first point
          x_, y_, v_, // previous point
          first,
          clean;

      var clipStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: polygonStart,
        polygonEnd: polygonEnd
      };

      function point(x, y) {
        if (visible(x, y)) activeStream.point(x, y);
      }

      function polygonInside() {
        var winding = 0;

        for (var i = 0, n = polygon.length; i < n; ++i) {
          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
            if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
            else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
          }
        }

        return winding;
      }

      // Buffer geometry within a polygon and then clip it en masse.
      function polygonStart() {
        activeStream = bufferStream, segments = [], polygon = [], clean = true;
      }

      function polygonEnd() {
        var startInside = polygonInside(),
            cleanInside = clean && startInside,
            visible = (segments = merge(segments)).length;
        if (cleanInside || visible) {
          stream.polygonStart();
          if (cleanInside) {
            stream.lineStart();
            interpolate(null, null, 1, stream);
            stream.lineEnd();
          }
          if (visible) {
            clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
          }
          stream.polygonEnd();
        }
        activeStream = stream, segments = polygon = ring = null;
      }

      function lineStart() {
        clipStream.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }

      // TODO rather than special-case polygons, simply handle them separately.
      // Ideally, coincident intersection points should be jittered to avoid
      // clipping issues.
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferStream.rejoin();
          segments.push(bufferStream.result());
        }
        clipStream.point = point;
        if (v_) activeStream.lineEnd();
      }

      function linePoint(x, y) {
        var v = visible(x, y);
        if (polygon) ring.push([x, y]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
          }
        } else {
          if (v && v_) activeStream.point(x, y);
          else {
            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
            if (clipLine(a, b, x0, y0, x1, y1)) {
              if (!v_) {
                activeStream.lineStart();
                activeStream.point(a[0], a[1]);
              }
              activeStream.point(b[0], b[1]);
              if (!v) activeStream.lineEnd();
              clean = false;
            } else if (v) {
              activeStream.lineStart();
              activeStream.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }

      return clipStream;
    };
  }

  function graticuleX(y0, y1, dy) {
    var y = range(y0, y1 - epsilon$1, dy).concat(y1);
    return function(x) { return y.map(function(y) { return [x, y]; }); };
  }

  function graticuleY(x0, x1, dx) {
    var x = range(x0, x1 - epsilon$1, dx).concat(x1);
    return function(y) { return x.map(function(x) { return [x, y]; }); };
  }

  function graticule() {
    var x1, x0, X1, X0,
        y1, y0, Y1, Y0,
        dx = 10, dy = dx, DX = 90, DY = 360,
        x, y, X, Y,
        precision = 2.5;

    function graticule() {
      return {type: "MultiLineString", coordinates: lines()};
    }

    function lines() {
      return range(ceil(X0 / DX) * DX, X1, DX).map(X)
          .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
          .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$1; }).map(x))
          .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$1; }).map(y));
    }

    graticule.lines = function() {
      return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
    };

    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [
          X(X0).concat(
          Y(Y1).slice(1),
          X(X1).reverse().slice(1),
          Y(Y0).reverse().slice(1))
        ]
      };
    };

    graticule.extent = function(_) {
      if (!arguments.length) return graticule.extentMinor();
      return graticule.extentMajor(_).extentMinor(_);
    };

    graticule.extentMajor = function(_) {
      if (!arguments.length) return [[X0, Y0], [X1, Y1]];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };

    graticule.extentMinor = function(_) {
      if (!arguments.length) return [[x0, y0], [x1, y1]];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };

    graticule.step = function(_) {
      if (!arguments.length) return graticule.stepMinor();
      return graticule.stepMajor(_).stepMinor(_);
    };

    graticule.stepMajor = function(_) {
      if (!arguments.length) return [DX, DY];
      DX = +_[0], DY = +_[1];
      return graticule;
    };

    graticule.stepMinor = function(_) {
      if (!arguments.length) return [dx, dy];
      dx = +_[0], dy = +_[1];
      return graticule;
    };

    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = graticuleX(y0, y1, 90);
      y = graticuleY(x0, x1, precision);
      X = graticuleX(Y0, Y1, 90);
      Y = graticuleY(X0, X1, precision);
      return graticule;
    };

    return graticule
        .extentMajor([[-180, -90 + epsilon$1], [180, 90 - epsilon$1]])
        .extentMinor([[-180, -80 - epsilon$1], [180, 80 + epsilon$1]]);
  }

  function identity$4(x) {
    return x;
  }

  var areaSum = adder(),
      areaRingSum = adder(),
      x00,
      y00,
      x0,
      y0;

  var areaStream = {
    point: noop$1,
    lineStart: noop$1,
    lineEnd: noop$1,
    polygonStart: function() {
      areaStream.lineStart = areaRingStart;
      areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function() {
      areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop$1;
      areaSum.add(abs(areaRingSum));
      areaRingSum.reset();
    },
    result: function() {
      var area = areaSum / 2;
      areaSum.reset();
      return area;
    }
  };

  function areaRingStart() {
    areaStream.point = areaPointFirst;
  }

  function areaPointFirst(x, y) {
    areaStream.point = areaPoint;
    x00 = x0 = x, y00 = y0 = y;
  }

  function areaPoint(x, y) {
    areaRingSum.add(y0 * x - x0 * y);
    x0 = x, y0 = y;
  }

  function areaRingEnd() {
    areaPoint(x00, y00);
  }

  var x0$1 = Infinity,
      y0$1 = x0$1,
      x1 = -x0$1,
      y1 = x1;

  var boundsStream = {
    point: boundsPoint,
    lineStart: noop$1,
    lineEnd: noop$1,
    polygonStart: noop$1,
    polygonEnd: noop$1,
    result: function() {
      var bounds = [[x0$1, y0$1], [x1, y1]];
      x1 = y1 = -(y0$1 = x0$1 = Infinity);
      return bounds;
    }
  };

  function boundsPoint(x, y) {
    if (x < x0$1) x0$1 = x;
    if (x > x1) x1 = x;
    if (y < y0$1) y0$1 = y;
    if (y > y1) y1 = y;
  }

  // TODO Enforce positive area for exterior, negative area for interior?

  var X0 = 0,
      Y0 = 0,
      Z0 = 0,
      X1 = 0,
      Y1 = 0,
      Z1 = 0,
      X2 = 0,
      Y2 = 0,
      Z2 = 0,
      x00$1,
      y00$1,
      x0$2,
      y0$2;

  var centroidStream = {
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function() {
      centroidStream.lineStart = centroidRingStart;
      centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function() {
      centroidStream.point = centroidPoint;
      centroidStream.lineStart = centroidLineStart;
      centroidStream.lineEnd = centroidLineEnd;
    },
    result: function() {
      var centroid = Z2 ? [X2 / Z2, Y2 / Z2]
          : Z1 ? [X1 / Z1, Y1 / Z1]
          : Z0 ? [X0 / Z0, Y0 / Z0]
          : [NaN, NaN];
      X0 = Y0 = Z0 =
      X1 = Y1 = Z1 =
      X2 = Y2 = Z2 = 0;
      return centroid;
    }
  };

  function centroidPoint(x, y) {
    X0 += x;
    Y0 += y;
    ++Z0;
  }

  function centroidLineStart() {
    centroidStream.point = centroidPointFirstLine;
  }

  function centroidPointFirstLine(x, y) {
    centroidStream.point = centroidPointLine;
    centroidPoint(x0$2 = x, y0$2 = y);
  }

  function centroidPointLine(x, y) {
    var dx = x - x0$2, dy = y - y0$2, z = sqrt(dx * dx + dy * dy);
    X1 += z * (x0$2 + x) / 2;
    Y1 += z * (y0$2 + y) / 2;
    Z1 += z;
    centroidPoint(x0$2 = x, y0$2 = y);
  }

  function centroidLineEnd() {
    centroidStream.point = centroidPoint;
  }

  function centroidRingStart() {
    centroidStream.point = centroidPointFirstRing;
  }

  function centroidRingEnd() {
    centroidPointRing(x00$1, y00$1);
  }

  function centroidPointFirstRing(x, y) {
    centroidStream.point = centroidPointRing;
    centroidPoint(x00$1 = x0$2 = x, y00$1 = y0$2 = y);
  }

  function centroidPointRing(x, y) {
    var dx = x - x0$2,
        dy = y - y0$2,
        z = sqrt(dx * dx + dy * dy);

    X1 += z * (x0$2 + x) / 2;
    Y1 += z * (y0$2 + y) / 2;
    Z1 += z;

    z = y0$2 * x - x0$2 * y;
    X2 += z * (x0$2 + x);
    Y2 += z * (y0$2 + y);
    Z2 += z * 3;
    centroidPoint(x0$2 = x, y0$2 = y);
  }

  function PathContext(context) {
    this._context = context;
  }

  PathContext.prototype = {
    _radius: 4.5,
    pointRadius: function(_) {
      return this._radius = _, this;
    },
    polygonStart: function() {
      this._line = 0;
    },
    polygonEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line === 0) this._context.closePath();
      this._point = NaN;
    },
    point: function(x, y) {
      switch (this._point) {
        case 0: {
          this._context.moveTo(x, y);
          this._point = 1;
          break;
        }
        case 1: {
          this._context.lineTo(x, y);
          break;
        }
        default: {
          this._context.moveTo(x + this._radius, y);
          this._context.arc(x, y, this._radius, 0, tau$1);
          break;
        }
      }
    },
    result: noop$1
  };

  var lengthSum = adder(),
      lengthRing,
      x00$2,
      y00$2,
      x0$3,
      y0$3;

  var lengthStream = {
    point: noop$1,
    lineStart: function() {
      lengthStream.point = lengthPointFirst;
    },
    lineEnd: function() {
      if (lengthRing) lengthPoint(x00$2, y00$2);
      lengthStream.point = noop$1;
    },
    polygonStart: function() {
      lengthRing = true;
    },
    polygonEnd: function() {
      lengthRing = null;
    },
    result: function() {
      var length = +lengthSum;
      lengthSum.reset();
      return length;
    }
  };

  function lengthPointFirst(x, y) {
    lengthStream.point = lengthPoint;
    x00$2 = x0$3 = x, y00$2 = y0$3 = y;
  }

  function lengthPoint(x, y) {
    x0$3 -= x, y0$3 -= y;
    lengthSum.add(sqrt(x0$3 * x0$3 + y0$3 * y0$3));
    x0$3 = x, y0$3 = y;
  }

  function PathString() {
    this._string = [];
  }

  PathString.prototype = {
    _radius: 4.5,
    _circle: circle(4.5),
    pointRadius: function(_) {
      if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
      return this;
    },
    polygonStart: function() {
      this._line = 0;
    },
    polygonEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line === 0) this._string.push("Z");
      this._point = NaN;
    },
    point: function(x, y) {
      switch (this._point) {
        case 0: {
          this._string.push("M", x, ",", y);
          this._point = 1;
          break;
        }
        case 1: {
          this._string.push("L", x, ",", y);
          break;
        }
        default: {
          if (this._circle == null) this._circle = circle(this._radius);
          this._string.push("M", x, ",", y, this._circle);
          break;
        }
      }
    },
    result: function() {
      if (this._string.length) {
        var result = this._string.join("");
        this._string = [];
        return result;
      } else {
        return null;
      }
    }
  };

  function circle(radius) {
    return "m0," + radius
        + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
        + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
        + "z";
  }

  function geoPath(projection, context) {
    var pointRadius = 4.5,
        projectionStream,
        contextStream;

    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        geoStream(object, projectionStream(contextStream));
      }
      return contextStream.result();
    }

    path.area = function(object) {
      geoStream(object, projectionStream(areaStream));
      return areaStream.result();
    };

    path.measure = function(object) {
      geoStream(object, projectionStream(lengthStream));
      return lengthStream.result();
    };

    path.bounds = function(object) {
      geoStream(object, projectionStream(boundsStream));
      return boundsStream.result();
    };

    path.centroid = function(object) {
      geoStream(object, projectionStream(centroidStream));
      return centroidStream.result();
    };

    path.projection = function(_) {
      return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$4) : (projection = _).stream, path) : projection;
    };

    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return path;
    };

    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };

    return path.projection(projection).context(context);
  }

  function transformer$1(methods) {
    return function(stream) {
      var s = new TransformStream;
      for (var key in methods) s[key] = methods[key];
      s.stream = stream;
      return s;
    };
  }

  function TransformStream() {}

  TransformStream.prototype = {
    constructor: TransformStream,
    point: function(x, y) { this.stream.point(x, y); },
    sphere: function() { this.stream.sphere(); },
    lineStart: function() { this.stream.lineStart(); },
    lineEnd: function() { this.stream.lineEnd(); },
    polygonStart: function() { this.stream.polygonStart(); },
    polygonEnd: function() { this.stream.polygonEnd(); }
  };

  function fit(projection, fitBounds, object) {
    var clip = projection.clipExtent && projection.clipExtent();
    projection.scale(150).translate([0, 0]);
    if (clip != null) projection.clipExtent(null);
    geoStream(object, projection.stream(boundsStream));
    fitBounds(boundsStream.result());
    if (clip != null) projection.clipExtent(clip);
    return projection;
  }

  function fitExtent(projection, extent, object) {
    return fit(projection, function(b) {
      var w = extent[1][0] - extent[0][0],
          h = extent[1][1] - extent[0][1],
          k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
          x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
          y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
      projection.scale(150 * k).translate([x, y]);
    }, object);
  }

  function fitSize(projection, size, object) {
    return fitExtent(projection, [[0, 0], size], object);
  }

  function fitWidth(projection, width, object) {
    return fit(projection, function(b) {
      var w = +width,
          k = w / (b[1][0] - b[0][0]),
          x = (w - k * (b[1][0] + b[0][0])) / 2,
          y = -k * b[0][1];
      projection.scale(150 * k).translate([x, y]);
    }, object);
  }

  function fitHeight(projection, height, object) {
    return fit(projection, function(b) {
      var h = +height,
          k = h / (b[1][1] - b[0][1]),
          x = -k * b[0][0],
          y = (h - k * (b[1][1] + b[0][1])) / 2;
      projection.scale(150 * k).translate([x, y]);
    }, object);
  }

  var maxDepth = 16, // maximum depth of subdivision
      cosMinDistance = cos(30 * radians); // cos(minimum angular distance)

  function resample(project, delta2) {
    return +delta2 ? resample$1(project, delta2) : resampleNone(project);
  }

  function resampleNone(project) {
    return transformer$1({
      point: function(x, y) {
        x = project(x, y);
        this.stream.point(x[0], x[1]);
      }
    });
  }

  function resample$1(project, delta2) {

    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0,
          dy = y1 - y0,
          d2 = dx * dx + dy * dy;
      if (d2 > 4 * delta2 && depth--) {
        var a = a0 + a1,
            b = b0 + b1,
            c = c0 + c1,
            m = sqrt(a * a + b * b + c * c),
            phi2 = asin(c /= m),
            lambda2 = abs(abs(c) - 1) < epsilon$1 || abs(lambda0 - lambda1) < epsilon$1 ? (lambda0 + lambda1) / 2 : atan2(b, a),
            p = project(lambda2, phi2),
            x2 = p[0],
            y2 = p[1],
            dx2 = x2 - x0,
            dy2 = y2 - y0,
            dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > delta2 // perpendicular projected distance
            || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
            || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
        }
      }
    }
    return function(stream) {
      var lambda00, x00, y00, a00, b00, c00, // first point
          lambda0, x0, y0, a0, b0, c0; // previous point

      var resampleStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
        polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
      };

      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }

      function lineStart() {
        x0 = NaN;
        resampleStream.point = linePoint;
        stream.lineStart();
      }

      function linePoint(lambda, phi) {
        var c = cartesian([lambda, phi]), p = project(lambda, phi);
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }

      function lineEnd() {
        resampleStream.point = point;
        stream.lineEnd();
      }

      function ringStart() {
        lineStart();
        resampleStream.point = ringPoint;
        resampleStream.lineEnd = ringEnd;
      }

      function ringPoint(lambda, phi) {
        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resampleStream.point = linePoint;
      }

      function ringEnd() {
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
        resampleStream.lineEnd = lineEnd;
        lineEnd();
      }

      return resampleStream;
    };
  }

  var transformRadians = transformer$1({
    point: function(x, y) {
      this.stream.point(x * radians, y * radians);
    }
  });

  function transformRotate(rotate) {
    return transformer$1({
      point: function(x, y) {
        var r = rotate(x, y);
        return this.stream.point(r[0], r[1]);
      }
    });
  }

  function scaleTranslate(k, dx, dy, sx, sy) {
    function transform(x, y) {
      x *= sx; y *= sy;
      return [dx + k * x, dy - k * y];
    }
    transform.invert = function(x, y) {
      return [(x - dx) / k * sx, (dy - y) / k * sy];
    };
    return transform;
  }

  function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
    var cosAlpha = cos(alpha),
        sinAlpha = sin(alpha),
        a = cosAlpha * k,
        b = sinAlpha * k,
        ai = cosAlpha / k,
        bi = sinAlpha / k,
        ci = (sinAlpha * dy - cosAlpha * dx) / k,
        fi = (sinAlpha * dx + cosAlpha * dy) / k;
    function transform(x, y) {
      x *= sx; y *= sy;
      return [a * x - b * y + dx, dy - b * x - a * y];
    }
    transform.invert = function(x, y) {
      return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
    };
    return transform;
  }

  function projection(project) {
    return projectionMutator(function() { return project; })();
  }

  function projectionMutator(projectAt) {
    var project,
        k = 150, // scale
        x = 480, y = 250, // translate
        lambda = 0, phi = 0, // center
        deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate
        alpha = 0, // post-rotate angle
        sx = 1, // reflectX
        sy = 1, // reflectX
        theta = null, preclip = clipAntimeridian, // pre-clip angle
        x0 = null, y0, x1, y1, postclip = identity$4, // post-clip extent
        delta2 = 0.5, // precision
        projectResample,
        projectTransform,
        projectRotateTransform,
        cache,
        cacheStream;

    function projection(point) {
      return projectRotateTransform(point[0] * radians, point[1] * radians);
    }

    function invert(point) {
      point = projectRotateTransform.invert(point[0], point[1]);
      return point && [point[0] * degrees$1, point[1] * degrees$1];
    }

    projection.stream = function(stream) {
      return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
    };

    projection.preclip = function(_) {
      return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
    };

    projection.postclip = function(_) {
      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    };

    projection.clipAngle = function(_) {
      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
    };

    projection.clipExtent = function(_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    };

    projection.scale = function(_) {
      return arguments.length ? (k = +_, recenter()) : k;
    };

    projection.translate = function(_) {
      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
    };

    projection.center = function(_) {
      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
    };

    projection.rotate = function(_) {
      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
    };

    projection.angle = function(_) {
      return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees$1;
    };

    projection.reflectX = function(_) {
      return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
    };

    projection.reflectY = function(_) {
      return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
    };

    projection.precision = function(_) {
      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
    };

    projection.fitExtent = function(extent, object) {
      return fitExtent(projection, extent, object);
    };

    projection.fitSize = function(size, object) {
      return fitSize(projection, size, object);
    };

    projection.fitWidth = function(width, object) {
      return fitWidth(projection, width, object);
    };

    projection.fitHeight = function(height, object) {
      return fitHeight(projection, height, object);
    };

    function recenter() {
      var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),
          transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], sx, sy, alpha);
      rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
      projectTransform = compose(project, transform);
      projectRotateTransform = compose(rotate, projectTransform);
      projectResample = resample(projectTransform, delta2);
      return reset();
    }

    function reset() {
      cache = cacheStream = null;
      return projection;
    }

    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return recenter();
    };
  }

  function azimuthalInvert(angle) {
    return function(x, y) {
      var z = sqrt(x * x + y * y),
          c = angle(z),
          sc = sin(c),
          cc = cos(c);
      return [
        atan2(x * sc, z * cc),
        asin(z && y * sc / z)
      ];
    }
  }

  function orthographicRaw(x, y) {
    return [cos(y) * sin(x), sin(y)];
  }

  orthographicRaw.invert = azimuthalInvert(asin);

  function geoOrthographic() {
    return projection(orthographicRaw)
        .scale(249.5)
        .clipAngle(90 + epsilon$1);
  }

  var countries;
  var portugal;
  var projection$1;
  var path$1;
  var pathSvg;
  var sphere;
  var grid;
  var txScale;
  var tyScale;
  var sScale;
  var rScale;
  var gaScale;
  var aaScale;
  var point0;
  var point1;
  var point2; // Globe gradient colours.

  var colours$1 = [{
    colour: '#f4eee7',
    stop: 0.1
  }, {
    colour: '#e1dcd6',
    stop: 0.3
  }, {
    colour: '#cfcac5',
    stop: 0.4
  }, {
    colour: '#bcb9b4',
    stop: 0.5
  }, {
    colour: '#aaa7a4',
    stop: 0.6
  }, {
    colour: '#999794',
    stop: 0.7
  }, {
    colour: '#878684',
    stop: 0.8
  }, {
    colour: '#767675',
    stop: 0.9
  }, {
    colour: '#666666',
    stop: 1
  }]; // The center of the world (Northern Portugal in our case).

  var rBase = [8, -42, 0]; // Values for the gradient. // 1

  var gradientCentrePoint = [-30, 40];
  var gradientEdgePoint = [-60, 40];
  var gradientValues;
  /**
   * Calculates the distance between two [lon, lat] points
   * in pixel, given a projection.
   * @param { 2d array } pStart The start point for the distance calc
   * @param { 2d array } pEnd The end point for the distance calc
   * @param { function } proj The projection
   * @returns { object } Star, end point as well as distance in pixel.
   */

  function getPixelDistance(pStart, pEnd, proj) {
    var pStartPx = proj(pStart);
    var pEndPx = proj(pEnd);
    var distVector = [pEndPx[0] - pStartPx[0], pEndPx[1] - pStartPx[1]];
    var distance = Math.sqrt(Math.pow(distVector[0], 2) + Math.pow(distVector[1], 2));
    return {
      start: pStartPx,
      end: pEndPx,
      distance: distance
    };
  }

  function drawGlobe(ctx) {
    var rough = state.rough.globe;
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save();
    ctx.globalAlpha = gaScale(state.globe.scroll.progress); // Set the globe's radial gradient.

    var grad = ctx.createRadialGradient(0, 0, gradientValues.distance, 0, 0, gradientValues.distance * 6); // Add colour steops.

    colours$1.forEach(function (d) {
      return grad.addColorStop(d.stop, d.colour);
    });
    ctx.fillStyle = grad;
    ctx.beginPath(), path$1(sphere), ctx.fill();
    ctx.lineWidth = 0.05;
    ctx.strokeStyle = '#000000';
    ctx.beginPath(), path$1(grid), ctx.stroke();
    ctx.lineWidth = 0.5;
    ctx.beginPath(), path$1(countries), ctx.stroke();
    ctx.fillStyle = '#ff00ff';
    rough.path(pathSvg(portugal), {
      fill: state.bottleColour.bad.stop1,
      stroke: state.bottleColour.bad.stop1
    });
    ctx.lineWidth = 5;
    ctx.strokeStyle = state.bottleColour.bad.stop0;
    ctx.globalAlpha = aaScale(state.globe.scroll.progress);
    bezWithArrowheads(ctx, point0, point1, point2, undefined, 15, false, true);
    ctx.restore();
  }

  function renderGlobe() {
    // Set the projection tranform.
    projection$1.translate([txScale(state.globe.scroll.progress), tyScale(state.globe.scroll.progress)]);
    projection$1.scale(sScale(state.globe.scroll.progress));
    var r = rScale(state.globe.scroll.progress);
    projection$1.rotate([rBase[0] + r, rBase[1] + r, rBase[2]]); // Radial gradient parameters.

    gradientValues = getPixelDistance(gradientCentrePoint, gradientEdgePoint, projection$1); // Arrow control point.

    point1 = projection$1([-20, 43]);
    point1 = {
      x: point1[0],
      y: point1[1]
    }; // Arrow end point.

    point2 = projection$1([-10, 41]);
    point2 = {
      x: point2[0],
      y: point2[1]
    }; // Start the render.

    requestAnimationFrame(function () {
      return drawGlobe(state.ctx.globe);
    });
  }

  function prepData$1() {
    // Convert from topo to geoJSON.
    countries = feature(state.globe.data, state.globe.data.objects.ne_110m_admin_0_countries);

    var _countries$features$f = countries.features.filter(function (d) {
      return d.properties.admin === 'Portugal';
    });

    var _countries$features$f2 = _slicedToArray(_countries$features$f, 1);

    portugal = _countries$features$f2[0];
    // Arrow control point 0.
    point0 = {
      x: state.width * 0.35,
      y: state.height * 0.45
    };
  }

  function prepGeoTools() {
    projection$1 = geoOrthographic().fitSize([state.width, state.height], countries);
    path$1 = geoPath().projection(projection$1).context(state.ctx.globe);
    pathSvg = geoPath().projection(projection$1);
    sphere = {
      type: 'Sphere'
    };
    grid = graticule()();
  }

  function prepScales() {
    // Translate scales.
    txScale = linear$1().domain([0, 0.5]).range([state.width * 0.3, state.width * 0.5]);
    tyScale = linear$1().domain([0, 0.3, 0.7, 1]).range([state.height * 0.2, state.height * 0.5, state.height * 0.475, state.height * 0.2]); // The scale scale.

    var sInit = projection$1.scale();
    sScale = linear$1().domain([0, 0.3, 0.7, 1]).range([sInit, sInit * 2, sInit * 2, 0]); // The globe rotation scale.

    rScale = linear$1().domain([0, 0.3, 0.7, 1]).range([-50, -1, 1, 100]); // The globe's globalAlpha scale.

    gaScale = linear$1().domain([0, 0.1, 0.99, 1]).range([0, 1, 1, 0]); // The arrow's globalAlpha scale.

    aaScale = linear$1().domain([0, 0.3, 0.35, 0.65, 0.7, 1]).range([0, 0, 1, 1, 0, 0]);
  }

  function defineTweenGlobe() {
    prepData$1();
    prepGeoTools();
    prepScales();
    var tl = gsapWithCSS.timeline({
      onUpdate: renderGlobe
    }); // Bonkers tween to make timeline work. We could work straight
    // off ScrollTrigger, but this is more in tune with the rest.

    var blub = gsapWithCSS.to({
      bar: 0
    }, {
      bar: 1
    });
    return tl.add(blub);
  }

  function tweenGlobe() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('globe');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.globe) state.tween.globe.kill();
    state.tween.globe = defineTweenGlobe();
    state.tween.globe.totalProgress(progress);
  }
  //    whose centre remains on the transformed earth, which culminated in the
  //    `getPixelDistance` function. Only to find by accident that setting
  //    a radial gradient simply at (0, 0) looks in fact better. The distance
  //    is still being used though - although this could be solved with a
  //    simple linear scale synced with the scale-scale.

  function constant$4(x) {
    return function() {
      return x;
    };
  }

  function jiggle() {
    return (Math.random() - 0.5) * 1e-6;
  }

  function tree_add(d) {
    var x = +this._x.call(null, d),
        y = +this._y.call(null, d);
    return add$1(this.cover(x, y), x, y, d);
  }

  function add$1(tree, x, y, d) {
    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

    var parent,
        node = tree._root,
        leaf = {data: d},
        x0 = tree._x0,
        y0 = tree._y0,
        x1 = tree._x1,
        y1 = tree._y1,
        xm,
        ym,
        xp,
        yp,
        right,
        bottom,
        i,
        j;

    // If the tree is empty, initialize the root as a leaf.
    if (!node) return tree._root = leaf, tree;

    // Find the existing leaf for the new point, or add it.
    while (node.length) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
    }

    // Is the new point is exactly coincident with the existing point?
    xp = +tree._x.call(null, node.data);
    yp = +tree._y.call(null, node.data);
    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

    // Otherwise, split the leaf node until the old and new point are separated.
    do {
      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
    return parent[j] = node, parent[i] = leaf, tree;
  }

  function addAll(data) {
    var d, i, n = data.length,
        x,
        y,
        xz = new Array(n),
        yz = new Array(n),
        x0 = Infinity,
        y0 = Infinity,
        x1 = -Infinity,
        y1 = -Infinity;

    // Compute the points and their extent.
    for (i = 0; i < n; ++i) {
      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
      xz[i] = x;
      yz[i] = y;
      if (x < x0) x0 = x;
      if (x > x1) x1 = x;
      if (y < y0) y0 = y;
      if (y > y1) y1 = y;
    }

    // If there were no (valid) points, abort.
    if (x0 > x1 || y0 > y1) return this;

    // Expand the tree to cover the new points.
    this.cover(x0, y0).cover(x1, y1);

    // Add the new points.
    for (i = 0; i < n; ++i) {
      add$1(this, xz[i], yz[i], data[i]);
    }

    return this;
  }

  function tree_cover(x, y) {
    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

    var x0 = this._x0,
        y0 = this._y0,
        x1 = this._x1,
        y1 = this._y1;

    // If the quadtree has no extent, initialize them.
    // Integer extent are necessary so that if we later double the extent,
    // the existing quadrant boundaries don’t change due to floating point error!
    if (isNaN(x0)) {
      x1 = (x0 = Math.floor(x)) + 1;
      y1 = (y0 = Math.floor(y)) + 1;
    }

    // Otherwise, double repeatedly to cover.
    else {
      var z = x1 - x0,
          node = this._root,
          parent,
          i;

      while (x0 > x || x >= x1 || y0 > y || y >= y1) {
        i = (y < y0) << 1 | (x < x0);
        parent = new Array(4), parent[i] = node, node = parent, z *= 2;
        switch (i) {
          case 0: x1 = x0 + z, y1 = y0 + z; break;
          case 1: x0 = x1 - z, y1 = y0 + z; break;
          case 2: x1 = x0 + z, y0 = y1 - z; break;
          case 3: x0 = x1 - z, y0 = y1 - z; break;
        }
      }

      if (this._root && this._root.length) this._root = node;
    }

    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    return this;
  }

  function tree_data() {
    var data = [];
    this.visit(function(node) {
      if (!node.length) do data.push(node.data); while (node = node.next)
    });
    return data;
  }

  function tree_extent(_) {
    return arguments.length
        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
  }

  function Quad(node, x0, y0, x1, y1) {
    this.node = node;
    this.x0 = x0;
    this.y0 = y0;
    this.x1 = x1;
    this.y1 = y1;
  }

  function tree_find(x, y, radius) {
    var data,
        x0 = this._x0,
        y0 = this._y0,
        x1,
        y1,
        x2,
        y2,
        x3 = this._x1,
        y3 = this._y1,
        quads = [],
        node = this._root,
        q,
        i;

    if (node) quads.push(new Quad(node, x0, y0, x3, y3));
    if (radius == null) radius = Infinity;
    else {
      x0 = x - radius, y0 = y - radius;
      x3 = x + radius, y3 = y + radius;
      radius *= radius;
    }

    while (q = quads.pop()) {

      // Stop searching if this quadrant can’t contain a closer node.
      if (!(node = q.node)
          || (x1 = q.x0) > x3
          || (y1 = q.y0) > y3
          || (x2 = q.x1) < x0
          || (y2 = q.y1) < y0) continue;

      // Bisect the current quadrant.
      if (node.length) {
        var xm = (x1 + x2) / 2,
            ym = (y1 + y2) / 2;

        quads.push(
          new Quad(node[3], xm, ym, x2, y2),
          new Quad(node[2], x1, ym, xm, y2),
          new Quad(node[1], xm, y1, x2, ym),
          new Quad(node[0], x1, y1, xm, ym)
        );

        // Visit the closest quadrant first.
        if (i = (y >= ym) << 1 | (x >= xm)) {
          q = quads[quads.length - 1];
          quads[quads.length - 1] = quads[quads.length - 1 - i];
          quads[quads.length - 1 - i] = q;
        }
      }

      // Visit this point. (Visiting coincident points isn’t necessary!)
      else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            d2 = dx * dx + dy * dy;
        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x - d, y0 = y - d;
          x3 = x + d, y3 = y + d;
          data = node.data;
        }
      }
    }

    return data;
  }

  function tree_remove(d) {
    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

    var parent,
        node = this._root,
        retainer,
        previous,
        next,
        x0 = this._x0,
        y0 = this._y0,
        x1 = this._x1,
        y1 = this._y1,
        x,
        y,
        xm,
        ym,
        right,
        bottom,
        i,
        j;

    // If the tree is empty, initialize the root as a leaf.
    if (!node) return this;

    // Find the leaf node for the point.
    // While descending, also retain the deepest parent with a non-removed sibling.
    if (node.length) while (true) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
      if (!node.length) break;
      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
    }

    // Find the point to remove.
    while (node.data !== d) if (!(previous = node, node = node.next)) return this;
    if (next = node.next) delete node.next;

    // If there are multiple coincident points, remove just the point.
    if (previous) return (next ? previous.next = next : delete previous.next), this;

    // If this is the root point, remove it.
    if (!parent) return this._root = next, this;

    // Remove this leaf.
    next ? parent[i] = next : delete parent[i];

    // If the parent now contains exactly one leaf, collapse superfluous parents.
    if ((node = parent[0] || parent[1] || parent[2] || parent[3])
        && node === (parent[3] || parent[2] || parent[1] || parent[0])
        && !node.length) {
      if (retainer) retainer[j] = node;
      else this._root = node;
    }

    return this;
  }

  function removeAll(data) {
    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
    return this;
  }

  function tree_root() {
    return this._root;
  }

  function tree_size() {
    var size = 0;
    this.visit(function(node) {
      if (!node.length) do ++size; while (node = node.next)
    });
    return size;
  }

  function tree_visit(callback) {
    var quads = [], q, node = this._root, child, x0, y0, x1, y1;
    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
      }
    }
    return this;
  }

  function tree_visitAfter(callback) {
    var quads = [], next = [], q;
    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      var node = q.node;
      if (node.length) {
        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
      }
      next.push(q);
    }
    while (q = next.pop()) {
      callback(q.node, q.x0, q.y0, q.x1, q.y1);
    }
    return this;
  }

  function defaultX(d) {
    return d[0];
  }

  function tree_x(_) {
    return arguments.length ? (this._x = _, this) : this._x;
  }

  function defaultY(d) {
    return d[1];
  }

  function tree_y(_) {
    return arguments.length ? (this._y = _, this) : this._y;
  }

  function quadtree(nodes, x, y) {
    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
    return nodes == null ? tree : tree.addAll(nodes);
  }

  function Quadtree(x, y, x0, y0, x1, y1) {
    this._x = x;
    this._y = y;
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    this._root = undefined;
  }

  function leaf_copy(leaf) {
    var copy = {data: leaf.data}, next = copy;
    while (leaf = leaf.next) next = next.next = {data: leaf.data};
    return copy;
  }

  var treeProto = quadtree.prototype = Quadtree.prototype;

  treeProto.copy = function() {
    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
        node = this._root,
        nodes,
        child;

    if (!node) return copy;

    if (!node.length) return copy._root = leaf_copy(node), copy;

    nodes = [{source: node, target: copy._root = new Array(4)}];
    while (node = nodes.pop()) {
      for (var i = 0; i < 4; ++i) {
        if (child = node.source[i]) {
          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
          else node.target[i] = leaf_copy(child);
        }
      }
    }

    return copy;
  };

  treeProto.add = tree_add;
  treeProto.addAll = addAll;
  treeProto.cover = tree_cover;
  treeProto.data = tree_data;
  treeProto.extent = tree_extent;
  treeProto.find = tree_find;
  treeProto.remove = tree_remove;
  treeProto.removeAll = removeAll;
  treeProto.root = tree_root;
  treeProto.size = tree_size;
  treeProto.visit = tree_visit;
  treeProto.visitAfter = tree_visitAfter;
  treeProto.x = tree_x;
  treeProto.y = tree_y;

  function index(d) {
    return d.index;
  }

  function find(nodeById, nodeId) {
    var node = nodeById.get(nodeId);
    if (!node) throw new Error("missing: " + nodeId);
    return node;
  }

  function forceLink(links) {
    var id = index,
        strength = defaultStrength,
        strengths,
        distance = constant$4(30),
        distances,
        nodes,
        count,
        bias,
        iterations = 1;

    if (links == null) links = [];

    function defaultStrength(link) {
      return 1 / Math.min(count[link.source.index], count[link.target.index]);
    }

    function force(alpha) {
      for (var k = 0, n = links.length; k < iterations; ++k) {
        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
          link = links[i], source = link.source, target = link.target;
          x = target.x + target.vx - source.x - source.vx || jiggle();
          y = target.y + target.vy - source.y - source.vy || jiggle();
          l = Math.sqrt(x * x + y * y);
          l = (l - distances[i]) / l * alpha * strengths[i];
          x *= l, y *= l;
          target.vx -= x * (b = bias[i]);
          target.vy -= y * b;
          source.vx += x * (b = 1 - b);
          source.vy += y * b;
        }
      }
    }

    function initialize() {
      if (!nodes) return;

      var i,
          n = nodes.length,
          m = links.length,
          nodeById = map(nodes, id),
          link;

      for (i = 0, count = new Array(n); i < m; ++i) {
        link = links[i], link.index = i;
        if (typeof link.source !== "object") link.source = find(nodeById, link.source);
        if (typeof link.target !== "object") link.target = find(nodeById, link.target);
        count[link.source.index] = (count[link.source.index] || 0) + 1;
        count[link.target.index] = (count[link.target.index] || 0) + 1;
      }

      for (i = 0, bias = new Array(m); i < m; ++i) {
        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
      }

      strengths = new Array(m), initializeStrength();
      distances = new Array(m), initializeDistance();
    }

    function initializeStrength() {
      if (!nodes) return;

      for (var i = 0, n = links.length; i < n; ++i) {
        strengths[i] = +strength(links[i], i, links);
      }
    }

    function initializeDistance() {
      if (!nodes) return;

      for (var i = 0, n = links.length; i < n; ++i) {
        distances[i] = +distance(links[i], i, links);
      }
    }

    force.initialize = function(_) {
      nodes = _;
      initialize();
    };

    force.links = function(_) {
      return arguments.length ? (links = _, initialize(), force) : links;
    };

    force.id = function(_) {
      return arguments.length ? (id = _, force) : id;
    };

    force.iterations = function(_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    };

    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initializeStrength(), force) : strength;
    };

    force.distance = function(_) {
      return arguments.length ? (distance = typeof _ === "function" ? _ : constant$4(+_), initializeDistance(), force) : distance;
    };

    return force;
  }

  var frame$2 = 0, // is an animation frame pending?
      timeout$4 = 0, // is a timeout pending?
      interval$2 = 0, // are any timers active?
      pokeDelay$2 = 1000, // how frequently we check for clock skew
      taskHead$2,
      taskTail$2,
      clockLast$2 = 0,
      clockNow$2 = 0,
      clockSkew$2 = 0,
      clock$2 = typeof performance === "object" && performance.now ? performance : Date,
      setFrame$2 = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

  function now$3() {
    return clockNow$2 || (setFrame$2(clearNow$2), clockNow$2 = clock$2.now() + clockSkew$2);
  }

  function clearNow$2() {
    clockNow$2 = 0;
  }

  function Timer$2() {
    this._call =
    this._time =
    this._next = null;
  }

  Timer$2.prototype = timer$2.prototype = {
    constructor: Timer$2,
    restart: function(callback, delay, time) {
      if (typeof callback !== "function") throw new TypeError("callback is not a function");
      time = (time == null ? now$3() : +time) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail$2 !== this) {
        if (taskTail$2) taskTail$2._next = this;
        else taskHead$2 = this;
        taskTail$2 = this;
      }
      this._call = callback;
      this._time = time;
      sleep$2();
    },
    stop: function() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep$2();
      }
    }
  };

  function timer$2(callback, delay, time) {
    var t = new Timer$2;
    t.restart(callback, delay, time);
    return t;
  }

  function timerFlush$2() {
    now$3(); // Get the current time, if not already set.
    ++frame$2; // Pretend we’ve set an alarm, if we haven’t already.
    var t = taskHead$2, e;
    while (t) {
      if ((e = clockNow$2 - t._time) >= 0) t._call.call(null, e);
      t = t._next;
    }
    --frame$2;
  }

  function wake$2() {
    clockNow$2 = (clockLast$2 = clock$2.now()) + clockSkew$2;
    frame$2 = timeout$4 = 0;
    try {
      timerFlush$2();
    } finally {
      frame$2 = 0;
      nap$2();
      clockNow$2 = 0;
    }
  }

  function poke$2() {
    var now = clock$2.now(), delay = now - clockLast$2;
    if (delay > pokeDelay$2) clockSkew$2 -= delay, clockLast$2 = now;
  }

  function nap$2() {
    var t0, t1 = taskHead$2, t2, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time) time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead$2 = t2;
      }
    }
    taskTail$2 = t0;
    sleep$2(time);
  }

  function sleep$2(time) {
    if (frame$2) return; // Soonest alarm already set, or will be.
    if (timeout$4) timeout$4 = clearTimeout(timeout$4);
    var delay = time - clockNow$2; // Strictly less than if we recomputed clockNow.
    if (delay > 24) {
      if (time < Infinity) timeout$4 = setTimeout(wake$2, time - clock$2.now() - clockSkew$2);
      if (interval$2) interval$2 = clearInterval(interval$2);
    } else {
      if (!interval$2) clockLast$2 = clock$2.now(), interval$2 = setInterval(poke$2, pokeDelay$2);
      frame$2 = 1, setFrame$2(wake$2);
    }
  }

  function x$2(d) {
    return d.x;
  }

  function y$2(d) {
    return d.y;
  }

  var initialRadius = 10,
      initialAngle = Math.PI * (3 - Math.sqrt(5));

  function forceSimulation(nodes) {
    var simulation,
        alpha = 1,
        alphaMin = 0.001,
        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
        alphaTarget = 0,
        velocityDecay = 0.6,
        forces = map(),
        stepper = timer$2(step),
        event = dispatch("tick", "end");

    if (nodes == null) nodes = [];

    function step() {
      tick();
      event.call("tick", simulation);
      if (alpha < alphaMin) {
        stepper.stop();
        event.call("end", simulation);
      }
    }

    function tick(iterations) {
      var i, n = nodes.length, node;

      if (iterations === undefined) iterations = 1;

      for (var k = 0; k < iterations; ++k) {
        alpha += (alphaTarget - alpha) * alphaDecay;

        forces.each(function (force) {
          force(alpha);
        });

        for (i = 0; i < n; ++i) {
          node = nodes[i];
          if (node.fx == null) node.x += node.vx *= velocityDecay;
          else node.x = node.fx, node.vx = 0;
          if (node.fy == null) node.y += node.vy *= velocityDecay;
          else node.y = node.fy, node.vy = 0;
        }
      }

      return simulation;
    }

    function initializeNodes() {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.index = i;
        if (node.fx != null) node.x = node.fx;
        if (node.fy != null) node.y = node.fy;
        if (isNaN(node.x) || isNaN(node.y)) {
          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
          node.x = radius * Math.cos(angle);
          node.y = radius * Math.sin(angle);
        }
        if (isNaN(node.vx) || isNaN(node.vy)) {
          node.vx = node.vy = 0;
        }
      }
    }

    function initializeForce(force) {
      if (force.initialize) force.initialize(nodes);
      return force;
    }

    initializeNodes();

    return simulation = {
      tick: tick,

      restart: function() {
        return stepper.restart(step), simulation;
      },

      stop: function() {
        return stepper.stop(), simulation;
      },

      nodes: function(_) {
        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
      },

      alpha: function(_) {
        return arguments.length ? (alpha = +_, simulation) : alpha;
      },

      alphaMin: function(_) {
        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
      },

      alphaDecay: function(_) {
        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
      },

      alphaTarget: function(_) {
        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
      },

      velocityDecay: function(_) {
        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
      },

      force: function(name, _) {
        return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
      },

      find: function(x, y, radius) {
        var i = 0,
            n = nodes.length,
            dx,
            dy,
            d2,
            node,
            closest;

        if (radius == null) radius = Infinity;
        else radius *= radius;

        for (i = 0; i < n; ++i) {
          node = nodes[i];
          dx = x - node.x;
          dy = y - node.y;
          d2 = dx * dx + dy * dy;
          if (d2 < radius) closest = node, radius = d2;
        }

        return closest;
      },

      on: function(name, _) {
        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
      }
    };
  }

  function forceManyBody() {
    var nodes,
        node,
        alpha,
        strength = constant$4(-30),
        strengths,
        distanceMin2 = 1,
        distanceMax2 = Infinity,
        theta2 = 0.81;

    function force(_) {
      var i, n = nodes.length, tree = quadtree(nodes, x$2, y$2).visitAfter(accumulate);
      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
    }

    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length, node;
      strengths = new Array(n);
      for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
    }

    function accumulate(quad) {
      var strength = 0, q, c, weight = 0, x, y, i;

      // For internal nodes, accumulate forces from child quadrants.
      if (quad.length) {
        for (x = y = i = 0; i < 4; ++i) {
          if ((q = quad[i]) && (c = Math.abs(q.value))) {
            strength += q.value, weight += c, x += c * q.x, y += c * q.y;
          }
        }
        quad.x = x / weight;
        quad.y = y / weight;
      }

      // For leaf nodes, accumulate forces from coincident quadrants.
      else {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;
        do strength += strengths[q.data.index];
        while (q = q.next);
      }

      quad.value = strength;
    }

    function apply(quad, x1, _, x2) {
      if (!quad.value) return true;

      var x = quad.x - node.x,
          y = quad.y - node.y,
          w = x2 - x1,
          l = x * x + y * y;

      // Apply the Barnes-Hut approximation if possible.
      // Limit forces for very close nodes; randomize direction if coincident.
      if (w * w / theta2 < l) {
        if (l < distanceMax2) {
          if (x === 0) x = jiggle(), l += x * x;
          if (y === 0) y = jiggle(), l += y * y;
          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
          node.vx += x * quad.value * alpha / l;
          node.vy += y * quad.value * alpha / l;
        }
        return true;
      }

      // Otherwise, process points directly.
      else if (quad.length || l >= distanceMax2) return;

      // Limit forces for very close nodes; randomize direction if coincident.
      if (quad.data !== node || quad.next) {
        if (x === 0) x = jiggle(), l += x * x;
        if (y === 0) y = jiggle(), l += y * y;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
      }

      do if (quad.data !== node) {
        w = strengths[quad.data.index] * alpha / l;
        node.vx += x * w;
        node.vy += y * w;
      } while (quad = quad.next);
    }

    force.initialize = function(_) {
      nodes = _;
      initialize();
    };

    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
    };

    force.distanceMin = function(_) {
      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
    };

    force.distanceMax = function(_) {
      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
    };

    force.theta = function(_) {
      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
    };

    return force;
  }

  function forceX(x) {
    var strength = constant$4(0.1),
        nodes,
        strengths,
        xz;

    if (typeof x !== "function") x = constant$4(x == null ? 0 : +x);

    function force(alpha) {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
      }
    }

    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length;
      strengths = new Array(n);
      xz = new Array(n);
      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
      }
    }

    force.initialize = function(_) {
      nodes = _;
      initialize();
    };

    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
    };

    force.x = function(_) {
      return arguments.length ? (x = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : x;
    };

    return force;
  }

  function forceY(y) {
    var strength = constant$4(0.1),
        nodes,
        strengths,
        yz;

    if (typeof y !== "function") y = constant$4(y == null ? 0 : +y);

    function force(alpha) {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
      }
    }

    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length;
      strengths = new Array(n);
      yz = new Array(n);
      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
      }
    }

    force.initialize = function(_) {
      nodes = _;
      initialize();
    };

    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
    };

    force.y = function(_) {
      return arguments.length ? (y = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : y;
    };

    return force;
  }

  /**
   * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)
   * is a simple way to find a fitted line
   * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line
   * using the least sum of squares.
   *
   * @param {Array<Array<number>>} data an array of two-element of arrays,
   * like `[[0, 1], [2, 3]]`
   * @returns {Object} object containing slope and intersect of regression line
   * @example
   * linearRegression([[0, 0], [1, 1]]); // => { m: 1, b: 0 }
   */
  function linearRegression(data) {
      var m, b;

      // Store data length in a local variable to reduce
      // repeated object property lookups
      var dataLength = data.length;

      //if there's only one point, arbitrarily choose a slope of 0
      //and a y-intercept of whatever the y of the initial point is
      if (dataLength === 1) {
          m = 0;
          b = data[0][1];
      } else {
          // Initialize our sums and scope the `m` and `b`
          // variables that define the line.
          var sumX = 0,
              sumY = 0,
              sumXX = 0,
              sumXY = 0;

          // Use local variables to grab point values
          // with minimal object property lookups
          var point, x, y;

          // Gather the sum of all x values, the sum of all
          // y values, and the sum of x^2 and (x*y) for each
          // value.
          //
          // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy
          for (var i = 0; i < dataLength; i++) {
              point = data[i];
              x = point[0];
              y = point[1];

              sumX += x;
              sumY += y;

              sumXX += x * x;
              sumXY += x * y;
          }

          // `m` is the slope of the regression line
          m =
              (dataLength * sumXY - sumX * sumY) /
              (dataLength * sumXX - sumX * sumX);

          // `b` is the y-intercept of the line.
          b = sumY / dataLength - (m * sumX) / dataLength;
      }

      // Return both values as an object.
      return {
          m: m,
          b: b
      };
  }

  /**
   * Given the output of `linearRegression`: an object
   * with `m` and `b` values indicating slope and intercept,
   * respectively, generate a line function that translates
   * x values into y values.
   *
   * @param {Object} mb object with `m` and `b` members, representing
   * slope and intersect of desired line
   * @returns {Function} method that computes y-value at any given
   * x-value on the line.
   * @example
   * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));
   * l(0) // = 0
   * l(2) // = 2
   * linearRegressionLine({ b: 0, m: 1 })(1); // => 1
   * linearRegressionLine({ b: 1, m: 1 })(1); // => 2
   */
  function linearRegressionLine(mb /*: { b: number, m: number }*/) {
      // Return a function that computes a `y` value for each
      // x value it is given, based on the values of `b` and `a`
      // that we just computed.
      return function (x) {
          return mb.b + mb.m * x;
      };
  }

  /* eslint-disable no-return-assign */
  /**
   * Build sensible bin values (with d3's tick func),
   * return a snap function that snaps continuous
   * values to these bin centres.
   * Also return a scale for the snapped values.
   */

  function getXScaleTools(data, variable) {
    var domain = extent(data, function (d) {
      return d[variable];
    });
    var tickArray = ticks(domain[0], domain[1], 12);
    var scale = point$1().domain(tickArray);

    function snap(number) {
      return tickArray.reduce(function (a, b) {
        return Math.abs(b - number) < Math.abs(a - number) ? b : a;
      });
    }

    return {
      scale: scale,
      snap: snap
    };
  }
  /**
   * Nest by the snapped x values,
   * enumerate each value per group from 0 to max in the group,
   * scale each value from 0 to 1,
   * return a map by id to let the user combine this data in the app.
   */


  function getYValueMap(data, variable, snap) {
    // Split and Apply... (Combine happens in the main func).
    var nested = nest().key(function (d) {
      return snap(d[variable]);
    }).rollup(function (v) {
      return v.map(function (d, i) {
        return {
          id: d.id,
          y: i
        };
      });
    }).entries(data); // Unnest the results...

    var unnested = nested.map(function (d) {
      return d.value;
    });
    var flattened = [].concat.apply([], unnested); // Scale y values to [0, 1].

    var yScale = linear$1().domain(extent(flattened, function (d) {
      return d.y;
    })); // Get a map of values by the data's id variable.

    var flatMap = nest().key(function (d) {
      return d.id;
    }).rollup(function (v) {
      return yScale(v[0].y);
    }).map(flattened);
    return flatMap;
  }

  function frequency() {
    var variable; // The data variable.

    var id = 'id'; // The unique numerical row identifier variable.

    function layout(data) {
      // xValues.
      var xTools = getXScaleTools(data, variable);
      var yMap = getYValueMap(data, variable, xTools.snap); // Get the layout in an array.

      var result = data.map(function (d) {
        return {
          id: d[id],
          x: xTools.scale(xTools.snap(d[variable])),
          y: yMap.get(d[id]),
          value: xTools.snap(d[variable])
        };
      }); // Get the layout in a map by `id` which needs to be in
      // the dataset this layout gets joined by.

      var resultMap = nest().key(function (d) {
        return d[id];
      }).rollup(function (v) {
        return {
          x: v[0].x,
          y: v[0].y,
          value: v[0].value
        };
      }).map(result);
      return resultMap;
    }

    layout.variable = function (_) {
      return _ ? (variable = _, layout) : variable;
    };

    layout.id = function (_) {
      return _ ? (id = _, layout) : id;
    };

    return layout;
  }

  /* eslint-disable no-param-reassign */
  // the bottom. Not on all points as the shape might be wavey. We do this here...

  function focus(leaves, axis) {
    // Sort the node leaves descendingly by their y position for
    // the x axis and by their x position for the y axis labels.
    return axis === 'x' ? leaves.sort(function (a, b) {
      return b.y - a.y;
    }).filter(function (_, i) {
      return i < 10;
    }) : leaves.sort(function (a, b) {
      return b.x - a.x;
    }).filter(function (_, i) {
      return i < 10;
    });
  } // Values for an x axis.


  function xAxisValues(values, key, ax, p) {
    return {
      x: median(focus(values, ax), function (d) {
        return d.x;
      }),
      y: max(values, function (d) {
        return d.y;
      }) + p,
      xRange: extent(values, function (d) {
        return d.x;
      }),
      yRange: extent(values, function (d) {
        return d.y;
      }),
      zigzag: String(median(values, key)).length > 3 // 1

    };
  } // Values for a y axis.


  function yAxisValues(values, key, ax, p) {
    return {
      x: max(values, function (d) {
        return d.x;
      }) + p,
      y: median(focus(values, ax), function (d) {
        return d.y;
      }),
      xRange: extent(values, function (d) {
        return d.x;
      }),
      yRange: extent(values, function (d) {
        return d.y;
      }),
      zigzag: String(median(values, key)).length > 3
    };
  }

  function labels() {
    var nestKey;
    var axis = 'x';
    var align = false;
    var padding = 10;

    function layout(data) {
      // Label positions for each variable category.
      var ticks = nest().key(nestKey).rollup(function (v) {
        if (axis === 'x') return xAxisValues(v, nestKey, axis, padding);
        if (axis === 'y') return yAxisValues(v, nestKey, axis, padding);
        throw Error('Label axis parameter needs to be x or y');
      }).entries(data).sort(function (a, b) {
        return +a.key - +b.key;
      }); // Bounding box of the variable's point cloud.

      var bbox = {
        xMin: min(ticks, function (d) {
          return d.value.xRange[0];
        }),
        xMax: max(ticks, function (d) {
          return d.value.xRange[1];
        }),
        yMin: min(ticks, function (d) {
          return d.value.yRange[0];
        }),
        yMax: max(ticks, function (d) {
          return d.value.yRange[1];
        })
      }; // If align is true, we correct/align the labels' cross axis position.

      if (align && axis === 'x') {
        ticks.forEach(function (tick) {
          return tick.value.y = bbox.yMax + padding;
        });
      }

      if (align && axis === 'y') {
        ticks.forEach(function (tick) {
          return tick.value.x = bbox.xMax + padding;
        });
      } // Get heading or axis label positions.


      var yMinTick = ticks.filter(function (d) {
        return d.value.yRange[0] === bbox.yMin;
      })[0];
      var label = {};
      label.header = {
        x: yMinTick.value.x,
        y: bbox.yMin
      };
      label.axisLabel = axis === 'x' ? {
        x: ticks[0].value.x,
        y: ticks[0].value.y + padding
      } : {
        x: ticks[ticks.length - 1].value.x,
        y: ticks[ticks.length - 1].value.y - padding * 1.5
      }; // Return the info.

      return {
        ticks: ticks,
        bbox: bbox,
        label: label
      };
    } // Getters/setters.


    layout.nestKey = function (_) {
      return _ ? (nestKey = _, layout) : nestKey;
    };

    layout.axis = function (_) {
      return _ ? (axis = _, layout) : axis;
    };

    layout.padding = function (_) {
      return _ ? (padding = _, layout) : padding;
    }; // Special treatment for boolean getter/setter:


    layout.align = function (_) {
      return _ !== undefined || _ !== null ? (align = _, layout) : align;
    };

    return layout;
  }
   // 1.  if labels are longer than 3 than we should arrange them in zig zag.

  /* eslint-disable no-prototype-builtins */

  var dotRadius = 1.5;
  var dot;
  var dotGood;
  var dotBad;
  var margin;
  var xScale$1;
  var yScale$1;
  var sim;
  var tickPadding = 20; // Regression line data.

  var lrLine;
  var start$1 = [];
  var end = [];
  var cp1 = [];
  var cp2 = [];
  var length;
  var offset; // Point on regression line data.

  var pointStart = [];
  var point$3 = [];
  var pointEnd = [];
  var pointRadius;
  var pointAlpha; // Utils

  function tweenStatsAlpha(value) {
    var dur = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
    gsap.to(state.stats.alpha, {
      value: value,
      duration: dur
    });
  } // Scales and Data
  // ---------------


  function getScales() {
    margin = {
      top: state.height * 0.3,
      right: state.width * 0.3,
      bottom: state.height * 0.3,
      left: state.width * 0.3
    };
    xScale$1 = linear$1().range([margin.left, state.width - margin.right]);
    yScale$1 = linear$1().range([state.height - margin.bottom, margin.top]);
  } // At each tick, this returns an object with the x and y position
  // for each label as well as their text value.


  function getLabelCoordinates() {
    if (!state.stats.current.length) return; // Get the tick values, the cloud's bounding box and the label positions.

    state.stats.current.forEach(function (el) {
      var name = el.name,
          axis = el.axis,
          straight = el.straight;
      var labelLayout = labels().nestKey(function (d) {
        return d.layout[name].value;
      }).axis(axis).padding(tickPadding).align(straight)(state.stats.data); // Add layout to the current variable object.

      el.labelLayout = labelLayout;
    });
  } // Draw Line functions


  function getLinearLine(xRange) {
    // Calculate the line function.
    var lrInput = state.stats.data.map(function (d) {
      return [d.x, d.y];
    });
    var lr = linearRegression(lrInput);
    lrLine = linearRegressionLine(lr); // Calculate the length and offset and save the
    // variables for the draw func in module scope.

    start$1 = [xRange[0], lrLine(xRange[0])];
    cp1 = start$1.slice();
    end = [xRange[1], lrLine(xRange[1])];
    cp2 = end.slice();
    length = euclideanDistance(start$1, end);
    offset = (1 - state.stats.progress.draw) * length;
  }

  function getLinearLineExtension(xRange) {
    var extension = state.stats.progress.extend * (xRange[1] - xRange[0]);
    start$1 = [xRange[0] - extension, lrLine(xRange[0] - extension)];
    cp1 = start$1.slice();
    end = [xRange[1] + extension, lrLine(xRange[1] + extension)];
    cp2 = end.slice();
    length = euclideanDistance(start$1, end);
    offset = (1 - state.stats.progress.draw) * length;
  }

  function getLogisticLine(xRange) {
    // Need this to get the exact y positions.
    var yAxisValues = state.stats.current.filter(function (d) {
      return d.axis === 'y';
    }); // Run it only if stars align.
    // We might want to probably also condition this on progress.logistic being > 0

    if (!yAxisValues.length || !yAxisValues[0].labelLayout) return; // How to debug:
    // if (state.stats.progress.logistic > 0) debugger;
    // Get the exact x and y position is a bit of a song and dance.
    // Basically, we need the tick values from the labels for
    // the axes positions we'll use as logistic start and end curve points.

    var yTicks = yAxisValues[0].labelLayout.ticks;
    var yValues = [yTicks[0].value.y, yTicks[1].value.y];
    var startDest = [state.stats.current[0].labelLayout.bbox.xMin - 10, yValues[0]];
    var endDest = [state.stats.current[0].labelLayout.bbox.xMax + 10, yValues[1]]; // The control points are fractions of the xRange distance.

    var cp1xDest = xRange[0] + (xRange[1] - xRange[0]) * 0.8;
    var cp2xDest = xRange[0] + (xRange[1] - xRange[0]) * 0.5; // Interpolating (could use gsap here, but that would require state and stuff..)

    start$1[0] += state.stats.progress.logistic * (startDest[0] - start$1[0]);
    start$1[1] += state.stats.progress.logistic * (startDest[1] - start$1[1]);
    end[0] += state.stats.progress.logistic * (endDest[0] - end[0]);
    end[1] += state.stats.progress.logistic * (endDest[1] - end[1]);
    cp1[1] = start$1[1];
    cp2[1] = end[1];
    cp1[0] += state.stats.progress.logistic * (cp1xDest - cp1[0]);
    cp2[0] += state.stats.progress.logistic * (cp2xDest - cp2[0]);
  } // Calculates the regression lines.


  function getLineDrawingParams() {
    // Only do all this work, when we want to show the regression line.
    if (!state.stats.lr) return; // The points x ranges (not the layout, the actual simulated points in px)
    // help calculate the x, y positions of the linear regression line.

    var xRange = extent(state.stats.data, function (d) {
      return d.x;
    });
    xRange[1] += 5; // let it nudge over a little.
    // Calculate the line positions.

    getLinearLine(xRange);
    getLinearLineExtension(xRange);
    getLogisticLine(xRange);
  } // Helper func to find the y tick corresponding to the point's x tick.


  function gatherTickInfo(xTick, array) {
    var yValue = lrLine(xTick.value.x); // Get the closest y tick.

    var yTick = array.reduce(function (a, b) {
      return Math.abs(b.value.y - yValue) < Math.abs(a.value.y - yValue) ? b : a;
    }); // A higher x value means we are below the ticl.

    var delta = yValue > yTick.value.y ? 'below' : 'above'; // Store the data in state so we can fetch it later from the article.

    state.stats.pointTickInfo = {
      x: xTick.key,
      y: yTick.key,
      yDelta: delta
    };
  } // Set the point coordinates we draw in `drawPoint`.


  function getPointDrawingParams() {
    if (!state.stats.lr) return;
    var xAxisValues = state.stats.current.filter(function (d) {
      return d.axis === 'x';
    })[0];
    if (!xAxisValues.labelLayout) return; // double safety net due to random race condition issue.

    var bbox = xAxisValues.labelLayout.bbox;
    var tickNumber = xAxisValues.labelLayout.ticks.length; // This needs to go in state / be picked up by the story

    var xTick = xAxisValues.labelLayout.ticks[Math.ceil(tickNumber / 2)]; // The points' final destination.

    pointStart = [xTick.value.x, bbox.yMax];
    var pointFinal = [pointStart[0], lrLine(pointStart[0])];
    var pointEndFinal = [bbox.xMax, lrLine(pointStart[0])]; // The initial point positions.

    point$3 = pointStart.slice();
    pointEnd = point$3.slice(); // Interpolating from the initial to the final positions.

    point$3[0] += state.stats.progress.point * (pointFinal[0] - point$3[0]);
    point$3[1] += state.stats.progress.point * (pointFinal[1] - point$3[1]);
    pointEnd[0] += state.stats.progress.point * (pointEndFinal[0] - pointEnd[0]);
    pointEnd[1] += state.stats.progress.point * (pointEndFinal[1] - pointEnd[1]);
    pointRadius = state.stats.progress.point * 5;
    pointAlpha = 1 - state.stats.progress.extend; // Get the tick inofo (what is the x and what the y key?) for the articla.
    // We only need this once to begin with (this func runs repeatedly on render).

    if (!state.stats.pointTickInfo) {
      gatherTickInfo(xTick, state.stats.current.filter(function (d) {
        return d.axis === 'y';
      })[0].labelLayout.ticks);
    }
  } // Layouts
  // -------
  // Layouts to save in each data row. The simulations
  // can move the dots to these with forceX, forceY.


  function addLayouts() {
    // Get all variable based layouts.
    var frequencyLayouts = [{
      name: 'alcohol',
      layout: frequency().variable('alcohol')(state.stats.data)
    }, {
      name: 'density',
      layout: frequency().variable('density')(state.stats.data)
    }, {
      name: 'citric_acid',
      layout: frequency().variable('citric_acid')(state.stats.data)
    }, {
      name: 'ph',
      layout: frequency().variable('ph')(state.stats.data)
    }, {
      name: 'volatile_acidity',
      layout: frequency().variable('volatile_acidity')(state.stats.data)
    }, {
      name: 'quality',
      layout: frequency().variable('quality')(state.stats.data)
    }, {
      name: 'quality_binary',
      layout: frequency().variable('quality_binary')(state.stats.data)
    }]; // Prep the scatter layout loop, with the predictors to use...

    var scatterLayouts = [{
      name: 'alcohol__quality',
      pred: 'alcohol',
      out: 'quality'
    }, {
      name: 'alcohol__quality_binary',
      pred: 'alcohol',
      out: 'quality_binary'
    }, {
      name: 'vol_acid__quality',
      pred: 'volatile_acidity',
      out: 'quality'
    }]; // Add all layouts to the main data.

    state.stats.data.forEach(function (d) {
      d.layout = {}; // That point where the globe disappears to.

      d.layout.globeExit = {
        x: txScale(1) + Math.random(),
        // 1
        y: tyScale(1) + Math.random()
      }; // Note, the Lattice layout is controlled by the link dataset.
      // Add all variable layouts to the data.

      frequencyLayouts.forEach(function (el) {
        d.layout[el.name] = {
          x: xScale$1(el.layout.get(d.id).x),
          y: yScale$1(el.layout.get(d.id).y),
          value: el.layout.get(d.id).value
        };
      }); // Add scatter plot layouts

      scatterLayouts.forEach(function (el) {
        var predictorScale = getLinearScale(el.pred);
        var outcomeScale = getLinearScale(el.out);
        d.layout[el.name] = {
          x: xScale$1(predictorScale(d[el.pred])),
          y: yScale$1(outcomeScale(d[el.out]))
        };
      });
    });
  } // Set an initial layout.


  function setLayout(name) {
    state.stats.data.forEach(function (d) {
      d.x = d.layout[name].x;
      d.y = d.layout[name].y;
    });
  } // Render and draw
  // ---------------


  function drawDot(r, colour) {
    var can = document.createElement('canvas');
    can.width = can.height = r * 2;
    var ctx = can.getContext('2d');
    ctx.beginPath();
    ctx.fillStyle = colour;
    ctx.arc(r, r, r, 0, 2 * Math.PI);
    ctx.fill();
    return can;
  }

  function drawPoint(ctx) {
    ctx.save();
    ctx.globalAlpha = pointAlpha; // Vertical line.

    ctx.beginPath();
    ctx.moveTo(pointStart[0], pointStart[1]);
    ctx.lineTo(point$3[0], point$3[1]);
    ctx.stroke(); // Point.

    ctx.beginPath();
    ctx.arc(point$3[0], point$3[1], pointRadius, 0, 2 * Math.PI);
    ctx.fill(); // Horizontal line.

    ctx.beginPath();
    ctx.moveTo(point$3[0], point$3[1]);
    ctx.lineTo(pointEnd[0], pointEnd[1]);
    ctx.stroke();
    ctx.restore();
  }

  function drawLine(ctx) {
    // Check for the regression line flag and if there's data to draw.
    if (!state.stats.lr && start$1.length) return;
    ctx.save();
    ctx.globalAlpha = state.stats.alpha.value; // Draw the regression line dynamically.

    ctx.beginPath();
    ctx.setLineDash([length - offset, offset]);
    ctx.moveTo(start$1[0], start$1[1]);
    ctx.bezierCurveTo(cp1[0], cp1[1], cp2[0], cp2[1], end[0], end[1]);
    ctx.lineCap = 'round';
    ctx.lineWidth = 3;
    ctx.stroke();
    ctx.restore();
  }

  function drawStats(ctx) {
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save();
    ctx.globalAlpha = state.stats.alpha.value; // Draw axes and labels.

    if (state.stats.current.length) {
      // Base styles.
      ctx.strokeStyle = '#000000';
      ctx.fillStyle = '#000000';
      ctx.lineWidth = 0.2; // Loop through each of the variables we want to show.

      var _loop = function _loop(i) {
        var currentVar = state.stats.current[i]; // Check if there's data to draw with.

        if (!currentVar.hasOwnProperty('labelLayout')) return "break"; // Reference element and layout info.

        var labelLayout = currentVar.labelLayout; // Draw each tick.

        labelLayout.ticks.forEach(function (tick, j) {
          // Base info.
          var x = tick.value.x;
          var y = tick.value.y;
          var label = tick.key; // For scatter plots (they have label == true)...

          if (currentVar.label) {
            if (currentVar.axis === 'x') {
              ctx.font = '10px Signika';
              ctx.textAlign = 'center';
              ctx.textBaseline = 'top';
              ctx.fillText(label, x, y);
              var xTickLine = x;
              var y1TickLine = labelLayout.bbox.yMin;
              var y2TickLine = y - 10;
              ctx.beginPath();
              ctx.moveTo(xTickLine, y1TickLine);
              ctx.lineTo(xTickLine, y2TickLine);
              ctx.stroke();
            }

            if (currentVar.axis === 'y') {
              ctx.font = '10px Signika';
              ctx.textAlign = 'left';
              ctx.textBaseline = 'middle';
              ctx.fillText(label, x, y);
              var x1TickLine = labelLayout.bbox.xMin;
              var x2TickLine = x - 10;
              var yTickLine = y;
              ctx.beginPath();
              ctx.moveTo(x1TickLine, yTickLine);
              ctx.lineTo(x2TickLine, yTickLine);
              ctx.stroke();
            }
          } // For frequency plots (they have label == false)...


          if (!currentVar.label) {
            // Set the lengths of ticks.
            var y1 = y - tickPadding * 0.5;
            var y2 = y - tickPadding * 0.1; // Overwrite y2 if we should arrange long labels in zig zag.

            var zigzagCondition = currentVar.axis === 'x' && tick.value.zigzag && j % 2 === 0;
            if (zigzagCondition) y2 += 15; // Draw label.

            ctx.font = '10px Signika';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'top';
            ctx.fillText(label, x, y2 + 5); // Draw ticks.

            ctx.beginPath();
            ctx.moveTo(x, y1);
            ctx.lineTo(x, y2);
            ctx.stroke();
          }
        }); // Draw the header.

        if (currentVar.header) {
          var xHeader = labelLayout.label.header.x;
          var yHeader = labelLayout.label.header.y;
          var labelHeader = currentVar.name === 'ph' // edge case.
          ? 'pH' : prettyLabel(currentVar.name).replace('_', ' ');
          ctx.font = '50px Amatic SC';
          ctx.fillText(labelHeader, xHeader, yHeader - 50);
        } // Draw the axis labels.


        if (currentVar.label) {
          var xAxisLabel = labelLayout.label.axisLabel.x;
          var yAxisLabel = labelLayout.label.axisLabel.y;
          var labelAxis = prettyLabel(currentVar.name).replace('_', ' ');
          ctx.font = '20px Amatic SC';
          ctx.fillText(labelAxis, xAxisLabel, yAxisLabel);
        }
      };

      for (var i = 0; i < state.stats.current.length; i++) {
        var _ret = _loop(i);

        if (_ret === "break") break;
      }
    } // Draw dots.


    state.stats.data.forEach(function (d) {
      if (!state.stats.colourDots) {
        ctx.drawImage(dot, d.x, d.y);
      } else {
        ctx.drawImage(d.quality_binary ? dotGood : dotBad, d.x, d.y);
      }
    });
    ctx.restore();
  }

  function renderStats() {
    getLineDrawingParams();
    getPointDrawingParams();
    requestAnimationFrame(function () {
      drawStats(state.ctx.chart);
      drawLine(state.ctx.chart);
      drawPoint(state.ctx.chart);
    });
  } // Simulations
  // -----------
  // All the stuff we run per tick.


  function handleTick() {
    getLabelCoordinates();
    renderStats();
  } // Forces applied to all simulations.


  function boundingBox() {
    // Relies on some globals.
    var r = dotRadius;
    state.stats.data.forEach(function (node) {
      node.x = Math.max(r, Math.min(node.x, state.width - r * 2));
      node.y = Math.max(r, Math.min(node.y, state.height - r * 2));
    });
  } // Set up the simulations and stop it. We don't want
  // to start it until ScrollTrigger triggers it.


  function setSimulation() {
    sim = forceSimulation(state.stats.data).force('boxForce', boundingBox).on('tick', handleTick).stop();
  } // Initial function run on each update.


  function tweenStats() {
    getScales();
    addLayouts();
    setLayout('globeExit');
    setSimulation();
    dot = drawDot(dotRadius, state.bottleColour.base.stop1);
    dotGood = drawDot(dotRadius, state.bottleColour.good.dot);
    dotBad = drawDot(dotRadius, state.bottleColour.bad.dot);
  }
   // 1. Math.random to disperse them a little to start with.

  // External libs.
  // Move to the globe's exit position.

  var xPosGlobe = forceX(function (d) {
    return d.layout.globeExit.x;
  }).strength(0.1);
  var yPosGlobe = forceY(function (d) {
    return d.layout.globeExit.y;
  }).strength(0.1);

  function simulateGlobePosition() {
    // Configure and start simulation.
    sim.nodes(state.stats.data).force('chargeLattice', null).force('link', null).force('xCentre', null).force('xCentre', null).force('xGlobe', xPosGlobe).force('yGlobe', yPosGlobe).alpha(0.8).restart(); // Switch the global alpha off.

    tweenStatsAlpha(0);
  } // Move to lattice.


  var chargeLattice = forceManyBody().strength(-6);
  var xPosCentre = forceX(function () {
    return state.width / 2;
  }).strength(0.05); // 1

  var yPosCentre = forceY(function () {
    return state.height / 2;
  }).strength(0.05);

  function simulateLattice() {
    // Set the current variable value to null.
    // This is not a frequency distribution.
    state.stats.current = []; // This ↓ can't be in module scope with its force friends,
    // as it needs to be run after the links are produced.

    var linkForce = forceLink(state.stats.links).id(function (d) {
      return d.index;
    }).strength(1).distance(1).iterations(15); // Configure and start simulation.

    sim.nodes(state.stats.data).force('link', linkForce).force('chargeLattice', chargeLattice).force('chargeFrequencies', null).force('xGlobe', null).force('yGlobe', null).force('xCentre', xPosCentre).force('xCentre', yPosCentre).force('xAlcohol', null).force('yAlcohol', null).alpha(0.8).restart(); // Switch the global alpha on.

    state.stats.alpha.value = 1;
  } // Move to Alcohol frequency.


  var chargeFrequencies = forceManyBody().strength(-2);
  var xPosAlcohol = forceX(function (d) {
    return d.layout.alcohol.x;
  }).strength(0.5);
  var yPosAlcohol = forceY(function (d) {
    return d.layout.alcohol.y;
  }).strength(0.5);

  function simulateAlcohol() {
    state.stats.current = [{
      name: 'alcohol',
      axis: 'x',
      straight: false,
      header: true,
      label: false
    }]; // This sim is triggered on multiple occasions.

    sim.nodes(state.stats.data).force('link', null).force('chargeLattice', null).force('xCentre', null).force('xCentre', null).force('chargeFrequencies', chargeFrequencies).force('chargeScatter', null).force('xQuality', null).force('yQuality', null).force('xPosQualAlc', null).force('yPosQualAlc', null).force('xAlcohol', xPosAlcohol).force('yAlcohol', yPosAlcohol).force('xPosQualVol', null).force('yPosQualVol', null).force('xDensity', null).force('yDensity', null).alpha(0.8).restart();
  } // Move to Density frequency.


  var xPosDensity = forceX(function (d) {
    return d.layout.density.x;
  }).strength(0.5);
  var yPosDensity = forceY(function (d) {
    return d.layout.density.y;
  }).strength(0.5);

  function simulateDensity() {
    state.stats.current = [{
      name: 'density',
      axis: 'x',
      straight: false,
      header: true,
      label: false
    }];
    sim.nodes(state.stats.data).force('xAlcohol', null).force('yAlcohol', null).force('xDensity', xPosDensity).force('yDensity', yPosDensity).force('xCitric', null).force('yCitric', null).alpha(0.8).restart();
  } // Move to Citric Acid frequency.


  var xPosCitric = forceX(function (d) {
    return d.layout.citric_acid.x;
  }).strength(0.5);
  var yPosCitric = forceY(function (d) {
    return d.layout.citric_acid.y;
  }).strength(0.5);

  function simulateCitric() {
    state.stats.current = [{
      name: 'citric_acid',
      axis: 'x',
      straight: false,
      header: true,
      label: false
    }];
    sim.nodes(state.stats.data).force('xDensity', null).force('yDensity', null).force('xCitric', xPosCitric).force('yCitric', yPosCitric).force('xPh', null).force('yPh', null).alpha(0.8).restart();
  } // Move to pH frequency.


  var xPosPh = forceX(function (d) {
    return d.layout.ph.x;
  }).strength(0.5);
  var yPosPh = forceY(function (d) {
    return d.layout.ph.y;
  }).strength(0.5);

  function simulatePh() {
    state.stats.current = [{
      name: 'ph',
      axis: 'x',
      straight: false,
      header: true,
      label: false
    }];
    sim.nodes(state.stats.data).force('xCitric', null).force('yCitric', null).force('xPh', xPosPh).force('yPh', yPosPh).force('xVolatile', null).force('yVolatile', null).alpha(0.8).restart();
  } // Move to Volatile Acidity frequency.


  var xPosVolatile = forceX(function (d) {
    return d.layout.volatile_acidity.x;
  }).strength(0.5);
  var yPosVolatile = forceY(function (d) {
    return d.layout.volatile_acidity.y;
  }).strength(0.5);

  function simulateVolatile() {
    state.stats.current = [{
      name: 'volatile_acidity',
      axis: 'x',
      straight: false,
      header: true,
      label: false
    }];
    sim.nodes(state.stats.data).force('xPh', null).force('yPh', null).force('xQuality', null).force('yQuality', null).force('xVolatile', xPosVolatile).force('yVolatile', yPosVolatile).force('chargeFrequencies', chargeFrequencies).force('chargeScatter', null).force('xPosQualVol', null).force('yPosQualVol', null).alpha(0.8).restart();
  } // Move to Quality frequency.


  var xPosQuality = forceX(function (d) {
    return d.layout.quality.x;
  }).strength(0.5);
  var yPosQuality = forceY(function (d) {
    return d.layout.quality.y;
  }).strength(0.5);

  function simulateQuality() {
    state.stats.current = [{
      name: 'quality',
      axis: 'x',
      straight: false,
      header: true,
      label: false
    }];
    sim.nodes(state.stats.data).force('xVolatile', null).force('yVolatile', null).force('xQuality', xPosQuality).force('yQuality', yPosQuality).force('xAlcohol', null).force('yAlcohol', null).alpha(0.8).restart();
  }
  //    have a `strangth` setter yet. So I am implementing my own centre
  //    force here.

  // External libs.
  // Move to Alcohol scatter.

  var chargeScatter = forceManyBody().strength(-1);
  var xPosQualAlc = forceX(function (d) {
    return d.layout.alcohol__quality.x;
  }).strength(0.3);
  var yPosQualAlc = forceY(function (d) {
    return d.layout.alcohol__quality.y;
  }).strength(0.3);

  function simulateQualAlc() {
    state.stats.current = [{
      name: 'alcohol',
      axis: 'x',
      straight: true,
      header: false,
      label: true
    }, {
      name: 'quality',
      axis: 'y',
      straight: true,
      header: false,
      label: true
    }];
    sim.nodes(state.stats.data).force('chargeFrequencies', null).force('chargeScatter', chargeScatter).force('xAlcohol', null).force('yAlcohol', null).force('xPosQualAlc', xPosQualAlc).force('yPosQualAlc', yPosQualAlc).force('xPosQualVol', null).force('yPosQualVol', null).force('xPosQualBinAlc', null).force('yPosQualBinAlc', null).alpha(0.8).restart();
  } // Move to Volatile Acidity scatter.


  var xPosQualVol = forceX(function (d) {
    return d.layout.vol_acid__quality.x;
  }).strength(0.3);
  var yPosQualVol = forceY(function (d) {
    return d.layout.vol_acid__quality.y;
  }).strength(0.3);

  function simulateQualVol() {
    state.stats.current = [{
      name: 'volatile_acidity',
      axis: 'x',
      straight: true,
      header: false,
      label: true
    }, {
      name: 'quality',
      axis: 'y',
      straight: true,
      header: false,
      label: true
    }];
    sim.nodes(state.stats.data).force('chargeFrequencies', null).force('chargeScatter', chargeScatter).force('xPosQualVol', xPosQualVol).force('yPosQualVol', yPosQualVol).force('xVolatile', null).force('yVolatile', null).force('xAlcohol', null).force('yAlcohol', null).alpha(0.8).restart();
  } // Move to Volatile Acidity scatter.


  var xPosQualBinAlc = forceX(function (d) {
    return d.layout.alcohol__quality_binary.x;
  }).strength(0.3);
  var yPosQualBinAlc = forceY(function (d) {
    return d.layout.alcohol__quality_binary.y;
  }).strength(0.3);

  function simulateQualBinAlc() {
    state.stats.current = [{
      name: 'alcohol',
      axis: 'x',
      straight: true,
      header: false,
      label: true
    }, {
      name: 'quality_binary',
      axis: 'y',
      straight: true,
      header: false,
      label: true
    }];
    sim.nodes(state.stats.data).force('chargeScatter', chargeScatter).force('boxForce', boundingBox).force('xPosQualAlc', null).force('yPosQualAlc', null).force('xPosQualVol', null).force('yPosQualVol', null).force('xPosQualBinAlc', xPosQualBinAlc).force('yPosQualBinAlc', yPosQualBinAlc).force('chargeRemove', null).alpha(0.8).restart();
  }

  var chargeRemove = forceManyBody().strength(-4);

  function simulateRemove() {
    sim.nodes(state.stats.data).force('chargeScatter', null).force('boxForce', null).force('xPosQualBinAlc', null).force('yPosQualBinAlc', null).force('chargeRemove', chargeRemove).alpha(0.8).restart(); // Switch the global alpha off.

    tweenStatsAlpha(0, 1);
  }

  /* eslint-disable no-param-reassign */

  var area = {
    top: null,
    right: null,
    bottom: null,
    left: null,
    width: null,
    height: null
  };
  var xScale$2;
  var yScale$2;
  var r$1 = 5;
  var lw = 2;
  var title = {
    alpha: 0
  }; // Set up / prep.

  function setDimensions$1() {
    var marginHorz = state.width * 0.1;
    var marginVert = state.height * 0.1;
    area.top = Math.floor(marginVert * 2);
    area.right = Math.floor(state.width - marginHorz);
    area.bottom = Math.floor(state.height - marginVert);
    area.left = Math.floor(marginHorz);
    area.width = Math.floor(area.right - area.left);
    area.height = Math.floor(area.bottom - area.top);
  }

  function augmentData() {
    state.varImp.data.forEach(function (d) {
      d.value = 0;
      d.alpha = 0;
    });
  }

  function setScales$1() {
    xScale$2 = linear$1().domain([0, max(state.varImp.data, function (d) {
      return d.importance;
    })]).range([area.left, area.right]);
    yScale$2 = point$1().domain(state.varImp.data.map(function (d) {
      return d.variable;
    })).range([area.top, area.bottom]);
  } // Draw and render.


  function drawImportanceChart(ctx) {
    var rough = state.rough.chart;
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save(); // General styles.

    state.ctx.chart.lineWidth = lw; // Title.

    ctx.save();
    ctx.globalAlpha = title.alpha;
    ctx.font = '40px Amatic SC';
    ctx.textAlign = 'left';
    ctx.textBaseline = 'bottom';
    ctx.fillText('Variable Importance', area.left, area.top - 30);
    ctx.restore(); // The bars.

    state.varImp.data.forEach(function (d, i) {
      // Lime.
      ctx.beginPath();
      rough.line(xScale$2(0), yScale$2(d.variable), xScale$2(d.value), yScale$2(d.variable), {
        seed: i + 1,
        roughness: 0.7
      });
      ctx.stroke();
      ctx.save();
      ctx.globalAlpha = d.alpha; // Circle.

      ctx.beginPath();
      rough.circle(xScale$2(d.value) + (r$1 + lw) / 2, yScale$2(d.variable), r$1 * 2, {
        seed: i + 1,
        roughness: 0.25
      });
      ctx.stroke(); // Text.

      ctx.font = '16px Signika';
      ctx.textAlign = 'left';
      ctx.textBaseline = 'top';
      var text = d.variable === 'ph' ? 'pH' : prettyLabel(d.variable);
      ctx.fillText(text, xScale$2(0), yScale$2(d.variable) + 5);
      ctx.restore();
    });
    ctx.restore();
  }

  function renderImportance() {
    requestAnimationFrame(function () {
      drawImportanceChart(state.ctx.chart);
    });
  }

  function defineTweenImportance() {
    var tl = gsap.timeline({
      onUpdate: renderImportance
    }); // Tween the title alpha.

    var titletween = gsap.fromTo(title, {
      alpha: 0
    }, {
      alpha: 1
    });
    tl.add(titletween); // Tween the variable importance values and alphas.

    state.varImp.data.forEach(function (d) {
      var valuetween = gsap.fromTo(d, {
        value: 0
      }, {
        value: d.importance
      });
      var alphatween = gsap.fromTo(d, {
        alpha: 0
      }, {
        alpha: 1
      });
      tl.add(alphatween, '>').add(valuetween, '<');
    });
    return tl;
  }

  function defineTweenImportanceRemove() {
    var tl = gsap.timeline({
      onUpdate: renderImportance
    }); // Tween the title alpha.

    var titletween = gsap.fromTo(title, {
      alpha: 1
    }, {
      alpha: 0
    });
    tl.add(titletween, 0); // Tween the variable importance values and alphas.

    state.varImp.data.forEach(function (d) {
      var valuetween = gsap.to(d, {
        value: 0
      });
      var alphatween = gsap.to(d, {
        alpha: 0
      });
      tl.add(alphatween, '>').add(valuetween, '<');
    });
    return tl;
  }

  function tweenAdd() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('importance');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.importance) state.tween.importance.kill();
    state.tween.importance = defineTweenImportance();
    state.tween.importance.totalProgress(progress);
  }

  function tweenRemove$1() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('importanceRemove');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.importanceRemove) state.tween.importanceRemove.kill();
    state.tween.importanceRemove = defineTweenImportanceRemove();
    state.tween.importanceRemove.totalProgress(progress);
  }

  function tweenimportance() {
    // Some prep.
    setDimensions$1();
    augmentData();
    setScales$1(); // Defining the add and remove tweens.

    tweenAdd();
    tweenRemove$1();
  }

  function nopropagation() {
    event.stopImmediatePropagation();
  }

  function noevent() {
    event.preventDefault();
    event.stopImmediatePropagation();
  }

  function nodrag(view) {
    var root = view.document.documentElement,
        selection = select(view).on("dragstart.drag", noevent, true);
    if ("onselectstart" in root) {
      selection.on("selectstart.drag", noevent, true);
    } else {
      root.__noselect = root.style.MozUserSelect;
      root.style.MozUserSelect = "none";
    }
  }

  function yesdrag(view, noclick) {
    var root = view.document.documentElement,
        selection = select(view).on("dragstart.drag", null);
    if (noclick) {
      selection.on("click.drag", noevent, true);
      setTimeout(function() { selection.on("click.drag", null); }, 0);
    }
    if ("onselectstart" in root) {
      selection.on("selectstart.drag", null);
    } else {
      root.style.MozUserSelect = root.__noselect;
      delete root.__noselect;
    }
  }

  function constant$5(x) {
    return function() {
      return x;
    };
  }

  function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
    this.target = target;
    this.type = type;
    this.subject = subject;
    this.identifier = id;
    this.active = active;
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
    this._ = dispatch;
  }

  DragEvent.prototype.on = function() {
    var value = this._.on.apply(this._, arguments);
    return value === this._ ? this : value;
  };

  // Ignore right-click, since that should open the context menu.
  function defaultFilter() {
    return !event.ctrlKey && !event.button;
  }

  function defaultContainer() {
    return this.parentNode;
  }

  function defaultSubject(d) {
    return d == null ? {x: event.x, y: event.y} : d;
  }

  function defaultTouchable() {
    return navigator.maxTouchPoints || ("ontouchstart" in this);
  }

  function drag() {
    var filter = defaultFilter,
        container = defaultContainer,
        subject = defaultSubject,
        touchable = defaultTouchable,
        gestures = {},
        listeners = dispatch("start", "drag", "end"),
        active = 0,
        mousedownx,
        mousedowny,
        mousemoving,
        touchending,
        clickDistance2 = 0;

    function drag(selection) {
      selection
          .on("mousedown.drag", mousedowned)
        .filter(touchable)
          .on("touchstart.drag", touchstarted)
          .on("touchmove.drag", touchmoved)
          .on("touchend.drag touchcancel.drag", touchended)
          .style("touch-action", "none")
          .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }

    function mousedowned() {
      if (touchending || !filter.apply(this, arguments)) return;
      var gesture = beforestart("mouse", container.apply(this, arguments), mouse, this, arguments);
      if (!gesture) return;
      select(event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
      nodrag(event.view);
      nopropagation();
      mousemoving = false;
      mousedownx = event.clientX;
      mousedowny = event.clientY;
      gesture("start");
    }

    function mousemoved() {
      noevent();
      if (!mousemoving) {
        var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
        mousemoving = dx * dx + dy * dy > clickDistance2;
      }
      gestures.mouse("drag");
    }

    function mouseupped() {
      select(event.view).on("mousemove.drag mouseup.drag", null);
      yesdrag(event.view, mousemoving);
      noevent();
      gestures.mouse("end");
    }

    function touchstarted() {
      if (!filter.apply(this, arguments)) return;
      var touches = event.changedTouches,
          c = container.apply(this, arguments),
          n = touches.length, i, gesture;

      for (i = 0; i < n; ++i) {
        if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {
          nopropagation();
          gesture("start");
        }
      }
    }

    function touchmoved() {
      var touches = event.changedTouches,
          n = touches.length, i, gesture;

      for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
          noevent();
          gesture("drag");
        }
      }
    }

    function touchended() {
      var touches = event.changedTouches,
          n = touches.length, i, gesture;

      if (touchending) clearTimeout(touchending);
      touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
      for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
          nopropagation();
          gesture("end");
        }
      }
    }

    function beforestart(id, container, point, that, args) {
      var p = point(container, id), s, dx, dy,
          sublisteners = listeners.copy();

      if (!customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
        if ((event.subject = s = subject.apply(that, args)) == null) return false;
        dx = s.x - p[0] || 0;
        dy = s.y - p[1] || 0;
        return true;
      })) return;

      return function gesture(type) {
        var p0 = p, n;
        switch (type) {
          case "start": gestures[id] = gesture, n = active++; break;
          case "end": delete gestures[id], --active; // nobreak
          case "drag": p = point(container, id), n = active; break;
        }
        customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
      };
    }

    drag.filter = function(_) {
      return arguments.length ? (filter = typeof _ === "function" ? _ : constant$5(!!_), drag) : filter;
    };

    drag.container = function(_) {
      return arguments.length ? (container = typeof _ === "function" ? _ : constant$5(_), drag) : container;
    };

    drag.subject = function(_) {
      return arguments.length ? (subject = typeof _ === "function" ? _ : constant$5(_), drag) : subject;
    };

    drag.touchable = function(_) {
      return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$5(!!_), drag) : touchable;
    };

    drag.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? drag : value;
    };

    drag.clickDistance = function(_) {
      return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
    };

    return drag;
  }

  var lodash_isequal = createCommonjsModule(function (module, exports) {
  /**
   * Lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright JS Foundation and other contributors <https://js.foundation/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /** Used for built-in method references. */
  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root['__core-js_shared__'];

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /** Built-in value references. */
  var Buffer = moduleExports ? root.Buffer : undefined,
      Symbol = root.Symbol,
      Uint8Array = root.Uint8Array,
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      splice = arrayProto.splice,
      symToStringTag = Symbol ? Symbol.toStringTag : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols,
      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
      nativeKeys = overArg(Object.keys, Object);

  /* Built-in method references that are verified to be native. */
  var DataView = getNative(root, 'DataView'),
      Map = getNative(root, 'Map'),
      Promise = getNative(root, 'Promise'),
      Set = getNative(root, 'Set'),
      WeakMap = getNative(root, 'WeakMap'),
      nativeCreate = getNative(Object, 'create');

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol ? Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
  }

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    return this;
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash,
      'map': new (Map || ListCache),
      'string': new Hash
    };
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag && symToStringTag in Object(value))
      ? getRawTag(value)
      : objectToString(value);
  }

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);

    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;

    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack);
      return (objIsArr || isTypedArray(object))
        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new Stack);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike(value) &&
      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(array);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!arraySome(other, function(othValue, othIndex) {
              if (!cacheHas(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }
        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(object);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
      (Map && getTag(new Map) != mapTag) ||
      (Promise && getTag(Promise.resolve()) != promiseTag) ||
      (Set && getTag(new Set) != setTag) ||
      (WeakMap && getTag(new WeakMap) != weakMapTag)) {
    getTag = function(value) {
      var result = baseGetTag(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag;
          case mapCtorString: return mapTag;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag;
          case weakMapCtorString: return weakMapTag;
        }
      }
      return result;
    };
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length &&
      (typeof value == 'number' || reIsUint.test(value)) &&
      (value > -1 && value % 1 == 0 && value < length);
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    return value === proto;
  }

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  module.exports = isEqual;
  });

  /**
   * Calculates the Logistic Regression probability for the
   * given values based on the given model parameters.
   * @param { map } values map of the values
   * @param { map } weights map of the weights
   * @param { number } intercept the model intercept
   */

  function getProbability(values, weights, intercept) {
    var check = lodash_isequal(values.keys(), weights.keys());
    if (!check) throw Error('values and weights are not equal.');
    var logOdds = intercept;
    values.keys().forEach(function (variable) {
      logOdds += values.get(variable) * weights.get(variable);
    });
    var odds = Math.exp(logOdds);
    var prob = odds / (1 + odds);
    return prob;
  }

  // moves a variable value across a defined threshold.
  // This info (and a good/bad/neutral colour) will be
  // picked up by the marker draw function to add the info text.

  var info = [{
    variable: 'alcohol',
    operator: '>',
    threshold: 13,
    info: ['our model likes alcohol!'],
    infoColour: state.bottleColour.good.stop1
  }, {
    variable: 'volatile_acidity',
    operator: '>',
    threshold: 0.9,
    info: ['careful, your wine is getting', 'a little close to vinegar'],
    infoColour: state.bottleColour.bad.stop1
  }, {
    variable: 'sulphates',
    operator: '<',
    threshold: 0.5,
    info: ['add some sulphates to fend', 'off taste spoiling bacteria'],
    infoColour: state.bottleColour.bad.stop1
  }, {
    variable: 'density',
    operator: '',
    threshold: null,
    info: [''],
    infoColour: ''
  }, {
    variable: 'citric_acid',
    operator: '>',
    threshold: 0.35,
    info: ['adding a fresh taste', 'to your wine now...'],
    infoColour: state.bottleColour.good.stop1
  }, {
    variable: 'chlorides',
    operator: '>',
    threshold: 0.1,
    info: ["don't oversalt it"],
    infoColour: state.bottleColour.bad.stop1
  }, {
    variable: 'total_sulfur_dioxide',
    operator: '',
    threshold: null,
    info: [''],
    infoColour: ''
  }, {
    variable: 'fixed_acidity',
    operator: '>',
    threshold: 8.5,
    info: ['fixed acidity will add dashes', 'of sourness and tartness'],
    infoColour: state.bottleColour.bad.stop1
  }, {
    variable: 'ph',
    operator: '',
    threshold: null,
    info: [''],
    infoColour: ''
  }, {
    variable: 'residual_sugar',
    operator: '>',
    threshold: 3.8,
    info: ['getting on the sweater', 'side for a red wine now'],
    infoColour: '#777'
  }, {
    variable: 'free_sulfur_dioxide',
    operator: '',
    threshold: null,
    info: [''],
    infoColour: ''
  }];
  var infoMap = map(info, function (d) {
    return d.variable;
  });

  function getConditional(value, operator, threshold) {
    if (operator === '' || !operator) return false;
    if (operator === '>') return value > threshold;
    if (operator === '<') return value < threshold;
  }
  /**
   * Return info for that variable  based on the given value.
   * @param { string } variable property at question
   * @param { number } value the current value
   */


  function setPropertyInfo(variable, value) {
    state.modelBottle.info = [''];
    state.modelBottle.infoColour = '';
    var current = infoMap.get(variable);
    var conditional = getConditional(value, current.operator, current.threshold);

    if (conditional) {
      state.modelBottle.info = current.info;
      state.modelBottle.infoColour = current.infoColour;
    }
  }

  /* eslint-disable no-nested-ternary */

  var margin$1 = {
    top: 20,
    right: 20,
    bottom: 30,
    left: 20
  }; // Function to compute density

  function kernelDensityEstimator(kernel, X) {
    return function (V) {
      return X.map(function (x) {
        return [x, mean(V, function (v) {
          return kernel(x - v);
        })];
      });
    };
  }

  function kernelEpanechnikov(k) {
    return function (v) {
      return Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;
    };
  } // Control build function.


  function buildControl(datapoint) {
    // Get the datum's values.
    var variable = datapoint.key;
    var value = datapoint.value; // Identify # of decimals to show.

    var valueRange = state.model.ranges.get(variable);
    var rangeDelta = valueRange[1] - valueRange[0];
    var decimals = rangeDelta > 0.09 ? 2 : 3; // Set up.

    var sel = select(this);
    sel.select('svg').remove(); // No join mechanics here - let's be deterministic.

    var svg = sel.append('svg').attr('class', 'control');
    var rs = st.svg(svg.node()); // SVG is defined as 100% width/height in CSS.

    var width = parseInt(svg.style('width'), 10) - margin$1.left - margin$1.right;
    var height = parseInt(svg.style('height'), 10) - margin$1.top - margin$1.bottom; // Clip path for the marker.

    var clippy = svg.append('defs').append('clipPath').attr('id', "clippy-".concat(variable)).append('path'); // The chart g.

    var g = svg.append('g').attr('transform', "translate(".concat(margin$1.left, ", ").concat(margin$1.top, ")")); // x Scale.

    var xScale = linear$1().domain(state.model.ranges.get(variable)).range([0, width]); // Label.

    var labelText = variable === 'ph' ? 'pH' : prettyLabel(variable);
    g.append('text').attr('x', width).attr('y', -margin$1.top / 2).attr('dy', '0.35em').attr('text-anchor', 'end').style('font-family', 'Signika').style('font-size', 12).text(labelText); // Axis.

    g.append('line').attr('y1', height).attr('x2', width).attr('y2', height).style('stroke-width', 1).style('stroke', '#000'); // Density data.

    var k = (state.model.ranges.get(variable)[1] - state.model.ranges.get(variable)[0]) * 0.05;
    var kde = kernelDensityEstimator(kernelEpanechnikov(k), xScale.ticks(40));
    var density = kde(state.stats.data.map(function (d) {
      return d[variable];
    })); // Add a start and an end point at x = 0 to the mix.

    density.unshift([density[0][0], 0]);
    density.push([density[density.length - 1][0], 0]); // y Scale.

    var yScale = linear$1().domain([0, max(density.map(function (d) {
      return d[1];
    }))]).range([height, 0]); // Line generator.

    var lineGen = line().curve(curveBasis).x(function (d) {
      return xScale(d[0]);
    }).y(function (d) {
      return yScale(d[1]);
    }); // Get density path.

    var densityPath = lineGen(density); // Density chart.

    var fill = rs.path(densityPath, {
      fill: '#555',
      stroke: 'rgba(0, 0, 0, 0.7)'
    });
    g.node().appendChild(fill);
    g.select('path').attr('class', "density ".concat(variable)); // Clip path data.

    clippy.attr('d', densityPath); // Position data for the drag subjects.

    var position = {
      x: xScale(value),
      y: height,
      width: 30,
      height: height + margin$1.bottom
    }; // Marker.

    g.append('line').datum(position).attr('x1', function (d) {
      return d.x;
    }).attr('y1', function (d) {
      return d.y;
    }).attr('x2', function (d) {
      return d.x;
    }).attr('y2', 0).attr('class', 'marker').attr('clip-path', "url(#clippy-".concat(variable, ")")).style('stroke-width', 1).style('stroke', 'black'); // Handle.

    g.append('circle').datum(position).attr('cx', function (d) {
      return d.x;
    }).attr('cy', function (d) {
      return d.y;
    }).attr('r', 5).attr('class', 'handle').style('fill', '#000'); // Number.

    g.append('text').datum(position).attr('x', function (d) {
      return d.x;
    }).attr('y', function (d) {
      return d.y;
    }).attr('class', 'label').attr('dy', '0.7em').attr('text-anchor', 'middle').attr('dominant-baseline', 'hanging').style('font-family', 'Signika').style('font-size', 12).text(value.toFixed(decimals)); // Drag handler.

    function handleDrag(datum) {
      // Clamp the x value.
      var x = event.x > width ? width : event.x < 0 ? 0 : event.x; // Update the data.

      value = xScale.invert(x);
      state.model.values.set(variable, value);
      state.model.probability = getProbability(state.model.values, state.model.weights, state.model.intercept); // Operate the bottle wave on change.

      decayWave();
      state.bottleWave.lift = state.model.probability; // Update DOM.

      var dragrect = select(this);
      var circle = select(this.parentNode).select('circle.handle');
      var marker = select(this.parentNode).select('line.marker');
      var label = select(this.parentNode).select('text.label');
      dragrect.attr('x', function () {
        datum.x = x;
        return datum.x - datum.width / 2;
      });
      circle.attr('cx', datum.x = x);
      marker.attr('x1', datum.x = x).attr('x2', datum.x = x);
      label.attr('x', datum.x = x).text(value.toFixed(decimals)); // Add some wine making tips to the canvas indirectly.

      setPropertyInfo(variable, value);
    } // Drag rectangle.


    g.append('rect').datum(position).attr('x', function (d) {
      return d.x - d.width / 2;
    }).attr('y', 0).attr('width', function (d) {
      return d.width;
    }).attr('height', function (d) {
      return d.height;
    }).style('opacity', 0) // can't see it - no no.
    .call(drag().on('drag', handleDrag));
  }

  function buildModelControls() {
    select('#model-app').style('height', "".concat(state.height, "px")); // Sort the controls by their variable importance.

    var order = state.varImp.data.map(function (d) {
      return d.variable;
    });
    var controlData = state.model.values.entries();
    controlData.sort(function (a, b) {
      return order.indexOf(a.key) - order.indexOf(b.key);
    }); // Mount the app.

    select('#model-app-wrap').selectAll('.model-value-control').data(controlData).join('div').attr('class', 'model-value-control').each(buildControl);
  }
  //    Hence the minimum would be 0.5% of the width.
  //    However, we give it a little leeway here with 0.475

  /**
   * Draws a path at a certain offset of its full length.
   * Can nicely be used to animate a path.
   * @param { Object } ctx Context to draw on
   * @param { Array|String} paths Path(s) to draw
   * @param { Object } t transform to apply to context
   * @param { Number } length Max length of the (longest) path
   * @param { Number } offset Length of the path to draw (ideally animated)
   */

  function drawPaths(ctx, paths, t, length, offset, alpha) {
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save();
    ctx.globalAlpha = alpha;
    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale);
    ctx.setLineDash([length - offset, offset]); // eslint-disable-next-line no-unused-expressions

    Array.isArray(paths) ? paths.forEach(function (path) {
      return ctx.stroke(path);
    }) : ctx.stroke(paths);
    ctx.restore();
  }

  function renderModelBottle() {
    requestAnimationFrame(function () {
      drawPaths(state.ctx.glassBottle, state.modelBottle.paths, state.transform.shape, state.modelBottle.maxLength, state.modelBottle.dashOffset, state.modelBottle.alpha);
    });
  }

  function defineTweenModelBottle(offsetDraw, alphaStart, alphaTarget) {
    var tl = gsapWithCSS.timeline({
      onUpdate: renderModelBottle
    });
    var offsetIn = gsapWithCSS.fromTo(state.modelBottle, {
      dashOffset: state.modelBottle.maxLength
    }, {
      dashOffset: 0
    });
    var offsetOut = gsapWithCSS.fromTo(state.modelBottle, {
      dashOffset: 0
    }, {
      dashOffset: state.modelBottle.maxLength
    });
    var alphavalue = gsapWithCSS.fromTo(state.modelBottle, {
      alpha: alphaStart
    }, {
      alpha: alphaTarget
    });
    return tl.add(offsetDraw ? offsetIn : offsetOut).add(alphavalue, 0);
  }

  function tweenIn() {
    // Capture current progress.
    var scroll = ScrollTrigger.getById('modelBottleIn');
    var progress = scroll ? scroll.progress : 0; // Kill old - set up new timeline.

    if (state.tween.modelBottleIn) state.tween.modelBottleIn.kill();
    state.tween.modelBottleIn = defineTweenModelBottle(true, 0, 1);
    state.tween.modelBottleIn.totalProgress(progress);
  }

  function tweenModelBottle() {
    tweenIn(); // tweenOut(); // not needed but here for if and when required.
  }

  var position = {};
  var lw$1 = 20;
  var lh = 3;
  var pad$1 = 5;
  var perc = format('.0%');
  var fontSize = 8; // Draw and render.

  function drawWaveMarkers(ctx, t, path) {
    var rough = state.rough.chart;
    ctx.clearRect(0, 0, state.width, state.height);
    ctx.save();
    ctx.translate(t.x, t.y);
    ctx.scale(t.scale, t.scale);
    ctx.globalAlpha = state.modelWave.alpha; // Line

    ctx.lineWidth = 0.1;
    ctx.beginPath();
    rough.line(position.x / 2, position.y, position.x + lw$1, position.y, {
      seed: 1
    });
    ctx.stroke(); // ...marker

    ctx.lineWidth = 0.25;
    ctx.beginPath();
    rough.line(position.x + lw$1, position.y - lh, position.x + lw$1, position.y + lh, {
      seed: 1
    });
    ctx.stroke(); // Main text (probability).

    ctx.textBaseline = 'middle';
    ctx.font = "".concat(fontSize, "px Signika");
    ctx.fillText("".concat(perc(state.model.probability), " likely to be good"), position.x + lw$1 + pad$1, position.y + 1); // Subtitle (tips).

    ctx.font = "".concat(Math.floor(fontSize * 0.9), "px Signika");
    ctx.fillStyle = state.modelBottle.infoColour; // This is an array of text with each element getting its own line...

    state.modelBottle.info.forEach(function (d, i) {
      var sublineOffset = i === 0 ? 2 : 0;
      ctx.fillText(d, position.x + lw$1 + pad$1, position.y + (i + 1) * (fontSize + 2) + sublineOffset);
    }); // Clip.

    ctx.globalCompositeOperation = 'destination-out';
    ctx.globalAlpha = 1; // to be safe.

    ctx.translate(5, 0);
    ctx.fill(path);
    ctx.restore();
  }

  function renderWaveMarkers() {
    requestAnimationFrame(function () {
      drawWaveMarkers(state.ctx.chart, state.transform.shape, state.bottleWave.bottlePath);
    });
  } // Make.


  function makeWaveMarkers() {
    // Prep.
    var wave = state.bottleWave;
    if (!wave.wavePoints || !wave.wavePoints.length) return; // A more or less steady y position.

    var h = state.glassBottle.bottleBox.height;
    var y = mean(wave.wavePoints, function (d) {
      return d[1];
    });
    if (y > h * 0.98) y = h * 0.98;
    if (y < h * 0.005) y = h * 0.005; // Position will be picked up by the draw function.

    position = {
      x: wave.wavePoints[wave.wavePoints.length - 1][0],
      y: y
    }; // Render it.

    renderWaveMarkers();
  } // Control the marker funcs.


  function startWaveMarkers() {
    gsapWithCSS$1.ticker.add(makeWaveMarkers);
  }

  function stopWaveMarkers() {
    gsapWithCSS$1.ticker.remove(makeWaveMarkers);
  }

  // as the tweening malarky wasn't fun and piled up edge cases.

  var subBottle = -0.1; // Scroll from below bottle to the current probability.

  function updateModelWave(scroll) {
    state.modelBottle.points = true;
    state.bottleWave.lift = subBottle + scroll.progress * (state.model.probability - subBottle);
    state.modelWave.alpha = scroll.progress;
    startWave();
    decayWave();
    startWaveMarkers();
  } // Stop all wavey things when scrolling back up the story.


  function stopModelWave() {
    state.modelBottle.points = false;
    stopWaveMarkers();
    stopWave();
  } // Called each time on update (e.g. resize) to start, stop
  // any action based on the flags set in the control funs above ↑.


  function checkModelWave() {
    if (state.modelBottle.points) {
      startWave();
      startWaveMarkers();
    } else {
      stopWave();
      stopWaveMarkers();
    }
  }

  /* eslint-disable no-return-assign */

  function isMobile() {
    return window.innerWidth < state.tabletUp;
  }

  function getTriggerPositions() {
    var visual = document.querySelector('#visual-container');
    var visualHeight = parseInt(window.getComputedStyle(visual).height, 10);
    var windowHeight = window.innerHeight;
    var textHeight = windowHeight - visualHeight;

    if (!isMobile()) {
      return {
        start: 'top center',
        end: 'center center',
        endElement: 'center',
        endContainer: 'center'
      };
    } // If we're on mobile.


    var offset = visualHeight + textHeight / 2;
    return {
      start: "top top+=".concat(offset, "px"),
      end: "center top+=".concat(offset, "px"),
      endElement: 'center',
      endContainer: "top+=".concat(offset, "px")
    };
  } // Set ScrollTrigger defaults.


  ScrollTrigger.defaults({
    scroller: '#container',
    start: 'top center',
    end: 'center center',
    scrub: true,
    toggleActions: 'play none none reverse',
    markers: false
  });

  function updateDimensions() {
    var container = document.querySelector('#canvas-main-container');
    state.width = container.clientWidth;
    state.height = container.clientHeight;
  } // Get contexts and rezize canvases.


  function updateContexts(names) {
    var canvases = document.querySelectorAll('canvas');
    names.forEach(function (name, i) {
      state.ctx[name] = canvases[i].getContext('2d');
      resizeCanvas(canvases[i], state.width, state.height);
    });
  }

  function setRoughCanvases() {
    state.rough.chart = st.canvas(state.ctx.chart.canvas);
    state.rough.globe = st.canvas(state.ctx.globe.canvas);
  } // Set off canvas factory.


  function setVisualStructure() {
    // Get contexts.
    var contextnames = ['scape', 'glassBottle', 'bottleText', 'bottleWave', 'chart', 'blackBox', 'globe'];
    updateContexts(contextnames);
    setRoughCanvases();
  }

  function updateTransforms() {
    // Update all necessary transforms.
    // Update winescape image (and glass) transform.
    var scapeDim = {
      width: state.scape.image.width,
      height: state.scape.image.height
    };
    state.transform.scape = getTransform(scapeDim, {
      width: 1,
      height: 0
    });
    state.transform.shape = lodash_clonedeep(state.transform.scape); // There's no mathemtacial connection between the bottle's
    // ideal height and the aspect ratio, but using the ar
    // fits quite nicely in this case.

    state.glassBottle.bottleTop = Math.min(Math.floor(state.width / state.height * 100) / 100, 0.8);
    state.glassBottle.bottleLeft = 0.25;
    state.transform.bottle = getTransform(state.glassBottle.bottleBox, {
      width: 0,
      height: state.glassBottle.bottleTop
    }, {
      x: state.glassBottle.bottleLeft,
      height: null
    }); // Animals.
    // Get a transform for each animal based on its getBBox dimensions.

    state.animals.data.forEach(function (animal) {
      state.transform[animal.name] = getTransform(state.animals[animal.name], {
        width: 0.5,
        height: 0
      });
    }); // Update the dataset transform.

    state.transform.dataset = getTransform(state.dataset.box, {
      width: 0.9,
      height: 0
    });
  } // Scroll helper.


  function clearAllContexts() {
    // Stop all potentially moving parts.
    stopWave();
    stopModelWave();
    stopWaveMarkers();
    sim.stop(); // Clear all contexts with an additional timeout
    // to make sure all above things have been stopped.

    timeout$1(function () {
      Object.entries(state.ctx).forEach(function (d) {
        return clear(d[1]);
      });
    }, 50);
  } // Set scroll.


  function setScrollBase() {
    var _getTriggerPositions = getTriggerPositions(),
        start = _getTriggerPositions.start,
        end = _getTriggerPositions.end,
        endContainer = _getTriggerPositions.endContainer;

    ScrollTrigger.create({
      trigger: '#intro-text',
      start: 'top-=30% bottom',
      onEnter: function onEnter() {
        gsapWithCSS$1.timeline({
          defaults: {
            duration: 1,
            ease: 'sine.inOut'
          }
        }).fromTo('#brand p', {
          opacity: 1,
          fontSize: '0.8em'
        }, {
          opacity: 0,
          fontSize: '0em',
          duration: 0.3
        }).to('#brand', {
          left: '100%',
          xPercent: -150
        }, 0) // move right
        // .to('#brand', { left: '0%', xPercent: 50 }, 0) // move left
        .to('#logo path', {
          fill: '#ccc'
        }, 0);
      },
      onLeaveBack: function onLeaveBack() {
        gsapWithCSS$1.timeline({
          defaults: {
            duration: 1,
            ease: 'sine.inOut'
          }
        }).to('#brand p', {
          opacity: 1,
          fontSize: '0.8em',
          delay: 0.7,
          duration: 0.3
        }).to('#brand', {
          left: '50%',
          xPercent: -50
        }, 0).to('#logo path', {
          fill: 'rgba(41, 14, 56, 0.5)'
        }, 0);
      }
    });
    ScrollTrigger.create({
      trigger: '.section-0',
      start: start,
      id: 'triggerPositionRefresh',
      onEnter: function onEnter() {
        // The scroll trigger positions need to be calculated when all content
        // has loaded. Giving the first trigger no other job than refreshing
        // the scroll trigger positions seems the best way to guarantee this.
        ScrollTrigger.refresh();
      }
    });
    ScrollTrigger.create({
      animation: state.tween.wineScape,
      trigger: '.section-1',
      start: start,
      end: end,
      id: 'wineScape',
      onLeaveBack: function onLeaveBack() {
        // Stop all and clear all contexts if users scroll up to top.
        timeout$1(clearAllContexts, 50);
      }
    });
    ScrollTrigger.create({
      animation: state.tween.glassBottle,
      trigger: '.section-2',
      start: start,
      end: end,
      id: 'glassBottle'
    });
    ScrollTrigger.create({
      animation: state.tween.bottleText,
      trigger: '.section-3',
      start: start,
      end: end,
      id: 'bottleText'
    });
    ScrollTrigger.create({
      animation: state.tween.bottleWave,
      trigger: '.section-4',
      start: start,
      end: end,
      id: 'bottleWave'
    });
    ScrollTrigger.create({
      animation: state.tween.lolliChart,
      trigger: '.section-5',
      start: start,
      end: end,
      id: 'lolliChart'
    });
    ScrollTrigger.create({
      animation: state.tween.lolliUpdate1,
      trigger: '.section-6',
      start: start,
      end: end,
      id: 'lolliUpdate1'
    });
    ScrollTrigger.create({
      animation: state.tween.lolliUpdate2,
      trigger: '.section-7',
      start: start,
      end: end,
      id: 'lolliUpdate2'
    });
    ScrollTrigger.create({
      animation: state.tween.lolliUpdate3,
      trigger: '.section-8',
      start: start,
      end: end,
      id: 'lolliUpdate3',
      onEnterBack: function onEnterBack() {
        return clear(state.ctx.blackBox);
      }
    }); // 2 items.

    arrows.forEach(function (d, i) {
      ScrollTrigger.create({
        animation: state.tween[d],
        trigger: ".section-".concat(9 + i),
        start: start,
        end: end,
        id: d
      });
    });
    ScrollTrigger.create({
      animation: state.tween.cleanup,
      trigger: '.section-11',
      start: start,
      end: end,
      id: 'cleanup'
    });
    ScrollTrigger.create({
      animation: state.tween.bottleTextOut,
      trigger: '.section-12',
      start: start,
      end: end,
      id: 'bottleTextOut'
    });
    ScrollTrigger.create({
      animation: state.tween.bottleEmpty,
      trigger: '.section-13',
      start: start,
      end: end,
      id: 'bottleEmpty',
      onLeave: function onLeave() {
        stopWave();
        clear(state.ctx.bottleWave);
      },
      onEnterBack: startWave
    }); // Setting up all the scrolltriggers for the animals.
    // 8 items.

    for (var i = 0; i < animalPaths.length - 1; i++) {
      var animal = animalPaths[i];
      ScrollTrigger.create({
        animation: state.tween[animal.name],
        trigger: ".section-".concat(14 + i),
        start: start,
        end: end,
        id: animal.name
      });
    }

    ScrollTrigger.create({
      animation: state.tween.bottleFill,
      trigger: '.section-22',
      start: start,
      end: end,
      id: 'bottleFill',
      onLeave: stopWave,
      onEnterBack: startWave
    }); // 3 items.

    bottleColours.forEach(function (d, i) {
      ScrollTrigger.create({
        animation: state.tween[d.name],
        trigger: ".section-".concat(23 + i),
        start: start,
        end: end,
        id: d.name
      });
    });
    ScrollTrigger.create({
      animation: state.tween.bottleGrid,
      trigger: '.section-26',
      start: start,
      end: "bottom-=10% ".concat(endContainer),
      // the grids need seom more space..
      id: 'bottleGrid'
    });
    ScrollTrigger.create({
      animation: state.tween.bottleGridColour,
      trigger: '.section-27',
      start: start,
      end: end,
      id: 'bottleGridColour'
    });
    ScrollTrigger.create({
      animation: state.tween.bottleGridSort,
      trigger: '.section-28',
      start: start,
      end: "bottom-=10% ".concat(endContainer),
      id: 'bottleGridSort'
    });
    ScrollTrigger.create({
      animation: state.tween.bottleGridOut,
      trigger: '.section-29',
      start: start,
      end: "bottom-=10% ".concat(endContainer),
      id: 'bottleGridOut',
      // Shut the glassBottle context up.
      onEnterBack: function onEnterBack() {
        state.glassBottle.alpha = 0;
        clear(state.ctx.glassBottle);
      }
    }); // Setting up all the scrolltriggers for the dataset.
    // We set up a scrolltrigger/tween for each column and the grid.
    // 13 items.

    state.dataset.info.forEach(function (d, i) {
      ScrollTrigger.create({
        animation: state.tween[d.tween],
        trigger: ".section-".concat(30 + i),
        start: start,
        end: end,
        id: d.tween,
        onEnter: function onEnter() {
          return state.glassBottle.alpha = 1;
        },
        onEnterBack: function onEnterBack() {
          return state.glassBottle.alpha = 1;
        }
      });
    });
    ScrollTrigger.create({
      animation: state.tween.globe,
      trigger: '.section-43',
      start: start,
      end: 'bottom+=10% center',
      // the globe needs some extra screen time 🥂
      id: 'globe',
      onEnter: function onEnter() {
        // Shut the glassBottle context up.
        state.glassBottle.alpha = 0;
        clear(state.ctx.glassBottle);
      },
      onUpdate: function onUpdate(self) {
        return state.globe.scroll.progress = self.progress;
      }
    });
    ScrollTrigger.create({
      trigger: '.section-44',
      start: start,
      end: end,
      id: 'statsLattice',
      onLeaveBack: simulateGlobePosition,
      onEnter: simulateLattice
    });
    ScrollTrigger.create({
      trigger: '.section-45',
      start: start,
      end: end,
      id: 'statsAlcohol',
      onLeaveBack: simulateLattice,
      onEnter: simulateAlcohol
    });
    ScrollTrigger.create({
      trigger: '.section-46',
      start: start,
      end: end,
      id: 'statsDensity',
      onLeaveBack: simulateAlcohol,
      onEnter: simulateDensity
    });
    ScrollTrigger.create({
      trigger: '.section-47',
      start: start,
      end: end,
      id: 'statsCitric',
      onLeaveBack: simulateDensity,
      onEnter: simulateCitric
    });
    ScrollTrigger.create({
      trigger: '.section-48',
      start: start,
      end: end,
      id: 'statsPh',
      onLeaveBack: simulateCitric,
      onEnter: simulatePh
    });
    ScrollTrigger.create({
      trigger: '.section-49',
      start: start,
      end: end,
      id: 'statsVolatile',
      onLeaveBack: simulatePh,
      onEnter: simulateVolatile
    });
    ScrollTrigger.create({
      trigger: '.section-50',
      start: start,
      end: end,
      id: 'statsQuality',
      onLeaveBack: simulateVolatile,
      onEnter: simulateQuality
    });
    ScrollTrigger.create({
      trigger: '.section-51',
      start: start,
      end: end,
      id: 'qualityDots',
      onLeaveBack: function onLeaveBack() {
        return state.stats.colourDots = false;
      },
      onEnter: function onEnter() {
        state.stats.colourDots = true;
        sim.restart(); // ...won't change colours if it's cold.
      }
    });
    ScrollTrigger.create({
      trigger: '.section-52',
      start: start,
      end: end,
      id: 'statsAlcoholColoured',
      onLeaveBack: simulateQuality,
      onEnter: simulateVolatile
    });
    ScrollTrigger.create({
      trigger: '.section-53',
      start: start,
      end: end,
      id: 'statsAlcoholColoured',
      onLeaveBack: simulateVolatile,
      onEnter: simulateQualVol
    });
    ScrollTrigger.create({
      trigger: '.section-54',
      start: start,
      end: end,
      id: 'statsAlcoholColoured',
      onLeaveBack: simulateQualVol,
      onEnter: simulateAlcohol
    });
    ScrollTrigger.create({
      trigger: '.section-55',
      start: start,
      end: end,
      id: 'statsAlcoholQuality',
      onLeaveBack: simulateAlcohol,
      onEnter: simulateQualAlc
    });
    ScrollTrigger.create({
      trigger: '.section-56',
      start: start,
      end: end,
      id: 'statsDrawLR',
      onLeaveBack: function onLeaveBack() {
        state.stats.lr = false;
        simulateQualAlc();
      },
      onEnter: function onEnter() {
        return state.stats.lr = true;
      },
      onUpdate: function onUpdate(self) {
        state.stats.progress.draw = self.progress;
        renderStats();
      }
    });
    ScrollTrigger.create({
      trigger: '.section-57',
      start: start,
      end: end,
      id: 'statsDrawLRPoint',
      onUpdate: function onUpdate(self) {
        state.stats.progress.point = self.progress;
        renderStats();
      }
    });
    ScrollTrigger.create({
      trigger: '.section-58',
      start: start,
      end: end,
      id: 'statsExtendLR',
      onUpdate: function onUpdate(self) {
        state.stats.progress.extend = self.progress;
        renderStats();
      }
    });
    ScrollTrigger.create({
      trigger: '.section-59',
      start: start,
      end: end,
      id: 'statsQualityBinaryAlcohol',
      onLeaveBack: simulateQualAlc,
      onEnter: simulateQualBinAlc
    });
    ScrollTrigger.create({
      trigger: '.section-60',
      start: start,
      end: end,
      id: 'statsLogisticLine',
      onLeaveBack: simulateQualBinAlc,
      onUpdate: function onUpdate(self) {
        state.stats.progress.logistic = self.progress;
        renderStats();
      }
    });
    ScrollTrigger.create({
      trigger: '.section-61',
      start: start,
      end: end,
      id: 'statsRemove',
      onLeaveBack: function onLeaveBack() {
        state.stats.lr = true;
        tweenStatsAlpha(1); // Switch the global alpha back on.

        simulateQualBinAlc();
      },
      onEnter: function onEnter() {
        state.stats.lr = false;
        simulateRemove();
      }
    });
    ScrollTrigger.create({
      animation: state.tween.importance,
      trigger: '.section-62',
      start: start,
      end: end,
      id: 'importance',
      // Stop the simulation as it would otherwise
      // continue to draw on the context.
      onEnter: function onEnter() {
        return sim.stop();
      },
      onEnterBack: function onEnterBack() {
        return clear(state.ctx.bottleWave);
      } // 1

    });
    ScrollTrigger.create({
      animation: state.tween.importanceRemove,
      trigger: '.section-63',
      start: start,
      end: end,
      id: 'importanceRemove'
    });
    ScrollTrigger.create({
      animation: state.tween.modelBottleIn,
      trigger: '.section-64',
      start: start,
      end: end,
      id: 'modelBottleIn',
      onEnterBack: function onEnterBack() {
        return clear(state.ctx.bottleWave);
      } // 1

    });
    ScrollTrigger.create({
      trigger: '.section-65',
      start: start,
      end: end,
      id: 'modelWaveInit',
      onLeaveBack: function onLeaveBack() {
        return stopModelWave();
      },
      onUpdate: function onUpdate(self) {
        return updateModelWave(self);
      }
    });
    ScrollTrigger.create({
      trigger: '#model-app',
      start: 'top bottom',
      end: 'top top+=5px',
      id: 'scrollBreak',
      // Fade the outro button in and out.
      onEnter: function onEnter() {
        return gsapWithCSS$1.to('#outro', {
          left: '2vw'
        });
      },
      onLeaveBack: function onLeaveBack() {
        return gsapWithCSS$1.to('#outro', {
          left: '-10vw'
        });
      },
      // Lock/unlock the model app scroll during main scroll.
      onLeave: function onLeave() {
        return select('#model-app').style('overflow', 'scroll');
      },
      onEnterBack: function onEnterBack() {
        return select('#model-app').style('overflow', 'hidden');
      }
    });
  }

  function setScroll() {
    // Match media is needed to reset and rebuild the
    // start and end positions for the triggers on resize.
    // It also recalculates all scroll positions, I believe.
    ScrollTrigger.matchMedia({
      '(min-width: 800px)': setScrollBase,
      '(max-width: 799px)': setScrollBase
    });
    ScrollTrigger.refresh();
  } // Main function.


  function update(wineScapeImg) {
    state.scape.image = wineScapeImg;
    updateDimensions();
    setVisualStructure();
    updateTransforms();
    buildModelControls();
    tweenWineScape();
    tweenGlassBottle();
    tweenBottleText();
    tweenBottleWave();
    tweenLolliChart();
    tweenLolliUpdate1();
    tweenLolliUpdate2();
    tweenLolliUpdate3();
    tweenBlackBox();
    tweenCleanup();
    tweenBottleEmpty();
    tweenBottleTextOut();
    tweenAnimals();
    tweenBottleFill();
    tweenBottleColour();
    tweenBottleGrid();
    tweenBottleGridColour();
    tweenBottleGridSort();
    tweenBottleGridOut();
    tweenDataset();
    tweenGlobe();
    tweenStats();
    tweenimportance();
    tweenModelBottle();
    setScroll();
    checkModelWave();
  }
  //    when racing back. So better safely removing it twice...

  var glass = 'M249.684 337.471C249.345 339.55 248.578 341.91 248.578 343.973C248.578 344.676 248.65 345.389 248.439 346.064C248.026 347.388 248.082 348.875 247.609 350.199C247.226 351.272 247.194 352.934 247.194 354.073C247.194 355.351 246.917 356.633 246.917 357.947C246.917 360.474 246.359 362.603 245.826 365.003C245.362 367.093 244.704 369.857 244.704 372.058C244.704 374.328 244.277 376.703 244.15 378.976C243.973 382.173 242.619 385.375 242.49 388.722C242.463 389.427 241.937 390.042 241.937 390.736C241.937 391.546 241.82 392.439 241.645 393.226C241.32 394.687 241.107 396.413 241.107 397.93C241.107 401.711 240.553 405.509 240.553 409.29C240.553 414.482 240 419.448 240 424.631C240 426.961 241.033 429.56 241.645 431.703C242.205 433.664 241.66 436.562 241.66 438.605C241.66 442.055 243.044 445.32 243.044 448.704C243.044 449.465 243.569 449.955 243.597 450.703C243.622 451.384 243.706 452.942 244.089 453.47C244.462 453.983 244.214 455.158 244.489 455.775C244.783 456.437 244.875 457.193 245.196 457.835C247.533 462.51 249.61 467.058 252.175 471.547C253.089 473.147 254.744 474.491 256.325 475.329C258.04 476.237 258.574 478.735 259.984 479.91C260.333 480.201 260.904 480.231 261.291 480.54C261.751 480.909 262.097 481.434 262.582 481.77C263.352 482.303 263.949 483.111 264.749 483.568C266.113 484.348 266.336 486.692 267.516 487.703C269.62 489.507 271.275 491.695 273.588 493.237C274.533 493.867 275.859 494.806 276.524 495.682C277.312 496.718 279.403 497.3 279.568 498.787C279.647 499.499 280.424 500.34 280.736 501C281.126 501.823 280.77 502.701 281.013 503.552C281.439 505.044 282.229 506.595 282.335 508.133C282.447 509.75 283.358 511.208 283.703 512.76C284.111 514.595 284.525 516.435 284.964 518.279C286.005 522.652 285.932 526.758 285.932 531.314C285.932 534.903 287.147 538.403 287.316 541.952C287.428 544.318 288.224 547.915 286.424 549.915C285.642 550.784 285.24 552.222 284.702 553.297C284.309 554.084 283.719 554.777 283.181 555.495C282.791 556.015 282.811 556.75 282.473 557.155C281.254 558.618 281.306 560.887 279.43 562.013C278.127 562.794 277.487 564.159 276.125 564.903C275.572 565.204 271.6 568.228 271.882 568.792C272.572 570.171 273.751 571.327 274.526 572.666C275.201 573.832 276.127 574.33 276.74 575.433C277.913 577.545 279.568 579.414 279.568 581.95C279.568 583.028 279.026 585.394 280.398 585.394C281.71 585.394 282.959 585.671 284.257 585.671C284.812 585.671 286.727 585.973 287.039 586.362C287.266 586.647 290.027 586.763 290.421 586.777C291.759 586.827 293.109 586.777 294.448 586.777C298.308 586.777 302.051 586.418 305.931 586.209C310.604 585.956 314.79 584.287 319.567 584.287C322.165 584.287 324.71 583.457 327.345 583.457C329.468 583.457 331.577 583.592 333.647 583.119C337.488 582.241 341.367 581.498 345.238 580.982C346.128 580.863 346.499 578.175 345.838 577.646C345.495 577.372 345.485 576.821 344.992 576.539C344.44 576.224 343.911 575.884 343.347 575.571C341.977 574.81 340.028 575.156 338.505 575.156C336.726 575.156 334.879 574.422 333.248 574.326C331.86 574.244 329.165 573.398 327.929 572.666C326.905 572.059 325.338 571.913 324.178 571.836C322.852 571.747 321.286 571.017 320.089 570.452C318.04 569.485 315.758 569.367 313.863 567.946C313.13 567.397 312.623 566.923 312.05 566.286C311.658 565.851 311.42 565.247 310.927 564.918C310.378 564.552 309.62 564.451 309.175 563.95C307.871 562.483 306.159 561.628 304.886 560.214C304.395 559.668 303.778 559.214 303.257 558.692C302.314 557.749 302.069 556.485 301.32 555.403C298.849 551.834 297.671 548.513 297.554 544.166C297.46 540.706 296.278 537.327 296.17 533.866C296.066 530.521 296.17 527.159 296.17 523.813C296.17 518.749 296.723 513.859 296.723 508.825C296.723 506.495 297.185 503.398 298.245 501.277C298.88 500.008 298.904 498.837 299.783 497.665C301.284 495.662 301.728 493.174 303.641 491.316C305.294 489.71 307.156 488.974 309.113 487.78C311.223 486.494 313.277 484.293 315.047 482.523C317.152 480.418 319.675 478.91 321.78 476.805C322.377 476.207 322.74 475.207 323.194 474.499C324.309 472.76 325.354 471.009 326.33 469.195C327.072 467.819 328.295 466.651 329.113 465.26C330.23 463.36 331.323 461.418 332.141 459.372C332.603 458.218 332.759 457.178 332.971 455.96C333.338 453.852 333.989 451.82 334.355 449.719C334.808 447.114 335.794 444.577 336.276 441.925C337.381 435.848 337.122 430.342 337.122 424.201C337.122 421.553 337.214 418.677 336.445 416.115C335.431 412.733 335.037 409.755 334.908 406.215C334.85 404.628 334.074 403.272 333.817 401.727C333.572 400.257 333.335 398.791 333.232 397.3C333.061 394.81 332.661 392.345 332.402 389.89C332.281 388.737 332.301 387.479 332.126 386.339C332.02 385.655 331.409 385.026 331.296 384.233C331.004 382.191 330.464 380.12 330.219 378.038C330.085 376.899 329.747 375.463 329.436 374.333C328.74 371.811 328.965 368.916 328.329 366.371C327.702 363.864 327.845 361.452 327.376 358.93C327.13 357.611 327.051 356.289 326.822 354.964C326.657 354.005 326.125 353.198 326.054 352.197C325.898 350.021 324.576 348.114 324.117 346.049C323.752 344.407 323.258 342.935 322.733 341.36C322.009 339.189 321.35 336.897 321.35 334.581C321.35 333.545 321.073 332.55 321.073 331.522C321.073 330.627 320.574 330.861 319.797 330.692C317.28 330.144 314.853 330 312.28 330C310.968 330 309.986 330.71 308.745 331.045C307.7 331.328 306.527 331 305.455 331.168C300.386 331.963 295.508 332.49 290.359 332.49C285.974 332.49 281.561 332.214 277.201 332.214C274.042 332.214 270.375 331.664 267.27 332.229C261.973 333.192 256.339 332.622 251.621 334.981';

  var bottle = 'M1 135V230.5L3.5 234.5L7.5 236L11 237H52H54.5L61.5 236H64L65.5 234.5L66.5 233L67.5 230.5V206L66.5 135L65.5 129L64 121.5L62.5 115L60.5 107.5L57.5 99.5L53 89.5L50 80.5L47.5 70L45.5 63L44.5 55.5V12L45.5 10.5V8.5L44.5 4.5V1H42H24V4.5L23 6.5V15L24 18V22.5L23 28.5V44.5V54L22 59.5L21 66L19 75.5L17.5 83L15 89.5L12.5 95L10.5 99.5L8.5 104.5L6.5 108.5L3.5 118.5L2 126L1 135Z';

  var textBottle = 'M5.0946 132.73C8.70575 132.73 11.0342 134.192 14.3987 134.939C15.9877 135.292 17.2486 136.014 18.9595 136.014C20.8066 136.014 22.6679 135.945 24.5135 136.014C28.7258 136.17 32.9091 136.743 37.2027 136.743C39.2095 136.743 41.2162 136.743 43.223 136.743C45.0211 136.743 46.7714 135.849 48.5338 135.628C52.2644 135.162 55.7874 133.116 59.4595 132.73C60.3895 132.632 63.1081 131.23 63.1081 132.73C63.1081 134.216 63.1081 135.703 63.1081 137.189C63.1081 143.554 63.1081 149.919 63.1081 156.284C63.1081 161.669 63.473 167.039 63.473 172.439C63.473 176.422 64.3502 180.369 64.0203 184.196C63.0414 195.551 63.1081 207.275 63.1081 218.676C63.1081 219.919 63.1081 221.162 63.1081 222.405C63.1081 223.675 61.0572 224.41 60.0068 224.838C55.7709 226.564 51.9369 227.843 47.5 228.608C43.8974 229.229 39.6716 228.003 36.1081 228.608C31.3438 229.417 26.8709 228.74 22 228.608C18.8097 228.522 15.4474 227.537 12.473 226.581C11.0075 226.11 9.84187 226.096 8.5 225.5C7.8779 225.224 7.1221 225.114 6.5 224.838C5.04109 224.189 5.5468 219.362 5.27703 217.743C4.19139 211.229 4 204.669 4 198.061C4 186.399 4 174.737 4 163.074C4 155.784 4 148.493 4 141.203C4 138.196 4.72973 135.002 4.72973 132 M3.52051 133.41C5.22302 133.41 6.56196 134.151 8.21238 134.238C9.21918 134.291 10.217 135.066 11.1103 135.066C13.4098 135.066 15.3692 135.894 17.5961 135.894C23.028 135.894 28.5158 136.17 33.8797 136.17C36.5016 136.17 39.1235 136.17 41.7455 136.17C43.2905 136.17 44.6956 136.511 46.1613 136.185C47.6649 135.851 49.4581 135.423 50.9912 135.342C51.4302 135.319 52.2192 135.081 52.6472 134.928C53.3504 134.677 54.0901 134.937 54.7938 134.729C55.9942 134.373 57.3719 134.564 58.5657 134.223C59.4832 133.961 60.4892 133.673 61.3562 133.425C62.0758 133.22 63.8903 133.831 64.2388 133.134 M62.3069 132.306C62.3069 135.693 62.5829 138.935 62.5829 142.242C62.5829 143.934 62.5829 145.625 62.5829 147.317C62.5829 148.745 62.5829 149.678 62.5829 151C62.5829 152.748 62.5829 154.752 62.5829 156.5C62.5829 158.158 62.4201 159.681 62.7975 161.285C63.4382 164.008 64.3851 166.859 63.9475 169.703C63.6658 171.534 63.6868 173.347 63.6868 175.223C63.6868 180.927 63.6868 186.631 63.6868 192.335C63.6868 197.448 62.3069 202.594 62.3069 207.652C62.3069 210.999 62.8589 214.152 62.8589 217.45C62.8589 220.072 62.8589 222.694 62.8589 225.316 M63.6869 222.832C60.7639 223.972 58.2736 225.461 55.2692 226.128C52.7789 226.682 50.0455 228.076 47.4034 228.076C44.5245 228.076 41.6822 228.352 38.8476 228.352C36.0185 228.352 33.1404 229.18 30.2918 229.18C29.1995 229.18 28.2012 229.18 27 229.18C25.5687 229.18 24.3585 229.302 23 229C21.755 228.723 20.7545 228.886 19.5 228.5C18.6534 228.24 17.3819 228.271 16.5 228C15.9847 227.841 15.0359 227.856 14.5603 227.8C13.3325 227.655 12.0228 226.696 10.8344 226.696C9.30784 226.696 8.23948 225.658 6.98582 225.3C6.14323 225.06 5.17654 223.379 5.17654 222.556C5.17654 221.263 4.90055 220.031 4.90055 218.692C4.90055 215.637 4.34856 212.743 4.34856 209.737C4.34856 206.374 4.34856 203.011 4.34856 199.648C4.34856 196.233 3.79658 192.869 3.79658 189.437C3.79658 184.908 3.79658 180.38 3.79658 175.852C3.79658 171.594 3.79658 167.337 3.79658 163.079C3.79658 160.825 3.79658 158.571 3.79658 156.318C3.79658 155.034 3.72913 153.735 3.79658 152.454C3.83575 151.709 4.32688 150.961 4.34856 150.246C4.43673 147.336 4.62456 144.289 4.62456 141.276C4.62456 139.554 4.62456 137.831 4.62456 136.109C4.62456 135.305 4.6691 134.488 4.62456 133.686C4.59668 133.184 4.07257 132.717 4.07257 132.306 M20.237 197.758L20.1975 195.981V194.381C20.1909 194.138 20.1861 193.894 20.1831 193.651C20.1795 193.377 20.1777 193.087 20.1777 192.781C20.1777 191.017 20.1448 189.385 20.079 187.884L20.0593 187.173C20.024 186.478 20.0044 185.899 20.0006 185.436C20.0002 185.383 20 185.33 20 185.277L20.0593 185.198C20.0637 185.189 20.0688 185.18 20.0745 185.172C20.0892 185.151 20.1105 185.127 20.1382 185.099C20.147 185.073 20.1654 185.051 20.1896 185.038C20.2012 185.032 20.2145 185.026 20.2295 185.022C20.232 185.021 20.2345 185.021 20.237 185.02C20.2453 185.016 20.2541 185.013 20.2631 185.011C20.2901 185.004 20.3275 185 20.3752 185C20.6766 184.998 20.976 185.048 21.2602 185.148C21.3878 185.193 21.5113 185.25 21.6294 185.316C22.0046 185.527 22.3107 185.816 22.5477 186.185C22.9677 186.849 23.2041 187.612 23.2328 188.397C23.2369 188.483 23.239 188.568 23.239 188.654C23.2372 189.145 23.1749 189.634 23.0535 190.11C23.0231 190.231 22.9895 190.351 22.9526 190.471C22.7617 191.09 22.4753 191.649 22.0935 192.15C21.974 192.315 21.8388 192.469 21.6898 192.609C21.5157 192.77 21.3339 192.893 21.1443 192.979C21.0248 193.033 20.8992 193.073 20.7702 193.097L20.8097 195.29L20.8492 196.356C20.8681 196.804 20.8841 197.252 20.8974 197.701C20.9077 198.052 20.9154 198.386 20.9205 198.702C20.9255 199 20.9281 199.297 20.9282 199.595C20.9282 199.78 20.9055 199.921 20.8601 200.02C20.8539 200.033 20.847 200.047 20.8394 200.059C20.7801 200.158 20.6649 200.207 20.4937 200.207C20.4653 200.207 20.4376 200.198 20.4135 200.183C20.3893 200.168 20.3697 200.147 20.3565 200.122C20.29 200.017 20.2567 199.815 20.2567 199.516C20.2567 198.951 20.2519 198.438 20.2421 197.979C20.2406 197.906 20.2389 197.832 20.237 197.758V197.758ZM20.7307 192.327L20.7702 192.367C20.8388 192.359 20.9054 192.339 20.9673 192.308C21.0161 192.285 21.0647 192.255 21.1133 192.218C21.1175 192.215 21.1216 192.212 21.1257 192.209C21.133 192.205 21.1398 192.2 21.1459 192.195C21.1668 192.176 21.1947 192.144 21.2296 192.098C21.2413 192.082 21.2527 192.067 21.264 192.051L21.4022 191.913C22.2133 191.108 22.6737 190.016 22.6832 188.873C22.6851 188.813 22.686 188.753 22.686 188.693C22.6899 188.106 22.589 187.522 22.3879 186.97C22.3467 186.858 22.3012 186.748 22.2515 186.639C22.0935 186.31 21.8631 186.05 21.5602 185.859C21.3317 185.717 21.0749 185.626 20.8078 185.593C20.7037 185.579 20.5988 185.573 20.4937 185.573C20.4937 186.323 20.5332 187.449 20.6122 188.95C20.6727 190.099 20.71 191.029 20.7242 191.738C20.7283 191.934 20.7305 192.131 20.7307 192.327V192.327Z M26.0039 200.488H25.8459C25.6229 200.488 25.4622 200.449 25.364 200.371C25.3357 200.349 25.3116 200.321 25.2929 200.291C25.2932 200.233 25.315 200.177 25.3539 200.134C25.3787 200.105 25.411 200.079 25.4509 200.054L25.5497 199.955H26.1224L26.2014 199.876L26.2409 199.698L26.2607 199.461C26.2609 199.103 26.2565 198.746 26.2476 198.388C26.2377 198.004 26.2223 197.644 26.2014 197.308L26.1619 196.578L26.1224 195.136C26.1226 194.992 26.1238 194.847 26.1262 194.703C26.1312 194.372 26.1415 193.973 26.1572 193.505C26.1648 193.278 26.1729 193.052 26.1817 192.825L26.2212 190.534C26.2212 189.709 26.1988 189.046 26.154 188.543C26.1452 188.443 26.1347 188.343 26.1224 188.243C26.0318 188.213 25.895 188.194 25.712 188.187C25.6513 188.185 25.5906 188.184 25.5299 188.184L25.3127 188.204C25.2611 188.212 25.2091 188.218 25.1568 188.221C25.1232 188.223 25.0896 188.223 25.0559 188.223C24.8424 188.223 24.72 188.142 24.6888 187.979C24.6832 187.949 24.6805 187.918 24.6807 187.888C24.6813 187.869 24.688 187.851 24.6998 187.836C24.7259 187.801 24.7788 187.765 24.8584 187.73C24.9742 187.678 25.0711 187.652 25.1491 187.651C25.151 187.651 25.1528 187.651 25.1547 187.651C25.655 187.651 26.1553 187.677 26.6557 187.73C26.9555 187.744 27.2518 187.8 27.5357 187.898C27.5452 187.901 27.5547 187.904 27.5641 187.907C27.8011 187.986 27.9196 188.098 27.9196 188.243C27.9196 188.27 27.8999 188.322 27.8604 188.401L27.4061 188.441C27.314 188.362 27.1231 188.322 26.8334 188.322L26.7347 188.381C26.7446 188.414 26.7518 188.448 26.7562 188.482C26.7813 188.651 26.7939 188.967 26.7939 189.428C26.794 189.835 26.7924 190.242 26.7892 190.649C26.786 191.035 26.7812 191.401 26.7747 191.745C26.7745 191.756 26.7743 191.767 26.7741 191.778L26.7347 194.129C26.7347 194.536 26.7471 195.003 26.772 195.528C26.784 195.779 26.7979 196.03 26.8136 196.281C26.8229 196.507 26.8316 196.732 26.8395 196.958C26.8548 197.392 26.8649 197.764 26.8697 198.072C26.8718 198.199 26.8728 198.327 26.8729 198.454V198.711C26.868 198.745 26.8643 198.78 26.8616 198.815C26.856 198.888 26.8531 198.971 26.8531 199.066C26.8531 199.119 26.8538 199.171 26.8553 199.224C26.8597 199.38 26.8713 199.493 26.8901 199.562C26.8949 199.582 26.9025 199.601 26.9124 199.619L26.8926 199.659C26.8926 199.688 26.9009 199.716 26.9166 199.741C26.9323 199.765 26.9547 199.785 26.9811 199.797C27.0316 199.825 27.1036 199.843 27.1972 199.851C27.2404 199.855 27.2838 199.856 27.3271 199.856C27.4456 199.856 27.5444 199.85 27.6234 199.836H27.9196C28.1429 199.836 28.3009 199.868 28.3936 199.931C28.4244 199.95 28.4497 199.977 28.4671 200.009C28.4844 200.041 28.4931 200.077 28.4924 200.113C28.4929 200.158 28.4863 200.203 28.4728 200.246C28.4539 200.305 28.4198 200.358 28.3739 200.399C28.3208 200.447 28.2558 200.48 28.1857 200.495C28.1437 200.504 28.1008 200.508 28.0579 200.508C28.0051 200.508 27.9523 200.505 27.8999 200.499C27.8452 200.493 27.7941 200.483 27.7464 200.47C27.7449 200.469 27.7434 200.469 27.7419 200.468C27.6667 200.459 27.5911 200.453 27.5154 200.451C27.479 200.449 27.4426 200.449 27.4061 200.449C27.3429 200.449 27.2545 200.47 27.1407 200.512C27.1105 200.523 27.0804 200.535 27.0506 200.547C26.8926 200.626 26.7742 200.666 26.6952 200.666C26.4937 200.666 26.3476 200.637 26.2569 200.579C26.2143 200.553 26.181 200.514 26.1619 200.468C26.1191 200.468 26.0819 200.471 26.0501 200.477C26.0345 200.479 26.019 200.483 26.0039 200.488V200.488Z M34.9111 200.571L34.9309 200.512C34.8886 200.27 34.8354 200.029 34.7715 199.791C34.7104 199.561 34.6372 199.317 34.5519 199.059C34.4607 198.784 34.3632 198.511 34.2594 198.241L33.9039 197.214C33.881 197.191 33.7828 196.932 33.6094 196.438C33.5824 196.361 33.5554 196.284 33.5286 196.207L33.3706 195.733C33.231 195.301 33.0898 194.87 32.947 194.439C32.0081 191.608 31.4059 190.058 31.1403 189.789C31.1398 189.789 31.1394 189.788 31.1389 189.788C31.0976 189.93 31.0659 190.075 31.0441 190.222C31.0208 190.374 31.004 190.539 30.9936 190.717C30.9849 190.868 30.9807 191.019 30.9809 191.17C30.9809 191.278 30.9818 191.386 30.9837 191.494C30.9868 191.665 30.9925 191.821 31.0007 191.96L31.0204 192.731L31.0007 193.205C30.993 193.29 30.9877 193.376 30.9847 193.462C30.9821 193.534 30.9809 193.606 30.9809 193.679C30.9809 193.968 30.9941 194.218 31.0204 194.429L31.0599 195.061H31.0007C31.0006 195.321 31.0014 195.58 31.0028 195.839C31.0129 197.542 31.0579 198.493 31.1381 198.693C31.1384 198.694 31.1387 198.694 31.1389 198.695V200.473C31.1615 200.519 31.1787 200.567 31.1901 200.617C31.2014 200.665 31.2092 200.717 31.2136 200.773C31.2165 200.811 31.218 200.849 31.2179 200.887C31.2179 200.993 31.1817 201.085 31.1093 201.164C31.0741 201.203 31.0307 201.234 30.9821 201.255C30.9379 201.274 30.8905 201.283 30.8427 201.282C30.5821 201.282 30.4443 200.967 30.4293 200.335C30.4284 200.295 30.4279 200.256 30.4279 200.216L30.4674 199.584C30.4938 199.386 30.5069 199.169 30.5069 198.932C30.5069 198.448 30.4953 197.779 30.4722 196.925C30.4646 196.646 30.4564 196.367 30.4477 196.088C30.4384 195.792 30.4298 195.496 30.4218 195.199C30.4065 194.629 30.3965 194.143 30.3916 193.741C30.3896 193.575 30.3885 193.41 30.3884 193.244C30.3886 193.136 30.3898 193.028 30.3922 192.92C30.3994 192.565 30.4172 192.102 30.4455 191.529C30.4462 191.515 30.447 191.501 30.4477 191.486C30.4569 191.305 30.4656 191.123 30.4735 190.941C30.4958 190.432 30.5069 190.035 30.5069 189.748V189.492C30.5064 189.352 30.5129 189.213 30.5265 189.075C30.5547 188.801 30.6132 188.585 30.7021 188.426C30.7429 188.351 30.7972 188.283 30.8624 188.228L30.9217 188.287L31.1192 188.247C31.139 188.253 31.158 188.26 31.1759 188.27C31.2134 188.291 31.2537 188.323 31.2969 188.366C31.3172 188.386 31.3344 188.409 31.3481 188.433C31.3665 188.467 31.376 188.505 31.3759 188.544L31.4154 188.662C31.4154 188.673 31.4161 188.684 31.4174 188.695C31.419 188.708 31.4216 188.72 31.4253 188.731L31.4352 188.761C31.5033 189.057 31.5834 189.349 31.6753 189.639C31.9333 190.462 32.3272 191.48 32.8572 192.691C33.0091 193.051 33.1597 193.411 33.309 193.772C33.6839 194.678 33.9574 195.37 34.1296 195.848C34.1752 195.973 34.2185 196.099 34.2594 196.226C34.314 196.417 34.3666 196.609 34.417 196.801C34.4782 197.034 34.531 197.251 34.5754 197.451C34.6478 197.778 34.7305 198.103 34.8234 198.425C35.0072 199.057 35.2111 199.577 35.4349 199.986C35.4445 200.003 35.4543 200.021 35.4641 200.038L35.5036 199.979C35.6243 198.792 35.7166 197.602 35.7805 196.41C35.8988 194.271 35.9579 191.873 35.9579 189.215L35.9381 188.978C35.9333 188.953 35.9295 188.928 35.9269 188.903C35.9212 188.851 35.9184 188.79 35.9184 188.721C35.9184 188.445 36.0105 188.307 36.1949 188.307C36.2794 188.307 36.3607 188.339 36.4226 188.396C36.4519 188.423 36.4782 188.452 36.501 188.484C36.5866 188.603 36.6294 188.735 36.6294 188.879V190.203L36.5306 190.361C36.53 190.724 36.5254 191.087 36.517 191.449C36.4899 192.689 36.422 194.38 36.3134 196.523C36.2964 196.859 36.2784 197.196 36.2595 197.533C36.1341 199.748 36.0138 200.965 35.8986 201.183L35.5629 201.262V201.282L35.5431 201.262L35.3456 201.322C35.3152 201.322 35.2849 201.318 35.2556 201.31C35.2268 201.302 35.1998 201.289 35.1763 201.271C35.1527 201.252 35.1331 201.229 35.1185 201.203C35.1026 201.176 35.0885 201.147 35.0762 201.118C35.046 201.046 35.0173 200.956 34.9901 200.848C34.9841 200.798 34.9743 200.749 34.9607 200.7C34.9482 200.656 34.9316 200.613 34.9111 200.571V200.571Z M39.1378 194.35V193.659C39.1368 193.13 39.1484 192.6 39.1725 192.072C39.2885 189.645 39.6951 188.344 40.3923 188.169C40.447 188.155 40.5033 188.149 40.5597 188.149C40.5817 188.149 40.6036 188.151 40.6253 188.154C40.6698 188.16 40.7222 188.173 40.7825 188.191C40.8005 188.196 40.8184 188.202 40.8362 188.208C41.2576 188.353 41.6723 188.445 42.0805 188.484C42.1702 188.505 42.2542 188.546 42.3268 188.602C42.4948 188.728 42.6628 188.945 42.831 189.255C43.1075 189.729 43.3148 190.354 43.4531 191.131C43.5913 191.908 43.6605 192.704 43.6605 193.521L43.621 193.619C43.6209 193.813 43.6223 194.006 43.6253 194.2C43.6282 194.382 43.6325 194.554 43.6381 194.716C43.639 194.739 43.6398 194.762 43.6407 194.785L43.6605 195.97C43.6608 196.287 43.6544 196.604 43.6411 196.92C43.6279 197.226 43.6081 197.515 43.5815 197.787C43.5505 198.112 43.5078 198.437 43.4533 198.76C43.3819 199.177 43.293 199.557 43.1865 199.9C43.0877 200.196 42.9776 200.451 42.856 200.665C42.8323 200.707 42.8075 200.748 42.7816 200.789C42.6302 201.026 42.4426 201.223 42.2187 201.381C42.0587 201.5 41.871 201.576 41.6734 201.602C41.5989 201.613 41.5237 201.618 41.4485 201.618C39.908 201.618 39.1378 199.195 39.1378 194.35ZM42.831 191.151L42.752 190.993L42.7915 190.894C42.7915 190.315 42.6302 189.814 42.3076 189.393C41.985 188.972 41.5933 188.761 41.1325 188.761C40.9904 188.759 40.8489 188.778 40.7126 188.819C40.3563 188.93 40.1342 189.2 40.0462 189.63C40.0199 189.827 39.9936 190.11 39.9672 190.479C39.9672 191.399 39.932 192.044 39.8616 192.412C39.8576 192.433 39.8533 192.453 39.8487 192.474C39.8487 192.664 39.8304 192.958 39.7938 193.355C39.7924 193.371 39.791 193.387 39.7895 193.402L39.75 194.33C39.75 194.579 39.7549 194.804 39.7646 195.004C39.7662 195.036 39.7679 195.068 39.7697 195.101L39.7895 195.891C39.7895 196.422 39.8284 197.022 39.9062 197.69C39.9192 197.801 39.9329 197.913 39.9475 198.024C40.0079 198.477 40.0761 198.877 40.1521 199.222C40.1742 199.324 40.1982 199.424 40.224 199.525C40.2729 199.717 40.3367 199.906 40.4148 200.088C40.4871 200.257 40.5753 200.419 40.6782 200.571C40.726 200.649 40.781 200.722 40.8426 200.79C41.0004 200.96 41.1761 201.045 41.3695 201.045C41.8031 201.045 42.1428 200.787 42.3888 200.271C42.4366 200.169 42.4787 200.065 42.515 199.959C42.7651 199.222 42.9165 198.471 42.9692 197.708C43.0141 197.033 43.0399 196.474 43.0464 196.03C43.0476 195.957 43.0482 195.884 43.0482 195.812C43.0482 195.285 43.0087 194.508 42.9297 193.481C42.9154 193.233 42.9018 192.985 42.8888 192.737C42.8503 191.992 42.831 191.463 42.831 191.151Z M47.7486 200.547L47.5314 200.389L47.5116 199.659C47.5049 199.549 47.5 199.439 47.497 199.328C47.4939 199.216 47.4922 199.097 47.4919 198.973C47.4919 198.964 47.4919 198.956 47.4919 198.948C47.4918 198.901 47.4928 198.855 47.4947 198.808C47.4977 198.735 47.5034 198.67 47.5116 198.612L47.5314 198.256C47.5311 198.203 47.5274 198.15 47.5203 198.097C47.508 198.003 47.4853 197.898 47.4524 197.782C47.4518 197.534 47.4482 197.286 47.4415 197.037C47.418 196.09 47.3558 194.699 47.2549 192.865C47.1232 190.547 47.0508 188.974 47.0376 188.144C46.3334 188.144 45.83 188.13 45.5276 188.1C45.4844 188.096 45.4414 188.091 45.3984 188.085C45.3495 188.073 45.3013 188.058 45.2542 188.04C45.1535 188.001 45.0831 187.953 45.0431 187.895C45.017 187.858 45.0032 187.814 45.0034 187.769C45.0249 187.719 45.0583 187.674 45.1006 187.638C45.143 187.603 45.1932 187.579 45.2469 187.567C45.2901 187.557 45.3343 187.552 45.3787 187.552C45.7737 187.552 46.3464 187.578 47.0969 187.631C47.3282 187.653 47.5599 187.673 47.7917 187.689C48.1788 187.716 48.5199 187.73 48.8151 187.73H49.2299L49.6446 187.71C49.8816 187.71 50.0001 187.796 50.0001 187.967C50.0001 188.046 49.9573 188.108 49.8717 188.154C49.8193 188.182 49.7628 188.201 49.7043 188.212C49.6585 188.22 49.6121 188.224 49.5656 188.223C49.365 188.223 49.1644 188.216 48.9642 188.202C48.8881 188.197 48.8121 188.191 48.7361 188.184L47.8869 188.144C47.8366 188.144 47.8103 188.163 47.8081 188.199C47.808 188.2 47.8079 188.202 47.8079 188.204C47.8048 188.214 47.8025 188.225 47.8012 188.235C47.7925 188.293 47.7881 188.408 47.7881 188.579C47.7881 189.85 47.8664 191.774 48.023 194.351C48.0237 194.363 48.0244 194.374 48.0251 194.385C48.0589 195.01 48.0906 195.634 48.1201 196.258C48.1931 197.806 48.2334 199.013 48.241 199.88C48.2419 199.977 48.2424 200.075 48.2424 200.172C48.2419 200.221 48.2269 200.268 48.1991 200.308C48.1825 200.332 48.1611 200.357 48.1349 200.381C48.1158 200.398 48.0956 200.414 48.0745 200.429C48.0358 200.457 47.9945 200.481 47.9513 200.501C47.8824 200.532 47.8149 200.547 47.7486 200.547Z M25.4124 216.875H25.8907L26.3524 216.891C26.3879 216.891 26.4234 216.89 26.4588 216.888C26.5747 216.882 26.6519 216.863 26.6905 216.833C26.7074 216.82 26.7208 216.802 26.7296 216.782C26.753 216.733 26.7648 216.66 26.7648 216.561C26.7648 214.802 26.7078 212.759 26.5939 210.43C26.5384 209.307 26.4744 208.184 26.4019 207.062V206.534L26.4184 206.006C26.4184 205.876 26.4093 205.774 26.3912 205.701C26.3858 205.678 26.3784 205.656 26.3689 205.635C26.3473 205.589 26.3107 205.551 26.265 205.528C26.238 205.514 26.2067 205.503 26.171 205.495C26.0737 205.473 25.9073 205.462 25.6718 205.462C25.6678 205.462 25.6638 205.462 25.6598 205.462C25.5938 205.462 25.5333 205.467 25.4784 205.478L25.2804 205.495C25.2486 205.495 25.2168 205.493 25.1853 205.488C25.1069 205.477 25.0534 205.449 25.0248 205.405C25.0077 205.378 24.9991 205.346 25.0001 205.313C25 205.294 25.0042 205.275 25.0123 205.257C25.0204 205.24 25.0323 205.224 25.0471 205.212C25.0604 205.2 25.0751 205.19 25.0908 205.181C25.1513 205.148 25.231 205.126 25.3299 205.115C25.3685 205.11 25.4073 205.107 25.4462 205.104C25.64 205.091 25.9908 205.084 26.4986 205.083C26.5433 205.083 26.5881 205.082 26.6328 205.082C26.6668 205.082 26.7005 205.088 26.7321 205.101C26.7668 205.115 26.7977 205.137 26.8225 205.165C26.8431 205.187 26.8602 205.213 26.8733 205.24C26.8888 205.273 26.8968 205.31 26.8967 205.346V205.858C26.8968 205.954 26.8979 206.05 26.8998 206.146C26.906 206.468 26.9214 206.888 26.9462 207.408L26.9792 208.975C26.9796 209.037 26.9809 209.1 26.9833 209.162C26.993 209.452 27.0197 209.984 27.0634 210.758C27.0737 210.938 27.0841 211.119 27.0946 211.3C27.1606 212.729 27.1936 213.796 27.1936 214.5V214.714L27.243 215.621L27.276 216.578L27.2595 216.71L27.243 216.825L27.309 216.875L27.6883 216.842C27.7983 216.831 27.9192 216.825 28.0512 216.825C28.2459 216.825 28.385 216.85 28.4686 216.9C28.497 216.915 28.5209 216.938 28.5374 216.965C28.554 216.992 28.5626 217.024 28.5624 217.056C28.5624 217.21 28.4415 217.287 28.1996 217.287L26.8802 217.32C26.4404 217.342 25.9951 217.353 25.5443 217.353C25.5195 217.353 25.4946 217.351 25.4701 217.347C25.4183 217.337 25.3771 217.317 25.3464 217.287C25.3024 217.243 25.2804 217.16 25.2804 217.039C25.2806 217.024 25.2834 217.008 25.2887 216.994C25.293 216.981 25.2989 216.969 25.3063 216.956C25.3111 216.948 25.3162 216.94 25.3217 216.932C25.3385 216.909 25.3563 216.892 25.3751 216.883C25.3867 216.878 25.3995 216.875 25.4124 216.875Z M31.9103 219L31.7784 218.835C31.8536 218.618 31.9002 218.284 31.9182 217.832C31.9242 217.677 31.927 217.522 31.9268 217.367L31.9598 215.058C31.9676 214.819 31.9748 214.579 31.9815 214.34C32 213.671 32.0093 213.147 32.0093 212.767C32.0093 212.767 32.0093 212.766 32.0093 212.766L31.9928 211.875C31.9822 211.62 31.9768 211.333 31.9764 211.016C31.9764 211.006 31.9763 210.995 31.9763 210.985L31.8608 211.018C31.487 210.974 31.1462 210.853 30.8383 210.655C30.5304 210.457 30.2776 210.215 30.0796 209.929C29.6838 209.346 29.4859 208.709 29.4859 208.016C29.4842 207.767 29.5107 207.518 29.5648 207.274C29.6359 206.949 29.7748 206.643 29.9724 206.375C30.117 206.175 30.3054 206.012 30.5231 205.897C30.7325 205.789 30.9681 205.731 31.23 205.724C31.2479 205.724 31.2657 205.723 31.2836 205.723C31.3793 205.724 31.4748 205.734 31.5687 205.753C31.6582 205.77 31.7513 205.795 31.848 205.828C31.8661 205.834 31.8841 205.841 31.9021 205.847C31.9593 205.868 32.0155 205.891 32.0704 205.918C32.2047 205.983 32.2997 206.056 32.3556 206.136C32.3759 206.18 32.3887 206.226 32.3934 206.274C32.4451 206.597 32.471 207.431 32.471 208.775V209.748C32.4657 209.89 32.4618 210.032 32.4593 210.175C32.4561 210.346 32.4545 210.528 32.4545 210.721C32.4545 210.81 32.4368 210.907 32.4014 211.014C32.3973 211.026 32.393 211.038 32.3886 211.051C32.3779 211.093 32.3686 211.136 32.3605 211.179C32.353 211.22 32.3474 211.258 32.3439 211.293C32.3408 211.322 32.3392 211.351 32.3391 211.38L32.3061 214.151C32.3006 214.575 32.2966 214.999 32.2941 215.423C32.2913 215.87 32.2899 216.342 32.2898 216.839C32.2897 216.872 32.2897 216.905 32.2896 216.938C32.2894 216.991 32.2873 217.044 32.2832 217.097C32.2744 217.216 32.2565 217.355 32.2296 217.514C32.2276 217.526 32.2257 217.537 32.2237 217.549C32.2159 217.613 32.2087 217.677 32.202 217.741C32.1887 217.87 32.1802 217.979 32.1765 218.066C32.1751 218.097 32.1743 218.128 32.1742 218.159C32.1742 218.181 32.1747 218.204 32.1758 218.226C32.1782 218.272 32.1832 218.31 32.1907 218.34V218.538C32.1907 218.742 32.1497 218.878 32.0676 218.947C32.0233 218.983 31.9674 219.002 31.9103 219V219ZM31.7619 210.589L31.9928 210.556C32.0477 209.478 32.0752 208.302 32.0752 207.026C32.0756 206.94 32.0708 206.854 32.0609 206.768C32.0375 206.572 31.9852 206.416 31.904 206.298C31.9007 206.294 31.8973 206.289 31.8938 206.284C31.7852 206.136 31.6144 206.054 31.3816 206.039C31.3544 206.038 31.3273 206.037 31.3001 206.037C31.1626 206.036 31.0256 206.051 30.8919 206.083C30.65 206.138 30.4337 206.273 30.2776 206.466C30.1493 206.627 30.0564 206.814 30.0049 207.014C29.9558 207.195 29.9312 207.397 29.9312 207.62C29.9327 207.977 29.9875 208.333 30.0938 208.674C30.1195 208.758 30.1478 208.841 30.1786 208.923C30.2762 209.187 30.4014 209.439 30.5523 209.677C30.6385 209.811 30.734 209.94 30.8383 210.061C30.9274 210.154 31.0239 210.24 31.1269 210.318C31.3386 210.476 31.5502 210.566 31.7619 210.589Z M36.4787 210.952H36.0993L36.0169 211.001H36.0004L35.9674 210.985C35.9637 210.985 35.9601 210.986 35.9567 210.987C35.9338 210.995 35.8797 211.02 35.7942 211.063C35.7915 211.064 35.7887 211.066 35.786 211.067C35.7731 211.072 35.7602 211.077 35.7472 211.082C35.6629 211.116 35.6155 211.133 35.6051 211.133C35.6049 211.133 35.6047 211.133 35.6046 211.133C35.5164 211.133 35.4435 211.113 35.3859 211.074C35.3788 211.069 35.372 211.064 35.3654 211.059C35.305 211.009 35.2637 210.946 35.2417 210.869C35.2307 210.836 35.2252 210.795 35.2252 210.745C35.2252 210.696 35.2197 210.649 35.2088 210.605V210.358C35.2527 210.083 35.2747 209.803 35.2747 209.517C35.2747 209.243 35.2404 208.838 35.1716 208.302C35.1472 208.113 35.1211 207.924 35.0933 207.736C34.9937 207.137 34.9277 206.644 34.8952 206.255C34.8886 206.177 34.8832 206.099 34.8789 206.02L35.0603 205.855L36.3137 205.839H36.3467C36.5333 205.839 36.6653 205.865 36.7427 205.918C36.7684 205.934 36.7895 205.956 36.8039 205.983C36.8184 206.01 36.8256 206.04 36.825 206.07L36.6271 206.218H36.2808L36.2478 206.251L35.5716 206.169L35.4726 206.202L35.4067 206.185C35.4067 206.345 35.4163 206.557 35.4357 206.82C35.442 206.905 35.4488 206.99 35.4561 207.076C35.4891 207.483 35.5111 207.708 35.5221 207.752C35.5318 207.917 35.5425 208.082 35.5541 208.247C35.5932 208.808 35.654 209.566 35.7365 210.523L35.7035 210.539L36.0004 210.572C36.6271 210.649 37.0064 210.737 37.1384 210.836C37.1998 210.883 37.2532 210.939 37.2965 211.003C37.4268 211.186 37.5478 211.475 37.6595 211.871C37.6645 211.889 37.6695 211.907 37.6744 211.925C37.8338 212.507 37.941 213.101 37.996 213.706C38.0509 214.168 38.0784 214.629 38.0784 215.091C38.0784 215.428 38.072 215.729 38.0591 215.995C38.0554 216.073 38.0508 216.151 38.0454 216.229C38.0233 216.61 37.9638 216.988 37.8677 217.357C37.8611 217.382 37.8544 217.408 37.8475 217.433C37.8204 217.524 37.7894 217.614 37.7547 217.703C37.7121 217.81 37.6661 217.907 37.6166 217.994C37.5287 218.148 37.4187 218.291 37.2868 218.423C37.1658 218.555 37.0174 218.675 36.8415 218.785H36.7096C36.6249 218.786 36.5402 218.783 36.4557 218.778C36.2041 218.761 36.0381 218.716 35.9578 218.643C35.9402 218.628 35.926 218.609 35.9163 218.588C35.9065 218.567 35.9015 218.545 35.9014 218.522C35.9004 218.491 35.9086 218.461 35.9249 218.436C35.9411 218.41 35.9648 218.391 35.9926 218.379C36.0374 218.357 36.0987 218.344 36.1767 218.341C36.1894 218.34 36.2021 218.34 36.2148 218.34C36.2338 218.34 36.2527 218.342 36.2712 218.347C36.3098 218.355 36.3542 218.37 36.4043 218.394C36.4126 218.398 36.4209 218.402 36.4292 218.406C36.5059 218.45 36.5718 218.472 36.6268 218.472C36.6269 218.472 36.627 218.472 36.6271 218.472C36.7138 218.471 36.7983 218.445 36.8699 218.396C36.9148 218.366 36.9589 218.328 37.002 218.282C37.0331 218.248 37.0621 218.213 37.0889 218.175C37.2229 217.99 37.3328 217.761 37.4186 217.488C37.4243 217.47 37.4298 217.451 37.4352 217.433C37.4806 217.259 37.5213 217.084 37.5571 216.909C37.6268 216.563 37.6631 216.265 37.666 216.014C37.6661 216.003 37.6661 215.992 37.6661 215.982C37.6661 215.384 37.6339 214.696 37.5695 213.918C37.5489 213.671 37.5262 213.424 37.5012 213.178C37.4698 212.926 37.4266 212.676 37.3719 212.428C37.3042 212.126 37.2208 211.848 37.1219 211.595C37.0871 211.509 37.0468 211.425 37.001 211.344C36.9005 211.169 36.7895 211.053 36.668 210.995C36.609 210.966 36.5442 210.951 36.4787 210.952V210.952ZM35.3902 207.867L35.4067 207.851C35.4048 207.851 35.403 207.851 35.4012 207.851C35.3976 207.852 35.3948 207.853 35.393 207.854C35.3921 207.855 35.3914 207.855 35.3909 207.856C35.3904 207.857 35.3902 207.858 35.3902 207.859V207.867Z M40.7504 216.809L40.8658 216.726C40.9076 216.726 40.9492 216.732 40.9894 216.744C41.0242 216.753 41.0601 216.767 41.0969 216.784C41.1024 216.787 41.1078 216.789 41.1132 216.792C41.1759 216.824 41.2365 216.859 41.2946 216.898C41.3226 216.917 41.3501 216.937 41.3771 216.957C41.3869 216.967 41.3972 216.976 41.4078 216.985C41.4449 217.016 41.5007 217.056 41.575 217.105C41.784 217.114 41.9908 217.059 42.1681 216.948C42.3455 216.837 42.4852 216.675 42.569 216.483C42.742 216.137 42.8284 215.646 42.8284 215.011C42.8284 214.263 42.8064 213.648 42.7625 213.164C42.7432 213.007 42.719 212.851 42.6899 212.696C42.6582 212.53 42.622 212.375 42.581 212.232C42.5354 212.073 42.4816 211.917 42.4199 211.764C42.368 211.635 42.3117 211.508 42.2512 211.383C42.142 211.157 42.0043 210.947 41.8415 210.757C41.7981 210.706 41.7533 210.656 41.707 210.607H41.641L41.542 210.624C41.5152 210.624 41.4884 210.622 41.4619 210.617C41.3971 210.608 41.3194 210.588 41.2287 210.558V210.492L41.1462 210.41C41.176 210.35 41.2282 210.277 41.3029 210.19C41.3111 210.181 41.3193 210.171 41.3276 210.162C41.3359 210.151 41.3443 210.14 41.3529 210.13C41.3989 210.072 41.4867 209.968 41.6162 209.816C41.695 209.723 41.767 209.624 41.8315 209.52C41.9093 209.396 41.9833 209.258 42.0533 209.107C42.1522 208.821 42.2017 208.551 42.2017 208.298C42.2017 207.826 42.1742 207.391 42.1193 206.996C42.1039 206.883 42.0855 206.771 42.064 206.659C42.0429 206.55 42.0196 206.449 41.9943 206.355C41.9797 206.302 41.9636 206.248 41.9461 206.196C41.9046 206.069 41.8486 205.947 41.7794 205.833C41.7383 205.766 41.692 205.703 41.641 205.643C41.5936 205.588 41.5389 205.538 41.4784 205.497C41.3804 205.431 41.2646 205.395 41.1462 205.396C40.9813 205.396 40.8356 205.443 40.7092 205.536C40.6597 205.572 40.6142 205.613 40.5734 205.659C40.5214 205.717 40.4807 205.785 40.4535 205.858C40.4337 205.916 40.4112 205.973 40.3859 206.029C40.2926 206.234 40.1887 206.336 40.0742 206.336C40.0223 206.336 39.9713 206.322 39.9261 206.296C39.9117 206.288 39.8978 206.28 39.8845 206.27C39.8604 206.253 39.8391 206.232 39.8212 206.208C39.7985 206.178 39.7834 206.142 39.7773 206.105C39.8372 205.984 39.9035 205.867 39.9761 205.754C40.1061 205.552 40.2433 205.391 40.3876 205.272C40.5702 205.122 40.7934 205.031 41.0286 205.009C41.0841 205.003 41.1399 205 41.1957 205C41.3386 205 41.4761 205.036 41.608 205.107C41.7399 205.179 41.8499 205.275 41.9378 205.396L41.9873 205.412C42.1433 205.646 42.265 205.9 42.3488 206.168C42.5122 206.666 42.6085 207.286 42.6376 208.029C42.644 208.196 42.6472 208.362 42.647 208.529C42.647 208.793 42.5481 209.101 42.3502 209.453C42.3221 209.472 42.2542 209.566 42.1465 209.736C42.1262 209.768 42.1062 209.8 42.0863 209.832C41.9983 209.975 41.9049 210.113 41.8059 210.245C41.9944 210.314 42.1664 210.422 42.3108 210.562C42.4552 210.702 42.569 210.87 42.6447 211.056C42.6702 211.115 42.693 211.174 42.713 211.234C42.8124 211.542 42.9117 211.962 43.011 212.494C43.0218 212.552 43.0325 212.611 43.0428 212.669C43.0558 212.808 43.0761 212.946 43.1035 213.083C43.1191 213.16 43.1373 213.236 43.1583 213.312C43.1679 213.364 43.1775 213.416 43.187 213.468C43.2249 213.676 43.2483 213.814 43.2572 213.881C43.2597 213.9 43.2615 213.92 43.2628 213.939C43.2699 214.035 43.2735 214.196 43.2737 214.423C43.2737 214.432 43.2737 214.441 43.2737 214.45C43.2739 214.592 43.2715 214.733 43.2668 214.874C43.2591 215.099 43.2449 215.304 43.2243 215.489C43.2049 215.732 43.1634 215.973 43.1001 216.209C43.0661 216.334 43.0249 216.457 42.9769 216.578C42.9193 216.719 42.8412 216.85 42.7451 216.968C42.6287 217.11 42.4826 217.224 42.3172 217.303C42.1632 217.38 41.9818 217.419 41.7729 217.419C41.531 217.419 41.3001 217.361 41.0802 217.246C41.0279 217.219 40.9783 217.187 40.9321 217.15C40.811 217.053 40.7504 216.939 40.7504 216.809Z M15.9327 163.396V161.433C15.9325 161.037 15.9284 160.641 15.9207 160.244C15.9139 159.89 15.9043 159.515 15.892 159.12C15.8789 158.704 15.8637 158.289 15.8464 157.873C15.8354 157.675 15.8285 157.409 15.826 157.076C15.8252 156.968 15.8248 156.86 15.8249 156.751C15.7918 155.969 15.7714 155.314 15.7636 154.785C15.7614 154.635 15.7602 154.485 15.7602 154.335L15.7817 153.127C15.7961 152.767 15.8033 152.365 15.8033 151.919C15.8033 151.585 15.798 151.283 15.7873 151.013C15.7856 150.97 15.7838 150.927 15.7817 150.883C15.7673 150.668 15.7566 150.488 15.7494 150.344C15.7473 150.302 15.7447 150.26 15.7416 150.217C15.7351 150.131 15.7269 150.058 15.717 149.999L15.6739 150.15C15.631 150.433 15.5865 150.716 15.5403 150.999C15.4129 151.783 15.2526 152.703 15.0594 153.761C15.0271 153.938 14.9946 154.115 14.9619 154.292C14.6455 156.003 14.3866 157.377 14.1853 158.412C13.9999 159.26 13.8755 159.882 13.8121 160.279C13.8068 160.311 13.8018 160.343 13.797 160.376C13.7712 160.543 13.7194 160.682 13.6416 160.792C13.6327 160.804 13.6233 160.817 13.6136 160.829C13.5867 160.862 13.5563 160.893 13.5228 160.92C13.478 160.955 13.4312 160.979 13.3823 160.991C13.3557 160.998 13.3283 161.001 13.3008 161.001C13.221 161.001 13.1441 160.972 13.0839 160.92C13.0521 160.893 13.0235 160.862 12.9987 160.829C12.9617 160.778 12.9322 160.722 12.9114 160.663C12.8774 160.571 12.8562 160.461 12.8477 160.332C12.8217 160.159 12.7934 159.986 12.7629 159.814C12.6001 158.876 12.2616 157.122 11.7475 154.551C11.6731 154.179 11.5984 153.807 11.5233 153.436C11.0803 151.245 10.8112 149.999 10.7158 149.697C10.7096 149.675 10.701 149.653 10.6904 149.632C10.6682 150.307 10.6521 150.983 10.6422 151.658C10.6315 152.372 10.6259 153.123 10.6256 153.913C10.6256 153.939 10.6256 153.964 10.6256 153.99C10.6256 155.255 10.6328 156.399 10.6472 157.42C10.6547 157.961 10.6601 158.501 10.6634 159.042C10.667 159.612 10.6688 160.212 10.6688 160.843C10.6688 160.845 10.6688 160.848 10.6688 160.85C10.669 160.912 10.6703 160.973 10.6729 161.035C10.6805 161.232 10.6991 161.492 10.7288 161.813C10.7303 161.83 10.7319 161.847 10.7335 161.864L10.7766 162.9C10.7769 162.963 10.7737 163.026 10.7672 163.089C10.7534 163.215 10.7243 163.316 10.68 163.39C10.6649 163.416 10.6466 163.439 10.6256 163.461C10.52 163.463 10.416 163.434 10.3279 163.375C10.2397 163.317 10.1717 163.233 10.1329 163.135C10.0443 162.949 10 162.684 10 162.339V158.736L10.0216 156.557C10.036 155.91 10.0431 155.176 10.0431 154.357C10.0431 153.934 10.0446 153.511 10.0479 153.088C10.0511 152.691 10.0557 152.315 10.0619 151.961C10.0628 151.911 10.0637 151.861 10.0647 151.811L10.1079 149.244V147.345C10.108 147.293 10.1256 147.242 10.1579 147.201C10.1719 147.183 10.1877 147.166 10.2049 147.151C10.228 147.13 10.2535 147.112 10.2809 147.098C10.3205 147.076 10.3649 147.065 10.4099 147.065C10.5041 147.065 10.5742 147.103 10.6202 147.18C10.6309 147.198 10.6399 147.218 10.6472 147.237C10.7683 147.641 11.0593 148.781 11.5201 150.657C11.5528 150.79 11.5854 150.923 11.618 151.056C12.0144 152.675 12.3349 154.011 12.5796 155.065C12.6484 155.361 12.7162 155.657 12.783 155.953C12.821 156.152 12.8579 156.352 12.8939 156.552C13.0207 157.253 13.1923 158.247 13.4086 159.534L13.5596 158.693C13.5927 158.495 13.6384 158.237 13.6966 157.921C13.7155 157.819 13.7346 157.717 13.7538 157.614C13.7742 157.482 13.7948 157.349 13.8155 157.216C13.9524 156.342 14.0397 155.842 14.0774 155.716L15.0698 150.43L15.264 149.308L15.5013 148.1L15.6091 147.453C15.6235 147.309 15.6667 147.198 15.7386 147.119C15.7612 147.093 15.7868 147.071 15.8147 147.051C15.8619 147.018 15.9182 147 15.9759 147C16.0227 147 16.0682 147.016 16.1053 147.044C16.125 147.059 16.144 147.077 16.1623 147.098C16.1649 147.102 16.1675 147.105 16.1701 147.108C16.2172 147.167 16.2451 147.245 16.2535 147.343C16.2554 147.365 16.2564 147.388 16.2563 147.41V149.546C16.2568 149.85 16.2608 150.154 16.2684 150.458C16.2926 151.469 16.3527 152.788 16.4488 154.414C16.4494 154.424 16.4499 154.433 16.4505 154.443C16.5512 156.456 16.6015 158.074 16.6015 159.297C16.6017 159.407 16.6031 159.517 16.6056 159.627C16.6135 159.988 16.6329 160.46 16.6639 161.044C16.6647 161.059 16.6654 161.073 16.6662 161.088C16.6728 161.323 16.679 161.559 16.6848 161.795C16.6973 162.302 16.7051 162.705 16.7081 163.002C16.7089 163.083 16.7094 163.164 16.7094 163.245C16.7095 163.309 16.7085 163.373 16.7064 163.437C16.6999 163.619 16.6836 163.752 16.6574 163.836C16.6537 163.847 16.6495 163.859 16.6447 163.871C16.5871 163.957 16.508 164 16.4074 164C16.2341 164 16.1133 163.96 16.0451 163.88C16.0397 163.873 16.0346 163.867 16.0298 163.86C16.0073 163.826 15.9898 163.79 15.9776 163.751C15.9536 163.679 15.9392 163.588 15.9345 163.478C15.9333 163.451 15.9327 163.423 15.9327 163.396V163.396Z M19.8374 150.61L19.9668 150.308C20.2355 150.343 20.3951 150.611 20.4456 151.111C20.4578 151.239 20.4636 151.367 20.463 151.495L20.5278 157.212C20.5278 157.542 20.552 158.115 20.6005 158.93C20.6117 159.119 20.6235 159.309 20.6356 159.499C20.7219 160.505 20.7651 161.268 20.7651 161.786C20.7632 162.065 20.7822 162.345 20.822 162.621C20.9313 163.342 21.1983 163.822 21.623 164.063C21.8562 164.189 22.1182 164.252 22.3831 164.245C22.4813 164.237 22.576 164.204 22.6583 164.15C22.7406 164.096 22.8078 164.022 22.8538 163.935C23.2217 163.393 23.4784 162.144 23.6238 160.186C23.6355 160.029 23.6462 159.872 23.6559 159.714L23.6775 159.283C23.7011 158.359 23.7231 157.434 23.7435 156.509C23.7987 153.991 23.8271 152.024 23.8285 150.607C23.8285 150.572 23.8285 150.537 23.8285 150.503L23.8069 150.308C23.799 150.276 23.7934 150.244 23.7901 150.211C23.7869 150.179 23.7853 150.146 23.7854 150.114C23.7854 149.956 23.9076 149.877 24.1521 149.877C24.188 149.877 24.2239 149.879 24.2596 149.884C24.3703 149.899 24.4424 149.94 24.4757 150.006C24.4839 150.049 24.4903 150.092 24.4947 150.134C24.5108 150.283 24.5189 150.492 24.5189 150.761C24.519 150.983 24.5169 151.205 24.5126 151.427C24.5005 152.03 24.4705 152.483 24.4224 152.788C24.4135 152.846 24.4025 152.904 24.3894 152.962L24.411 153.091C24.4108 153.144 24.4095 153.198 24.4069 153.251C24.3989 153.428 24.3786 153.663 24.3463 153.954L24.3031 154.817V155.033C24.3089 155.056 24.3133 155.08 24.3163 155.104C24.3196 155.129 24.322 155.156 24.3234 155.186C24.3243 155.207 24.3248 155.228 24.3247 155.249C24.2959 155.594 24.2816 155.925 24.2816 156.241C24.2776 156.27 24.2744 156.299 24.2721 156.327C24.264 156.424 24.26 156.554 24.26 156.716C24.2312 158.082 24.2025 159.269 24.1737 160.275C24.1305 161.527 23.958 162.584 23.6559 163.447C23.491 163.927 23.2731 164.282 23.0025 164.511C22.7582 164.721 22.4458 164.833 22.1242 164.827C22.0065 164.827 21.8896 164.809 21.7771 164.774C21.6814 164.746 21.5831 164.706 21.482 164.655C21.4475 164.638 21.4135 164.62 21.3799 164.601C21.2388 164.522 21.1051 164.43 20.9804 164.326C20.8873 164.249 20.8009 164.164 20.7219 164.072C20.6691 164 20.6267 163.92 20.5959 163.835C20.4534 163.473 20.3372 162.826 20.2473 161.893C20.1945 161.339 20.1525 160.784 20.1211 160.227C20.0884 159.66 20.0635 159.062 20.0462 158.433C20.0404 158.22 20.0355 158.007 20.0316 157.794C20.0316 157.449 20.0244 157.19 20.01 157.018C20.0051 156.393 19.9987 155.768 19.9908 155.143C19.963 152.993 19.921 151.572 19.8646 150.88C19.8576 150.79 19.8486 150.7 19.8374 150.61V150.61Z M27.302 165.245L27.4099 165.072C27.467 165.072 27.595 165.094 27.7941 165.136C27.7955 165.136 27.7968 165.137 27.7982 165.137C27.8442 165.154 27.8909 165.169 27.938 165.183C28.0345 165.21 28.1173 165.223 28.1865 165.223C28.4577 165.224 28.7196 165.124 28.9226 164.945C28.9593 164.913 28.9944 164.88 29.0279 164.846C29.1782 164.689 29.3045 164.511 29.4026 164.318C29.4771 164.172 29.5394 164.02 29.5888 163.864C29.6952 163.474 29.7754 163.077 29.8289 162.676C29.8695 162.369 29.8902 162.06 29.8908 161.75C29.8908 160.851 29.6428 159.892 29.1468 158.875C29.0946 158.768 29.0406 158.662 28.9847 158.557C28.8962 158.401 28.8081 158.244 28.7205 158.087C28.5499 157.781 28.4023 157.511 28.2776 157.278C28.225 157.18 28.1731 157.081 28.1218 156.982C28.0098 156.765 27.9088 156.542 27.8191 156.315C27.7321 156.094 27.6531 155.871 27.5825 155.645C27.4749 155.31 27.3966 154.966 27.3484 154.617C27.3178 154.393 27.3023 154.167 27.302 153.94C27.302 153.542 27.3787 153.088 27.532 152.579C27.5801 152.42 27.6329 152.262 27.6903 152.107C27.7576 151.931 27.8467 151.765 27.9555 151.613C28.0382 151.497 28.1339 151.391 28.2405 151.298C28.3321 151.216 28.4343 151.147 28.5444 151.092C28.6881 151.022 28.8462 150.985 29.0063 150.985C29.1353 150.986 29.2625 151.015 29.3782 151.072C29.4407 151.103 29.5003 151.138 29.5564 151.179C29.6578 151.252 29.7306 151.327 29.7748 151.405C29.8078 151.461 29.8255 151.524 29.8261 151.589C29.8274 151.617 29.8201 151.646 29.8052 151.67C29.7902 151.695 29.7683 151.714 29.7422 151.726C29.7006 151.747 29.6435 151.759 29.5709 151.761C29.5625 151.761 29.5541 151.761 29.5457 151.761C29.5239 151.761 29.5023 151.759 29.4812 151.754C29.437 151.744 29.3866 151.725 29.3299 151.697C29.2995 151.681 29.2681 151.668 29.2359 151.657C29.2011 151.646 29.1676 151.638 29.1355 151.634C29.1213 151.633 29.107 151.632 29.0926 151.632C28.9168 151.632 28.7464 151.692 28.6096 151.803C28.5746 151.83 28.5414 151.859 28.5101 151.891C28.3949 152.007 28.2998 152.142 28.2288 152.29C28.1864 152.377 28.1507 152.467 28.1218 152.56C28.0469 152.788 27.9863 153.021 27.9404 153.256C27.8928 153.505 27.8671 153.743 27.8633 153.969C27.863 153.988 27.8629 154.008 27.8629 154.027C27.8629 154.3 27.8989 154.58 27.9708 154.868C27.985 154.954 27.9993 155.025 28.0137 155.083C28.0138 155.083 28.0139 155.083 28.0139 155.084C28.0173 155.097 28.0205 155.111 28.0234 155.124C28.0292 155.151 28.0329 155.174 28.0346 155.193C28.0352 155.2 28.0355 155.207 28.0355 155.213L28.1649 155.645L28.2728 156.033L28.4454 156.421C28.4685 156.476 28.4939 156.529 28.5216 156.581C28.5415 156.618 28.5629 156.655 28.5856 156.691C28.636 156.77 28.6827 156.846 28.7259 156.918L28.9847 157.371C29.0405 157.454 29.1572 157.65 29.3347 157.956C29.3403 157.966 29.3459 157.976 29.3515 157.985C29.5385 158.309 29.7111 158.651 29.8693 159.01C30.0131 159.312 30.121 159.596 30.1929 159.862C30.2479 160.066 30.2988 160.301 30.3454 160.568C30.3601 160.653 30.374 160.737 30.387 160.822C30.4302 161.182 30.4517 161.577 30.4517 162.009C30.4536 162.487 30.405 162.963 30.3068 163.431C30.2694 163.606 30.2242 163.779 30.1713 163.951C30.0907 164.179 29.989 164.399 29.8675 164.609C29.7285 164.845 29.5697 165.045 29.3914 165.207C29.2866 165.303 29.172 165.388 29.0495 165.461C28.8248 165.601 28.57 165.686 28.306 165.71C28.2376 165.716 28.169 165.72 28.1002 165.72L27.9924 165.763C27.8425 165.735 27.6991 165.679 27.5697 165.599C27.5595 165.592 27.5494 165.586 27.5393 165.579C27.4359 165.512 27.3659 165.436 27.3294 165.35C27.3152 165.316 27.306 165.281 27.302 165.245V165.245ZM29.6967 151.697H29.7182C29.7183 151.694 29.7179 151.691 29.7172 151.688C29.7153 151.682 29.7111 151.678 29.7047 151.676C29.702 151.675 29.6994 151.675 29.6967 151.675V151.697Z M33.4721 165.31H33.2995C33.0558 165.31 32.8804 165.267 32.7731 165.182C32.7421 165.157 32.7158 165.128 32.6954 165.094C32.6957 165.031 32.7195 164.97 32.7621 164.923C32.7891 164.892 32.8244 164.862 32.868 164.835L32.9759 164.727H33.6015L33.6878 164.641L33.7309 164.447L33.7525 164.188C33.7528 163.797 33.748 163.406 33.7383 163.016C33.7275 162.596 33.7107 162.203 33.6878 161.836L33.6446 161.038L33.6015 159.463C33.6017 159.305 33.603 159.148 33.6056 158.99C33.6111 158.628 33.6223 158.192 33.6395 157.682C33.6478 157.434 33.6567 157.187 33.6662 156.939L33.7094 154.437C33.7094 153.536 33.6849 152.811 33.636 152.261C33.6264 152.152 33.6149 152.043 33.6015 151.934C33.5025 151.901 33.3531 151.881 33.1532 151.873C33.0869 151.87 33.0206 151.869 32.9543 151.869L32.717 151.891C32.6606 151.9 32.6038 151.906 32.5468 151.909C32.51 151.911 32.4733 151.912 32.4365 151.912C32.2032 151.912 32.0696 151.823 32.0355 151.645C32.0294 151.612 32.0264 151.579 32.0266 151.546C32.0273 151.525 32.0346 151.505 32.0475 151.489C32.076 151.45 32.1338 151.412 32.2208 151.373C32.3472 151.317 32.4531 151.288 32.5383 151.287C32.5404 151.287 32.5424 151.287 32.5444 151.287C33.0909 151.287 33.6374 151.316 34.184 151.373C34.5115 151.388 34.8352 151.45 35.1453 151.557C35.1557 151.56 35.166 151.564 35.1764 151.567C35.4352 151.654 35.5647 151.776 35.5647 151.934C35.5647 151.963 35.5431 152.02 35.5 152.107L35.0038 152.15C34.9031 152.063 34.6946 152.02 34.3781 152.02L34.2703 152.085C34.2812 152.121 34.2891 152.158 34.294 152.195C34.3213 152.38 34.335 152.724 34.335 153.228C34.3351 153.673 34.3334 154.118 34.3298 154.562C34.3264 154.984 34.3211 155.383 34.3141 155.759C34.3139 155.771 34.3136 155.784 34.3134 155.796L34.2703 158.363C34.2703 158.808 34.2839 159.318 34.311 159.892C34.3242 160.166 34.3393 160.44 34.3566 160.714C34.3667 160.961 34.3761 161.207 34.3848 161.453C34.4015 161.928 34.4125 162.334 34.4178 162.671C34.4201 162.81 34.4212 162.949 34.4213 163.088V163.368C34.416 163.406 34.4119 163.444 34.409 163.482C34.4028 163.561 34.3997 163.653 34.3997 163.756C34.3997 163.814 34.4005 163.871 34.4021 163.929C34.4068 164.099 34.4195 164.222 34.4401 164.298C34.4454 164.32 34.4536 164.341 34.4644 164.36L34.4429 164.404C34.4428 164.435 34.4519 164.466 34.469 164.493C34.4862 164.52 34.5106 164.541 34.5395 164.554C34.5946 164.585 34.6733 164.605 34.7755 164.613C34.8227 164.617 34.8701 164.619 34.9175 164.619C35.0469 164.619 35.1548 164.612 35.2411 164.598H35.5647C35.8086 164.598 35.9812 164.632 36.0825 164.701C36.1161 164.722 36.1438 164.751 36.1627 164.786C36.1816 164.821 36.1911 164.86 36.1903 164.9C36.1908 164.949 36.1836 164.998 36.169 165.045C36.1484 165.109 36.1111 165.167 36.0609 165.213C36.0029 165.265 35.9319 165.301 35.8553 165.317C35.8094 165.327 35.7626 165.332 35.7157 165.331C35.658 165.331 35.6004 165.328 35.5431 165.322C35.4834 165.315 35.4276 165.304 35.3755 165.29C35.3738 165.289 35.3722 165.289 35.3705 165.288C35.2884 165.278 35.2058 165.271 35.1231 165.269C35.0833 165.267 35.0436 165.266 35.0038 165.266C34.9347 165.266 34.8381 165.29 34.7138 165.336C34.6808 165.348 34.648 165.361 34.6155 165.374C34.4429 165.461 34.3134 165.504 34.2271 165.504C34.0071 165.504 33.8475 165.472 33.7484 165.408C33.7019 165.38 33.6656 165.338 33.6446 165.288C33.5979 165.288 33.5572 165.291 33.5225 165.297C33.5054 165.3 33.4886 165.304 33.4721 165.31V165.31Z M37.9808 157.263L38.1103 155.904C38.1654 155.078 38.2268 154.406 38.2945 153.887C38.3131 153.743 38.3344 153.599 38.3584 153.455C38.4355 152.972 38.6192 152.512 38.896 152.109C38.9244 152.068 38.9537 152.028 38.984 151.988C39.1927 151.718 39.4744 151.514 39.7956 151.399C39.9808 151.33 40.1865 151.281 40.4126 151.252C40.4362 151.249 40.4597 151.246 40.4834 151.244C40.5553 151.229 40.6703 151.222 40.8285 151.222C41.0833 151.222 41.2652 151.255 41.3744 151.321C41.4116 151.34 41.4428 151.369 41.4645 151.405C41.4862 151.441 41.4976 151.482 41.4973 151.524C41.4973 151.61 41.4506 151.686 41.3571 151.751C41.3145 151.781 41.2679 151.805 41.2188 151.822C41.1696 151.839 41.1179 151.848 41.0659 151.848L40.8501 151.826L40.656 151.805C40.4115 151.805 40.1921 151.884 39.998 152.042C39.8977 152.125 39.8092 152.221 39.7348 152.328C39.669 152.42 39.6086 152.525 39.5535 152.641C39.5393 152.671 39.5256 152.702 39.5126 152.732C39.3254 153.174 39.1756 153.63 39.0649 154.097C39.0068 154.344 38.9618 154.594 38.9301 154.846C38.815 155.753 38.7431 156.544 38.7143 157.22L38.6928 158.881C38.6927 159.046 38.694 159.211 38.6969 159.376C38.7029 159.719 38.7156 160.007 38.735 160.238C38.7411 160.311 38.7485 160.383 38.7575 160.456C38.7933 160.513 38.823 160.574 38.8461 160.638C38.892 160.761 38.9271 160.911 38.9514 161.089C38.9555 161.119 38.9591 161.148 38.9624 161.178C38.9984 161.502 39.0307 161.944 39.0595 162.505C39.0821 162.9 39.1268 163.249 39.1937 163.551C39.2113 163.631 39.2313 163.71 39.2537 163.789C39.3184 164.023 39.4288 164.243 39.5783 164.435C39.643 164.517 39.7149 164.593 39.793 164.662C39.9535 164.796 40.141 164.894 40.3427 164.948C40.4842 164.989 40.639 165.014 40.807 165.024C40.8644 165.028 40.922 165.029 40.9796 165.029C41.1452 165.033 41.3084 164.989 41.4494 164.902C41.6275 164.789 41.7657 164.601 41.8641 164.339C42.0654 163.85 42.1805 163.346 42.2093 162.829C42.2246 162.6 42.2378 162.372 42.2487 162.143C42.2656 161.786 42.274 161.468 42.274 161.189V160.003C42.2159 159.946 42.1472 159.902 42.0718 159.873C41.95 159.823 41.796 159.795 41.6097 159.788C41.5795 159.787 41.5492 159.787 41.5189 159.787H41.3463C41.2744 159.801 41.1953 159.808 41.109 159.808C40.7638 159.808 40.5912 159.722 40.5912 159.549C40.5895 159.488 40.6037 159.427 40.6322 159.372C40.702 159.246 40.8609 159.183 41.109 159.183C41.188 159.183 41.2669 159.184 41.3459 159.185C41.4868 159.188 41.6092 159.195 41.7131 159.204L42.1877 159.226C42.4484 159.267 42.6568 159.315 42.8129 159.369C42.8202 159.372 42.8276 159.374 42.8349 159.377C42.8688 159.388 42.902 159.401 42.9341 159.417C43.0047 159.452 43.0519 159.493 43.0756 159.539C43.0876 159.562 43.0938 159.588 43.0938 159.614C43.0933 159.677 43.0895 159.739 43.0823 159.802C43.0685 159.928 43.0422 160.076 43.0034 160.248C42.991 160.303 42.978 160.358 42.9643 160.412C42.8924 160.815 42.8565 161.088 42.8565 161.232C42.8565 161.836 42.8708 162.383 42.8996 162.872C42.914 163.375 42.9212 163.929 42.9212 164.533C42.7202 164.741 42.5016 164.93 42.2679 165.1C42.006 165.288 41.7441 165.428 41.4822 165.52C41.2379 165.608 40.9803 165.654 40.7207 165.655C40.0591 165.655 39.5701 165.576 39.2537 165.418C38.9732 165.277 38.7577 165.021 38.6071 164.649C38.5874 164.6 38.5692 164.551 38.5525 164.501C38.4015 164.048 38.2685 163.325 38.1534 162.332C38.1125 161.99 38.0748 161.647 38.0402 161.304C37.9658 160.563 37.9199 159.928 37.9025 159.4C37.8974 159.249 37.8947 159.097 37.8945 158.945C37.8949 158.718 37.9004 158.49 37.9111 158.262C37.9216 158.03 37.9373 157.784 37.9582 157.525C37.9653 157.438 37.9728 157.35 37.9808 157.263V157.263Z M50.5151 163.77L50.5366 163.706C50.4905 163.441 50.4324 163.178 50.3625 162.918C50.2958 162.667 50.2158 162.4 50.1226 162.118C50.023 161.818 49.9165 161.52 49.8031 161.225L49.4148 160.103C49.3898 160.078 49.2826 159.795 49.0931 159.256C49.0636 159.171 49.0342 159.087 49.0049 159.003L48.8323 158.485C48.6797 158.013 48.5255 157.542 48.3696 157.071C47.344 153.979 46.6861 152.286 46.396 151.993C46.3955 151.992 46.395 151.992 46.3945 151.991C46.3494 152.147 46.3148 152.305 46.291 152.466C46.2655 152.631 46.2471 152.811 46.2357 153.006C46.2263 153.171 46.2217 153.336 46.2219 153.501C46.2219 153.619 46.2229 153.737 46.2249 153.855C46.2284 154.042 46.2346 154.211 46.2435 154.364L46.2651 155.206L46.2435 155.723C46.2351 155.817 46.2293 155.91 46.226 156.004C46.2232 156.083 46.2219 156.162 46.2219 156.241C46.2219 156.558 46.2363 156.831 46.2651 157.061L46.3082 157.751H46.2435C46.2434 158.035 46.2442 158.318 46.2459 158.601C46.2568 160.461 46.3061 161.5 46.3936 161.719C46.3939 161.719 46.3942 161.72 46.3945 161.721V163.662C46.4192 163.713 46.4379 163.766 46.4504 163.821C46.4627 163.873 46.4713 163.93 46.4761 163.991C46.4793 164.033 46.4808 164.074 46.4808 164.115C46.4808 164.231 46.4412 164.331 46.3621 164.418C46.3237 164.461 46.2763 164.495 46.2232 164.518C46.1749 164.538 46.1231 164.547 46.0709 164.547C45.7863 164.547 45.6358 164.202 45.6194 163.512C45.6183 163.469 45.6178 163.425 45.6179 163.382L45.661 162.692C45.6898 162.476 45.7041 162.239 45.7041 161.98C45.7041 161.451 45.6915 160.72 45.6662 159.787C45.6579 159.482 45.649 159.178 45.6394 158.873C45.6293 158.55 45.6199 158.226 45.6112 157.902C45.5945 157.279 45.5835 156.748 45.5782 156.309C45.5759 156.128 45.5748 155.947 45.5747 155.766C45.5749 155.648 45.5762 155.53 45.5788 155.412C45.5867 155.025 45.6061 154.519 45.6371 153.893C45.6378 153.878 45.6386 153.862 45.6394 153.846C45.6496 153.648 45.659 153.449 45.6677 153.251C45.692 152.695 45.7041 152.261 45.7041 151.948V151.668C45.7035 151.516 45.7107 151.364 45.7255 151.212C45.7563 150.913 45.8202 150.677 45.9173 150.504C45.9619 150.421 46.0213 150.348 46.0925 150.287L46.1572 150.352L46.3729 150.308C46.3946 150.314 46.4154 150.322 46.4348 150.333C46.4758 150.356 46.5199 150.391 46.5671 150.438C46.5892 150.46 46.608 150.484 46.623 150.512C46.6431 150.549 46.6535 150.59 46.6534 150.632L46.6965 150.761C46.6965 150.773 46.6973 150.785 46.6987 150.797C46.7004 150.812 46.7033 150.825 46.7073 150.837L46.7181 150.869C46.7926 151.192 46.8801 151.512 46.9804 151.828C47.2622 152.728 47.6925 153.839 48.2714 155.162C48.4374 155.555 48.6019 155.949 48.765 156.343C49.1745 157.333 49.4733 158.089 49.6614 158.611C49.7112 158.748 49.7585 158.885 49.8031 159.024C49.8628 159.233 49.9202 159.442 49.9753 159.652C50.0422 159.907 50.0998 160.143 50.1483 160.362C50.2274 160.719 50.3178 161.074 50.4193 161.426C50.6201 162.116 50.8427 162.684 51.0872 163.13C51.0977 163.15 51.1084 163.169 51.1191 163.188L51.1623 163.123C51.2941 161.826 51.395 160.526 51.4647 159.225C51.5939 156.889 51.6585 154.269 51.6585 151.365L51.6369 151.107C51.6316 151.08 51.6275 151.052 51.6246 151.025C51.6184 150.968 51.6153 150.902 51.6153 150.826C51.6153 150.524 51.716 150.373 51.9173 150.373C52.0097 150.373 52.0985 150.408 52.1661 150.471C52.1981 150.5 52.2268 150.532 52.2517 150.567C52.3452 150.697 52.392 150.841 52.392 150.999V152.444L52.2841 152.617C52.2834 153.013 52.2785 153.41 52.2692 153.806C52.2396 155.16 52.1654 157.007 52.0468 159.348C52.0282 159.716 52.0086 160.084 51.9879 160.451C51.851 162.871 51.7196 164.2 51.5937 164.439L51.227 164.525V164.547L51.2054 164.525L50.9897 164.59C50.9565 164.59 50.9234 164.586 50.8913 164.577C50.8598 164.569 50.8304 164.554 50.8047 164.534C50.779 164.514 50.7575 164.489 50.7416 164.461C50.7243 164.43 50.7088 164.399 50.6954 164.367C50.6623 164.289 50.631 164.191 50.6014 164.072C50.5948 164.018 50.584 163.964 50.5692 163.911C50.5556 163.863 50.5375 163.815 50.5151 163.77V163.77Z M56.6638 158.024L56.5559 156.492L56.4264 156.212L56.4912 155.953C56.4662 155.894 56.442 155.836 56.4185 155.776C56.346 155.595 56.2541 155.353 56.143 155.049C56.1296 155.012 56.1162 154.976 56.1028 154.939C55.9303 154.464 55.7577 153.983 55.5851 153.494C55.4648 153.177 55.3465 152.859 55.2304 152.54C54.9433 151.752 54.7372 151.134 54.6121 150.689C54.598 150.639 54.5843 150.588 54.5711 150.538C54.4848 150.25 54.4201 149.984 54.377 149.74L54.679 149.503C54.8228 149.531 55.0314 149.992 55.3046 150.883C55.5204 151.516 55.7145 152.142 55.8871 152.76L56.146 153.58C56.1868 153.721 56.2291 153.861 56.2731 154.002C56.4318 154.506 56.5575 154.811 56.6502 154.919C56.6645 154.938 56.6842 154.953 56.7069 154.961L56.7932 154.572L56.75 154.464C56.7802 154.423 56.805 154.379 56.8238 154.331C56.9213 154.106 57.0359 153.663 57.1675 153.004C57.1722 152.98 57.1769 152.956 57.1815 152.933C57.2474 152.577 57.3165 152.221 57.3888 151.867C57.5023 151.312 57.613 150.819 57.7209 150.387C57.8982 149.623 58.0755 149.221 58.2529 149.182C58.2624 149.18 58.2721 149.179 58.2818 149.179C58.3537 149.179 58.4184 149.201 58.4759 149.244C58.4927 149.256 58.508 149.27 58.5215 149.286C58.5477 149.316 58.5621 149.355 58.5622 149.395C58.5622 149.578 58.4059 150.221 58.0932 151.321C58.0345 151.528 57.9751 151.734 57.915 151.94C57.6993 152.645 57.5195 153.307 57.3757 153.925C57.2031 154.659 57.1168 155.313 57.1168 155.888C57.1379 155.93 57.1569 155.973 57.1738 156.017C57.2077 156.106 57.2247 156.186 57.2247 156.255C57.2245 156.279 57.2226 156.303 57.2191 156.327C57.212 156.375 57.1986 156.433 57.1787 156.498C57.1727 156.518 57.1665 156.538 57.1599 156.557C57.1472 156.595 57.1359 156.633 57.1259 156.672C57.1054 156.752 57.0952 156.821 57.0952 156.881C57.0953 156.894 57.0958 156.907 57.0965 156.92C57.1029 157.037 57.1312 157.348 57.1815 157.852C57.202 157.989 57.2196 158.126 57.2342 158.264C57.2566 158.48 57.2678 158.673 57.2678 158.844C57.2677 159.126 57.2693 159.409 57.2726 159.691C57.2757 159.957 57.2804 160.209 57.2866 160.447C57.2875 160.481 57.2884 160.515 57.2894 160.548V162.274V162.36C57.2898 162.514 57.2854 162.668 57.276 162.821C57.2472 163.271 57.1719 163.57 57.0499 163.718C57.0252 163.752 56.9931 163.779 56.956 163.798C56.9189 163.817 56.878 163.827 56.8363 163.827C56.8219 163.827 56.8077 163.825 56.7941 163.82C56.7677 163.811 56.7376 163.795 56.7037 163.771C56.69 163.762 56.6767 163.752 56.6638 163.741C56.5918 163.684 56.5487 163.633 56.5343 163.59C56.5656 163.496 56.5877 163.398 56.6003 163.3C56.6704 162.841 56.7117 161.977 56.7244 160.706C56.7272 160.409 56.7286 160.112 56.7285 159.815C56.7285 159.495 56.7158 159.071 56.6905 158.541C56.6823 158.368 56.6733 158.196 56.6638 158.024Z';

  var textAlcohol = 'M18.56 6.65L18.53 6.6 18.58 6.5C18.58 6.36 18.56 6.21 18.53 6.07L18.34 6.02C18.27 6.04 18.18 6.06 18.09 6.06 18.03 6.06 17.89 6.04 17.68 6 17.54 5.96 17.42 5.94 17.3 5.94L17.16 5.98C17.16 6.26 17.16 6.5 17.15 6.72 17.14 6.94 17.14 7.19 17.14 7.46L17.16 7.51C17.16 7.72 17.18 8.05 17.2 8.49 17.22 8.81 17.23 9.13 17.24 9.45 17.24 9.45 17.24 9.46 17.24 9.46 17.24 9.55 17.22 9.62 17.19 9.68 17.15 9.74 17.11 9.76 17.04 9.76 16.86 9.76 16.77 9.53 16.77 9.06 16.77 8.66 16.77 8.31 16.78 7.99L16.79 6.92C16.79 6.63 16.79 6.33 16.78 6.03 16.78 5.95 16.77 5.86 16.75 5.77 16.8 5.62 16.82 5.46 16.81 5.3 16.81 5.2 16.82 5.1 16.82 5 16.82 4.63 16.8 4.17 16.77 3.63L16.74 3.18 16.72 2.26C16.72 2.21 16.74 2.16 16.78 2.11 16.82 2.06 16.87 2.04 16.93 2.04 17.09 2.04 17.18 2.27 17.18 2.72 17.18 3.25 17.17 3.73 17.16 4.16 17.15 4.59 17.14 5.06 17.14 5.58 17.14 5.67 17.45 5.72 18.08 5.72H18.13C18.29 5.72 18.4 5.69 18.47 5.63 18.54 5.57 18.58 5.47 18.58 5.33 18.57 4.87 18.55 4.41 18.51 3.96 18.5 3.88 18.5 3.8 18.49 3.71 18.44 3 18.42 2.46 18.42 2.1 18.42 2.05 18.44 2.01 18.48 1.98 18.52 1.94 18.57 1.92 18.63 1.92L18.74 1.96C18.8 1.97 18.83 1.98 18.85 1.99 18.85 2.6 18.88 3.51 18.92 4.72 18.97 5.94 19 6.85 19 7.46 19 8.11 19.02 8.76 19.06 9.41 19.06 9.53 19.07 9.65 19.09 9.78L19 9.9C19 9.83 18.88 9.79 18.63 9.79 18.59 8.34 18.56 7.3 18.56 6.65ZM3.6 9.58V8.04C3.6 7.95 3.39 7.86 2.97 7.79 2.55 7.71 2.2 7.67 1.93 7.67 1.91 7.67 1.89 7.73 1.85 7.85 1.81 7.96 1.79 8.05 1.77 8.1 1.66 8.51 1.55 8.94 1.45 9.4L1.38 9.66C1.37 9.72 1.33 9.75 1.26 9.75 1.19 9.75 1.13 9.73 1.08 9.69 1.03 9.66 1 9.61 1 9.55L1.01 9.53V9.52L1.15 8.93C1.25 8.57 1.33 8.21 1.41 7.86 1.46 7.62 1.51 7.38 1.57 7.15 1.58 7.13 1.59 7.11 1.6 7.08 1.66 6.83 1.79 6.18 1.99 5.15L2.07 4.77C2.15 4.3 2.24 3.84 2.33 3.37 2.4 3.01 2.45 2.74 2.5 2.57 2.5 2.54 2.51 2.52 2.51 2.5 2.55 2.31 2.63 2.03 2.74 1.67 2.78 1.51 2.84 1.35 2.91 1.2 2.98 1.07 3.05 1 3.1 1 3.23 1 3.32 1.04 3.38 1.12 3.42 1.19 3.49 1.57 3.57 2.28 3.66 2.98 3.74 3.69 3.8 4.41L3.96 6.35C3.96 6.68 3.99 7.19 4.04 7.87 4.09 8.56 4.11 9.07 4.11 9.4V9.45C4.11 9.53 4.1 9.61 4.08 9.68 4.04 9.74 3.96 9.78 3.84 9.78 3.77 9.78 3.72 9.76 3.67 9.72 3.63 9.68 3.6 9.63 3.6 9.58ZM10.15 9.96L9.86 9.86C9.7 9.81 9.57 9.74 9.45 9.66 9.34 9.57 9.24 9.44 9.14 9.27 8.96 8.96 8.86 8.51 8.83 7.93 8.81 7.66 8.8 7.43 8.8 7.23V5.89C8.8 5.38 8.82 4.89 8.85 4.42 8.88 4.07 8.91 3.77 8.96 3.53 9.01 3.29 9.09 3.04 9.2 2.8 9.32 2.55 9.44 2.38 9.58 2.28 9.64 2.23 9.75 2.17 9.92 2.11 10.03 2.07 10.13 2.03 10.23 1.98H10.73 10.76C10.77 1.99 10.78 1.99 10.8 1.99L10.86 2.01 10.91 2.04C10.94 2.06 10.95 2.08 10.95 2.09 10.96 2.1 10.96 2.13 10.96 2.16L10.8 2.33H10.28C10.12 2.33 9.98 2.41 9.85 2.55 9.72 2.69 9.63 2.88 9.56 3.09 9.49 3.29 9.44 3.52 9.4 3.78 9.36 4.05 9.33 4.28 9.32 4.48 9.31 4.72 9.3 4.9 9.3 4.99L9.27 5.05C9.27 5.49 9.27 5.88 9.25 6.23L9.22 7.41C9.22 7.76 9.25 8.07 9.3 8.36 9.34 8.67 9.46 8.95 9.66 9.2 9.85 9.45 10.14 9.58 10.54 9.58 10.66 9.58 10.77 9.54 10.85 9.47 10.97 9.47 11.04 9.51 11.04 9.6 11.04 9.66 10.98 9.72 10.88 9.79 10.78 9.87 10.67 9.92 10.56 9.96H10.15ZM5.96 3.04L5.99 2.61 6.02 2.26C6.02 2.21 6.05 2.18 6.11 2.18 6.15 2.18 6.21 2.19 6.28 2.22L6.32 2.23C6.32 2.4 6.32 2.56 6.31 2.7V3.15 4.43C6.32 4.8 6.32 5.23 6.32 5.7 6.31 5.74 6.31 5.83 6.31 5.96L6.3 6.21C6.29 6.36 6.28 6.52 6.28 6.69 6.28 6.87 6.29 7.03 6.3 7.18L6.31 7.68 6.27 7.78 6.28 7.76C6.28 7.79 6.28 7.8 6.27 7.81V7.86C6.27 7.92 6.28 7.97 6.31 8.02L6.27 9.14V9.21C6.27 9.35 6.28 9.42 6.28 9.45 6.28 9.49 6.31 9.51 6.35 9.51L6.99 9.53C7.18 9.53 7.31 9.53 7.38 9.54 7.45 9.54 7.5 9.54 7.51 9.54H7.55C7.59 9.54 7.63 9.56 7.67 9.61 7.71 9.64 7.73 9.69 7.74 9.74 7.74 9.83 7.67 9.89 7.54 9.89 7.4 9.89 7.05 9.88 6.51 9.88L6.53 9.89C6.45 9.89 6.37 9.9 6.3 9.9 6.23 9.92 6.16 9.93 6.07 9.93 5.96 9.93 5.89 9.84 5.86 9.66 5.88 9.61 5.89 9.48 5.89 9.27 5.89 8.56 5.9 7.49 5.92 6.08 5.95 4.67 5.96 3.66 5.96 3.04ZM25.23 3.04L25.25 2.61 25.29 2.26C25.29 2.21 25.32 2.18 25.38 2.18 25.42 2.18 25.47 2.19 25.55 2.22L25.59 2.23C25.59 2.4 25.58 2.56 25.57 2.7V3.15 4.43C25.58 4.8 25.59 5.23 25.59 5.7 25.58 5.74 25.57 5.83 25.57 5.96L25.56 6.21C25.55 6.36 25.55 6.52 25.55 6.69 25.55 6.87 25.55 7.03 25.56 7.18L25.57 7.68 25.54 7.78 25.55 7.76C25.55 7.79 25.54 7.8 25.54 7.81V7.86C25.54 7.92 25.55 7.97 25.57 8.02L25.54 9.14V9.21C25.54 9.35 25.54 9.42 25.55 9.45 25.55 9.49 25.57 9.51 25.61 9.51L26.26 9.53C26.45 9.53 26.58 9.53 26.65 9.54 26.72 9.54 26.76 9.54 26.78 9.54H26.81C26.86 9.54 26.9 9.56 26.94 9.61 26.98 9.64 27 9.69 27 9.74 27 9.83 26.93 9.89 26.8 9.89 26.66 9.89 26.32 9.88 25.77 9.88L25.8 9.89C25.71 9.89 25.64 9.9 25.56 9.9 25.49 9.92 25.42 9.93 25.34 9.93 25.22 9.93 25.15 9.84 25.13 9.66 25.14 9.61 25.15 9.48 25.15 9.27 25.15 8.56 25.16 7.49 25.19 6.08 25.21 4.67 25.23 3.66 25.23 3.04ZM12.31 5.69V5.28C12.31 4.71 12.34 4.14 12.4 3.57 12.46 3.09 12.55 2.71 12.67 2.46 12.7 2.34 12.77 2.24 12.87 2.16 12.96 2.08 13.08 2.03 13.21 2.02 13.25 2.02 13.31 2.03 13.38 2.05 13.64 2.14 13.9 2.19 14.16 2.22 14.32 2.25 14.48 2.4 14.63 2.67 14.81 2.95 14.94 3.32 15.02 3.78 15.11 4.25 15.15 4.72 15.15 5.2L15.13 5.26C15.13 5.52 15.13 5.75 15.14 5.95L15.15 6.65C15.15 7.05 15.14 7.41 15.1 7.73 15.05 8.21 14.97 8.63 14.86 8.98 14.78 9.19 14.7 9.37 14.6 9.51 14.51 9.65 14.39 9.76 14.25 9.86 14.12 9.95 13.95 10 13.76 10 13.54 9.98 13.33 9.9 13.15 9.76 12.98 9.62 12.86 9.44 12.8 9.23 12.5 8.58 12.33 7.5 12.32 6.01 12.31 5.9 12.31 5.8 12.31 5.69V5.69ZM20.66 5.69V5.28C20.66 4.71 20.68 4.14 20.75 3.57 20.81 3.09 20.9 2.71 21.02 2.46 21.05 2.34 21.12 2.24 21.22 2.16 21.31 2.08 21.43 2.03 21.55 2.02 21.6 2.02 21.65 2.03 21.73 2.05 21.99 2.14 22.25 2.19 22.51 2.22 22.67 2.25 22.82 2.4 22.98 2.67 23.15 2.95 23.28 3.32 23.37 3.78 23.46 4.25 23.5 4.72 23.5 5.2L23.48 5.26C23.48 5.52 23.48 5.75 23.49 5.95L23.5 6.65C23.5 7.05 23.49 7.41 23.45 7.73 23.4 8.21 23.32 8.63 23.2 8.98 23.13 9.19 23.05 9.37 22.95 9.51 22.85 9.65 22.74 9.76 22.6 9.86 22.46 9.95 22.3 10 22.11 10 21.89 9.98 21.67 9.9 21.5 9.76 21.33 9.62 21.2 9.44 21.15 9.23 20.84 8.58 20.68 7.5 20.66 6.01 20.66 5.9 20.66 5.8 20.66 5.69V5.69ZM14.63 3.8L14.58 3.7 14.61 3.64C14.61 3.3 14.51 3 14.3 2.76 14.1 2.51 13.86 2.38 13.57 2.38 13.19 2.38 12.96 2.55 12.88 2.9 12.87 3.01 12.85 3.18 12.83 3.4 12.83 3.98 12.81 4.37 12.76 4.58 12.76 4.7 12.75 4.88 12.72 5.13L12.7 5.68C12.7 5.85 12.7 6 12.71 6.14L12.72 6.6C12.72 6.97 12.76 7.39 12.82 7.87 12.87 8.22 12.93 8.52 13 8.76 13.06 9 13.16 9.21 13.28 9.38 13.4 9.57 13.55 9.66 13.71 9.66 14.04 9.66 14.28 9.44 14.43 9.02 14.59 8.58 14.69 8.13 14.72 7.68 14.75 7.21 14.77 6.84 14.77 6.56 14.77 6.25 14.74 5.79 14.69 5.18 14.67 4.81 14.65 4.45 14.64 4.09 14.64 3.99 14.63 3.89 14.63 3.8V3.8ZM22.98 3.8L22.93 3.7 22.96 3.64C22.96 3.3 22.85 3 22.65 2.76 22.45 2.51 22.2 2.38 21.91 2.38 21.53 2.38 21.31 2.55 21.23 2.9 21.22 3.01 21.2 3.18 21.18 3.4 21.18 3.98 21.16 4.37 21.11 4.58 21.11 4.7 21.1 4.88 21.07 5.13L21.05 5.68C21.05 5.85 21.05 6 21.06 6.14L21.07 6.6C21.07 6.97 21.1 7.39 21.17 7.87 21.22 8.22 21.28 8.52 21.34 8.76 21.41 9 21.5 9.21 21.63 9.38 21.75 9.57 21.9 9.66 22.06 9.66 22.39 9.66 22.63 9.44 22.78 9.02 22.94 8.58 23.03 8.13 23.07 7.68 23.1 7.21 23.12 6.84 23.12 6.56 23.12 6.25 23.09 5.79 23.04 5.18 23.02 4.81 23 4.45 22.99 4.09 22.98 3.99 22.98 3.89 22.98 3.8V3.8ZM3.22 2.3L3.17 1.84C3.17 1.84 3.17 1.84 3.17 1.84 3.17 1.84 3.17 1.84 3.17 1.84 3.16 1.8 3.15 1.76 3.15 1.71L3.12 1.57C3.06 1.74 2.99 1.98 2.93 2.29 2.87 2.59 2.8 2.95 2.74 3.36 2.54 4.53 2.37 5.4 2.23 5.98L2.12 6.38C1.99 6.77 1.93 7.07 1.93 7.27V7.34C2.29 7.45 2.71 7.51 3.18 7.51H3.26C3.28 7.51 3.31 7.52 3.34 7.52 3.51 7.52 3.59 7.48 3.59 7.4 3.59 6.94 3.57 6.47 3.54 6.01 3.53 5.81 3.52 5.62 3.51 5.42 3.45 4.58 3.39 3.84 3.32 3.2 3.3 2.93 3.27 2.63 3.22 2.3ZM18.22 5.58V5.55L18.24 5.58H18.22Z';

  var textAcid = 'M13.71 10L13.54 9.94C13.44 9.84 13.34 9.58 13.22 9.15 13.11 8.72 13 8.23 12.91 7.7 12.84 7.26 12.75 6.82 12.63 6.39 12.53 6.01 12.43 5.82 12.35 5.82H12.31C12.13 5.82 12.04 5.87 12.04 5.98 12.04 6.53 12.07 7.37 12.14 8.5 12.17 9.19 12.21 9.6 12.25 9.71L12.15 9.91H11.98L11.88 9.82C11.75 6.27 11.69 3.85 11.69 2.56 11.69 2.47 11.69 2.4 11.7 2.35 11.72 2.29 11.74 2.24 11.78 2.2 11.82 2.14 11.87 2.12 11.95 2.12 12.37 2.12 12.7 2.21 12.96 2.41 13.21 2.6 13.33 2.87 13.33 3.24V4.08C13.33 4.22 13.28 4.42 13.18 4.66 13.08 4.91 12.97 5.14 12.85 5.34L12.69 5.63C12.78 6.02 12.95 6.73 13.22 7.75 13.48 8.76 13.63 9.3 13.65 9.37 13.66 9.37 13.67 9.39 13.68 9.42 13.69 9.45 13.72 9.5 13.76 9.56 13.82 9.67 13.85 9.76 13.85 9.84 13.85 9.95 13.8 10 13.71 10ZM1.01 4.87V4.26C1 4.08 1 3.89 1 3.67 1 3.27 1.02 2.88 1.07 2.49 1.11 2.29 1.15 2.13 1.2 1.99 1.25 1.85 1.33 1.72 1.43 1.59 1.61 1.33 1.87 1.15 2.23 1.07 2.42 1.02 2.63 1 2.85 1 3.01 1 3.17 1.04 3.32 1.13 3.48 1.21 3.56 1.31 3.56 1.43 3.56 1.51 3.5 1.55 3.37 1.55 3.32 1.55 3.22 1.53 3.09 1.47 2.96 1.42 2.85 1.39 2.76 1.39 2.53 1.39 2.32 1.44 2.14 1.52 1.96 1.61 1.81 1.73 1.71 1.88 1.62 2 1.54 2.17 1.48 2.38 1.41 2.6 1.37 2.81 1.35 3.03 1.33 3.22 1.32 3.45 1.32 3.72L1.33 4.36C1.34 4.55 1.34 4.75 1.34 4.96 1.34 5.49 1.4 6.27 1.51 7.3 1.56 7.81 1.64 8.31 1.74 8.81 1.76 8.91 1.79 9 1.84 9.09 1.94 9.24 2.08 9.35 2.27 9.42 2.47 9.5 2.67 9.54 2.88 9.54 3.25 9.54 3.54 9.43 3.73 9.2 3.81 9.11 3.88 9.07 3.96 9.07 4.04 9.07 4.07 9.12 4.07 9.23 4.07 9.37 4.03 9.49 3.94 9.59 3.85 9.69 3.73 9.77 3.57 9.83 3.31 9.93 3.03 9.99 2.72 9.99 2.49 9.99 2.25 9.9 2 9.73 1.75 9.57 1.57 9.37 1.46 9.16 1.37 8.96 1.27 8.33 1.16 7.26 1.06 6.19 1.01 5.39 1.01 4.87ZM25.76 9.61V8.1C25.76 8.01 25.56 7.92 25.14 7.84 24.73 7.77 24.39 7.73 24.12 7.73 24.1 7.73 24.07 7.79 24.04 7.9 24 8.02 23.98 8.1 23.96 8.16 23.85 8.56 23.75 8.98 23.64 9.44L23.58 9.69C23.56 9.75 23.52 9.78 23.46 9.78 23.39 9.78 23.33 9.76 23.28 9.72 23.23 9.68 23.2 9.64 23.2 9.59L23.21 9.56V9.55L23.35 8.97C23.45 8.61 23.53 8.26 23.61 7.91 23.69 7.52 23.75 7.27 23.79 7.15 23.85 6.9 23.98 6.27 24.18 5.25L24.25 4.87C24.46 3.69 24.61 2.94 24.69 2.64 24.73 2.45 24.8 2.18 24.91 1.82 24.95 1.66 25.01 1.51 25.08 1.36 25.15 1.23 25.22 1.16 25.26 1.16 25.39 1.16 25.49 1.2 25.54 1.28 25.59 1.35 25.65 1.73 25.73 2.42 25.82 3.11 25.89 3.81 25.96 4.51L26.12 6.43C26.12 6.76 26.14 7.26 26.19 7.93 26.24 8.6 26.26 9.1 26.26 9.44V9.48C26.26 9.57 26.25 9.64 26.23 9.71 26.2 9.77 26.12 9.8 26 9.8 25.93 9.8 25.88 9.78 25.83 9.75 25.79 9.71 25.76 9.66 25.76 9.61ZM5.39 9.7H5.29C5.12 9.7 5 9.66 4.95 9.59 4.95 9.53 4.99 9.49 5.05 9.45L5.11 9.39H5.46L5.51 9.34 5.54 9.24 5.55 9.1C5.55 8.63 5.54 8.21 5.51 7.84L5.49 7.42 5.46 6.58C5.46 6.28 5.48 5.83 5.5 5.23L5.53 3.89C5.53 3.31 5.51 2.86 5.46 2.56 5.39 2.53 5.27 2.52 5.1 2.52L4.96 2.53C4.92 2.54 4.86 2.54 4.81 2.54 4.65 2.54 4.57 2.48 4.57 2.35 4.57 2.32 4.61 2.29 4.68 2.26 4.76 2.23 4.82 2.21 4.87 2.21 5.18 2.21 5.49 2.23 5.79 2.26 5.98 2.26 6.17 2.3 6.36 2.36 6.5 2.41 6.58 2.47 6.58 2.56 6.58 2.57 6.56 2.6 6.54 2.65L6.26 2.67C6.2 2.62 6.08 2.6 5.9 2.6L5.84 2.64C5.87 2.71 5.88 2.91 5.88 3.25 5.88 3.75 5.88 4.21 5.87 4.62L5.84 5.99C5.84 6.34 5.86 6.75 5.89 7.25 5.92 7.81 5.93 8.23 5.93 8.51V8.66C5.92 8.72 5.92 8.79 5.92 8.87 5.92 9.05 5.93 9.15 5.95 9.19L5.94 9.22C5.94 9.29 6.03 9.33 6.21 9.33 6.28 9.33 6.34 9.33 6.39 9.32H6.58C6.81 9.32 6.93 9.37 6.93 9.48 6.93 9.55 6.9 9.61 6.86 9.65 6.81 9.69 6.74 9.71 6.66 9.71 6.59 9.71 6.52 9.7 6.47 9.69 6.4 9.68 6.33 9.68 6.26 9.68 6.21 9.68 6.14 9.7 6.04 9.73 5.94 9.78 5.87 9.8 5.82 9.8 5.63 9.8 5.52 9.77 5.49 9.69 5.45 9.69 5.42 9.69 5.39 9.7ZM15.44 9.7H15.35C15.17 9.7 15.05 9.66 15 9.59 15 9.53 15.04 9.49 15.1 9.45L15.16 9.39H15.52L15.57 9.34 15.59 9.24 15.6 9.1C15.6 8.63 15.59 8.21 15.57 7.84L15.54 7.42 15.52 6.58C15.52 6.28 15.53 5.83 15.55 5.23L15.58 3.89C15.58 3.31 15.56 2.86 15.52 2.56 15.44 2.53 15.32 2.52 15.15 2.52L15.02 2.53C14.97 2.54 14.92 2.54 14.86 2.54 14.7 2.54 14.63 2.48 14.63 2.35 14.63 2.32 14.66 2.29 14.74 2.26 14.81 2.23 14.87 2.21 14.92 2.21 15.23 2.21 15.54 2.23 15.85 2.26 16.03 2.26 16.22 2.3 16.41 2.36 16.55 2.41 16.63 2.47 16.63 2.56 16.63 2.57 16.61 2.6 16.59 2.65L16.31 2.67C16.25 2.62 16.14 2.6 15.96 2.6L15.9 2.64C15.92 2.71 15.93 2.91 15.93 3.25 15.93 3.75 15.93 4.21 15.92 4.62L15.9 5.99C15.9 6.34 15.91 6.75 15.94 7.25 15.97 7.81 15.98 8.23 15.98 8.51V8.66C15.97 8.72 15.97 8.79 15.97 8.87 15.97 9.05 15.98 9.15 16.01 9.19L15.99 9.22C15.99 9.29 16.08 9.33 16.26 9.33 16.33 9.33 16.4 9.33 16.44 9.32H16.63C16.86 9.32 16.98 9.37 16.98 9.48 16.98 9.55 16.96 9.61 16.91 9.65 16.86 9.69 16.79 9.71 16.71 9.71 16.64 9.71 16.57 9.7 16.52 9.69 16.45 9.68 16.38 9.68 16.31 9.68 16.26 9.68 16.19 9.7 16.09 9.73 15.99 9.78 15.92 9.8 15.87 9.8 15.68 9.8 15.57 9.77 15.54 9.69 15.5 9.69 15.47 9.69 15.44 9.7ZM31.68 9.7H31.58C31.4 9.7 31.29 9.66 31.24 9.59 31.24 9.53 31.27 9.49 31.34 9.45L31.4 9.39H31.75L31.8 9.34 31.83 9.24 31.84 9.1C31.84 8.63 31.83 8.21 31.8 7.84L31.78 7.42 31.75 6.58C31.75 6.28 31.77 5.83 31.79 5.23L31.82 3.89C31.82 3.31 31.8 2.86 31.75 2.56 31.68 2.53 31.56 2.52 31.39 2.52L31.25 2.53C31.21 2.54 31.15 2.54 31.1 2.54 30.94 2.54 30.86 2.48 30.86 2.35 30.86 2.32 30.9 2.29 30.97 2.26 31.05 2.23 31.11 2.21 31.16 2.21 31.47 2.21 31.77 2.23 32.08 2.26 32.27 2.26 32.46 2.3 32.64 2.36 32.79 2.41 32.86 2.47 32.86 2.56 32.86 2.57 32.85 2.6 32.83 2.65L32.55 2.67C32.49 2.62 32.37 2.6 32.19 2.6L32.13 2.64C32.16 2.71 32.17 2.91 32.17 3.25 32.17 3.75 32.17 4.21 32.16 4.62L32.13 5.99C32.13 6.34 32.15 6.75 32.18 7.25 32.21 7.81 32.22 8.23 32.22 8.51V8.66C32.21 8.72 32.21 8.79 32.21 8.87 32.21 9.05 32.22 9.15 32.24 9.19L32.23 9.22C32.23 9.29 32.32 9.33 32.5 9.33 32.57 9.33 32.63 9.33 32.68 9.32H32.86C33.1 9.32 33.22 9.37 33.22 9.48 33.22 9.55 33.19 9.61 33.15 9.65 33.1 9.69 33.03 9.71 32.95 9.71 32.88 9.71 32.81 9.7 32.75 9.69 32.69 9.68 32.62 9.68 32.55 9.68 32.5 9.68 32.43 9.7 32.33 9.73 32.23 9.78 32.16 9.8 32.11 9.8 31.92 9.8 31.81 9.77 31.78 9.69 31.74 9.69 31.71 9.69 31.68 9.7ZM8.99 9.73L8.86 9.64 8.84 9.22C8.84 9.09 8.83 8.96 8.83 8.8 8.83 8.72 8.84 8.66 8.84 8.61L8.86 8.4C8.86 8.32 8.84 8.23 8.81 8.12 8.81 7.61 8.77 6.65 8.69 5.25 8.64 4.58 8.61 3.9 8.58 3.23 8.56 2.98 8.56 2.74 8.55 2.5 8.05 2.5 7.71 2.49 7.54 2.46 7.38 2.43 7.29 2.36 7.29 2.28 7.34 2.19 7.41 2.15 7.53 2.15 7.77 2.15 8.12 2.17 8.59 2.2 9.01 2.24 9.36 2.26 9.65 2.26H9.91L10.16 2.24C10.31 2.24 10.38 2.29 10.38 2.39 10.38 2.44 10.35 2.48 10.3 2.5 10.25 2.53 10.19 2.54 10.11 2.54 9.95 2.54 9.78 2.54 9.6 2.52L9.08 2.5C9.04 2.5 9.03 2.51 9.03 2.53 9.02 2.56 9.01 2.63 9.01 2.75 9.02 3.49 9.05 4.22 9.09 4.95 9.11 5.35 9.14 5.74 9.16 6.14 9.21 6.95 9.25 7.75 9.28 8.56 9.29 8.88 9.29 9.2 9.3 9.52 9.3 9.57 9.26 9.62 9.19 9.67 9.12 9.71 9.06 9.73 8.99 9.73ZM19.3 9.99L19.01 9.88C18.85 9.84 18.72 9.77 18.61 9.69 18.5 9.6 18.4 9.48 18.3 9.31 18.13 9 18.03 8.56 17.99 7.98 17.98 7.72 17.97 7.49 17.97 7.29V5.98C17.97 5.48 17.99 4.99 18.02 4.53 18.04 4.18 18.08 3.89 18.13 3.65 18.18 3.41 18.25 3.17 18.36 2.94 18.47 2.69 18.6 2.52 18.74 2.42 18.79 2.37 18.9 2.32 19.07 2.26 19.17 2.22 19.27 2.18 19.37 2.13H19.86 19.9C19.9 2.14 19.92 2.14 19.93 2.14L19.99 2.15 20.04 2.19C20.07 2.21 20.08 2.23 20.08 2.23 20.09 2.25 20.09 2.27 20.09 2.3L19.93 2.48H19.42C19.27 2.48 19.13 2.55 19 2.69 18.87 2.83 18.78 3.01 18.71 3.22 18.65 3.42 18.6 3.64 18.55 3.9 18.51 4.17 18.49 4.39 18.48 4.58 18.47 4.83 18.46 5 18.46 5.09L18.43 5.15C18.43 5.58 18.42 5.97 18.41 6.31L18.38 7.48C18.38 7.81 18.41 8.13 18.46 8.41 18.5 8.72 18.62 8.99 18.81 9.24 19 9.49 19.29 9.61 19.68 9.61 19.8 9.61 19.9 9.57 19.98 9.5 20.1 9.5 20.17 9.55 20.17 9.63 20.17 9.68 20.11 9.75 20.01 9.82 19.91 9.89 19.81 9.95 19.7 9.99H19.3ZM29.17 9.99L28.88 9.88C28.72 9.84 28.59 9.77 28.48 9.69 28.37 9.6 28.27 9.48 28.17 9.31 28 9 27.9 8.56 27.86 7.98 27.85 7.72 27.84 7.49 27.84 7.29V5.98C27.84 5.48 27.85 4.99 27.89 4.53 27.91 4.18 27.95 3.89 28 3.65 28.05 3.41 28.12 3.17 28.23 2.94 28.34 2.69 28.47 2.52 28.61 2.42 28.66 2.37 28.77 2.32 28.94 2.26 29.04 2.22 29.14 2.18 29.24 2.13H29.73 29.77C29.77 2.14 29.79 2.14 29.8 2.14L29.86 2.15 29.91 2.19C29.94 2.21 29.95 2.23 29.95 2.23 29.96 2.25 29.96 2.27 29.96 2.3L29.8 2.48H29.29C29.14 2.48 29 2.55 28.87 2.69 28.74 2.83 28.65 3.01 28.58 3.22 28.52 3.42 28.46 3.64 28.42 3.9 28.38 4.17 28.36 4.39 28.35 4.58 28.33 4.83 28.33 5 28.33 5.09L28.3 5.15C28.3 5.58 28.29 5.97 28.28 6.31L28.25 7.48C28.25 7.81 28.28 8.13 28.33 8.41 28.37 8.72 28.48 8.99 28.68 9.24 28.87 9.49 29.16 9.61 29.55 9.61 29.67 9.61 29.77 9.57 29.85 9.5 29.97 9.5 30.03 9.55 30.03 9.63 30.03 9.68 29.98 9.75 29.88 9.82 29.78 9.89 29.68 9.95 29.57 9.99H29.17ZM34.44 6.19L34.45 4.83C34.45 4.24 34.43 3.52 34.4 2.66 34.33 2.6 34.29 2.52 34.29 2.43 34.29 2.38 34.33 2.32 34.4 2.26 34.46 2.2 34.53 2.18 34.58 2.18 34.65 2.18 34.71 2.21 34.77 2.27L34.9 2.37C34.95 2.39 35.04 2.42 35.18 2.44 35.32 2.46 35.42 2.49 35.48 2.51 35.6 2.57 35.76 2.69 35.96 2.87 36.16 3.05 36.29 3.17 36.37 3.21L36.35 3.24C36.36 3.28 36.42 3.38 36.54 3.54 36.63 3.65 36.7 3.76 36.76 3.86 36.89 4.21 36.95 4.67 36.95 5.23 36.95 5.33 36.95 5.42 36.94 5.49V5.77 5.86L36.93 5.98C36.93 6.12 36.95 6.24 37 6.32 36.93 6.74 36.87 7.17 36.83 7.59 36.83 7.63 36.82 7.68 36.82 7.72 36.79 7.92 36.75 8.13 36.7 8.35 36.64 8.57 36.57 8.76 36.49 8.91 36.28 9.28 35.92 9.6 35.43 9.86H34.57C34.51 9.86 34.47 9.76 34.47 9.55 34.44 9.02 34.43 8.35 34.43 7.55 34.43 7.04 34.43 6.59 34.44 6.19ZM35 9.53H35.38C35.43 9.47 35.49 9.42 35.54 9.38L35.62 9.32 35.72 9.24C36.25 8.68 36.55 7.96 36.54 7.21 36.56 6.96 36.57 6.72 36.57 6.47V6.25C36.56 6.19 36.56 6.13 36.56 6.06L36.51 4.89C36.49 4.45 36.35 3.99 36.09 3.51 35.96 3.27 35.8 3.08 35.59 2.93 35.38 2.78 35.17 2.71 34.94 2.71 34.84 2.71 34.79 3.42 34.79 4.84 34.78 6.25 34.83 7.67 34.93 9.08 34.94 9.1 34.94 9.12 34.94 9.14L34.93 9.35 34.97 9.38 35 9.53ZM25.39 2.44L25.34 1.99C25.34 1.99 25.34 1.99 25.34 1.99 25.34 1.99 25.34 1.99 25.34 1.99 25.33 1.95 25.32 1.91 25.31 1.86L25.29 1.73C25.22 1.9 25.16 2.13 25.1 2.43 25.04 2.73 24.98 3.08 24.91 3.49 24.72 4.63 24.55 5.49 24.41 6.07L24.3 6.46C24.18 6.85 24.12 7.14 24.12 7.34V7.41C24.48 7.51 24.89 7.57 25.35 7.57H25.42C25.45 7.58 25.48 7.58 25.51 7.58 25.67 7.58 25.75 7.54 25.75 7.46 25.75 6.99 25.72 6.34 25.67 5.51 25.61 4.69 25.55 3.96 25.48 3.33 25.47 3.06 25.44 2.76 25.39 2.44ZM12.08 5.51L12.1 5.53C12.26 5.53 12.39 5.46 12.52 5.31 12.64 5.16 12.74 4.98 12.81 4.75 12.94 4.28 13 3.9 13 3.63 13 3.45 12.99 3.3 12.97 3.19 12.95 3.07 12.92 2.95 12.87 2.82 12.77 2.55 12.54 2.42 12.17 2.42 12.13 2.42 12.1 2.45 12.08 2.52 12.05 2.58 12.04 2.65 12.04 2.72 12.04 3.23 12.05 3.7 12.06 4.11 12.07 4.53 12.08 4.99 12.08 5.51Z';

  var textChloride = 'M6.79 6.71L6.75 6.67 6.8 6.56C6.8 6.43 6.78 6.28 6.75 6.14L6.57 6.09C6.5 6.11 6.42 6.13 6.34 6.13 6.27 6.13 6.14 6.11 5.94 6.07 5.81 6.03 5.68 6.01 5.57 6.01L5.44 6.06C5.44 6.33 5.44 6.57 5.43 6.78 5.42 7 5.42 7.24 5.42 7.51L5.44 7.55C5.44 7.77 5.45 8.09 5.48 8.52 5.5 8.94 5.51 9.26 5.51 9.47 5.51 9.56 5.5 9.63 5.47 9.68 5.43 9.74 5.39 9.77 5.32 9.77 5.15 9.77 5.06 9.54 5.06 9.08 5.06 8.69 5.07 8.34 5.07 8.02L5.08 6.98C5.09 6.63 5.08 6.27 5.06 5.92 5.06 5.9 5.06 5.87 5.05 5.85 5.09 5.77 5.11 5.52 5.11 5.09 5.11 4.72 5.09 4.28 5.06 3.75L5.04 3.3 5.01 2.4C5.01 2.35 5.03 2.3 5.07 2.25 5.11 2.21 5.16 2.18 5.22 2.18 5.37 2.18 5.45 2.41 5.45 2.85 5.45 3.37 5.45 3.84 5.44 4.26 5.43 4.69 5.42 5.15 5.42 5.65 5.42 5.75 5.72 5.79 6.32 5.79H6.37C6.52 5.79 6.63 5.76 6.7 5.71 6.77 5.65 6.8 5.55 6.8 5.41 6.8 5.01 6.77 4.48 6.72 3.83 6.67 3.12 6.65 2.59 6.65 2.24 6.65 2.2 6.66 2.16 6.7 2.12 6.74 2.09 6.79 2.07 6.85 2.07L6.95 2.1C7.01 2.11 7.05 2.12 7.06 2.14 7.06 2.74 7.09 3.63 7.13 4.82 7.18 6.01 7.2 6.91 7.2 7.51 7.2 8.41 7.23 9.17 7.29 9.78L7.2 9.91C7.2 9.83 7.09 9.79 6.85 9.79 6.81 8.38 6.79 7.35 6.79 6.71ZM18.03 9.98L17.86 9.92C17.77 9.82 17.67 9.56 17.55 9.13 17.44 8.7 17.34 8.21 17.24 7.68 17.18 7.24 17.09 6.81 16.97 6.38 16.88 6 16.78 5.8 16.7 5.8H16.66C16.49 5.8 16.4 5.86 16.4 5.97 16.4 6.52 16.43 7.36 16.49 8.48 16.53 9.17 16.56 9.57 16.6 9.69L16.51 9.88H16.34L16.24 9.79C16.12 6.25 16.05 3.84 16.05 2.55 16.05 2.47 16.06 2.4 16.07 2.34 16.08 2.29 16.11 2.24 16.15 2.2 16.18 2.14 16.24 2.11 16.32 2.11 16.72 2.11 17.05 2.21 17.29 2.4 17.54 2.59 17.66 2.87 17.66 3.23V4.07C17.66 4.21 17.61 4.41 17.51 4.65 17.41 4.9 17.3 5.13 17.18 5.33L17.03 5.62C17.12 6.01 17.29 6.71 17.55 7.73 17.81 8.74 17.95 9.28 17.97 9.34 17.98 9.35 17.99 9.37 18 9.4 18.01 9.43 18.04 9.48 18.08 9.54 18.13 9.65 18.16 9.74 18.16 9.82 18.16 9.92 18.12 9.98 18.03 9.98ZM1.01 4.86V4.25C1 4.08 1 3.88 1 3.67 1 3.27 1.02 2.87 1.07 2.48 1.1 2.29 1.14 2.13 1.2 1.99 1.25 1.85 1.32 1.72 1.42 1.59 1.59 1.33 1.85 1.15 2.2 1.07 2.39 1.02 2.59 1 2.81 1 2.96 1 3.11 1.04 3.27 1.13 3.42 1.21 3.5 1.31 3.5 1.43 3.5 1.51 3.44 1.55 3.31 1.55 3.26 1.55 3.17 1.52 3.04 1.47 2.92 1.42 2.81 1.39 2.71 1.39 2.49 1.39 2.29 1.43 2.11 1.52 1.93 1.61 1.79 1.73 1.69 1.87 1.6 2 1.53 2.16 1.46 2.38 1.4 2.59 1.36 2.81 1.35 3.02 1.32 3.21 1.31 3.44 1.31 3.71L1.32 4.36C1.33 4.54 1.33 4.74 1.33 4.95 1.33 5.48 1.39 6.26 1.5 7.29 1.55 7.79 1.62 8.29 1.72 8.79 1.74 8.89 1.78 8.98 1.82 9.07 1.92 9.21 2.06 9.33 2.24 9.4 2.43 9.48 2.63 9.52 2.83 9.52 3.2 9.52 3.48 9.41 3.67 9.18 3.74 9.09 3.81 9.05 3.89 9.05 3.97 9.05 4 9.1 4 9.21 4 9.34 3.96 9.47 3.87 9.57 3.78 9.67 3.66 9.75 3.51 9.8 3.26 9.91 2.98 9.97 2.68 9.97 2.46 9.97 2.22 9.88 1.98 9.71 1.73 9.54 1.56 9.35 1.45 9.14 1.36 8.94 1.26 8.31 1.16 7.24 1.06 6.18 1.01 5.38 1.01 4.86ZM26.45 9.69V9.54C26.46 9.5 26.46 9.46 26.46 9.4L26.41 9.36C26.48 9.19 26.51 9.04 26.51 8.88 26.51 8.71 26.5 8.46 26.47 8.13L26.45 7.37C26.45 6.98 26.46 6.41 26.49 5.64 26.52 4.96 26.53 4.38 26.53 3.91L26.51 3.22C26.49 3.01 26.49 2.78 26.49 2.53 26.49 2.41 26.51 2.33 26.57 2.28 26.63 2.23 26.71 2.21 26.83 2.21 26.91 2.21 26.97 2.23 27.02 2.28 27.04 2.28 27.15 2.3 27.37 2.32 27.57 2.34 27.74 2.38 27.88 2.43 28.03 2.47 28.11 2.53 28.11 2.6 28.11 2.67 28.03 2.75 27.88 2.83 27.43 2.68 27.11 2.61 26.91 2.61L26.86 2.68C26.86 2.75 26.87 2.91 26.87 3.17 26.87 3.5 26.86 3.8 26.84 4.06 26.84 4.33 26.83 4.62 26.83 4.95 26.83 5.17 26.89 5.28 27 5.28L27.19 5.26C27.25 5.26 27.32 5.25 27.39 5.25 27.7 5.25 27.86 5.32 27.86 5.46 27.86 5.54 27.84 5.61 27.8 5.67 27.78 5.7 27.75 5.72 27.72 5.74 27.69 5.75 27.65 5.76 27.62 5.76 27.5 5.76 27.41 5.73 27.34 5.67L26.96 5.61H26.9L26.84 5.67V5.7C26.86 5.83 26.87 6.13 26.87 6.61 26.87 6.91 26.86 7.18 26.86 7.42L26.84 8.24C26.84 8.54 26.86 8.85 26.88 9.16 26.89 9.34 26.93 9.45 27 9.51 27.07 9.57 27.2 9.6 27.39 9.6L27.61 9.59C27.68 9.58 27.76 9.57 27.84 9.57 28.07 9.57 28.19 9.62 28.19 9.72 28.19 9.86 28.01 9.93 27.67 9.93H26.69C26.55 9.93 26.47 9.85 26.45 9.69ZM19.72 9.68H19.63C19.45 9.68 19.34 9.64 19.29 9.56 19.29 9.51 19.32 9.46 19.39 9.42L19.45 9.37H19.79L19.84 9.32 19.86 9.22 19.88 9.08C19.88 8.61 19.86 8.2 19.84 7.83L19.82 7.4 19.79 6.56C19.79 6.26 19.81 5.82 19.83 5.22L19.85 3.88C19.85 3.3 19.83 2.86 19.79 2.55 19.72 2.53 19.6 2.52 19.44 2.52L19.3 2.53C19.26 2.54 19.21 2.54 19.15 2.54 19 2.54 18.92 2.48 18.92 2.34 18.92 2.31 18.96 2.28 19.03 2.25 19.1 2.22 19.16 2.21 19.21 2.21 19.51 2.21 19.81 2.22 20.11 2.25 20.3 2.26 20.48 2.29 20.66 2.36 20.81 2.4 20.88 2.47 20.88 2.55 20.88 2.57 20.86 2.6 20.84 2.64L20.57 2.67C20.51 2.62 20.4 2.6 20.22 2.6L20.16 2.63C20.19 2.7 20.2 2.9 20.2 3.24 20.2 3.75 20.19 4.2 20.19 4.61L20.16 5.98C20.16 6.32 20.18 6.74 20.21 7.23 20.23 7.79 20.25 8.21 20.25 8.49V8.64C20.24 8.7 20.23 8.77 20.23 8.85 20.23 9.03 20.25 9.13 20.27 9.17L20.26 9.19C20.26 9.27 20.34 9.31 20.52 9.31 20.59 9.31 20.65 9.31 20.7 9.3H20.88C21.11 9.3 21.22 9.35 21.22 9.46 21.22 9.53 21.2 9.58 21.15 9.63 21.1 9.67 21.04 9.69 20.96 9.69 20.89 9.69 20.83 9.68 20.77 9.67 20.71 9.66 20.64 9.65 20.57 9.65 20.52 9.65 20.45 9.67 20.35 9.71 20.26 9.76 20.19 9.78 20.14 9.78 19.96 9.78 19.85 9.74 19.82 9.67 19.78 9.67 19.75 9.67 19.72 9.68ZM29.26 9.64L29.32 9.55C29.35 9.55 29.42 9.56 29.54 9.59 29.62 9.62 29.69 9.63 29.75 9.63 29.92 9.63 30.08 9.56 30.21 9.43 30.35 9.3 30.45 9.12 30.52 8.91 30.63 8.51 30.69 8.13 30.69 7.78 30.69 7.25 30.52 6.69 30.19 6.08 29.98 5.73 29.82 5.45 29.71 5.24 29.6 5.03 29.5 4.8 29.42 4.53 29.31 4.21 29.26 3.91 29.26 3.62 29.26 3.34 29.33 3.02 29.48 2.64 29.55 2.47 29.65 2.32 29.78 2.21 29.91 2.1 30.05 2.05 30.2 2.05 30.31 2.05 30.41 2.08 30.51 2.15 30.6 2.22 30.65 2.29 30.65 2.37 30.65 2.43 30.6 2.46 30.5 2.46 30.47 2.46 30.43 2.45 30.38 2.43 30.33 2.4 30.29 2.39 30.25 2.39 30.13 2.39 30.02 2.44 29.93 2.53 29.83 2.62 29.76 2.74 29.71 2.88 29.62 3.17 29.57 3.43 29.57 3.67 29.57 3.81 29.59 3.96 29.63 4.11 29.64 4.16 29.65 4.2 29.65 4.23 29.66 4.26 29.67 4.28 29.67 4.3L29.74 4.53 29.8 4.74 29.89 4.94C29.92 5 29.94 5.04 29.97 5.09 30 5.13 30.02 5.17 30.05 5.21L30.19 5.45C30.22 5.49 30.29 5.6 30.39 5.78 30.5 5.95 30.59 6.13 30.68 6.32 30.76 6.48 30.82 6.63 30.86 6.78 30.9 6.92 30.93 7.09 30.96 7.29 30.99 7.48 31 7.69 31 7.92 31 8.29 30.95 8.63 30.85 8.95 30.7 9.34 30.5 9.6 30.23 9.76 30.07 9.85 29.9 9.9 29.7 9.9L29.64 9.92C29.55 9.9 29.47 9.87 29.39 9.82 29.31 9.77 29.27 9.71 29.26 9.64ZM9.06 3.16L9.09 2.75 9.12 2.4C9.12 2.35 9.15 2.32 9.21 2.32 9.25 2.32 9.3 2.33 9.37 2.36L9.41 2.37C9.41 2.54 9.4 2.69 9.4 2.83V3.28 4.53C9.4 4.9 9.41 5.31 9.41 5.78 9.4 5.82 9.4 5.9 9.4 6.03L9.38 6.28C9.38 6.43 9.37 6.59 9.37 6.75 9.37 6.92 9.38 7.08 9.38 7.23L9.4 7.72 9.36 7.82 9.37 7.8C9.37 7.83 9.37 7.84 9.36 7.85V7.9C9.36 7.96 9.37 8.01 9.4 8.06L9.36 9.16V9.23C9.36 9.36 9.36 9.44 9.37 9.46 9.37 9.5 9.39 9.52 9.43 9.52L10.05 9.54C10.23 9.54 10.36 9.54 10.43 9.55 10.49 9.55 10.54 9.55 10.55 9.55H10.59C10.63 9.55 10.67 9.57 10.71 9.61 10.74 9.65 10.76 9.7 10.77 9.75 10.77 9.84 10.7 9.89 10.58 9.9 10.44 9.89 10.11 9.88 9.59 9.88L9.61 9.9C9.53 9.9 9.46 9.9 9.38 9.91 9.32 9.92 9.25 9.93 9.17 9.93 9.06 9.93 8.99 9.84 8.97 9.67 8.98 9.62 8.99 9.49 8.99 9.29 8.99 8.57 9 7.85 9.01 7.13 9.02 6.8 9.02 6.47 9.03 6.15 9.05 4.77 9.06 3.77 9.06 3.16ZM11.77 5.77V5.37C11.77 3.34 12.02 2.28 12.53 2.17 12.56 2.16 12.59 2.16 12.62 2.16 12.66 2.16 12.72 2.17 12.79 2.2 13.04 2.28 13.29 2.33 13.54 2.36 13.69 2.39 13.84 2.54 13.99 2.8 14.16 3.08 14.29 3.44 14.37 3.9 14.45 4.35 14.49 4.81 14.49 5.29L14.47 5.34C14.47 5.6 14.47 5.82 14.48 6.02L14.49 6.71C14.49 7.1 14.48 7.46 14.45 7.77 14.4 8.24 14.32 8.65 14.21 9 14.14 9.21 14.05 9.38 13.96 9.52 13.87 9.65 13.76 9.77 13.62 9.86 13.5 9.95 13.34 10 13.16 10 12.88 9.96 12.62 9.82 12.42 9.62 12.23 9.41 12.11 9.15 12.09 8.88 11.92 8.31 11.81 7.53 11.78 6.53 11.77 6.28 11.77 6.02 11.77 5.77V5.77ZM22.41 6.17L22.43 4.82C22.43 4.23 22.41 3.51 22.38 2.66 22.31 2.59 22.27 2.52 22.27 2.43 22.27 2.37 22.3 2.32 22.37 2.26 22.44 2.2 22.5 2.17 22.56 2.17 22.62 2.17 22.68 2.2 22.73 2.26L22.87 2.37C22.91 2.39 23 2.41 23.14 2.44 23.27 2.46 23.37 2.48 23.43 2.51 23.54 2.57 23.7 2.69 23.9 2.86 24.09 3.05 24.22 3.16 24.29 3.21L24.28 3.23C24.29 3.28 24.35 3.38 24.46 3.53 24.55 3.64 24.62 3.75 24.68 3.85 24.8 4.2 24.87 4.66 24.87 5.22 24.87 5.32 24.86 5.41 24.85 5.48V5.76 5.85L24.84 5.97C24.84 6.11 24.87 6.23 24.91 6.31 24.84 6.73 24.79 7.15 24.75 7.58 24.74 7.62 24.74 7.66 24.74 7.7 24.71 7.9 24.67 8.11 24.62 8.33 24.56 8.56 24.49 8.74 24.41 8.88 24.21 9.26 23.86 9.58 23.38 9.84H22.54C22.48 9.84 22.45 9.74 22.45 9.53 22.42 9 22.4 8.33 22.4 7.53 22.4 7.02 22.41 6.57 22.41 6.17ZM13.99 3.91L13.95 3.82 13.97 3.76C13.97 3.42 13.87 3.13 13.68 2.88 13.48 2.64 13.25 2.52 12.97 2.52 12.6 2.52 12.39 2.69 12.31 3.02 12.3 3.14 12.28 3.3 12.27 3.52 12.27 4.08 12.24 4.47 12.19 4.68 12.19 4.79 12.18 4.97 12.16 5.22L12.14 5.76C12.14 5.93 12.14 6.08 12.15 6.21L12.16 6.67C12.16 7.03 12.19 7.44 12.25 7.91 12.3 8.25 12.36 8.54 12.42 8.78 12.48 9.02 12.58 9.22 12.7 9.39 12.81 9.57 12.95 9.67 13.11 9.67 13.42 9.67 13.65 9.46 13.8 9.03 13.95 8.6 14.04 8.17 14.08 7.72 14.11 7.26 14.12 6.9 14.12 6.62 14.12 6.31 14.1 5.86 14.05 5.26 14.02 4.82 14 4.38 13.99 3.93 13.99 3.92 13.99 3.92 13.99 3.91V3.91ZM22.96 9.51H23.33C23.39 9.44 23.44 9.39 23.49 9.36L23.57 9.3 23.66 9.22C24.18 8.66 24.47 7.94 24.47 7.19 24.49 6.95 24.5 6.7 24.5 6.46V6.24C24.49 6.18 24.49 6.11 24.49 6.05L24.44 4.88C24.41 4.44 24.28 3.98 24.02 3.51 23.9 3.27 23.74 3.07 23.54 2.93 23.34 2.78 23.12 2.7 22.9 2.7 22.81 2.7 22.76 3.41 22.76 4.83 22.75 6.24 22.8 7.65 22.9 9.06 22.9 9.08 22.9 9.1 22.9 9.11L22.89 9.33 22.94 9.36 22.96 9.51ZM16.43 5.49L16.46 5.52C16.61 5.52 16.74 5.44 16.86 5.3 16.98 5.15 17.08 4.97 17.15 4.74 17.28 4.27 17.34 3.9 17.34 3.62 17.34 3.44 17.33 3.3 17.31 3.18 17.29 3.07 17.26 2.95 17.21 2.82 17.11 2.55 16.89 2.41 16.53 2.41 16.49 2.41 16.46 2.45 16.43 2.51 16.41 2.58 16.4 2.64 16.4 2.71 16.4 3.23 16.41 3.69 16.42 4.1 16.43 4.52 16.43 4.98 16.43 5.49ZM6.45 5.65V5.63L6.48 5.65H6.45ZM30.58 2.43H30.6C30.6 2.42 30.59 2.41 30.58 2.41V2.43Z';

  var textQuality = 'M5.77 2.52L5.84 2.35C6.03 2.38 6.13 2.6 6.13 3.02L6.17 6.22C6.17 6.45 6.19 6.88 6.23 7.5 6.28 8.07 6.31 8.5 6.31 8.79 6.23 9.07 6.26 9.37 6.42 9.63 6.57 9.89 6.82 10.08 7.11 10.16 7.16 10.16 7.2 10.16 7.25 10.16 7.64 10.16 7.88 9.32 7.99 7.63L8 7.38C8.06 5.17 8.09 3.53 8.09 2.46L8.08 2.35C8.07 2.32 8.07 2.29 8.07 2.25 8.07 2.16 8.14 2.11 8.28 2.11 8.38 2.11 8.44 2.14 8.47 2.18 8.49 2.27 8.49 2.41 8.49 2.61 8.49 3.22 8.47 3.63 8.42 3.84L8.43 3.91C8.43 4.02 8.42 4.18 8.39 4.4L8.37 4.88V5C8.38 5.03 8.38 5.07 8.38 5.12 8.37 5.32 8.36 5.5 8.36 5.68 8.35 5.74 8.34 5.82 8.34 5.94 8.33 6.71 8.31 7.38 8.29 7.94 8.27 8.64 8.17 9.23 7.99 9.72 7.81 10.23 7.51 10.49 7.1 10.49 6.96 10.49 6.82 10.45 6.67 10.36 6.51 10.28 6.38 10.18 6.28 10.07 6.16 9.92 6.07 9.52 6.01 8.85 5.94 8.18 5.9 7.41 5.88 6.55 5.88 6.36 5.88 6.21 5.87 6.11 5.85 4.09 5.82 2.89 5.77 2.52ZM1.01 6.92V6.38C1 6.21 1 6.01 1 5.79 1 5.3 1.01 4.76 1.04 4.14 1.06 3.61 1.12 3.1 1.2 2.6 1.29 2.13 1.41 1.75 1.59 1.46 1.65 1.33 1.75 1.21 1.88 1.13 2.01 1.05 2.16 1 2.31 1 2.6 1 2.89 1.11 3.18 1.34 3.47 1.57 3.64 1.83 3.68 2.1 3.9 3.43 4.02 4.78 4.03 6.12 4.03 6.35 4.03 6.58 4.03 6.8 4.08 7.79 3.88 8.77 3.46 9.66 3.4 9.78 3.33 9.89 3.25 10 3.25 10.04 3.27 10.12 3.31 10.23L3.38 10.39 3.41 10.72C3.44 10.94 3.46 11.09 3.48 11.18 3.5 11.27 3.55 11.36 3.62 11.45 3.69 11.54 3.8 11.59 3.93 11.59H3.98C4.25 11.59 4.38 11.64 4.38 11.75 4.38 11.9 4.22 11.98 3.9 11.98 3.87 11.98 3.8 11.95 3.7 11.91 3.61 11.85 3.55 11.82 3.53 11.82 3.38 11.76 3.26 11.64 3.18 11.47 3.09 11.3 3.02 11.06 2.97 10.73 2.92 10.42 2.88 10.23 2.85 10.15 2.61 10.15 2.4 10.11 2.21 10.04 2.01 9.96 1.85 9.85 1.72 9.72 1.49 9.49 1.31 9.14 1.18 8.68 1.13 8.52 1.09 8.32 1.06 8.09 1.04 7.85 1.03 7.65 1.03 7.47 1.02 7.36 1.01 7.18 1.01 6.92ZM24.89 7.24L24.83 6.38 24.76 6.22 24.79 6.08C24.74 5.97 24.67 5.78 24.57 5.51 24.47 5.24 24.37 4.97 24.26 4.7 24.05 4.18 23.86 3.65 23.69 3.11 23.69 3.09 23.68 3.07 23.67 3.04 23.62 2.88 23.59 2.73 23.56 2.6L23.74 2.46C23.92 2.65 24.03 2.89 24.07 3.15 24.08 3.18 24.09 3.21 24.1 3.24 24.23 3.59 24.34 3.94 24.44 4.29L24.59 4.75C24.64 5.02 24.75 5.28 24.91 5.52 24.91 5.52 24.91 5.52 24.92 5.52L24.97 5.3 24.94 5.24C25.01 5.16 25.09 4.88 25.2 4.39 25.3 3.82 25.41 3.35 25.51 2.96 25.62 2.51 25.73 2.28 25.84 2.28 25.88 2.28 25.92 2.29 25.95 2.32 25.98 2.34 26 2.37 26 2.4 26 2.52 25.87 3 25.62 3.83 25.5 4.22 25.39 4.59 25.31 4.94 25.21 5.35 25.16 5.72 25.16 6.04 25.2 6.12 25.22 6.19 25.22 6.25 25.22 6.29 25.21 6.34 25.18 6.42 25.16 6.49 25.14 6.55 25.14 6.6 25.14 6.64 25.16 6.82 25.2 7.14 25.23 7.36 25.25 7.54 25.25 7.7 25.25 8.05 25.25 8.37 25.26 8.65V9.62 9.67C25.3 9.81 25.3 9.97 25.26 10.11 25.22 10.25 25.14 10.38 25.02 10.49 25.01 10.49 25 10.49 24.99 10.49 24.97 10.49 24.94 10.47 24.89 10.44 24.85 10.41 24.83 10.38 24.82 10.36 24.89 10.16 24.93 9.46 24.93 8.24 24.93 8.01 24.92 7.67 24.89 7.24ZM12.41 9.05L12.34 8.57C12.16 8.53 11.95 8.51 11.71 8.51L11.26 8.48C11.06 8.46 10.91 8.45 10.82 8.45 10.77 8.45 10.74 8.47 10.73 8.51 10.73 8.53 10.73 8.54 10.72 8.54L10.7 8.79C10.69 8.93 10.64 9.22 10.56 9.66 10.52 9.87 10.47 10.04 10.41 10.16 10.34 10.3 10.28 10.37 10.22 10.37 10.17 10.37 10.11 10.35 10.05 10.3 10 10.26 9.97 10.21 9.97 10.16L9.98 10.13 9.99 10.09C10.14 9.52 10.27 8.95 10.37 8.39L10.52 7.64 10.67 6.72 10.81 5.92C10.85 5.7 10.93 5.35 11.04 4.87 11.15 4.32 11.22 3.95 11.25 3.74 11.26 3.72 11.27 3.57 11.3 3.3 11.33 2.99 11.36 2.77 11.39 2.62 11.41 2.41 11.44 2.29 11.46 2.26H11.55C11.58 2.27 11.61 2.27 11.64 2.27 11.74 2.27 11.81 2.25 11.87 2.2 11.92 2.2 11.98 2.22 12.02 2.25 12.07 2.29 12.09 2.33 12.09 2.38 12.09 2.77 12.12 3.21 12.18 3.71 12.21 3.97 12.24 4.18 12.26 4.35 12.32 5.04 12.39 5.73 12.48 6.41 12.6 7.42 12.76 8.68 12.96 10.2V10.24C12.96 10.32 12.93 10.38 12.86 10.42 12.73 10.42 12.65 10.4 12.62 10.38 12.59 10.35 12.56 10.27 12.54 10.15 12.5 9.79 12.45 9.43 12.41 9.07 12.41 9.06 12.41 9.06 12.41 9.05V9.05ZM17.69 10.2H17.59C17.4 10.2 17.29 10.16 17.23 10.08 17.23 10.02 17.27 9.98 17.34 9.93L17.4 9.87H17.76L17.81 9.83 17.84 9.72 17.85 9.57C17.85 9.08 17.84 8.64 17.81 8.25L17.79 7.81 17.76 6.92C17.76 6.61 17.78 6.14 17.8 5.51L17.83 4.11C17.83 3.49 17.81 3.03 17.76 2.7 17.69 2.68 17.56 2.67 17.39 2.67L17.25 2.68C17.2 2.69 17.14 2.69 17.08 2.69 16.92 2.69 16.85 2.62 16.85 2.49 16.85 2.45 16.88 2.42 16.96 2.39 17.03 2.36 17.1 2.34 17.15 2.34 17.47 2.34 17.78 2.36 18.1 2.39 18.3 2.4 18.49 2.43 18.68 2.5 18.83 2.55 18.91 2.62 18.91 2.7 18.91 2.72 18.89 2.75 18.87 2.8L18.58 2.83C18.52 2.78 18.4 2.75 18.22 2.75L18.15 2.79C18.18 2.86 18.19 3.08 18.19 3.43 18.19 3.96 18.19 4.44 18.18 4.87L18.15 6.31C18.15 6.67 18.17 7.11 18.2 7.63 18.23 8.21 18.24 8.66 18.24 8.96V9.11C18.23 9.17 18.23 9.24 18.23 9.33 18.23 9.52 18.24 9.63 18.27 9.67L18.25 9.69C18.25 9.77 18.35 9.81 18.53 9.81 18.61 9.81 18.67 9.81 18.72 9.8H18.91C19.15 9.8 19.27 9.86 19.27 9.97 19.27 10.04 19.25 10.1 19.2 10.15 19.15 10.19 19.08 10.21 19 10.21 18.92 10.21 18.85 10.2 18.79 10.19 18.73 10.18 18.66 10.18 18.58 10.18 18.53 10.18 18.45 10.2 18.35 10.24 18.25 10.29 18.18 10.31 18.13 10.31 17.93 10.31 17.82 10.27 17.79 10.19 17.75 10.19 17.71 10.19 17.69 10.2ZM21.4 10.24L21.26 10.14 21.25 9.69C21.24 9.56 21.23 9.42 21.23 9.26 21.23 9.18 21.24 9.11 21.25 9.05L21.26 8.83C21.26 8.75 21.24 8.66 21.21 8.54 21.21 8 21.17 7 21.08 5.53 21.04 4.83 21 4.12 20.97 3.41 20.96 3.15 20.95 2.9 20.94 2.64 20.42 2.64 20.08 2.63 19.9 2.61 19.73 2.57 19.65 2.5 19.65 2.41 19.69 2.33 19.77 2.28 19.89 2.28 20.14 2.28 20.5 2.3 20.98 2.33 21.42 2.37 21.78 2.39 22.08 2.39H22.34L22.6 2.38C22.76 2.38 22.83 2.43 22.83 2.54 22.83 2.58 22.8 2.62 22.75 2.65 22.69 2.68 22.63 2.69 22.55 2.69 22.39 2.69 22.21 2.68 22.03 2.67L21.49 2.64C21.45 2.64 21.44 2.66 21.44 2.68 21.43 2.7 21.42 2.78 21.42 2.91 21.43 3.68 21.46 4.45 21.5 5.22 21.52 5.64 21.55 6.05 21.57 6.46 21.62 7.31 21.66 8.16 21.69 9 21.7 9.34 21.71 9.67 21.71 10.01 21.71 10.06 21.68 10.12 21.6 10.16 21.53 10.21 21.46 10.24 21.4 10.24ZM14.43 3.35L14.46 2.91 14.49 2.55C14.49 2.49 14.52 2.46 14.58 2.46 14.62 2.46 14.68 2.48 14.76 2.5L14.8 2.51C14.8 2.69 14.79 2.85 14.78 2.99V3.47 4.78C14.79 5.17 14.8 5.61 14.8 6.1 14.79 6.14 14.78 6.23 14.78 6.37L14.77 6.62C14.76 6.78 14.76 6.95 14.76 7.12 14.76 7.3 14.76 7.47 14.77 7.63L14.78 8.15 14.75 8.24 14.76 8.23C14.76 8.25 14.75 8.27 14.75 8.28V8.33C14.75 8.39 14.76 8.45 14.78 8.5L14.75 9.66V9.73C14.75 9.87 14.75 9.95 14.76 9.97 14.76 10.01 14.78 10.03 14.82 10.03L15.47 10.06C15.67 10.06 15.8 10.06 15.87 10.06 15.94 10.07 15.99 10.07 16 10.07H16.04C16.08 10.07 16.12 10.09 16.17 10.13 16.2 10.17 16.23 10.22 16.23 10.27 16.23 10.37 16.16 10.42 16.03 10.43 15.89 10.42 15.54 10.42 14.98 10.42L15.01 10.43C14.93 10.43 14.85 10.43 14.77 10.44 14.7 10.46 14.63 10.47 14.54 10.47 14.43 10.47 14.36 10.37 14.33 10.19 14.35 10.14 14.36 10.01 14.36 9.79 14.36 9.03 14.36 8.27 14.38 7.52 14.38 7.17 14.39 6.83 14.39 6.49 14.42 5.04 14.43 3.99 14.43 3.35ZM3.59 5.07V4.76L3.58 4 3.57 3.67C3.56 3.48 3.54 3.29 3.5 3.11 3.47 2.93 3.44 2.75 3.4 2.56 3.34 2.25 3.21 1.96 3.01 1.69 2.84 1.46 2.6 1.34 2.28 1.34 2.15 1.34 2.03 1.43 1.93 1.6 1.73 2.04 1.6 2.51 1.56 2.99 1.54 3.09 1.53 3.2 1.52 3.3 1.44 3.86 1.39 4.55 1.38 5.35 1.37 5.53 1.36 5.78 1.36 6.1V6.83C1.36 7.29 1.41 7.75 1.52 8.22 1.57 8.54 1.65 8.81 1.75 9.03 1.84 9.26 1.97 9.44 2.13 9.6 2.3 9.76 2.49 9.84 2.71 9.84 2.9 9.78 3.06 9.66 3.17 9.5 3.28 9.34 3.33 9.16 3.32 8.97 3.34 8.88 3.36 8.79 3.38 8.7 3.49 7.97 3.56 7.23 3.57 6.48 3.58 6.01 3.59 5.54 3.59 5.07V5.07ZM12.15 8.24H12.28C12.2 7.08 12.04 5.37 11.8 3.1L11.12 6.33C11.01 6.83 10.92 7.33 10.85 7.84 10.84 7.92 10.84 8 10.83 8.09 10.83 8.13 10.99 8.16 11.31 8.19 11.63 8.23 11.91 8.24 12.15 8.24Z';

  var blackBox = "M56.7559 135.85C56.4469 135.664 56.3165 135.477 55.7541 135.08M12.4048 137.076C12.8044 136.409 13.3678 136.127 13.8549 135.607L12.4048 137.076ZM12.6102 136.936C13.1717 136.445 13.7076 135.765 13.9616 135.424L12.6102 136.936ZM12.7512 138.136C13.3738 137.786 13.9569 136.63 15.0434 135.076L12.7512 138.136ZM12.8485 138.113C13.2702 137.511 13.7596 137.181 15.4744 135.575L12.8485 138.113ZM12.8317 139.828C14.2231 138.184 15.3295 137.364 16.8359 135.264L12.8317 139.828ZM12.7065 139.932C14.2138 138.17 15.6883 136.535 16.4587 135.261L12.7065 139.932ZM12.9912 141.179C14.283 138.999 16.1605 137.97 17.8698 135.245L12.9912 141.179ZM12.7961 141.054C14.7253 139.162 17.0529 136.518 18.0587 135.464L12.7961 141.054ZM12.1583 143.089C14.8519 140.741 16.3924 138.824 19.4445 135.646L12.1583 143.089ZM12.8309 142.81C13.8623 140.952 15.6923 139.585 19.5462 135.703L12.8309 142.81ZM12.1767 144.504C15.6089 141.066 18.7547 137.907 20.7922 135.277L12.1767 144.504ZM12.3708 144.464C14.5833 142.224 16.9369 139.804 21.1754 135.533L12.3708 144.464ZM12.9673 145.249C16.1904 142.435 18.9286 138.917 22.1402 135.324L12.9673 145.249ZM12.4054 145.551C15.5196 142.65 18.0682 140.135 22.0147 135.247L12.4054 145.551ZM12.3573 147.458C16.7343 143.573 20.264 139.36 23.8137 135.41L12.3573 147.458ZM12.4534 147.06C14.9282 144.814 17.3482 141.926 23.8826 135.297L12.4534 147.06ZM12.3143 148.942C16.4286 144.371 19.7367 140.988 25.2098 135.937L12.3143 148.942ZM12.7624 148.636C17.3802 143.459 22.3135 138.319 24.983 135.502L12.7624 148.636ZM12.7036 150.33C15.6248 146.78 18.1659 143.855 25.9867 135.115L12.7036 150.33ZM12.6388 150.195C16.6766 145.855 20.4809 141.637 26.4494 135.435L12.6388 150.195ZM12.3076 151.326C18.2737 145.931 23.7883 139.714 28.1662 135.149L12.3076 151.326ZM12.6473 151.528C15.9415 148.367 19.1002 144.837 27.5447 135.555L12.6473 151.528ZM12.8261 153.097C18.9187 145.913 25.6228 138.479 28.9792 135.419L12.8261 153.097ZM12.7539 153.003C16.9471 148.408 21.6241 143.623 29.0757 135.188L12.7539 153.003ZM12.9692 154.417C17.1782 149.592 21.8598 144.182 30.2694 135.785L12.9692 154.417ZM12.814 154.59C17.1858 149.325 21.8333 144.424 30.6798 135.581L12.814 154.59ZM13.1258 156.091C18.7017 149.304 24.749 142.669 32.3814 135.536L13.1258 156.091ZM12.4261 155.703C19.8084 147.909 27.0911 140.501 32.1528 135.483L12.4261 155.703ZM12.7728 157.04C20.0254 149.464 27.4483 142.141 33.1345 135.733L12.7728 157.04ZM12.6514 157.534C19.2372 150.345 26.4036 142.764 33.3435 135.637L12.6514 157.534ZM13.0582 158.733C16.8822 153.85 22.0337 149.247 35.2701 135.275L13.0582 158.733ZM12.7375 159.058C17.9799 153.489 23.5188 147.648 34.9598 135.325L12.7375 159.058ZM12.9791 160.357C18.5016 154.449 24.6973 148.228 36.0379 135.16L12.9791 160.357ZM12.6936 160.374C17.9984 154.108 24.0959 148.397 35.8557 135.422L12.6936 160.374ZM12.3399 162.179C21.6005 152.136 30.0851 143.622 37.7731 135.52L12.3399 162.179ZM12.4759 161.971C19.2896 155.193 25.7716 148.204 37.4885 135.411L12.4759 161.971ZM12.7708 162.755C21.7734 154.048 29.7579 145.113 38.525 135.066L12.7708 162.755ZM12.6229 163.368C19.3989 156.551 25.7541 149.246 38.5977 135.482L12.6229 163.368ZM12.5289 165.116C18.6929 157.836 25.8124 150.902 40.5483 134.861L12.5289 165.116ZM12.5849 164.731C19.5193 157.108 26.5975 149.641 40.1835 135.474L12.5849 164.731ZM12.7322 166.284C22.2154 155.356 32.0195 145.002 41.9747 135.841L12.7322 166.284ZM12.4029 166.478C22.1339 156.465 31.3973 146.457 41.7509 135.525L12.4029 166.478ZM13.0158 167.363C24.4816 155.42 35.3928 143.413 43.0471 135.07L13.0158 167.363ZM12.4148 167.575C19.7953 160.036 26.4683 153.088 42.9878 135.677L12.4148 167.575ZM12.926 168.714C24.5085 155.981 36.2727 143.827 44.9053 135.825L12.926 168.714ZM12.7019 169.367C18.5623 161.988 25.2642 155.392 44.5149 135.623L12.7019 169.367ZM12.4168 170.537C23.1292 159.652 33.6793 147.83 45.7642 135.082L12.4168 170.537ZM12.9416 170.617C19.9223 162.701 26.9313 155.142 45.7671 135.641L12.9416 170.617ZM12.4116 171.862C24.2561 158.641 37.1527 146.107 47.6177 135.61L12.4116 171.862ZM12.568 172.225C25.0059 159.216 37.3614 146.236 46.9575 135.481L12.568 172.225ZM12.1113 173.868C19.9679 165.103 27.933 157.077 48.6638 135.454L12.1113 173.868ZM12.6683 173.777C21.0822 164.652 29.2064 155.529 48.5736 135.316L12.6683 173.777ZM12.4501 174.558C24.3074 162.672 36.0033 150.538 49.8568 135.711L12.4501 174.558ZM12.4616 174.91C20.9572 165.997 29.3737 156.92 50.1246 135.232L12.4616 174.91ZM12.9295 176.117C23.6172 164.574 33.9232 153.306 51.4367 135.254L12.9295 176.117ZM12.7883 176.42C24.2141 163.725 36.1701 150.97 51.1146 135.368L12.7883 176.42ZM12.7542 178.019C24.6629 164.833 37.2102 150.993 52.8214 135.157L12.7542 178.019ZM12.6921 177.656C28.3105 160.783 44.0059 143.98 52.5432 135.448L12.6921 177.656ZM12.4238 179.369C24.1255 166.332 36.9738 153.328 53.8027 135.463L12.4238 179.369ZM12.7529 179.354C22.6275 168.086 32.7148 157.335 54.14 135.346L12.7529 179.354ZM12.9254 181.196C26.7687 165.593 41.0326 150.399 55.2629 135.379L12.9254 181.196ZM12.6714 181.066C21.5738 171.042 30.6956 161.167 55.5316 135.373L12.6714 181.066ZM12.9843 182.101C26.8962 167.109 40.9636 152.284 56.6165 136.022L12.9843 182.101ZM12.7192 182.273C25.8109 167.988 38.9761 153.839 56.4085 135.826L12.7192 182.273ZM12.7039 183.882C30.4222 165.673 47.7707 147.145 56.8197 137.267L12.7039 183.882ZM12.7355 184.009C27.7653 167.44 43.1412 151.339 56.9028 136.831L12.7355 184.009ZM12.4421 185.507C29.4547 167.567 46.3449 150.189 56.7677 138.6L12.4421 185.507ZM12.6692 184.998C24.8441 172.378 36.6006 159.886 56.7708 138.378L12.6692 184.998ZM13.0042 186.463C22.0301 176.3 31.5647 165.961 56.4973 139.858L13.0042 186.463ZM12.4367 186.915C23.9964 174.634 35.292 162.635 56.6992 140.1L12.4367 186.915ZM12.9151 188.517C30.6557 169.752 47.2534 151.32 56.5716 141.614L12.9151 188.517ZM12.4592 188.211C22.0642 178.208 31.4735 168.471 56.861 141.256L12.4592 188.211ZM12.8021 189.618C28.6517 172.432 45.4568 154.913 57.0001 143.332L12.8021 189.618ZM12.6942 189.627C26.3622 174.738 40.3381 160.007 56.5788 142.949L12.6942 189.627ZM12.6303 191.35C22.2815 179.802 32.5994 168.843 56.616 143.974L12.6303 191.35ZM12.721 190.987C27.1498 176.181 41.1813 161.108 56.7459 144.468L12.721 190.987ZM12.7649 192.569C26.4938 177.173 40.9556 162.052 57.0171 145.712L12.7649 192.569ZM12.4852 192.578C25.5907 178.652 38.5975 165.112 56.5398 146.029L12.4852 192.578ZM12.8722 193.89C23.7317 181.859 35.5717 170.232 56.9052 147.569L12.8722 193.89ZM12.7848 194.013C24.5702 182.016 36.1827 169.435 56.6834 147.434L12.7848 194.013ZM12.1367 195.972C30.0227 178.006 46.4772 159.901 56.8837 148.994L12.1367 195.972ZM12.6586 195.609C23.5431 183.935 34.5678 172.38 56.591 148.747L12.6586 195.609ZM12.3766 196.901C29.5753 178.551 47.2072 160.792 56.284 149.965L12.3766 196.901ZM12.8285 197.12C23.8903 184.876 34.9005 173.666 56.76 150.384L12.8285 197.12ZM12.3577 198.483C29.3196 181.466 45.5278 164.218 56.3147 151.975L12.3577 198.483ZM12.6324 198.602C24.279 186.229 35.8339 174.285 56.789 151.58L12.6324 198.602ZM12.6142 199.493C22.8543 189.07 32.3565 178.699 56.8687 152.848L12.6142 199.493ZM12.6607 199.659C27.3852 184.742 41.8589 169.536 56.4934 153.324L12.6607 199.659ZM12.2654 201.326C26.8242 185.505 41.2117 170.253 56.324 154.693L12.2654 201.326ZM12.5139 201.212C25.4307 187.393 38.9846 173.162 56.4408 154.895L12.5139 201.212ZM12.1632 202.792C28.0287 186.782 42.4974 170.976 56.7548 156.262L12.1632 202.792ZM12.5975 202.811C26.8054 187.718 40.7691 172.992 56.5662 156.273L12.5975 202.811ZM12.5538 204.087C23.9519 192.781 34.6647 180.829 56.9824 157.308L12.5538 204.087ZM12.7364 204.269C27.9948 187.764 43.4068 171.482 56.6737 157.652L12.7364 204.269ZM12.8467 205.727C29.6488 187.718 46.3974 169.36 56.9833 159.183L12.8467 205.727ZM12.6777 205.954C25.1732 192.43 37.6094 179.299 56.7645 158.87L12.6777 205.954ZM12.6629 206.83C27.2332 192.77 40.7271 177.874 56.8009 160.816L12.6629 206.83ZM12.8375 207.058C24.7677 194.496 36.7669 182.012 56.6823 160.612L12.8375 207.058ZM12.4195 208.831C29.4407 190.452 47.1376 172.36 56.7525 162.407L12.4195 208.831ZM12.6866 208.728C22.6457 197.756 32.7643 187.155 56.4394 161.901L12.6866 208.728ZM12.708 209.892C23.3943 198.925 34.2172 187.289 56.3587 163.599L12.708 209.892ZM12.7574 210.404C28.7437 193.458 44.3762 176.522 56.7207 163.488L12.7574 210.404ZM12.3762 211.577C22.7282 201.642 32.4305 190.946 57.0376 165.114L12.3762 211.577ZM12.6287 211.655C23.3642 201.14 33.464 190.088 56.6578 164.84L12.6287 211.655ZM12.905 212.766C30.7065 194.838 47.7552 176.332 56.8684 166.651L12.905 212.766ZM12.4758 213.042C29.2495 195.263 45.8872 177.578 56.8825 166.482L12.4758 213.042ZM12.3315 214.5C29.373 196.766 46.0354 179.343 56.6295 167.894L12.3315 214.5ZM12.7684 214.586C25.9817 200.028 39.708 185.485 56.4483 167.9L12.7684 214.586ZM12.9637 216.357C22.1811 205.926 31.6165 195.957 56.2346 169.496L12.9637 216.357ZM12.4497 215.996C25.8435 201.395 39.8423 186.679 56.7204 169.494L12.4497 215.996ZM12.7843 217.435C29.7033 199.962 46.3234 182.167 56.5959 170.86L12.7843 217.435ZM12.4087 217.458C26.5208 202.704 40.4471 187.901 56.6347 170.73L12.4087 217.458ZM12.3492 218.771C22.4496 208.965 31.0425 199.907 56.8655 172.168L12.3492 218.771ZM12.8344 218.952C24.0822 207.763 34.6531 195.928 56.5578 172.367L12.8344 218.952ZM12.8656 220.733C27.5266 204.284 42.4681 188.152 56.3313 173.44L12.8656 220.733ZM12.4635 220.537C25.1671 206.809 37.9146 193.102 56.9341 173.562L12.4635 220.537ZM13.2263 221.892C28.8288 204.358 45.8626 186.739 56.6763 175.146L13.2263 221.892ZM12.8498 221.607C24.3046 209.353 36.3858 196.976 56.6751 175.007L12.8498 221.607ZM13.781 222.011C25.5882 209.75 36.5609 198.589 56.3186 176.491L13.781 222.011ZM14.0822 221.745C26.1784 208.096 38.7855 195.132 56.4164 176.814L14.0822 221.745ZM15.3592 221.856C30.6112 205.174 45.3322 189.308 56.9155 178.242L15.3592 221.856ZM15.5611 221.696C30.5206 206.284 44.7162 191.175 56.5169 178.013L15.5611 221.696ZM16.507 221.737C28.4048 209.921 39.4688 197.572 56.7507 179.664L16.507 221.737ZM16.9704 221.693C31.1935 206.548 45.4689 191.693 56.5018 179.783L16.9704 221.693ZM18.4813 221.862C30.9015 208.658 43.2647 195.154 56.4842 181.155L18.4813 221.862ZM18.2248 221.808C29.8822 209.657 41.1371 197.215 56.8695 181.132L18.2248 221.808ZM19.749 222.012C29.503 211.396 39.6304 201.092 56.8516 182.847L19.749 222.012ZM19.5815 221.819C32.3546 208.179 45.2095 194.462 56.8001 182.693L19.5815 221.819ZM20.64 221.553C30.5855 211.973 39.7677 202.867 56.5275 184.036L20.64 221.553ZM21.1191 221.659C34.3769 206.931 48.4968 192.374 56.4214 183.944L21.1191 221.659ZM22.2287 221.495C29.1366 214.928 36.7592 207.624 56.8796 185.807L22.2287 221.495ZM22.2798 221.559C32.7436 211.221 42.547 200.235 56.7659 185.378L22.2798 221.559ZM23.8539 222.125C32.0597 212.92 39.7646 204.541 56.2261 187.278L23.8539 222.125ZM23.6909 221.735C33.6128 211.263 43.8651 200.569 56.6702 187.07L23.6909 221.735ZM25.6915 222.159C37.0361 209.141 49.1632 197.213 56.646 187.911L25.6915 222.159ZM25.034 221.492C33.9792 212.463 42.9805 202.851 56.6859 188.086L25.034 221.492ZM26.1262 221.523C34.5628 214.367 40.9506 206.171 56.9679 189.387L26.1262 221.523ZM26.4541 221.965C34.2017 213.094 41.9905 205.129 56.5744 190.075L26.4541 221.965ZM27.7269 221.836C35.0524 214.265 41.9469 207.517 56.8072 191.63L27.7269 221.836ZM28.1876 221.529C37.7281 211.647 47.491 201.488 56.4024 191.588L28.1876 221.529ZM29.4123 221.515C37.9172 213.543 45.6357 204.189 56.4155 192.366L29.4123 221.515ZM29.1298 221.962C35.572 215.282 41.7448 208.714 56.7785 192.628L29.1298 221.962ZM31.2912 221.938C38.3993 213.279 47.5988 204.05 57.0309 193.838L31.2912 221.938ZM31.0322 221.858C39.9743 212.672 48.3763 203.062 56.7342 194.148L31.0322 221.858ZM32.0717 221.61C38.1767 214.692 45.0162 208.467 57.0316 195.872L32.0717 221.61ZM31.877 221.846C40.1462 213.471 47.6002 205.418 56.5351 195.677L31.877 221.846ZM33.9008 221.367C40.9624 213.369 48.7129 205.331 56.4589 196.831L33.9008 221.367ZM33.7249 221.85C40.7374 213.741 48.3564 206.161 56.6056 197.227L33.7249 221.85ZM34.5584 221.427C43.1832 213.314 51.4028 204.572 56.8458 198.888L34.5584 221.427ZM35.0464 221.981C39.5136 216.895 43.7413 212.007 56.7141 198.548L35.0464 221.981ZM36.4698 221.784C41.3759 216.482 45.4406 211.585 57.0203 200.434L36.4698 221.784ZM36.4838 221.719C43.7409 213.504 51.0704 205.558 56.6079 200.185L36.4838 221.719ZM37.856 222.144C42.606 216.347 46.4103 211.564 56.251 201.296L37.856 222.144ZM37.8763 221.771C43.5806 215.345 49.8561 209.105 56.4296 201.716L37.8763 221.771ZM38.617 221.357C46.2156 214.522 52.4044 207.96 56.3086 202.84L38.617 221.357ZM39.3275 221.805C44.8713 215.956 50.2205 209.817 56.3093 203.289L39.3275 221.805ZM40.8702 222.163C43.7291 218.431 47.0151 214.743 57.1229 204.591L40.8702 222.163ZM40.3178 221.828C44.2189 217.998 47.8254 213.988 56.5925 204.397L40.3178 221.828ZM42.3162 221.971C47.5154 215.945 52.8955 209.791 56.0898 206.142L42.3162 221.971ZM41.8141 221.848C45.9288 217.857 49.6995 213.609 56.7652 206.266L41.8141 221.848ZM43.0361 221.445C46.8706 217.989 49.8977 214.796 56.9127 207.736L43.0361 221.445ZM43.2962 221.805C46.3562 218.094 49.7124 214.61 56.8709 207.373L43.2962 221.805ZM45.116 222.019C47.2323 218.784 50.4672 215.125 56.5813 209.239L45.116 222.019ZM44.8666 221.715C47.0854 218.476 50.1629 215.842 56.6231 209.149L44.8666 221.715ZM45.8835 221.984C48.3527 219.202 51.1 216.111 56.2985 210.711L45.8835 221.984ZM45.8418 221.599C49.0541 218.376 51.5979 215.446 56.8228 210.53L45.8418 221.599ZM46.7493 221.871C49.7569 219.396 52.4631 216.787 56.6156 211.443L46.7493 221.871ZM47.2121 221.816C50.2682 218.346 53.2726 215.427 56.7184 211.793L47.2121 221.816ZM48.3424 221.56C51.0712 218.384 53.9587 216.041 56.2188 213.303L48.3424 221.56ZM48.4805 221.594C51.3761 219.145 53.7982 216.269 56.8417 213.332L48.4805 221.594ZM50.3388 221.705C51.8334 219.786 53.5057 218.744 57.1192 215.067L50.3388 221.705ZM49.9771 221.662C52.3951 219.023 55.1302 216.561 56.5136 214.782L49.9771 221.662ZM51.4371 221.913C53.8771 219.47 55.7004 217.05 56.3251 216.679L51.4371 221.913ZM51.4081 221.934C52.6774 220.486 53.7714 219.709 56.8686 216.153L51.4081 221.934ZM52.5042 222.116C54.3759 220.089 54.9871 219.335 56.248 217.425L52.5042 222.116ZM52.7933 221.672C53.9039 220.628 54.8724 219.768 56.7953 217.918L52.7933 221.672ZM54.5263 221.584C54.4528 221.12 54.983 220.457 56.331 219.254L54.5263 221.584ZM54.2421 221.777C54.7095 221.274 55.3354 220.648 56.7714 219.268L54.2421 221.777ZM55.7132 221.843C55.9851 221.481 56.3705 220.952 56.6745 220.848L55.7132 221.843ZM55.636 221.777C55.8849 221.506 56.1922 221.104 56.5532 220.709L55.636 221.777ZM14.4401 221.661C13.7163 221.098 13.1919 220.707 12.661 220.284L14.4401 221.661ZM14.1566 221.561C13.8001 221.201 13.3686 220.835 12.5797 220.41L14.1566 221.561ZM15.6972 221.18C14.905 221.218 14.4611 220.437 12.283 218.675L15.6972 221.18ZM15.6461 221.57C14.5554 220.652 13.5368 219.992 12.542 219.172L15.6461 221.57ZM17.7948 221.647C16.717 220.839 15.3782 219.948 12.3999 218.093L17.7948 221.647ZM17.5532 221.456C15.7427 219.956 14.064 218.744 12.8208 217.8L17.5532 221.456ZM19.2604 221.734C16.5993 220.471 14.8512 218.397 12.9666 216.837L19.2604 221.734ZM19.0202 221.833C17.407 220.389 15.2982 218.861 12.546 216.491L19.0202 221.833ZM20.7766 221.597C17.7729 218.863 14.5436 216.304 12.7008 214.84L20.7766 221.597ZM20.4506 221.421C17.4638 219.236 14.6253 216.75 12.8385 215.082L20.4506 221.421ZM21.7343 221.366C18.855 219.418 15.7908 215.998 12.3619 213.587L21.7343 221.366ZM22.4468 221.619C20.088 219.884 18.4289 218.598 12.7415 213.727L22.4468 221.619ZM23.3613 221.795C21.8792 219.445 19.396 217.532 12.943 212.888L23.3613 221.795ZM23.5894 221.712C19.4976 217.901 15.063 214.323 12.8303 212.668L23.5894 221.712ZM24.9028 222.079C20.9616 218.282 17.0589 214.565 12.3524 211.461L24.9028 222.079ZM25.0998 221.498C22.5587 219.072 19.5721 216.798 12.2942 211.133L25.0998 221.498ZM26.7579 221.565C22.3394 217.602 17.3311 213.994 13.0672 210.528L26.7579 221.565ZM27.0751 221.783C22.739 217.862 18.2172 214.452 12.5558 209.961L27.0751 221.783ZM28.8044 221.591C22.3346 216.694 16.883 212.118 12.5566 208.626L28.8044 221.591ZM28.5158 221.403C22.8694 217.099 17.4177 212.65 12.7874 208.568L28.5158 221.403ZM30.289 222.035C25.7768 217.467 20.9628 214.064 13.0219 207.125L30.289 222.035ZM30.2228 221.705C23.4942 216.389 16.7241 210.633 12.4879 207.575L30.2228 221.705ZM31.3993 221.582C25.5375 216.77 18.2424 211.607 12.8623 206.005L31.3993 221.582ZM31.8146 221.509C24.1973 215.464 16.3606 209.481 12.736 206.254L31.8146 221.509ZM33.0939 221.793C29.0259 217.869 23.9897 214.199 12.2426 204.561L33.0939 221.793ZM33.521 221.42C26.8268 216.072 19.9924 210.767 12.5086 205.161L33.521 221.42ZM34.5035 221.599C29.608 217.494 23.7234 212.719 12.9043 203.916L34.5035 221.599ZM34.7655 221.672C28.824 216.498 22.0908 211.313 12.5416 203.576L34.7655 221.672ZM35.9484 221.545C28.2989 215.63 20.8442 209.422 12.2588 202.91L35.9484 221.545ZM36.54 221.802C27.0925 214.041 17.4927 206.786 12.6915 202.617L36.54 221.802ZM38.3077 221.787C30.1486 215.255 22.3036 208.892 12.5864 201.584L38.3077 221.787ZM38.3034 221.519C29.0787 214.608 20.4058 207.364 12.6668 201.243L38.3034 221.519ZM39.8971 221.87C31.4988 215.294 23.1414 209.005 13.0436 199.95L39.8971 221.87ZM39.4326 221.683C31.4189 215.14 23.6553 208.906 12.5192 199.844L39.4326 221.683ZM40.9936 221.438C33.4534 214.601 24.9908 208.759 12.7999 198.746L40.9936 221.438ZM41.2767 221.635C29.759 212.576 18.7667 203.691 12.5284 198.807L41.2767 221.635ZM42.7998 221.935C33.6811 215.041 25.4064 207.635 12.4922 197.422L42.7998 221.935ZM42.8707 221.619C34.6448 215.049 25.6585 208.112 12.7092 197.469L42.8707 221.619ZM44.7263 221.719C34.2517 213.602 24.1319 205.508 13.0712 196.464L44.7263 221.719ZM44.6144 221.73C36.5389 215.572 28.1623 209.264 12.5785 196.189L44.6144 221.73ZM46.367 221.266C36.7255 214.401 26.3398 205.778 12.1586 194.773L46.367 221.266ZM45.9534 221.578C36.6317 213.973 26.907 206.581 12.3448 194.68L45.9534 221.578ZM48.0285 221.509C35.6279 212.09 22.8751 202.025 12.2217 193.737L48.0285 221.509ZM47.6118 221.516C38.6629 214.471 30.3211 207.05 12.6166 193.428L47.6118 221.516ZM49.5177 221.179C39.1463 213.539 30.1968 205.447 12.5619 192.526L49.5177 221.179ZM49.2141 221.644C36.0632 211.351 23.0703 200.954 12.7871 192.349L49.2141 221.644ZM50.6708 221.878C40.8755 214.175 30.921 205.61 12.2739 191.204L50.6708 221.878ZM50.9958 221.59C38.7614 212.07 26.691 202.478 12.8284 191.248L50.9958 221.59ZM52.2906 221.724C42.2103 213.199 30.9126 204.626 12.6554 189.855L52.2906 221.724ZM52.5079 221.619C43.7647 214.483 35.1802 207.552 12.705 189.891L52.5079 221.619ZM54.3965 222.04C39.924 210.474 26.5731 199.674 12.8833 188.851L54.3965 222.04ZM53.8143 221.603C42.1605 212.282 30.834 203.196 12.6772 188.568L53.8143 221.603ZM55.4935 221.463C42.9094 211.172 30.5373 201.728 12.4921 187.091L55.4935 221.463ZM55.5594 221.464C41.4841 210.252 26.7491 198.712 12.5818 187.064L55.5594 221.464ZM57.1297 221.637C39.9586 208.381 22.8263 194.892 12.9909 185.782L57.1297 221.637ZM56.9398 221.133C40.7331 207.773 24.3082 194.882 12.7244 186.12L56.9398 221.133ZM56.2531 219.978C45.4047 211.003 34.4326 201.84 12.5548 184.955L56.2531 219.978ZM56.6386 219.861C46.7541 211.895 37.1754 204.076 12.7232 184.434L56.6386 219.861ZM57.118 219.028C46.2413 209.643 34.7417 200.54 12.4122 183.052L57.118 219.028ZM56.6838 218.889C42.4443 207.418 28.177 196.006 12.8184 183.378L56.6838 218.889ZM56.9794 217.621C47.2368 209.851 38.6757 202.391 12.4151 181.795L56.9794 217.621ZM56.5794 217.384C40.5118 205.084 24.6237 192.178 12.7113 181.93L56.5794 217.384ZM56.7676 215.929C43.1652 205.163 30.1694 194.96 12.909 180.763L56.7676 215.929ZM56.921 216.229C44.9445 206.758 33.0076 197.243 12.4317 180.978L56.921 216.229ZM56.2194 214.958C44.0488 204.614 31.8908 194.602 12.1069 179.788L56.2194 214.958ZM56.6653 214.831C45.2403 205.018 33.7039 195.649 12.5215 179.494L56.6653 214.831ZM57.0927 214.024C42.4364 202.236 27.7022 190.904 12.4435 178.5L57.0927 214.024ZM56.9121 213.548C45.6492 205.242 35.263 196.768 12.6595 178.422L56.9121 213.548ZM56.5043 211.911C47.7452 204.957 37.8919 197.206 12.5672 177.068L56.5043 211.911ZM56.828 212.156C47.2527 204.508 37.9825 197.135 12.7426 176.861L56.828 212.156ZM56.4233 210.959C46.7649 202.923 36.6536 195.045 12.797 175.741L56.4233 210.959ZM56.5312 211.034C44.3471 201.375 32.0287 191.238 12.4069 175.528L56.5312 211.034ZM57.2048 210.106C40.9457 197.245 24.8141 184.467 12.4973 174.763L57.2048 210.106ZM56.8003 209.786C42.85 198.594 28.5045 187.437 12.5582 174.188L56.8003 209.786ZM57.133 208.196C41.2985 196.118 26.2945 184.475 12.8428 173.093L57.133 208.196ZM56.4898 208.468C42.1213 197.221 27.9303 185.9 12.6501 173.046L56.4898 208.468ZM56.8864 207.689C44.1639 196.784 31.5345 186.703 12.3999 171.619L56.8864 207.689ZM56.898 207.368C44.5596 197.51 32.6187 187.624 12.6622 171.836L56.898 207.368ZM57.1173 205.643C41.9418 194.143 27.1521 183.002 12.5822 170.227L57.1173 205.643ZM56.7669 205.837C43.0871 194.853 29.3235 183.786 12.6234 170.798L56.7669 205.837ZM56.7269 204.827C46.9259 196.496 35.84 188.105 12.5323 169.527L56.7269 204.827ZM56.7353 204.921C39.5046 190.422 21.7052 176.086 12.5411 169.506L56.7353 204.921ZM56.5214 203.717C44.7674 194.368 32.824 184.731 12.6964 167.946L56.5214 203.717ZM56.8338 203.55C44.2858 193.406 31.5729 183.361 12.7354 167.888L56.8338 203.55ZM56.5947 201.827C38.7976 188.404 21.8232 174.71 12.5695 166.694L56.5947 201.827ZM56.9022 202C40.3967 188.44 23.5987 175.096 12.5993 167.045L56.9022 202ZM56.3943 200.45C40.6777 187.79 25.1748 174.882 12.3038 165.285L56.3943 200.45ZM56.7745 200.98C43.5756 190.5 30.4553 180.176 12.5499 165.384L56.7745 200.98ZM56.5896 199.719C45.218 190.164 34.2379 181.725 12.3346 163.969L56.5896 199.719ZM56.6965 199.714C41.7642 187.882 26.964 175.773 12.8766 164.363L56.6965 199.714ZM56.4466 198.522C45.9628 189.68 35.7529 181.889 12.9968 163.241L56.4466 198.522ZM56.6138 198.334C44.5397 188.426 32.3724 179.072 12.3562 162.81L56.6138 198.334ZM56.5937 197.353C44.8574 187.8 33.2562 177.647 12.358 162.136L56.5937 197.353ZM56.5897 197.21C41.0226 183.753 24.6496 171.145 12.483 161.84L56.5897 197.21ZM56.396 195.745C45.7132 187.155 35.4813 178.181 13.0107 160.218L56.396 195.745ZM56.5411 195.615C40.3082 182.288 24.0504 169.232 12.496 160.416L56.5411 195.615ZM56.7208 194.295C41.4875 181.768 25.3467 170.02 12.7288 159.183L56.7208 194.295ZM56.6572 194.363C39.5095 180.845 22.3247 167.103 12.7117 159.026L56.6572 194.363ZM56.4155 192.923C40.9305 180.276 24.8798 167.615 12.1576 158.232L56.4155 192.923ZM56.6863 193.24C45.8684 184.474 35.2617 175.88 12.691 157.729L56.6863 193.24ZM56.867 192.071C47.1027 184.562 37.6556 176.708 12.646 156.502L56.867 192.071ZM56.8029 191.982C42.6112 180.996 29.2633 169.845 12.778 156.514L56.8029 191.982ZM56.6852 190.96C43.9459 180.428 31.3535 170.39 12.2752 155.054L56.6852 190.96ZM56.4467 190.599C42.1508 178.977 27.3941 167.411 12.7153 155.42L56.4467 190.599ZM57.16 189.616C47.453 181.835 38.4808 174.243 12.6612 154.343L57.16 189.616ZM56.5346 189.534C45.7459 180.58 34.6909 171.525 12.7346 154.069L56.5346 189.534ZM56.9439 187.957C42.0289 176.028 26.8465 164.385 12.2926 152.894L56.9439 187.957ZM56.5058 187.911C39.4145 174.687 22.0666 160.868 12.6199 152.61L56.5058 187.911ZM56.613 186.993C43.7721 176.122 30.1847 165.53 12.4359 151.397L56.613 186.993ZM56.534 187.006C43.0808 175.814 29.2773 164.923 12.7988 151.667L56.534 187.006ZM56.9372 185.426C41.0392 172.543 25.3692 160.759 12.2673 150.545L56.9372 185.426ZM56.8148 185.603C40.34 172.764 24.0974 159.581 12.5084 149.975L56.8148 185.603ZM56.2646 184.159C43.626 174.006 30.4054 163.025 12.9842 149.348L56.2646 184.159ZM56.6383 184.287C46.8219 176.274 37.2046 168.388 12.6801 148.876L56.6383 184.287ZM57.0624 183.061C47.4836 175.013 37.5882 167.931 12.9358 147.929L57.0624 183.061ZM57.013 183.026C42.2483 171.79 27.6182 160.143 12.3129 147.471L57.013 183.026ZM56.9363 181.371C47.8607 174.175 38.6027 167.029 12.636 146.668L56.9363 181.371ZM56.5131 181.784C44.1094 171.987 31.5913 161.948 12.701 146.297L56.5131 181.784ZM57.1349 180.182C43.0273 169.674 29.7237 158.966 12.5778 144.86L57.1349 180.182ZM56.7644 180.506C42.8319 169.214 28.7173 157.6 12.4653 144.953L56.7644 180.506ZM56.9895 178.78C44.2265 169.366 32.4498 159.944 12.8681 143.993L56.9895 178.78ZM56.7735 178.977C46.3032 170.767 36.3082 162.287 12.6759 143.71L56.7735 178.977ZM57.1188 177.92C45.8588 169.295 35.8318 161.103 13.0364 142.438L57.1188 177.92ZM56.7095 178.017C43.5846 166.984 30.2537 156.414 12.5274 142.54L56.7095 178.017ZM56.3626 176.837C41.1019 164.801 26.1379 151.946 12.4729 141.231L56.3626 176.837ZM56.5174 176.695C40.3563 163.387 23.9249 149.865 12.5839 141.105L56.5174 176.695ZM56.7863 175.69C40.6517 162.752 24.1363 149.69 13.1068 140.354L56.7863 175.69ZM56.5617 175.59C47.1117 167.626 37.0188 159.306 12.8679 140.193L56.5617 175.59ZM57.0193 174.231C41.9271 162.238 27.2526 149.838 12.4925 138.799L57.0193 174.231ZM56.6892 174.01C46.2584 165.481 34.9483 156.763 12.7932 138.888L56.6892 174.01ZM56.367 172.592C46.614 164.767 36.095 156.218 12.8544 137.424L56.367 172.592ZM56.8714 172.841C41.0257 159.774 24.4712 146.973 12.48 137.624L56.8714 172.841ZM56.2209 171.609C41.8667 159.423 27.2329 147.178 12.1821 136.383L56.2209 171.609ZM56.7162 171.344C41.0615 159.247 25.5589 146.652 12.4909 136.021L56.7162 171.344ZM56.9948 170.302C42.1544 158.593 27.8487 146.624 12.5749 134.831L56.9948 170.302ZM56.5589 170.425C40.402 157.326 23.8313 143.953 12.6517 135.272L56.5589 170.425ZM56.8456 168.674C44.3127 158.617 31.6811 148.847 14.1091 134.927L56.8456 168.674ZM56.5243 169.018C46.1682 160.344 35.5563 152.127 14.5674 135.113L56.5243 169.018ZM56.6661 167.698C41.2382 155.157 26.0796 143.813 15.7977 135.298L56.6661 167.698ZM56.7288 167.76C47.7565 160.499 38.7707 153.168 16.1675 134.902L56.7288 167.76ZM57.1213 166.265C43.2565 154.804 29.2853 144.541 18.198 134.9L57.1213 166.265ZM56.7951 166.185C48.0783 159.231 39.1615 152.493 17.5012 135.121L56.7951 166.185ZM57.0259 165.45C42.1352 153.154 27.9134 142.222 18.7497 135.194L57.0259 165.45ZM56.8751 165.317C46.6515 157.192 37.0211 149.526 19.2515 134.835L56.8751 165.317ZM57.1258 163.442C45.5893 154.849 34.8225 146.331 20.4571 135.474L57.1258 163.442ZM56.8497 163.652C47.8173 156.57 39.1638 149.548 20.7578 135.112L56.8497 163.652ZM56.3571 162.983C49.7089 156.489 42.1982 150.666 22.5835 135.367L56.3571 162.983ZM56.8153 162.682C44.0099 152.278 31.213 141.727 22.4163 135.303L56.8153 162.682ZM56.8628 161.367C45.3255 151.655 33.4881 142.298 24.1644 134.776L56.8628 161.367ZM56.7693 161.452C49.9204 156.203 42.7602 150.817 24.162 135.327L56.7693 161.452ZM57.0423 159.803C49.2044 154.079 40.5529 147.029 25.9836 135.247L57.0423 159.803ZM56.5794 160.153C50.2314 154.704 43.4121 149.64 25.7585 135.347L56.5794 160.153ZM56.5784 159.192C46.7764 150.591 36.6121 142.744 26.9298 135.411L56.5784 159.192ZM56.715 158.53C48.8833 152.401 40.7271 146.24 26.9438 135.059L56.715 158.53ZM56.7891 157.946C47.8831 150.384 38.5155 143.736 29.0427 135.068L56.7891 157.946ZM56.6523 157.547C46.6576 149.351 36.5111 141.222 28.7031 135.112L56.6523 157.547ZM56.2662 156.422C49.7439 150.401 42.3002 144.557 30.7405 135.443L56.2662 156.422ZM56.6484 156.358C47.5325 148.856 38.8066 141.945 30.2862 134.963L56.6484 156.358ZM56.4427 154.746C49.0015 148.836 41.734 143.102 31.9252 134.778L56.4427 154.746ZM56.6677 154.928C46.9658 147.181 36.7105 139.324 32.1038 134.947L56.6677 154.928ZM56.3853 153.552C50.5248 148.227 43.3035 142.95 33.3506 134.982L56.3853 153.552ZM56.7888 153.567C48.0935 146.551 39.1258 139.609 33.6695 135.226L56.7888 153.567ZM56.3347 151.981C48.5951 145.828 40.5172 139.868 34.5434 134.678L56.3347 151.981ZM56.7112 152.362C48.5505 145.913 40.9316 139.437 35.0502 134.845L56.7112 152.362ZM56.552 150.959C52.3091 147.3 47.2281 144.385 36.242 134.723L56.552 150.959ZM56.5656 151.322C50.8151 146.39 44.3972 141.404 36.8345 135.311L56.5656 151.322ZM56.805 149.618C53.1433 146.356 49.2233 143.339 38.3179 135.099L56.805 149.618ZM56.5386 149.678C49.7953 144.463 42.962 138.899 38.4543 135.322L56.5386 149.678ZM57.2417 148.403C52.6538 145.009 48.3034 141.678 40.1866 134.836L57.2417 148.403ZM56.5811 148.741C52.434 145.108 47.7863 141.65 39.7771 135.005L56.5811 148.741ZM56.6369 147.255C52.3078 143.46 48.2644 140.467 41.7404 135.29L56.6369 147.255ZM56.8794 147.192C51.3337 142.88 45.8958 138.332 41.3951 135.101L56.8794 147.192ZM56.3945 145.838C52.8829 143.61 49.2919 140.625 42.8349 134.64L56.3945 145.838ZM56.5199 145.869C51.1347 142.013 46.3003 137.429 43.2066 134.822L56.5199 145.869ZM56.7082 144.604C53.3793 142.711 50.344 139.802 44.1619 134.845L56.7082 144.604ZM56.5684 144.981C52.3723 141.266 48.2947 138.206 44.6461 135.187L56.5684 144.981ZM56.3915 143.093C53.6211 141.556 50.2714 138.231 46.7364 135.171L56.3915 143.093ZM56.6489 143.598C54.367 141.416 52.0922 139.456 46.395 134.956L56.6489 143.598ZM56.34 141.968C54.3878 140.1 51.3866 138.001 47.6131 135.478L56.34 141.968ZM56.4575 142.164C53.3177 139.64 49.8405 136.82 48.0628 135.106L56.4575 142.164ZM57.2752 141.311C55.1831 139.526 52.7781 137.771 49.6859 135.176L57.2752 141.311ZM56.5141 141.02C54.4981 139.319 52.2669 137.428 49.2585 135.373L56.5141 141.02ZM56.9479 139.766C55.1886 138.278 53.619 137.482 51.2645 134.928L56.9479 139.766ZM56.5468 139.549C54.7214 138.062 52.6207 136.51 51.0404 135.231L56.5468 139.549ZM56.2275 138.619C55.6351 137.836 54.2461 136.182 52.6848 135.434L56.2275 138.619ZM56.7655 138.552C55.9208 137.531 55.2115 137.222 52.7562 135.071L56.7655 138.552ZM56.4404 137.081C56.1742 136.675 55.5449 135.732 54.2513 135.247L56.4404 137.081ZM56.7179 137.02C56.2266 136.624 55.6907 136.201 54.4344 135.226L56.7179 137.02ZM56.6624 135.762C56.3588 135.629 56.2236 135.455 55.6908 135.003L56.6624 135.762Z M12.7276 221.584C12.4361 192.908 12.2952 164.099 12.5453 135.549M13.0773 135.552C26.6689 135.33 41.182 135.882 56.4428 135.744L13.0773 135.552ZM12.5977 135.168C23.9348 135.003 34.9571 135.023 56.5793 135.516L12.5977 135.168ZM56.1624 135.318C57.0535 165.155 56.6355 194.242 56.218 221.374L56.1624 135.318ZM56.3482 135.327C56.5387 166.315 56.7032 197.406 56.5414 221.576L56.3482 135.327ZM56.0494 222.024C40.889 221.51 26.0151 221.051 12.6812 221.232L56.0494 222.024ZM56.1374 221.691C40.7551 221.82 25.5179 221.776 12.856 221.779L56.1374 221.691ZM12.7387 221.857C12.4329 200.555 12.3433 179.5 12.5428 135.581L12.7387 221.857Z";

  var textModel = 'M28.9104 169.312C28.8304 169.312 28.7664 169.272 28.7184 169.192C28.6704 169.112 28.6464 168.996 28.6464 168.844L28.6344 167.068C28.6264 166.916 28.6224 166.664 28.6224 166.312C28.6064 165.568 28.5984 164.728 28.5984 163.792V163.18C28.5264 163.564 28.4024 164.104 28.2264 164.8C28.0504 165.52 27.9264 166.112 27.8544 166.576V166.648L27.8184 166.876C27.8024 167.052 27.7624 167.232 27.6984 167.416C27.6184 167.608 27.4944 167.704 27.3264 167.704C27.0384 167.704 26.8944 167.328 26.8944 166.576C26.8944 166.16 26.8504 165.716 26.7624 165.244C26.6824 164.764 26.5504 164.176 26.3664 163.48L26.0064 162.136L25.9824 163.576C25.9824 164.008 26.0024 164.832 26.0424 166.048L26.0664 166.864L26.0904 168.508C26.0904 168.676 26.0304 168.828 25.9104 168.964C25.7104 168.964 25.5704 168.904 25.4904 168.784C25.4184 168.656 25.3824 168.472 25.3824 168.232L25.4064 167.248C25.4304 166.816 25.4424 166.492 25.4424 166.276L25.4184 163.96L25.3944 161.632C25.3944 161.288 25.4024 160.772 25.4184 160.084L25.7424 159.892C25.8064 159.9 25.8704 159.948 25.9344 160.036C25.9984 160.116 26.0704 160.248 26.1504 160.432C26.3504 160.928 26.6104 161.92 26.9304 163.408C26.9784 163.616 27.0104 163.788 27.0264 163.924C27.1224 164.388 27.1904 164.74 27.2304 164.98L27.4104 165.904L27.4944 165.508L27.7224 164.524C27.8504 163.948 27.9544 163.444 28.0344 163.012C28.1224 162.58 28.2064 162.112 28.2864 161.608C28.3744 161.008 28.4304 160.508 28.4544 160.108V160.036C28.4704 159.932 28.5184 159.852 28.5984 159.796C28.6784 159.732 28.7744 159.7 28.8864 159.7C28.9584 159.7 29.0224 159.732 29.0784 159.796C29.1344 159.86 29.1624 159.928 29.1624 160C29.1624 160.96 29.1984 162.396 29.2704 164.308C29.3104 165.244 29.3384 166.16 29.3544 167.056C29.3704 167.464 29.3784 167.98 29.3784 168.604C29.3784 168.788 29.3304 168.952 29.2344 169.096C29.1384 169.24 29.0304 169.312 28.9104 169.312ZM32.3079 169.228C32.0999 169.228 31.9079 169.16 31.7319 169.024C31.5559 168.896 31.4119 168.72 31.2999 168.496C31.0679 168.008 30.9239 167.476 30.8679 166.9C30.7959 166.356 30.7599 165.832 30.7599 165.328C30.7599 165.232 30.7639 165.152 30.7719 165.088V164.872C30.7719 164.832 30.7679 164.812 30.7599 164.812V164.596L30.7719 163.756C30.7799 163.5 30.8119 163.092 30.8679 162.532C30.9079 162.148 30.9999 161.776 31.1439 161.416C31.1999 161.256 31.2719 161.136 31.3599 161.056C31.4479 160.968 31.5479 160.924 31.6599 160.924C31.9799 160.924 32.2679 160.984 32.5239 161.104C32.7799 161.216 32.9959 161.376 33.1719 161.584C33.3319 161.784 33.4679 162.032 33.5799 162.328C33.6919 162.616 33.7719 162.924 33.8199 163.252C33.8679 163.588 33.8919 163.944 33.8919 164.32V164.416C33.8919 164.664 33.8959 164.888 33.9039 165.088L33.9159 165.772C33.9159 168.076 33.3799 169.228 32.3079 169.228ZM32.2599 168.724C32.4039 168.724 32.5359 168.668 32.6559 168.556C32.7759 168.436 32.8679 168.276 32.9319 168.076C33.0839 167.668 33.1759 167.228 33.2079 166.756C33.2479 166.348 33.2679 165.996 33.2679 165.7C33.2679 165.34 33.2399 164.868 33.1839 164.284C33.1359 163.668 33.1119 163.208 33.1119 162.904V162.688C33.0959 162.384 32.9919 162.12 32.7999 161.896C32.6159 161.672 32.3879 161.56 32.1159 161.56C31.8439 161.56 31.6639 161.716 31.5759 162.028C31.4959 162.276 31.4559 162.596 31.4559 162.988C31.4559 163.14 31.4599 163.268 31.4679 163.372V163.696L31.4439 164.248C31.4279 164.416 31.4199 164.6 31.4199 164.8C31.4199 165.232 31.4319 165.66 31.4559 166.084C31.4879 166.684 31.5679 167.268 31.6959 167.836C31.8239 168.428 32.0119 168.724 32.2599 168.724ZM35.6121 169.072C35.4041 169.072 35.3001 168.548 35.3001 167.5L35.3241 165.604C35.3321 165.044 35.3361 164.416 35.3361 163.72C35.3361 163.464 35.3121 163.068 35.2641 162.532C35.2241 161.948 35.2041 161.592 35.2041 161.464C35.2041 161.36 35.2481 161.268 35.3361 161.188C35.4241 161.108 35.5201 161.068 35.6241 161.068C35.9041 161.068 36.1721 161.132 36.4281 161.26C36.6921 161.38 36.9241 161.552 37.1241 161.776C37.5481 162.264 37.8281 162.8 37.9641 163.384C38.0361 163.68 38.0721 163.972 38.0721 164.26C38.0721 164.364 38.0681 164.46 38.0601 164.548L38.0481 164.872V165.532C38.0481 166.044 38.0321 166.448 38.0001 166.744C37.9521 167.144 37.8601 167.5 37.7241 167.812C37.5641 168.148 37.3321 168.448 37.0281 168.712C36.8841 168.832 36.7001 168.952 36.4761 169.072H35.6121ZM36.1401 168.46C36.3001 168.46 36.4481 168.42 36.5841 168.34C36.7201 168.252 36.8361 168.136 36.9321 167.992C37.0121 167.864 37.0841 167.704 37.1481 167.512C37.2201 167.312 37.2721 167.12 37.3041 166.936C37.3761 166.576 37.4201 166.208 37.4361 165.832C37.4441 165.736 37.4481 165.596 37.4481 165.412C37.4481 162.996 36.9801 161.736 36.0441 161.632C35.9881 161.992 35.9601 162.408 35.9601 162.88C35.9601 163.384 35.9921 164.264 36.0561 165.52C36.1121 166.632 36.1401 167.516 36.1401 168.172V168.46ZM39.9285 169.156C39.8245 169.156 39.7285 169.12 39.6405 169.048C39.5605 168.976 39.5165 168.888 39.5085 168.784V168.472V168.232C39.5005 168.16 39.4965 168.076 39.4965 167.98C39.4965 167.812 39.4845 167.556 39.4605 167.212L39.4365 166.444C39.4365 166.052 39.4485 165.468 39.4725 164.692C39.5045 163.996 39.5205 163.412 39.5205 162.94C39.5205 162.828 39.5085 162.66 39.4845 162.436C39.4605 162.204 39.4485 162.036 39.4485 161.932C39.4485 161.364 39.6165 161.08 39.9525 161.08C40.2165 161.08 40.5205 161.132 40.8645 161.236C41.2165 161.34 41.3925 161.464 41.3925 161.608C41.3925 161.688 41.3565 161.764 41.2845 161.836C41.2205 161.9 41.1405 161.952 41.0445 161.992C40.7085 161.872 40.4045 161.792 40.1325 161.752C40.1405 161.872 40.1445 162.044 40.1445 162.268C40.1445 162.588 40.1405 162.876 40.1325 163.132C40.1085 163.516 40.0965 163.804 40.0965 163.996L40.1325 164.188L40.3245 164.176C40.3885 164.168 40.4685 164.164 40.5645 164.164C40.9485 164.164 41.1405 164.276 41.1405 164.5C41.1405 164.588 41.1045 164.664 41.0325 164.728C40.9605 164.784 40.8685 164.812 40.7565 164.812C40.6125 164.812 40.5005 164.804 40.4205 164.788H40.1205C40.1365 164.996 40.1445 165.3 40.1445 165.7C40.1445 166.1 40.1405 166.46 40.1325 166.78C40.1085 167.268 40.0965 167.632 40.0965 167.872C40.0965 168.32 40.1045 168.544 40.1205 168.544L40.5165 168.532C40.6525 168.524 40.8165 168.52 41.0085 168.52C41.3125 168.52 41.4645 168.616 41.4645 168.808C41.4645 168.92 41.4125 169.004 41.3085 169.06C41.2125 169.124 41.0925 169.156 40.9485 169.156H39.9285ZM44.6347 169.192C44.3467 169.096 43.9907 169.048 43.5667 169.048C43.4387 169.128 43.3027 169.168 43.1587 169.168C43.0627 169.168 42.9787 169.124 42.9067 169.036C42.8427 168.956 42.8107 168.868 42.8107 168.772C42.8107 168.1 42.8387 167.204 42.8947 166.084C42.9427 164.892 42.9667 164 42.9667 163.408V163.324C42.9187 162.82 42.8947 162.444 42.8947 162.196C42.8947 161.436 43.0347 161.056 43.3147 161.056C43.3947 161.056 43.4627 161.088 43.5187 161.152C43.5827 161.208 43.6147 161.276 43.6147 161.356C43.6147 161.452 43.6027 161.604 43.5787 161.812C43.5547 162.012 43.5427 162.164 43.5427 162.268C43.5427 162.804 43.5467 163.288 43.5547 163.72C43.5627 164.144 43.5667 164.624 43.5667 165.16C43.5267 165.28 43.5067 165.448 43.5067 165.664V165.808L43.4827 166.756C43.4667 167.036 43.4587 167.356 43.4587 167.716C43.4587 168.268 43.5907 168.544 43.8547 168.544C43.8707 168.544 43.8947 168.544 43.9267 168.544C43.9667 168.536 44.0187 168.532 44.0827 168.532C44.1547 168.524 44.2467 168.52 44.3587 168.52C44.7907 168.52 45.0067 168.64 45.0067 168.88C45.0067 168.96 44.9707 169.028 44.8987 169.084C44.8267 169.14 44.7387 169.176 44.6347 169.192Z';

  var animalBird = 'M37.6519 26.2894C38.8436 25.1327 40.3267 24.1973 41.5896 23.1869C42.2593 22.6511 42.9782 21.8821 43.6182 21.2777C44.411 20.5289 45.5664 20.3325 46.3627 19.7132C47.1694 19.0857 48.3436 18.3692 49.2928 17.9895C50.1863 17.6322 50.9405 16.9096 51.8517 16.5046C52.9802 16.0031 54.2097 15.6769 55.3122 15.1257C56.322 14.6208 57.5181 14.1533 58.6136 13.8794C60.0594 13.518 61.4989 12.5807 62.8298 11.8641C64.6242 10.8979 67.0029 9.96393 69.0215 9.59691C71.2919 9.1841 73.4569 8.39038 75.8364 8.39038C76.0755 8.39038 78.6524 8.52411 77.6263 9.34499C76.9227 9.90782 76.8712 11.1539 76.3667 11.7846C76.2379 11.9456 76.075 12.8255 76.075 13.0441C76.075 13.6787 77.3012 13.4021 77.7456 13.4021C79.4364 13.4021 80.7698 13.5723 82.3861 13.8661C84.2399 14.2032 86.0489 14.6771 87.8884 15.0859C90.3039 15.6227 86.8741 19.6004 87.2917 19.7397C88.3148 20.0807 90.1869 19.9005 91.1234 20.681C91.3893 20.9025 92.187 21.0193 92.5421 21.039C92.9596 21.0622 93.5742 21.6081 93.974 21.808C95.8161 22.729 95.8832 24.5478 95.8832 26.4087C95.8832 27.134 96.0973 28.8888 96.8909 29.2062C97.8163 29.5764 98.7618 30.9499 98.9725 31.8977C99.4837 34.1984 98.5464 36.7629 99.7547 38.938C100.546 40.3616 101.611 42.3036 101.611 43.9497C101.611 45.8051 100.693 47.5399 100.285 49.3459C99.8502 51.2719 99.508 53.1173 99.2111 55.0471C98.7619 57.967 98.6046 61.9467 96.7318 64.3546C96.2933 64.9183 95.8832 66.6011 95.8832 67.3377C95.8832 67.7773 95.414 69.0028 95.6579 68.6371C95.9872 68.143 98.313 69.8809 98.7603 70.0822C100.698 70.9542 102.682 71.1562 104.766 71.1562C106.621 71.1562 108.182 70.333 109.951 69.8568C111.856 69.3438 113.731 68.5033 115.691 68.0007C117.935 67.4254 119.749 66.0374 121.843 65.1899C124.779 64.0015 127.649 62.326 130.727 62.326C131.332 62.326 131.433 62.3679 131.071 62.9359C130.504 63.8268 130.312 64.9368 129.997 65.9323C129.319 68.0795 128.127 70.2991 127.876 72.5616C127.817 73.0972 127.412 73.5245 127.916 73.8874C128.395 74.2327 128.885 74.5742 129.348 74.9216C130.635 75.8869 133.526 75.6193 134.916 75.1072C135.596 74.8568 138.833 73.8798 139.504 74.5504C139.969 75.0153 138.753 78.0164 138.549 78.6075C138.31 79.3024 138.08 80.3019 137.767 80.9277C137.462 81.5369 137.625 82.3658 137.29 82.9695C136.751 83.9392 139.935 83.8048 140.644 83.8048C142.31 83.8048 143.976 83.8048 145.642 83.8048C147.006 83.8048 149.042 83.7706 148.029 85.5947C147.573 86.4158 147.437 87.3273 147.247 88.2332C147.166 88.6172 146.772 90.6751 147.008 90.9114C147.387 91.2898 149.752 91.2543 150.27 91.3224C151.708 91.5117 153.274 91.919 154.711 91.919C157.91 91.919 151.986 102.222 151.675 103.56C150.842 107.141 148.422 110.373 146.968 113.716C146.396 115.032 145.468 116.161 144.515 117.216C143.295 118.569 141.762 119.307 140.458 120.61C139.121 121.948 138.012 123.508 136.68 124.84C135.609 125.91 134.452 126.882 133.378 127.956C130.623 130.711 127.15 132.497 124.124 134.89C122.551 136.134 120.882 137.016 119.059 137.82C116.607 138.902 113.92 139.53 111.502 140.604C110.334 141.123 108.825 141.496 107.577 141.784C105.293 142.311 103.094 143.222 100.815 143.813C98.4074 144.437 95.3397 144.661 92.8338 144.661C91.6792 144.661 89.7234 144.639 88.7237 145.139 M83.4729 134.399C83.4729 138.147 84.2728 141.785 85.1965 145.377C85.667 147.207 86.3475 149.173 86.5621 151.105C86.6774 152.142 87.0045 153.144 87.2781 154.101C87.8157 155.983 87.1091 158.369 87.3974 160.333C87.8449 163.381 88.246 166.143 88.246 169.229C88.246 171.795 88.7233 174.236 88.7233 176.747C88.7233 177.673 89.5479 179.927 88.6702 180.645C87.0543 181.967 84.8793 183.217 82.9956 184.158C81.4143 184.949 80.4191 186.64 78.9385 187.38 M89.2008 179.982C89.2008 182.239 89.4778 184.484 88.7234 186.558C88.1976 188.004 86.8246 189.02 86.3369 190.483 M88.7236 181.891C92.5897 181.891 95.0667 183.888 97.0765 186.903 M90.3942 145.616C89.36 145.616 88.3259 145.616 87.2917 145.616C86.9749 145.616 86.375 145.616 87.053 145.616 M83.9501 145.138C81.2341 145.138 78.4768 144.661 75.8359 144.661C74.2845 144.661 72.6129 143.707 71.1822 143.707C69.2723 143.707 67.6888 142.275 65.8125 142.275 M64.858 143.229C63.1906 142.555 61.4057 142.305 59.8463 141.612C58.9596 141.218 57.2456 140.897 56.2665 140.843C55.0026 140.773 53.1136 140.198 51.9707 139.597C50.4435 138.793 48.9664 137.693 47.3833 137.024C46.2541 136.548 45.1206 135.634 43.9891 135.301C42.6606 134.91 41.4602 133.81 40.2767 133.153C39.1022 132.5 37.8897 131.535 36.9356 130.581C35.6812 129.326 34.6451 127.826 33.3293 126.683C30.8027 124.488 28.4303 121.843 26.3155 119.258C25.3093 118.028 24.4117 116.763 24.0616 115.188C23.7257 113.676 23.7927 112.181 23.5577 110.653C23.4072 109.675 23.3323 108.789 23.3323 107.776C23.3323 106.604 22.7313 105.553 22.3777 104.461C21.9441 103.123 21.8643 101.756 21.5424 100.404C21.0296 98.2506 20.9458 96.2608 20.9458 94.0668C20.9458 90.6855 21.5706 87.7361 22.3777 84.5074C22.7788 82.9029 23.6081 81.3905 24.4195 79.9995C24.6845 79.5453 24.8672 79.1328 25.1222 78.6737C25.2863 78.3784 25.4802 77.2971 25.4802 78.077 M32.8785 51.5865C32.8785 53.4952 33.6958 55.1689 33.8331 57.0225C33.9555 58.6744 35.0264 60.1873 35.0264 61.8486C35.0264 63.3966 35.5037 64.8421 35.5037 66.3962C35.5037 67.6686 35.7423 68.8967 35.7423 70.2014C35.7423 71.1437 35.7428 71.9772 35.3181 72.8266C34.7438 73.975 33.9708 74.4054 33.2497 75.3325C32.7092 76.0275 31.0814 75.6905 30.2401 75.6905C28.733 75.6905 27.226 75.6905 25.7189 75.6905C20.6089 75.6905 15.8993 75.1134 11.1611 73.1183C10.478 72.8307 9.5135 72.9004 8.96014 72.4023C8.38277 71.8827 7.41921 71.5332 6.75923 71.156C5.48309 70.4268 4.48672 68.7968 3.63022 67.6956C3.17555 67.111 2.75897 66.5601 2.33088 66.025C1.86467 65.4422 1.64525 64.6872 1.19065 64.1821C0.310114 63.2037 3.67436 60.2267 4.47876 59.5946C7.928 56.8845 11.5189 54.0925 14.6215 50.9898C15.4918 50.1196 17.5755 48.5519 18.798 48.484C19.7599 48.4305 20.6337 47.9462 21.6618 48.0067C22.136 48.0346 22.7393 48.8089 23.2263 48.948C24.8087 49.4001 26.2314 50.6888 27.8668 50.8705C28.6705 50.9598 29.3511 51.3992 30.134 51.5732C30.6581 51.6897 32.4455 51.9137 32.6398 52.3024 M33.833 60.894C28.9792 60.894 23.4076 60.1815 18.7448 61.7955C16.7453 62.4876 14.4957 63.2805 12.3542 63.2805C10.2393 63.2805 8.21911 63.9964 6.09615 63.9964C5.33656 63.9964 1.03722 65.1515 1.13747 64.9511 M37.4132 29.1531C30.8245 26.4863 22.296 28.92 19.2755 35.7161C18.6423 37.1408 18.5596 38.8023 18.5596 40.3698C18.5596 41.6953 18.8789 42.7509 19.0501 43.9496C19.4261 46.5815 22.7601 48.8661 24.5259 50.6319C26.4852 52.5912 31.5352 52.9817 33.8334 51.7721C35.723 50.7776 36.9853 49.8666 38.5004 48.3514C39.1362 47.7156 39.6262 46.9172 40.1709 46.2168C40.7107 45.5228 40.5643 44.6612 40.8736 43.8568C42.0137 40.8926 42.7132 35.836 41.351 32.839C40.4202 30.7914 40.1859 29.6511 38.1291 28.6228C36.7647 27.9405 35.8664 27.7212 34.3107 27.7212 M33.1174 40.131C31.5596 41.3481 32.9192 42.1583 33.714 40.7277C34.1504 39.9422 34.0808 37.9832 32.9716 37.9832C31.5767 37.9832 31.6855 38.1324 31.6855 39.4151C31.6855 39.8606 32.4199 41.2714 33.0644 40.5553C34.1616 39.3362 31.3025 38.6991 30.7574 38.6991C29.6061 38.6991 30.929 40.0737 31.8048 39.8791C33.0137 39.6105 32.3361 38.4985 31.9772 39.1764C31.5292 40.0225 32.5636 41.0856 33.3561 41.0856 M57.937 37.506C56.0421 37.5522 53.6576 39.1388 52.2094 40.3698C51.6996 40.8031 51.0657 41.1422 50.5918 41.6161C49.373 42.8349 48.4744 44.5002 47.9666 46.1505C47.4574 47.8054 46.959 49.5947 46.959 51.3479C46.959 52.1434 46.959 52.9389 46.959 53.7344C46.959 54.5678 47.3502 55.1505 47.4363 55.8823C47.5366 56.7349 49.2183 58.2477 49.7698 58.7991C50.64 59.6693 51.5416 60.3745 52.6867 60.947C54.0718 61.6396 55.216 61.8486 56.7438 61.8486C57.7603 61.8486 58.7767 61.8486 59.7932 61.8486C60.8847 61.8486 61.6101 61.1252 62.5908 60.9072C64.2464 60.5393 65.4957 58.4458 66.7672 57.4468C68.0913 56.4064 69.2574 55.0627 70.4663 53.8537C72.8026 51.5174 73.1838 47.435 72.1369 44.2943C71.3716 41.9984 70.9333 40.2822 69.0344 38.8053C67.9191 37.9378 66.5954 37.322 65.216 37.0154C62.2385 36.3537 57.918 34.895 55.0732 37.0287 M58.4146 50.1545C57.5574 50.8558 56.4505 53.468 58.5339 53.0051C59.1492 52.8683 59.327 51.8467 59.0775 51.3478C58.7975 50.7878 57.4495 50.8705 58.1759 50.8705C58.6856 50.8705 59.7478 50.316 58.8919 49.8628C58.2628 49.5298 57.7181 49.6859 57.9505 50.4992C58.0326 50.7864 60.1373 50.9241 59.7934 49.9689C59.6169 49.4784 58.1885 49.4229 58.4278 50.2606C58.5655 50.7423 60.0175 50.2373 59.2631 49.4385C58.2307 48.3454 56.1498 51.2409 58.6532 51.1091C59.6239 51.058 59.0828 49.6772 58.1626 49.6772C57.0004 49.6772 56.744 50.0794 56.744 51.1621C56.744 51.9646 57.5359 52.1194 58.0433 51.4671C58.5663 50.7947 56.8276 50.6513 56.5584 51.1091C55.6234 52.6985 59.9951 51.3478 58.4146 51.3478 M71.5405 81.4181C74.8842 81.4181 78.2151 81.1795 81.5639 81.1795C83.3092 81.1795 85.0796 81.2357 86.7612 80.7552C88.3861 80.291 90.149 80.2818 91.7729 79.8006C92.9814 79.4425 94.1282 79.2703 95.4058 79.2703C97.7051 79.2703 98.3564 81.63 96.8377 83.3274C95.9845 84.281 95.268 85.9894 94.6898 87.1458C94.1837 88.1582 93.3128 89.7748 92.4226 90.487C92.0613 90.776 92.068 91.3912 91.7067 91.6802C91.1892 92.0942 92.2532 91.6453 93.0192 91.9189C94.3936 92.4097 95.8827 93.3716 97.315 93.5762C99.0641 93.8261 100.279 94.9003 101.743 95.7373C103.992 97.0225 102.9 99.4597 101.491 100.868C100.732 101.628 99.6317 102.209 98.9856 103.016C98.7922 103.258 100.063 103.13 100.417 103.268C101.653 103.749 102.924 104.11 104.183 104.514C105.777 105.027 108.657 105.865 108.77 107.909C108.888 110.018 105.914 111.858 104.289 112.92C103.255 113.596 102.254 114.302 101.133 114.83C99.9806 115.372 98.0445 116.437 96.8377 116.5C93.5349 116.674 90.5124 118.648 87.159 118.648C84.5999 118.648 81.8506 119.125 79.3099 119.125C78.1072 119.125 76.8676 119.198 75.7301 118.873C74.7677 118.598 73.8564 117.665 72.853 117.442C72.0047 117.253 70.4278 116.208 69.7638 115.665C68.6617 114.763 67.1861 114.081 65.9454 113.292C64.7572 112.536 63.3674 111.907 62.3523 110.892C61.6415 110.181 60.3941 108.386 59.3691 108.386 M63.9035 143.229C63.2825 147.343 63.5405 151.683 62.2859 155.586C61.0013 159.583 60.038 163.78 58.5338 167.691C57.1814 171.207 56.1265 175.064 55.3252 178.669C55.1555 179.433 54.842 179.275 54.1187 179.637C53.2695 180.062 52.469 180.867 51.6791 181.414C50.9494 181.919 50.1162 182.579 49.4915 183.204C49.2191 183.476 48.6364 184.49 48.8683 183.562 M56.028 178.55C56.4093 180.668 57.8441 182.766 57.1682 185.047C56.7642 186.41 55.312 187.868 55.312 189.289 M55.312 180.221C59.3949 180.221 62.4924 180.74 64.3808 184.516 M108.946 170.27C108.706 170.27 108.214 169.034 107.47 166.562C106.63 163.67 105.904 161.012 105.292 158.588V164.492C105.292 164.996 105.34 165.854 105.436 167.066C105.52 168.386 105.562 169.238 105.562 169.622C105.562 169.73 105.496 169.826 105.364 169.91C105.232 169.982 105.082 170.018 104.914 170.018C104.662 170.018 104.536 169.922 104.536 169.73L104.572 169.208C104.596 168.824 104.608 168.572 104.608 168.452C104.608 167.816 104.572 166.808 104.5 165.428C104.428 164.024 104.392 163.172 104.392 162.872V160.568C104.392 160.196 104.41 159.644 104.446 158.912C104.494 158.276 104.518 157.724 104.518 157.256V157.148C104.518 156.548 104.65 156.248 104.914 156.248C105.07 156.248 105.268 156.512 105.508 157.04C105.904 157.904 106.408 159.452 107.02 161.684C107.368 162.98 107.776 164.648 108.244 166.688C108.232 166.64 108.328 167.054 108.532 167.93L108.55 168.02C108.55 166.856 108.562 165.812 108.586 164.888L108.622 161.756V156.428C108.67 156.128 108.862 155.978 109.198 155.978C109.522 155.978 109.684 156.212 109.684 156.68V156.788C109.612 156.932 109.576 157.106 109.576 157.31C109.576 158.042 109.558 159.146 109.522 160.622C109.486 162.11 109.468 163.226 109.468 163.97V169.46C109.468 169.652 109.414 169.832 109.306 170C109.21 170.18 109.09 170.27 108.946 170.27ZM114.042 170.342C113.73 170.342 113.442 170.24 113.178 170.036C112.914 169.844 112.698 169.58 112.53 169.244C112.182 168.512 111.966 167.714 111.882 166.85C111.774 166.034 111.72 165.248 111.72 164.492C111.72 164.348 111.726 164.228 111.738 164.132V163.808C111.738 163.748 111.732 163.718 111.72 163.718V163.394L111.738 162.134C111.75 161.75 111.798 161.138 111.882 160.298C111.942 159.722 112.08 159.164 112.296 158.624C112.38 158.384 112.488 158.204 112.62 158.084C112.752 157.952 112.902 157.886 113.07 157.886C113.55 157.886 113.982 157.976 114.366 158.156C114.75 158.324 115.074 158.564 115.338 158.876C115.578 159.176 115.782 159.548 115.95 159.992C116.118 160.424 116.238 160.886 116.31 161.378C116.382 161.882 116.418 162.416 116.418 162.98V163.124C116.418 163.496 116.424 163.832 116.436 164.132L116.454 165.158C116.454 168.614 115.65 170.342 114.042 170.342ZM113.97 169.586C114.186 169.586 114.384 169.502 114.564 169.334C114.744 169.154 114.882 168.914 114.978 168.614C115.206 168.002 115.344 167.342 115.392 166.634C115.452 166.022 115.482 165.494 115.482 165.05C115.482 164.51 115.44 163.802 115.356 162.926C115.284 162.002 115.248 161.312 115.248 160.856V160.532C115.224 160.076 115.068 159.68 114.78 159.344C114.504 159.008 114.162 158.84 113.754 158.84C113.346 158.84 113.076 159.074 112.944 159.542C112.824 159.914 112.764 160.394 112.764 160.982C112.764 161.21 112.77 161.402 112.782 161.558V162.044L112.746 162.872C112.722 163.124 112.71 163.4 112.71 163.7C112.71 164.348 112.728 164.99 112.764 165.626C112.812 166.526 112.932 167.402 113.124 168.254C113.316 169.142 113.598 169.586 113.97 169.586ZM122.033 170.252C121.817 170.216 121.631 170.138 121.475 170.018C121.331 169.898 121.247 169.742 121.223 169.55L121.421 169.244C121.493 169.244 121.607 169.268 121.763 169.316C121.943 169.352 122.081 169.37 122.177 169.37C122.393 169.37 122.585 169.274 122.753 169.082C122.933 168.89 123.065 168.638 123.149 168.326C123.305 167.75 123.383 167.234 123.383 166.778C123.383 165.986 123.131 165.152 122.627 164.276L122.429 163.934C122.201 163.538 122.009 163.184 121.853 162.872C121.697 162.56 121.565 162.224 121.457 161.864C121.313 161.396 121.241 160.928 121.241 160.46C121.241 159.932 121.361 159.38 121.601 158.804C121.721 158.528 121.889 158.306 122.105 158.138C122.333 157.958 122.585 157.868 122.861 157.868C123.077 157.868 123.275 157.94 123.455 158.084C123.647 158.216 123.743 158.378 123.743 158.57C123.743 158.678 123.701 158.762 123.617 158.822C123.533 158.882 123.431 158.912 123.311 158.912C123.179 158.912 123.053 158.876 122.933 158.804C122.669 158.816 122.459 159.05 122.303 159.506C122.171 159.926 122.105 160.274 122.105 160.55C122.105 160.898 122.159 161.252 122.267 161.612C122.375 161.96 122.513 162.278 122.681 162.566L123.077 163.286L123.707 164.474C123.875 164.81 124.007 165.2 124.103 165.644C124.211 166.088 124.265 166.538 124.265 166.994C124.265 167.726 124.097 168.422 123.761 169.082C123.593 169.418 123.353 169.688 123.041 169.892C122.741 170.096 122.405 170.198 122.033 170.198V170.252ZM128.929 170.288C128.497 170.144 127.963 170.072 127.327 170.072C127.135 170.192 126.931 170.252 126.715 170.252C126.571 170.252 126.445 170.186 126.337 170.054C126.241 169.934 126.193 169.802 126.193 169.658C126.193 168.65 126.235 167.306 126.319 165.626C126.391 163.838 126.427 162.5 126.427 161.612V161.486C126.355 160.73 126.319 160.166 126.319 159.794C126.319 158.654 126.529 158.084 126.949 158.084C127.069 158.084 127.171 158.132 127.255 158.228C127.351 158.312 127.399 158.414 127.399 158.534C127.399 158.678 127.381 158.906 127.345 159.218C127.309 159.518 127.291 159.746 127.291 159.902C127.291 160.706 127.297 161.432 127.309 162.08C127.321 162.716 127.327 163.436 127.327 164.24C127.267 164.42 127.237 164.672 127.237 164.996V165.212L127.201 166.634C127.177 167.054 127.165 167.534 127.165 168.074C127.165 168.902 127.363 169.316 127.759 169.316C127.783 169.316 127.819 169.316 127.867 169.316C127.927 169.304 128.005 169.298 128.101 169.298C128.209 169.286 128.347 169.28 128.515 169.28C129.163 169.28 129.487 169.46 129.487 169.82C129.487 169.94 129.433 170.042 129.325 170.126C129.217 170.21 129.085 170.264 128.929 170.288ZM133.079 170.342C132.767 170.342 132.479 170.24 132.215 170.036C131.951 169.844 131.735 169.58 131.567 169.244C131.219 168.512 131.003 167.714 130.919 166.85C130.811 166.034 130.757 165.248 130.757 164.492C130.757 164.348 130.763 164.228 130.775 164.132V163.808C130.775 163.748 130.769 163.718 130.757 163.718V163.394L130.775 162.134C130.787 161.75 130.835 161.138 130.919 160.298C130.979 159.722 131.117 159.164 131.333 158.624C131.417 158.384 131.525 158.204 131.657 158.084C131.789 157.952 131.939 157.886 132.107 157.886C132.587 157.886 133.019 157.976 133.403 158.156C133.787 158.324 134.111 158.564 134.375 158.876C134.615 159.176 134.819 159.548 134.987 159.992C135.155 160.424 135.275 160.886 135.347 161.378C135.419 161.882 135.455 162.416 135.455 162.98V163.124C135.455 163.496 135.461 163.832 135.473 164.132L135.491 165.158C135.491 168.614 134.687 170.342 133.079 170.342ZM133.007 169.586C133.223 169.586 133.421 169.502 133.601 169.334C133.781 169.154 133.919 168.914 134.015 168.614C134.243 168.002 134.381 167.342 134.429 166.634C134.489 166.022 134.519 165.494 134.519 165.05C134.519 164.51 134.477 163.802 134.393 162.926C134.321 162.002 134.285 161.312 134.285 160.856V160.532C134.261 160.076 134.105 159.68 133.817 159.344C133.541 159.008 133.199 158.84 132.791 158.84C132.383 158.84 132.113 159.074 131.981 159.542C131.861 159.914 131.801 160.394 131.801 160.982C131.801 161.21 131.807 161.402 131.819 161.558V162.044L131.783 162.872C131.759 163.124 131.747 163.4 131.747 163.7C131.747 164.348 131.765 164.99 131.801 165.626C131.849 166.526 131.969 167.402 132.161 168.254C132.353 169.142 132.635 169.586 133.007 169.586ZM138.467 169.712L138.449 169.01C138.437 168.806 138.431 168.578 138.431 168.326L138.449 167.714C138.413 167.582 138.323 166.268 138.179 163.772C138.035 161.276 137.951 159.674 137.927 158.966C137.231 158.942 136.787 158.87 136.595 158.75C136.463 158.654 136.397 158.546 136.397 158.426C136.397 158.33 136.457 158.246 136.577 158.174C136.709 158.09 136.841 158.048 136.973 158.048C137.309 158.048 137.717 158.072 138.197 158.12C138.653 158.18 139.061 158.21 139.421 158.21H139.565H139.709C140.081 158.21 140.267 158.354 140.267 158.642C140.267 158.786 140.207 158.906 140.087 159.002C139.967 159.086 139.829 159.128 139.673 159.128C139.565 159.128 139.409 159.11 139.205 159.074L138.845 159.002L138.827 159.092L138.809 159.182C138.809 160.25 138.911 161.954 139.115 164.294C139.307 166.49 139.403 168.194 139.403 169.406C139.403 169.55 139.337 169.676 139.205 169.784C139.085 169.892 138.947 169.946 138.791 169.946L138.467 169.712ZM145.233 170C144.825 170 144.621 169.01 144.621 167.03L144.639 166.004L144.657 165.176V165.122V164.942C144.669 164.846 144.675 164.732 144.675 164.6C144.675 164.576 144.657 164.546 144.621 164.51C144.585 164.474 144.567 164.444 144.567 164.42V164.402C144.507 164.426 144.399 164.438 144.243 164.438C144.087 164.438 143.895 164.414 143.667 164.366C143.595 164.354 143.403 164.324 143.091 164.276V166.346C143.091 166.658 143.109 167.15 143.145 167.822C143.181 168.482 143.199 168.974 143.199 169.298C143.199 169.478 143.151 169.634 143.055 169.766C142.959 169.898 142.833 169.964 142.677 169.964C142.449 169.964 142.287 169.742 142.191 169.298C142.095 168.842 142.047 168.248 142.047 167.516L142.083 166.058C142.095 165.65 142.101 165.218 142.101 164.762V164.456V164.204C142.101 164.012 142.095 163.886 142.083 163.826V163.736L142.137 162.692C142.137 162.236 142.119 161.558 142.083 160.658C142.047 159.758 142.029 159.08 142.029 158.624C142.029 158.48 142.077 158.354 142.173 158.246C142.269 158.138 142.389 158.084 142.533 158.084C142.917 158.084 143.109 158.444 143.109 159.164L143.073 161.396C143.049 162.068 143.037 162.818 143.037 163.646C143.217 163.706 143.541 163.736 144.009 163.736H144.675C144.699 163.664 144.711 163.592 144.711 163.52C144.711 162.944 144.675 162.092 144.603 160.964C144.519 159.908 144.477 159.05 144.477 158.39C144.477 158.258 144.525 158.15 144.621 158.066C144.729 157.97 144.855 157.922 144.999 157.922C145.083 157.922 145.203 157.952 145.359 158.012L145.521 158.084C145.521 159.788 145.581 162.062 145.701 164.906L145.863 169.46C145.863 169.628 145.797 169.76 145.665 169.856C145.545 169.952 145.401 170 145.233 170ZM152.139 170.234C151.983 170.234 151.839 170.18 151.707 170.072C151.587 169.964 151.521 169.832 151.509 169.676V169.208V168.848C151.497 168.74 151.491 168.614 151.491 168.47C151.491 168.218 151.473 167.834 151.437 167.318L151.401 166.166C151.401 165.578 151.419 164.702 151.455 163.538C151.503 162.494 151.527 161.618 151.527 160.91C151.527 160.742 151.509 160.49 151.473 160.154C151.437 159.806 151.419 159.554 151.419 159.398C151.419 158.546 151.671 158.12 152.175 158.12C152.571 158.12 153.027 158.198 153.543 158.354C154.071 158.51 154.335 158.696 154.335 158.912C154.335 159.032 154.281 159.146 154.173 159.254C154.077 159.35 153.957 159.428 153.813 159.488C153.309 159.308 152.853 159.188 152.445 159.128C152.457 159.308 152.463 159.566 152.463 159.902C152.463 160.382 152.457 160.814 152.445 161.198C152.409 161.774 152.391 162.206 152.391 162.494L152.445 162.782L152.733 162.764C152.829 162.752 152.949 162.746 153.093 162.746C153.669 162.746 153.957 162.914 153.957 163.25C153.957 163.382 153.903 163.496 153.795 163.592C153.687 163.676 153.549 163.718 153.381 163.718C153.165 163.718 152.997 163.706 152.877 163.682H152.427C152.451 163.994 152.463 164.45 152.463 165.05C152.463 165.65 152.457 166.19 152.445 166.67C152.409 167.402 152.391 167.948 152.391 168.308C152.391 168.98 152.403 169.316 152.427 169.316L153.021 169.298C153.225 169.286 153.471 169.28 153.759 169.28C154.215 169.28 154.443 169.424 154.443 169.712C154.443 169.88 154.365 170.006 154.209 170.09C154.065 170.186 153.885 170.234 153.669 170.234H152.139ZM157.326 169.982C156.282 169.982 155.76 169.802 155.76 169.442C155.76 169.154 155.946 169.01 156.318 169.01H156.516L156.696 169.028C156.792 169.028 156.858 168.998 156.894 168.938C156.93 168.878 156.948 168.77 156.948 168.614C156.948 168.41 156.936 168.092 156.912 167.66C156.876 167.372 156.834 166.856 156.786 166.112C156.678 164.276 156.624 162.89 156.624 161.954C156.624 161.618 156.63 161.312 156.642 161.036L156.66 160.118C156.66 159.722 156.642 159.392 156.606 159.128C156.414 159.176 156.276 159.2 156.192 159.2C155.904 159.2 155.76 159.056 155.76 158.768C155.76 158.624 155.85 158.498 156.03 158.39C156.21 158.282 156.438 158.204 156.714 158.156C157.194 158.06 157.62 158.012 157.992 158.012C158.136 158.012 158.256 158.066 158.352 158.174C158.46 158.27 158.514 158.384 158.514 158.516C158.514 158.648 158.472 158.762 158.388 158.858C158.316 158.954 158.22 159.002 158.1 159.002C158.028 159.002 157.968 158.996 157.92 158.984H157.776C157.656 158.984 157.566 159.014 157.506 159.074C157.458 159.122 157.434 159.218 157.434 159.362C157.434 160.526 157.506 162.278 157.65 164.618C157.674 165.05 157.722 165.686 157.794 166.526C157.854 167.078 157.884 167.642 157.884 168.218V168.902C157.956 168.89 158.076 168.884 158.244 168.884C158.748 168.884 159 169.094 159 169.514V169.622L158.55 169.928C158.538 169.928 158.496 169.934 158.424 169.946C158.364 169.946 158.244 169.946 158.064 169.946C157.68 169.97 157.434 169.982 157.326 169.982ZM161.495 169.712L161.477 169.01C161.465 168.806 161.459 168.578 161.459 168.326L161.477 167.714C161.441 167.582 161.351 166.268 161.207 163.772C161.063 161.276 160.979 159.674 160.955 158.966C160.259 158.942 159.815 158.87 159.623 158.75C159.491 158.654 159.425 158.546 159.425 158.426C159.425 158.33 159.485 158.246 159.605 158.174C159.737 158.09 159.869 158.048 160.001 158.048C160.337 158.048 160.745 158.072 161.225 158.12C161.681 158.18 162.089 158.21 162.449 158.21H162.593H162.737C163.109 158.21 163.295 158.354 163.295 158.642C163.295 158.786 163.235 158.906 163.115 159.002C162.995 159.086 162.857 159.128 162.701 159.128C162.593 159.128 162.437 159.11 162.233 159.074L161.873 159.002L161.855 159.092L161.837 159.182C161.837 160.25 161.939 161.954 162.143 164.294C162.335 166.49 162.431 168.194 162.431 169.406C162.431 169.55 162.365 169.676 162.233 169.784C162.113 169.892 161.975 169.946 161.819 169.946L161.495 169.712ZM168.26 170C167.852 170 167.648 169.01 167.648 167.03L167.666 166.004L167.684 165.176V165.122V164.942C167.696 164.846 167.702 164.732 167.702 164.6C167.702 164.576 167.684 164.546 167.648 164.51C167.612 164.474 167.594 164.444 167.594 164.42V164.402C167.534 164.426 167.426 164.438 167.27 164.438C167.114 164.438 166.922 164.414 166.694 164.366C166.622 164.354 166.43 164.324 166.118 164.276V166.346C166.118 166.658 166.136 167.15 166.172 167.822C166.208 168.482 166.226 168.974 166.226 169.298C166.226 169.478 166.178 169.634 166.082 169.766C165.986 169.898 165.86 169.964 165.704 169.964C165.476 169.964 165.314 169.742 165.218 169.298C165.122 168.842 165.074 168.248 165.074 167.516L165.11 166.058C165.122 165.65 165.128 165.218 165.128 164.762V164.456V164.204C165.128 164.012 165.122 163.886 165.11 163.826V163.736L165.164 162.692C165.164 162.236 165.146 161.558 165.11 160.658C165.074 159.758 165.056 159.08 165.056 158.624C165.056 158.48 165.104 158.354 165.2 158.246C165.296 158.138 165.416 158.084 165.56 158.084C165.944 158.084 166.136 158.444 166.136 159.164L166.1 161.396C166.076 162.068 166.064 162.818 166.064 163.646C166.244 163.706 166.568 163.736 167.036 163.736H167.702C167.726 163.664 167.738 163.592 167.738 163.52C167.738 162.944 167.702 162.092 167.63 160.964C167.546 159.908 167.504 159.05 167.504 158.39C167.504 158.258 167.552 158.15 167.648 158.066C167.756 157.97 167.882 157.922 168.026 157.922C168.11 157.922 168.23 157.952 168.386 158.012L168.548 158.084C168.548 159.788 168.608 162.062 168.728 164.906L168.89 169.46C168.89 169.628 168.824 169.76 168.692 169.856C168.572 169.952 168.428 170 168.26 170ZM171.879 170.234C171.723 170.234 171.579 170.18 171.447 170.072C171.327 169.964 171.261 169.832 171.249 169.676V169.208V168.848C171.237 168.74 171.231 168.614 171.231 168.47C171.231 168.218 171.213 167.834 171.177 167.318L171.141 166.166C171.141 165.578 171.159 164.702 171.195 163.538C171.243 162.494 171.267 161.618 171.267 160.91C171.267 160.742 171.249 160.49 171.213 160.154C171.177 159.806 171.159 159.554 171.159 159.398C171.159 158.546 171.411 158.12 171.915 158.12C172.311 158.12 172.767 158.198 173.283 158.354C173.811 158.51 174.075 158.696 174.075 158.912C174.075 159.032 174.021 159.146 173.913 159.254C173.817 159.35 173.697 159.428 173.553 159.488C173.049 159.308 172.593 159.188 172.185 159.128C172.197 159.308 172.203 159.566 172.203 159.902C172.203 160.382 172.197 160.814 172.185 161.198C172.149 161.774 172.131 162.206 172.131 162.494L172.185 162.782L172.473 162.764C172.569 162.752 172.689 162.746 172.833 162.746C173.409 162.746 173.697 162.914 173.697 163.25C173.697 163.382 173.643 163.496 173.535 163.592C173.427 163.676 173.289 163.718 173.121 163.718C172.905 163.718 172.737 163.706 172.617 163.682H172.167C172.191 163.994 172.203 164.45 172.203 165.05C172.203 165.65 172.197 166.19 172.185 166.67C172.149 167.402 172.131 167.948 172.131 168.308C172.131 168.98 172.143 169.316 172.167 169.316L172.761 169.298C172.965 169.286 173.211 169.28 173.499 169.28C173.955 169.28 174.183 169.424 174.183 169.712C174.183 169.88 174.105 170.006 173.949 170.09C173.805 170.186 173.625 170.234 173.409 170.234H171.879ZM179.316 170.306C179.052 170.306 178.812 170.018 178.596 169.442C178.344 168.818 178.158 168.176 178.038 167.516L177.912 166.904C177.564 165.188 177.342 164.21 177.246 163.97H177.03C177.03 164.318 177.024 164.636 177.012 164.924V165.914C177.012 167.522 177.126 168.776 177.354 169.676L177.156 170.162H176.652L176.418 169.892L176.436 168.686C176.436 167.606 176.382 165.968 176.274 163.772C176.178 161.432 176.13 159.794 176.13 158.858C176.13 158.282 176.328 157.994 176.724 157.994C177.372 157.994 177.9 158.162 178.308 158.498C178.728 158.834 178.938 159.302 178.938 159.902V161.162C178.938 161.342 178.908 161.552 178.848 161.792C178.788 162.02 178.722 162.206 178.65 162.35L178.308 162.998L178.02 163.538L178.11 163.97L178.362 165.248C178.53 166.172 178.692 166.922 178.848 167.498C179.004 168.074 179.196 168.596 179.424 169.064L179.532 169.28C179.652 169.52 179.712 169.712 179.712 169.856C179.712 169.976 179.676 170.078 179.604 170.162C179.532 170.258 179.436 170.306 179.316 170.306ZM177.102 163.088C177.366 162.956 177.588 162.596 177.768 162.008C177.96 161.408 178.056 160.856 178.056 160.352C178.056 159.968 178.008 159.608 177.912 159.272C177.852 159.08 177.75 158.936 177.606 158.84C177.474 158.732 177.306 158.678 177.102 158.678L177.066 158.768L177.03 158.93L177.066 161.054C177.09 161.678 177.102 162.356 177.102 163.088ZM182.843 170.288C182.687 170.288 182.549 170.222 182.429 170.09C182.309 169.958 182.249 169.808 182.249 169.64C182.249 169.46 182.315 169.298 182.447 169.154C182.579 169.01 182.735 168.938 182.915 168.938C183.083 168.938 183.233 169.01 183.365 169.154C183.497 169.298 183.563 169.454 183.563 169.622C183.563 169.814 183.491 169.97 183.347 170.09C183.215 170.222 183.047 170.288 182.843 170.288Z';

  var animalCroc = 'M6.11109 65.5925C5.4991 64.1166 4.73858 62.8184 5.10954 61.149C5.29335 60.3219 6.23084 59.0121 6.8164 58.4265C8.4909 56.752 9.86487 55.9438 12.332 55.9438C14.522 55.9438 16.6156 55.6631 18.44 56.7056C19.508 57.3159 20.767 57.3434 21.8537 57.9187C22.591 58.3091 23.0349 59.4544 23.6311 59.7525 M22.1079 56.9596C23.966 56.9596 26.9724 56.4452 28.8225 56.9737C30.1396 57.3501 31.293 58.3783 32.5183 58.9909 M29.4712 56.1978C31.0736 55.8544 32.2846 55.436 33.9147 55.436C34.7187 55.436 35.5228 55.436 36.3268 55.436C37.57 55.436 39.0816 56.7647 40.1355 57.4673 M32.0103 54.6745C32.0103 51.7173 34.1975 50.204 36.5807 49.1448C37.5326 48.7217 38.5299 49.5505 38.612 48.0727C38.6681 47.0629 39.1165 45.8074 39.6276 44.9129C40.6494 43.1249 42.2515 42.9643 44.0852 43.4882C45.8329 43.9875 46.9104 45.7471 48.5146 46.5492 M48.5146 48.8344C51.0391 46.8026 54.1437 44.2603 57.2605 46.0414C59.2068 47.1535 60.7323 49.3572 62.7338 50.3579 M62.2261 48.0728C64.755 48.0728 67.1482 48.437 69.5895 48.5806C70.7661 48.6498 71.9503 50.035 73.0315 50.3439C74.24 50.6892 75.206 51.4731 76.4311 51.8814C77.5626 52.2586 78.2496 53.4184 79.2382 53.9128 M72.1289 47.5648C73.0411 46.9133 74.268 45.9934 75.3028 45.5335C75.6974 45.3581 76.7198 44.9366 76.9533 44.6448C77.4883 43.976 79.416 43.0875 80.2541 42.9944C81.3228 42.8757 82.3089 41.9787 83.428 41.9787C84.2856 41.9787 85.9913 41.7538 86.7289 41.344C87.6001 40.86 89.365 40.7092 90.3542 40.7092C91.7062 40.7092 92.8881 40.2013 94.2334 40.2013C97.0371 40.2013 99.7516 39.6935 102.598 39.6935C103.889 39.6935 105.102 39.788 106.337 39.9333C108.47 40.1843 111.26 39.8096 113.263 40.6527C114.396 41.1297 116.221 40.7877 117.452 40.9772C118.807 41.1856 120.131 41.7248 121.515 41.7248C122.906 41.7248 124.181 42.2326 125.648 42.2326C126.894 42.2326 128.14 42.2326 129.386 42.2326C131.136 42.2326 132.866 42.4866 134.591 42.4866C135.848 42.4866 137.159 43.0946 138.4 42.543C139.139 42.2144 140.932 42.2415 141.447 41.5979C141.749 41.2211 142.584 41.3065 142.971 40.9631C143.292 40.6778 144.095 40.2456 144.494 40.2013C145.844 40.0513 148.606 38.7677 149.318 37.5212C149.609 37.0129 150.16 36.8075 150.461 36.2657C150.671 35.8886 150.718 34.8156 150.969 34.6153C151.33 34.3267 151.604 32.0748 151.604 31.5683C151.604 30.3085 151.858 29.1493 151.858 27.8866C151.858 25.8226 150.677 23.6445 149.262 22.23C148.63 21.5982 147.695 21.0929 146.92 20.6501C146.04 20.1469 145.449 19.3535 144.494 18.9291C142.479 18.0334 140.202 18.5819 138.019 18.0968C135.909 17.6278 132.985 17.6031 130.896 17.6031C128.319 17.6031 125.742 17.6031 123.165 17.6031C121.724 17.6031 120.341 17.5921 118.962 17.8429C117.792 18.0556 116.689 18.6187 115.548 18.6187C114.405 18.6187 113.263 18.6187 112.12 18.6187C111.044 18.6187 110.018 19.6344 108.819 19.6344C106.571 19.6344 104.277 20.5515 102.203 21.1438C99.9127 21.7983 97.6863 22.0987 95.4325 22.8788C94.2333 23.294 92.8163 23.9509 91.5532 23.9509C90.4721 23.9509 89.3707 24.6543 88.3793 24.7127C86.1326 24.8448 83.9834 25.7283 81.6506 25.7283C81.1027 25.7283 80.5929 25.9822 80.0002 25.9822C79.8296 25.9822 78.3462 25.9694 78.5332 26.1797C78.8608 26.5483 80.452 27.6167 80.903 27.7455C82.8348 28.2974 84.4908 29.6667 86.6019 29.7909C87.5544 29.8469 88.693 30.0448 89.7759 30.0448C90.8809 30.0448 91.9448 30.5527 92.9498 30.5527C95.201 30.5527 97.6028 30.8066 99.9324 30.8066C102.302 30.8066 104.672 30.8066 107.042 30.8066C108.435 30.8066 109.686 31.6607 110.978 31.8222C112.1 31.9625 113.267 31.8222 114.532 31.8222C117.083 31.8222 119.376 32.8379 121.896 32.8379C123.003 32.8379 124.549 33.1426 125.578 33.5996C126.373 33.9533 128.084 34.8692 128.878 34.8692C130.744 34.8692 133.128 37.0156 134.704 37.9161C136.505 38.9451 138.257 41.0026 139.416 42.7405 M148.048 20.6501C149.876 21.3464 151.57 21.9816 153.24 22.9354C154.378 23.586 155.176 24.8237 156.315 25.4745C157.908 26.3848 160.534 28.9183 160.744 30.8067C160.86 31.8502 161.76 33.0219 161.76 33.9947C161.76 35.9256 162.501 37.6156 162.761 39.4397C163.117 41.9313 163.029 44.5156 163.029 47.0571C163.029 48.2111 163.409 50.0774 162.888 51.1197C162.227 52.442 161.74 53.7704 160.998 55.0695C159.915 56.9649 157.523 58.5158 155.976 60.0631C155.214 60.8249 154.488 61.6022 153.508 62.0379C152.516 62.4787 151.878 63.2875 150.954 63.8153C149.825 64.4604 148.338 65.0741 147.343 65.9031C146.518 66.5904 144.72 66.664 144.24 67.624 M129.005 58.991C128.027 63.663 124.739 70.4379 128.554 74.6771C129.812 76.0749 131.068 77.989 132.955 78.5282C135.451 79.2413 137.531 80.4175 139.67 81.8431 M139.923 58.2292C140.722 58.81 142.157 59.6355 142.449 60.6555C142.678 61.4572 142.948 62.7086 143.351 63.4345C143.787 64.219 143.478 65.8416 143.478 66.7353C143.478 68.5093 144.222 67.663 145.242 68.5127C146.15 69.2699 147.26 69.9385 148.176 70.671C148.906 71.2554 149.257 72.6535 149.953 73.2101C151.306 74.2929 152.879 76.2146 153.367 77.9216C153.658 78.9404 153.635 79.9814 153.635 81.0814C153.635 82.8129 152.894 82.1818 151.801 83.0563C151.444 83.342 150.647 83.4248 150.207 83.6205C149.796 83.8031 149.216 84.3316 148.81 84.3823C148.201 84.4585 147.054 85.3754 146.723 85.9058C146.141 86.837 143.326 89.3948 142.209 89.4605C141.636 89.4942 139.766 90.2057 139.218 89.658C139.119 89.5584 140.235 87.5272 140.431 87.4292 M138.908 88.4449C137.839 88.4449 137.046 88.4824 136.115 88.8963C135.841 89.0182 134.595 89.4237 134.789 88.9527C135.053 88.3107 135.634 86.1461 136.115 85.9058 M134.591 87.9369C133.74 87.9369 131.875 88.2557 132.687 86.7943C132.931 86.3557 133.294 85.1423 133.322 84.6361C133.392 83.3711 135.107 82.347 136.115 81.843 M132.052 85.1439C132.052 83.5594 131.631 81.8893 133.322 81.1377C134.324 80.6923 135.383 80.8125 136.369 80.3196 M130.275 78.7961C128.992 79.3154 127.275 80.2445 126.325 81.1942C126.061 81.4582 124.939 81.9296 124.562 82.097C124.116 82.2954 123.709 82.9753 123.278 83.0986C122.315 83.3738 121.404 84.0069 120.372 84.1283C119.575 84.2221 117.284 84.8901 118.087 84.8901 M117.833 81.5892C120.597 81.5892 123.499 81.7105 126.057 80.5735C127.35 79.999 128.538 78.9028 129.767 78.2883 M119.103 84.1283C119.175 83.9543 120.118 82.069 120.118 82.3509 M100.059 72.1943C101.829 72.1511 103.588 71.9404 105.391 71.9404C106.398 71.9404 108.748 71.5283 109.51 72.1379C109.883 72.4362 110.867 72.556 111.358 72.8291C111.953 73.1593 112.442 73.8224 112.952 74.282C113.959 75.188 115.19 75.7904 116.056 76.7647C118.004 78.9564 117.472 82.5084 117.325 85.1439C117.256 86.3935 115.97 87.391 115.35 88.4447C114.703 89.5455 113.888 90.5381 113.263 91.6327C112.831 92.3874 112.312 93.0268 111.937 93.7769C111.671 94.3089 110.414 95.0763 110.597 95.8082C110.66 96.0616 109.219 97.447 109.003 97.642C108.606 97.999 107.669 98.5644 107.423 98.9962C106.838 100.02 105.383 100.923 104.517 101.789C103.784 102.522 102.789 104.115 101.696 104.427C100.606 104.739 99.4736 105.135 98.3947 105.443C97.2311 105.775 96.1655 107.13 95.0938 107.742C94.5928 108.028 93.7114 108.705 93.7114 107.996C93.7114 107.274 93.8247 106.534 93.9794 105.838C94.1187 105.211 95.9966 102.437 95.9966 103.426 M92.6956 106.219C91.9338 106.219 91.1721 106.219 90.4104 106.219C90.2031 106.219 89.7083 106.491 89.6627 106.332C89.5178 105.824 90.1953 104.798 90.4104 104.314C90.6437 103.789 92.9874 99.9467 93.4573 100.887 M88.8867 104.187C87.755 104.187 86.458 104.441 85.4589 104.441C84.6901 104.441 85.8496 102.614 86.0937 102.241C86.7065 101.303 87.1164 100.322 87.998 99.617C88.4476 99.2573 89.1648 98.8068 89.3945 98.3474 M85.586 100.887C85.5016 100.887 82.9177 101.027 83.1033 100.633C83.3098 100.194 83.8062 99.6698 84.1895 99.3632C85.1225 98.6167 85.9259 98.2997 86.9825 97.7127C87.8951 97.2057 89.3176 96.8857 90.1 96.2598C90.6396 95.8281 93.7565 94.8381 93.7112 94.7927 M93.2036 95.5544C93.9102 92.3356 96.1309 89.8127 97.5766 86.9213C98.2376 85.5993 99.3423 84.2048 100.313 83.1127C101.341 81.9568 102.495 79.7365 103.868 79.05 M92.6958 91.2379C89.471 90.7853 85.9744 90.124 84.3731 86.9214C83.1164 84.4081 83.0446 80.3246 84.3166 77.7805 M86.8556 90.9839C82.1795 90.9839 77.5295 92.0007 73.0173 90.998C69.8436 90.2927 66.5811 90.1602 63.3686 89.4463C57.1879 88.0728 51.9953 84.0189 46.2295 82.0969 M67.5581 77.5266C70.3092 79.6108 73.1135 81.7713 76.1911 83.3102C77.32 83.8746 78.4796 84.8003 79.6331 85.1299C80.7972 85.4625 82.2336 85.88 83.3007 86.4136 M53.085 85.6517C53.6907 85.6517 56.5408 86.0421 57.1617 85.5247C57.5075 85.2365 59.5834 85.1438 60.0676 85.1438C61.7999 85.1438 63.6703 84.1545 65.2728 83.6204 M66.0347 89.7144C68.3684 89.2143 70.9283 87.9755 72.8903 86.6675 M56.64 89.2066C54.4215 89.6395 52.4151 90.606 50.7436 91.9432C49.1723 93.2003 51.5618 88.0969 51.5618 87.6831 M49.0227 90.7301C47.9224 90.7301 46.8221 90.7301 45.7218 90.7301C45.5409 90.7301 44.9883 90.9832 44.9883 90.8429C44.9883 90.6719 45.4062 89.6645 45.5243 89.5169C46.0459 88.8649 46.4246 88.1267 46.7939 87.4292C46.9795 87.0785 47.7531 85.9467 47.7531 86.9214 M44.1982 88.9525C43.4985 88.9525 41.4524 89.3814 42.2797 88.3177C42.6638 87.8239 43.0064 87.3398 43.3095 86.7943C43.9695 85.6062 45.1752 84.3103 46.4834 83.8743 M42.4208 87.1751C42.0986 87.1751 39.7904 87.4788 39.4303 87.1187C39.0949 86.7833 39.7716 85.536 40.0228 85.2849C40.5587 84.749 41.9119 84.1303 42.1669 83.6204 M5.0957 63.3074C5.44379 64.8931 5.58702 65.8465 7.25396 65.8465C8.39657 65.8465 9.53918 65.8465 10.6818 65.8465C12.7762 65.8465 14.3045 65.8016 15.8165 67.3136C17.3314 68.8285 19.0084 68.6395 21.0922 68.6395C22.2868 68.6395 23.752 68.5725 24.774 68.0048C25.5084 67.5967 26.5665 67.1161 27.44 67.1161C29.6565 67.1161 30.6861 67.726 32.5183 68.696C34.3562 69.669 36.4952 69.9091 38.6122 69.9091C41.1818 69.9091 43.688 69.6552 46.2296 69.6552C48.3511 69.6552 50.0036 70.163 52.0696 70.163 M60.1949 63.0535C59.022 66.059 57.0173 69.0177 54.2421 70.7837C53.0697 71.5298 51.4805 72.8161 50.1513 73.1959C49.4458 73.3974 48.9418 73.8666 48.261 74.1692C47.4665 74.5223 46.651 74.3154 45.8489 74.4937C45.0283 74.676 42.6809 74.7259 42.1671 75.3682C42.0202 75.5518 40.6678 75.9876 40.3897 76.003C39.7383 76.0392 39.1613 76.6005 38.4854 76.7507C37.3678 76.999 36.7231 78.2658 35.7064 78.5563C35.1595 78.7125 34.6109 79.2485 34.0419 79.5014C33.644 79.6782 32.5042 79.893 32.2645 80.1926C31.7916 80.7837 29.4744 81.0388 28.7097 81.0813C28.4438 81.0961 26.8138 81.2929 26.6784 81.4622C26.4016 81.8082 25.1096 81.581 24.6471 81.7866C24.1091 82.0257 20.8363 82.146 20.387 81.7866C19.7118 81.2464 19.5051 78.7885 20.1331 78.0908C21.8157 76.2212 24.9163 75.9319 26.3681 73.4639C27.6121 71.349 29.9659 69.6955 30.741 67.37 M28.7096 67.878C26.0146 71.3276 23.0717 73.667 19.4277 75.7493C17.8361 76.6588 16.2679 78.7804 16.2679 80.5736C16.2679 81.7066 16.0814 82.6256 16.7757 83.4936C17.3769 84.245 18.7797 84.0942 19.3149 84.7632C19.7483 85.3049 21.9445 85.6519 22.6157 85.6519C23.7057 85.6519 24.8838 85.9058 26.0436 85.9058C28.2195 85.9058 31.1611 86.2806 32.9697 84.8337C33.4068 84.484 34.8651 83.8745 35.4383 83.8745C36.3639 83.8745 37.1775 82.8588 38.2314 82.8588C39.2715 82.8588 40.1834 82.351 41.1514 82.351C41.7518 82.351 43.8365 81.9802 44.2547 81.6457C44.868 81.1551 46.8299 81.2443 47.6261 81.0673C48.8031 80.8058 49.8041 80.5736 51.054 80.5736C52.1439 80.5736 53.3221 80.3197 54.4818 80.3197C55.5586 80.3197 57.2942 80.6392 58.2764 80.1927C60.4453 79.2069 62.0041 78.3976 63.6932 76.7085C65.2314 75.1703 67.0024 74.1688 68.0661 72.3073C69.2139 70.2987 71.3384 68.3239 71.8607 65.9736C72.2897 64.0431 72.615 61.3024 71.1695 59.6963C70.1589 58.5734 68.6785 56.6087 67.1915 56.1839C66.1889 55.8974 65.4139 55.6901 64.2574 55.6901C63.876 55.6901 62.8371 55.5061 62.5365 55.7466C62.3694 55.8802 61.4458 56.4519 61.7183 56.4519 M58.6714 61.5301C61.6345 61.5301 67.3044 61.0221 67.3044 65.2118C67.3044 66.7717 67.0505 68.3398 67.0505 69.7823C67.0505 71.0056 67.0704 73.4242 66.5427 74.4797 M57.6558 79.8117C57.698 78.0787 58.5651 76.4961 59.2357 74.9874C59.586 74.1992 59.7727 72.1102 58.9253 71.6865 M50.292 79.8119C50.7824 78.5552 51.1431 77.2584 51.5616 76.0032 M40.8975 81.5892C40.9205 80.6432 41.4053 77.8499 41.4053 78.7962 M34.5493 83.8743C34.5493 83.2819 34.5493 82.6894 34.5493 82.0969 M27.4401 80.8275C27.4401 80.6563 27.2101 78.6312 27.4401 78.4012C27.8027 78.0387 28.1345 79.182 28.5827 79.431C29.3473 79.8557 29.8631 80.7694 30.4871 81.0814 M19.3147 78.5422C19.0001 77.7165 18.8531 76.6449 18.426 75.8761C18.0481 75.1958 18.7744 75.8755 18.9338 76.0031C19.5305 76.4804 20.5832 76.7615 20.8382 77.5265 M17.7912 68.1318C17.7912 68.6638 17.6508 72.7799 18.3554 71.997C19.0709 71.202 19.9764 70.3131 20.5842 69.4014 M8.39648 66.6082C8.42627 66.68 10.5884 70.7335 10.6817 69.1473C10.7106 68.6567 11.3894 66.5082 11.6974 66.3542 M41.1511 49.5961C39.2509 49.2717 38.0325 50.5439 38.8094 52.3891C39.1146 53.1138 39.2345 53.4578 40.1354 53.4048C40.5849 53.3783 40.3893 52.1004 40.3893 51.7543C40.3893 51.1196 40.3893 50.4848 40.3893 49.85C40.3893 48.821 39.9064 49.9097 39.8815 50.3578C39.8456 51.0043 39.3318 51.4236 39.3737 52.1352C39.4005 52.5912 40.503 52.9434 40.6291 52.502C40.9866 51.2508 41.5199 49.554 41.137 48.2137C40.6876 46.641 39.9129 49.0307 39.8815 49.5961C39.8346 50.441 37.9852 52.4332 40.0085 52.8829C40.9292 53.0875 40.6432 51.4828 40.6432 51.0067C40.6432 50.158 39.8389 49.6797 39.6276 48.8344 M55.1163 52.1352C54.4401 51.6024 53.0217 49.6751 52.3233 51.2465C52.0011 51.9712 51.8154 52.1869 51.8154 53.0239C51.8154 53.5582 52.9098 54.3219 53.3389 53.7856C53.779 53.2355 54.1832 52.7157 54.3405 52.0082C54.4644 51.4503 54.4919 50.2673 54.3405 49.7371C54.2224 49.3238 53.0617 50.8411 52.9439 50.9926C52.5126 51.5471 52.1745 52.5448 52.3374 53.2778C52.5254 54.1239 53.2941 53.9126 53.9737 53.9126C55.0199 53.9126 54.864 50.6715 53.8467 50.6117C52.6283 50.54 51.6443 53.4448 52.3797 54.364C53.5145 55.7825 54.6575 53.0169 54.6085 52.1352C54.5859 51.7283 53.1846 51.1625 52.8875 51.4299C52.2757 51.9805 52.3233 52.6547 52.3233 53.4047 M83.0469 52.8969C83.4983 51.7401 84.5704 48.2555 84.5704 49.4973C84.5704 50.3218 85.3361 51.3766 85.9669 51.8812C86.8985 52.6266 86.6296 53.1508 85.586 53.1508C85.2573 53.1508 82.9994 53.7591 84.0625 53.4047 M90.4102 50.3579C90.8622 49.6165 91.3831 48.2282 91.9901 47.6213C92.1182 47.4931 92.2958 48.1845 92.4415 48.2701C92.8726 48.5237 93.254 48.809 93.57 49.2153C94.7483 50.7303 92.0285 50.8657 90.918 50.8657 M97.2661 47.8186C97.514 47.6652 100.297 45.5223 100.313 45.7873C100.35 46.4182 101.129 47.104 101.456 47.6917C102.001 48.6734 99.8297 48.5398 99.2833 48.5945C98.5514 48.6677 97.8802 48.8343 97.1391 48.8343C96.8351 48.8343 95.9547 48.8343 96.7583 48.8343 M105.645 46.803C105.718 46.6329 106.695 44.3061 107.169 44.8986C107.35 45.1257 107.685 45.4365 107.93 45.5898C108.368 45.8632 109.2 47.2785 109.2 47.8186C109.2 48.8255 104.571 47.5647 104.629 47.5647 M114.278 45.5335C115.85 44.3907 115.858 44.1433 117.015 45.5899C117.49 46.1838 114.691 46.0413 114.278 46.0413 M123.419 46.0414C124.524 45.6101 125.93 44.8383 125.93 46.662C125.93 46.9267 123.529 46.8031 123.165 46.8031 M132.814 47.8187C132.976 47.6956 134.517 46.2656 134.845 46.6761C135.148 47.0543 135.353 47.4098 135.734 47.7059C136.866 48.5864 134.115 48.3265 133.576 48.3265 M141.955 48.0726C142.273 47.6523 142.969 46.2781 143.478 47.1698C143.608 47.3971 143.986 47.5299 143.986 47.8187C143.986 48.4727 142.443 48.4177 141.955 48.5804 M148.049 46.2952C148.049 45.6755 148.064 43.8607 148.811 45.1667C149.266 45.9641 149.685 46.8031 148.557 46.8031 M152.111 44.7717C152.111 43.2999 152.099 43.1758 153.127 44.2639C153.809 44.9859 153.487 45.0627 152.619 45.2796 M73.9062 45.2797C74.3783 44.3901 75.0719 43.338 75.9376 42.797C76.4275 42.4907 76.525 42.1171 76.1915 42.8675C75.9281 43.46 75.5706 45.5901 75.1758 45.7875 M80.2539 44.01C80.3601 43.5142 80.6807 41.6172 80.7617 42.9943C80.7823 43.3438 81.299 43.7075 81.467 44.01C81.9894 44.9502 82.294 45.2795 81.0156 45.2795 M88.6328 41.9787C88.9734 41.4201 89.4367 40.214 89.9588 39.75C90.1252 39.6021 90.227 40.8224 90.2974 40.9631C90.8073 41.983 91.0471 42.9944 89.6485 42.9944 M95.2349 40.9631C95.6485 40.6497 97.5317 38.5179 98.1408 38.692C98.2093 38.7116 98.5357 40.4106 98.5357 40.5822C98.5357 41.4776 98.0428 41.4709 97.2662 41.4709C96.8556 41.4709 95.0656 41.217 96.2505 41.217 M103.106 40.4551C104.997 38.9328 105.022 38.5204 106.026 40.3282C106.941 41.9744 103.671 41.0612 104.376 40.7091 M112.501 41.7248C112.765 41.5701 114.532 40.2383 114.532 41.09C114.532 41.5713 114.786 41.9733 114.786 42.4865 M123.419 41.9787C124.19 40.9914 124.689 39.9708 124.689 41.5838C124.689 42.2206 124.942 42.6912 124.942 43.2483 M131.037 42.7404C131.203 41.8865 131.227 40.63 131.855 41.4144C132.298 41.9685 132.814 41.9801 133.068 42.7404 M139.923 41.2169C140.296 40.3403 140.41 39.6431 140.939 40.568C141.152 40.9404 141.543 40.9976 141.701 41.4708 M149.572 35.1232C149.572 33.9893 149.511 33.9227 149.826 34.8693 M150.842 31.8223C150.842 31.0562 150.446 29.7395 150.969 30.6797C151.155 31.0147 151.442 31.2452 151.603 31.5684 M52.8469 52.3458C52.805 52.5658 52.3281 55.6714 52.7905 54.631C53.0792 53.9814 52.6339 53.3102 53.1008 52.7266C53.2024 52.5997 54.4276 52.0919 53.7356 52.0919C53.2906 52.0919 51.8717 51.9116 51.8312 52.5997C51.7882 53.332 52.9491 53.908 53.6086 53.8693C54.3237 53.8272 53.6764 52.5997 52.9739 52.5997C51.7046 52.5997 51.7046 52.8536 52.9739 52.8536C53.6597 52.8536 51.8805 53.2099 52.593 52.8536 M25.1704 81.5457C25.1704 72.8511 36.2524 70.6274 42.9443 70.6274 M47.2611 72.1509C45.4161 72.1509 43.5203 72.0371 41.802 72.4189C40.2481 72.7642 38.9988 73.514 37.4995 73.9424C36.5625 74.2101 34.7429 74.7278 34.0012 75.3953C33.5223 75.8263 32.9562 76.0668 32.5341 76.5944C31.9742 77.2943 31.359 78.1682 31.7724 76.7213 M9.75907 18.054C9.61507 18.054 9.50707 18.018 9.43507 17.946C9.36307 17.862 9.30907 17.724 9.27307 17.532L9.16507 17.19V17.154V17.1C9.16507 16.704 8.75107 15.354 7.92307 13.05C7.10707 10.746 6.46507 9.042 5.99707 7.938V16.992L6.06907 17.118C6.08107 17.142 6.10507 17.184 6.14107 17.244C6.17707 17.304 6.19507 17.364 6.19507 17.424C6.19507 17.58 6.14107 17.712 6.03307 17.82C5.92507 17.928 5.79307 17.982 5.63707 17.982C5.25307 17.982 5.06107 17.616 5.06107 16.884L5.04307 13.806C5.03107 12.882 5.02507 11.85 5.02507 10.71C5.02507 10.326 5.04307 9.768 5.07907 9.036C5.11507 8.28 5.13307 7.722 5.13307 7.362C5.13307 6.798 5.34907 6.354 5.78107 6.03V6.138C5.85307 6.114 5.90107 6.102 5.92507 6.102C6.20107 6.102 6.54907 6.582 6.96907 7.542C7.30507 8.31 7.60507 9.12 7.86907 9.972C8.14507 10.824 8.50507 12.036 8.94907 13.608L9.12907 14.256C9.40507 15.228 9.61507 15.924 9.75907 16.344C9.99907 13.764 10.1191 10.716 10.1191 7.2V6.966C10.1071 6.894 10.1011 6.816 10.1011 6.732C10.1011 6.372 10.2451 6.192 10.5331 6.192C10.7011 6.192 10.8271 6.258 10.9111 6.39C11.0071 6.522 11.0551 6.69 11.0551 6.894V8.244C11.0311 10.092 10.9591 12.096 10.8391 14.256C10.7191 16.416 10.5751 17.634 10.4071 17.91C10.0591 18.006 9.84307 18.054 9.75907 18.054ZM15.5644 18.342C15.2524 18.342 14.9644 18.24 14.7004 18.036C14.4364 17.844 14.2204 17.58 14.0524 17.244C13.7044 16.512 13.4884 15.714 13.4044 14.85C13.2964 14.034 13.2424 13.248 13.2424 12.492C13.2424 12.348 13.2484 12.228 13.2604 12.132V11.808C13.2604 11.748 13.2544 11.718 13.2424 11.718V11.394L13.2604 10.134C13.2724 9.75 13.3204 9.138 13.4044 8.298C13.4644 7.722 13.6024 7.164 13.8184 6.624C13.9024 6.384 14.0104 6.204 14.1424 6.084C14.2744 5.952 14.4244 5.886 14.5924 5.886C15.0724 5.886 15.5044 5.976 15.8884 6.156C16.2724 6.324 16.5964 6.564 16.8604 6.876C17.1004 7.176 17.3044 7.548 17.4724 7.992C17.6404 8.424 17.7604 8.886 17.8324 9.378C17.9044 9.882 17.9404 10.416 17.9404 10.98V11.124C17.9404 11.496 17.9464 11.832 17.9584 12.132L17.9764 13.158C17.9764 16.614 17.1724 18.342 15.5644 18.342ZM15.4924 17.586C15.7084 17.586 15.9064 17.502 16.0864 17.334C16.2664 17.154 16.4044 16.914 16.5004 16.614C16.7284 16.002 16.8664 15.342 16.9144 14.634C16.9744 14.022 17.0044 13.494 17.0044 13.05C17.0044 12.51 16.9624 11.802 16.8784 10.926C16.8064 10.002 16.7704 9.312 16.7704 8.856V8.532C16.7464 8.076 16.5904 7.68 16.3024 7.344C16.0264 7.008 15.6844 6.84 15.2764 6.84C14.8684 6.84 14.5984 7.074 14.4664 7.542C14.3464 7.914 14.2864 8.394 14.2864 8.982C14.2864 9.21 14.2924 9.402 14.3044 9.558V10.044L14.2684 10.872C14.2444 11.124 14.2324 11.4 14.2324 11.7C14.2324 12.348 14.2504 12.99 14.2864 13.626C14.3344 14.526 14.4544 15.402 14.6464 16.254C14.8384 17.142 15.1204 17.586 15.4924 17.586ZM21.3127 18.288C21.1567 18.288 21.0187 18.222 20.8987 18.09C20.7787 17.958 20.7187 17.808 20.7187 17.64C20.7187 17.46 20.7847 17.298 20.9167 17.154C21.0487 17.01 21.2047 16.938 21.3847 16.938C21.5527 16.938 21.7027 17.01 21.8347 17.154C21.9667 17.298 22.0327 17.454 22.0327 17.622C22.0327 17.814 21.9607 17.97 21.8167 18.09C21.6847 18.222 21.5167 18.288 21.3127 18.288ZM26.5158 18.288C26.3598 18.288 26.2218 18.222 26.1018 18.09C25.9818 17.958 25.9218 17.808 25.9218 17.64C25.9218 17.46 25.9878 17.298 26.1198 17.154C26.2518 17.01 26.4078 16.938 26.5878 16.938C26.7558 16.938 26.9058 17.01 27.0378 17.154C27.1698 17.298 27.2358 17.454 27.2358 17.622C27.2358 17.814 27.1638 17.97 27.0198 18.09C26.8878 18.222 26.7198 18.288 26.5158 18.288Z';

  var animalGiraffe = 'M34.9388 75.7064C32.0638 76.3598 29.1616 78.7471 27.0011 80.6675C25.3671 82.1199 22.7015 83.1292 22.7015 85.6286C22.7015 86.5863 22.3448 88.2551 21.8746 89.1014C21.4344 89.8937 21.7092 91.348 21.7092 92.2434C21.7092 94.6354 21.5485 97.0599 22.0584 99.3543C22.9878 103.537 29.5107 104.481 32.9544 104.481C35.3761 104.481 37.8695 105.404 40.2306 104.223C42.3639 103.157 44.0565 101.644 46.0369 100.512C47.815 99.4958 49.5513 98.2202 51.3288 97.2045C52.326 96.6347 53.0403 96.0353 53.8644 95.2935C54.5754 94.6537 54.8728 93.4946 55.61 92.9049C56.6545 92.0693 56.1061 87.9106 56.1061 86.6208C56.1061 84.6411 54.7007 81.5395 53.3867 80.0795C52.033 78.5755 50.6378 77.681 49.1606 76.3679C47.7587 75.1218 45.1793 75.6563 43.8504 74.5488C43.1528 73.9676 41.4508 74.1022 40.5614 74.0527C39.5671 73.9975 38.521 73.4309 37.4377 73.7404C35.8684 74.1887 34.581 76.1564 32.9544 76.6987 M26.3397 89.9283C25.1697 91.4259 24.686 92.0293 24.686 93.8972C24.686 95.193 26.2592 95.2845 27.1666 94.5586C28.0809 93.8272 27.9934 92.4969 27.9934 91.4166C27.9934 90.5564 26.6705 88.8681 26.6705 88.9361 M31.9621 88.9362C31.9194 90.6436 29.8575 96.5539 33.4321 95.5326C34.8765 95.1199 33.2851 89.7294 33.2851 88.6055 M54.122 60.8233C51.7919 60.3687 51.4761 60.4483 51.4761 62.6424C51.4761 64.2261 51.5398 64.7922 53.2951 64.7922C55.6969 64.7922 56.597 61.234 54.4527 60.1619 M52.1372 54.2084C50.6013 54.2084 48.2167 53.793 46.6983 54.2268C45.8377 54.4727 45.0512 55.7069 44.5302 56.3582C43.2191 57.997 42.8765 61.2197 42.8765 63.3037C42.8765 65.3381 45.2871 67.9687 47.0107 68.9263C48.3342 69.6616 52.4729 70.7426 53.9562 69.9185C55.0264 69.324 56.0545 68.8206 57.0982 68.3567C58.3249 67.8115 58.4649 66.7219 59.1562 65.8578C60.5702 64.0903 60.7364 61.1345 60.7364 58.8388C60.7364 56.919 57.9633 54.4148 56.106 54.2084C54.3182 54.0098 49.7246 51.7572 48.499 54.2084 M70.9893 61.1539C69.5081 62.276 68.5615 63.2228 70.4931 64.2959C71.1868 64.6813 72.566 64.589 73.1391 64.1306C75.0761 62.5809 72.2428 60.9103 70.9893 60.4924 M71.9815 53.2163C66.1874 53.2163 62.4778 58.324 63.7314 63.9654C64.2823 66.4443 66.8811 68.7649 69.0049 69.8268C70.2751 70.4619 71.8786 70.7455 73.3045 70.7455C75.0196 70.7455 75.7315 69.8679 77.0896 69.0918C78.0017 68.5706 78.9781 67.7178 79.7539 66.942C80.4722 66.2237 80.8368 64.5874 81.4076 64.1307C82.7791 63.0335 80.8379 57.5572 79.9193 56.5237C78.923 55.4029 77.9895 53.8722 76.6119 53.1428C75.5074 52.5581 73.7175 52.8856 72.4776 52.8856C70.1847 52.8856 67.4588 53.6626 66.359 55.8623 M35.9312 75.7065C37.8055 73.8857 40.0054 72.0502 42.0498 70.4147C42.4854 70.0663 43.9823 68.2129 44.1996 68.4303 M57.4293 53.2163C58.7619 50.6045 61.3465 49.1542 62.7211 46.7486C63.6358 45.1478 64.5894 44.119 65.955 42.8899C68.3191 40.7623 71.1336 41.9712 73.9662 41.9712C75.3795 41.9712 76.7363 42.6327 78.1005 42.6327C79.5469 42.6327 80.9201 42.6364 82.2347 43.2207C83.6223 43.8374 84.961 44.1538 86.3506 44.9479C87.3582 45.5236 87.8225 46.8035 88.3534 47.7591C89.086 49.0778 89.0021 50.9332 89.9152 52.1506C90.6272 53.1 90.3938 55.444 91.3301 56.193C92.0344 56.7565 92.0205 59.2763 92.4141 60.1619C92.8391 61.118 93.1491 63.1233 93.1491 64.1491C93.1491 66.2626 94.0929 68.3575 94.1413 70.4883C94.1889 72.5824 95.1336 74.5271 95.1336 76.5334C95.1336 79.7668 97.4487 82.9504 97.4487 86.2903C97.4487 88.589 98.2218 91.278 98.6063 93.5849C99.0367 96.1671 98.9662 99.4613 100.021 101.835C100.275 102.406 100.392 103.849 100.425 104.481C100.475 105.43 100.897 106.333 101.068 107.274C101.495 109.621 101.301 112.059 101.822 114.403C102.841 118.987 103.592 123.659 104.651 128.294C105.325 131.243 105.409 134.75 106.875 137.389C108.633 140.555 111.438 140.502 114.482 141.854C116.017 142.537 117.185 142.516 118.947 142.516C120.489 142.516 121.546 143.157 122.916 143.765C124.421 144.434 126.317 144.439 127.877 144.996C129.215 145.475 130.756 145.823 132.176 145.823C134.85 145.823 137.664 147.365 139.949 148.635C142.015 149.782 145.21 150.122 145.718 152.916C146.232 155.739 145.737 159.162 145.737 162.03C145.737 163.828 146.067 165.553 146.067 167.321C146.067 168.054 146.051 171.211 146.563 171.621C147.419 172.306 147.201 174.916 147.648 175.921C147.946 176.591 147.572 177.397 147.886 178.089C148.151 178.671 148.358 180.164 148.383 180.808C148.724 189.687 148.383 198.639 148.383 207.525C148.383 212.885 148.713 218.18 148.713 223.565C148.713 227.999 149.375 232.327 149.375 236.777C149.375 239.478 149.375 242.179 149.375 244.88C149.375 246.327 149.04 248.343 149.632 249.675C150.001 250.506 150.036 252.591 150.036 253.479C150.036 254.819 150.367 256.195 150.367 257.613C150.367 259.612 149.712 259.267 147.886 259.267C146.506 259.267 145.476 258.936 144.083 258.936C142.705 258.936 141.327 258.936 139.949 258.936C139.15 258.936 136.78 259.894 136.145 259.101C135.802 258.673 135.153 258.892 135.153 258.109C135.153 257.374 135.75 256.898 136.072 256.29C136.465 255.548 137.369 253.79 137.964 253.314C138.679 252.742 139.216 250.314 139.526 249.418C140.055 247.89 139.783 246.008 139.783 244.384C139.783 238.013 139.453 231.654 139.453 225.366C139.453 222.098 138.791 218.939 138.791 215.775C138.791 214.937 138.883 212.334 138.387 211.714C137.559 210.679 136.424 210.979 134.988 210.979C128.734 210.979 122.481 210.979 116.227 210.979C112.81 210.979 109.392 210.979 105.974 210.979C102.721 210.979 99.5882 211.64 96.4565 211.64C94.371 211.64 94.1413 211.973 94.1413 214.103C94.1413 216.016 93.8106 218.147 93.8106 220.166C93.8106 224.289 93.4799 228.466 93.4799 232.642C93.4799 234.052 94.0655 235.667 94.1413 237.107C94.2426 239.031 94.1413 240.987 94.1413 242.914C94.1413 244.559 94.4721 245.992 94.4721 247.617C94.4721 248.303 94.4721 248.989 94.4721 249.675C94.4721 250.57 94.8281 250.513 95.1336 251.2C95.4917 252.006 99.2329 259.598 97.2834 259.598C95.6691 259.598 94.1338 258.936 92.4876 258.936C90.8339 258.936 89.1802 258.936 87.5266 258.936C85.9568 258.936 80.9118 260.534 80.9118 257.944C80.9118 255.619 83.8909 253.057 84.5315 250.815C85.2289 248.374 85.8729 245.808 85.8729 243.226C85.8729 240.084 85.8729 236.942 85.8729 233.8C85.8729 232.305 85.8729 230.811 85.8729 229.317C85.8729 227.658 85.2114 226.154 85.2114 224.539C85.2114 222.103 84.9669 218.532 83.9619 216.271C83.4873 215.203 83.8592 213.605 83.5393 212.486C83.3153 211.702 83.1298 209.865 82.639 209.252C82.0608 208.529 82.7817 206.257 82.0694 205.687C81.2804 205.056 81.3395 202.332 81.0771 201.387C79.3812 195.282 80.2503 188.767 80.2503 182.535C80.2503 177.701 80.2503 172.591 80.2503 167.652C80.2503 163.591 79.5888 159.768 79.5888 155.69C79.5888 151.113 78.9273 146.617 78.9273 142.02C78.9273 138.067 77.9351 134.439 77.9351 130.444C77.9351 127.245 77.9452 123.957 77.2553 120.852C77.0097 119.747 76.6857 117.802 76.0242 116.976C75.6038 116.45 75.9507 114.731 75.9507 114.054C75.9507 111.88 75.9507 109.705 75.9507 107.531C75.9507 105.819 75.6199 104.095 75.6199 102.331C75.6199 101.011 74.6976 99.7155 74.6277 98.5276C74.591 97.904 73.5014 94.8274 73.1394 94.9078C72.4283 95.0659 72.0688 95.7936 71.3203 95.8817C70.9348 95.927 69.8734 96.1711 69.5013 96.3778C68.2348 97.0814 66.389 96.1992 65.0363 96.8004C64.0072 97.2578 62.03 96.8739 60.9021 96.8739C59.0112 96.8739 54.4526 95.563 54.4526 93.2358 M80.5811 206.679C80.5811 211.285 80.5811 215.891 80.5811 220.497C80.5811 224.825 81.5733 229.122 81.5733 233.469C81.5733 235.894 81.5733 238.32 81.5733 240.745C81.5733 242.367 82.1098 245.293 81.2426 246.68C80.1665 248.402 79.3498 250.574 78.0087 252.064C76.4746 253.768 78.668 255.432 80.2504 255.959 M80.9116 247.029C82.1243 247.029 83.337 247.029 84.5498 247.029 M86.5342 250.667C89.8416 250.667 93.149 250.667 96.4564 250.667 M132.507 246.699C134.271 246.699 136.035 246.699 137.799 246.699 M140.775 250.667C143.642 250.667 146.508 250.667 149.375 250.667 M147.06 153.43C147.667 156.198 149.554 158.962 149.706 161.699C149.788 163.185 150.367 164.731 150.367 166.164C150.367 167.381 150.13 168.856 150.624 169.967C151.151 171.153 150.533 172.984 150.716 174.267C150.94 175.833 151.519 177.357 151.69 178.897C152.063 182.256 153.94 184.201 152.756 187.754C151.014 192.98 150.353 198.297 152.609 203.372C152.996 204.244 153.755 205.429 154.832 205.669C156.222 205.977 156.866 204.412 157.386 203.372C158.716 200.712 158.636 197.683 158.636 194.773C158.636 192.493 157.691 190.529 156.725 188.489C156.237 187.46 155.871 186.053 155.641 185.016C155.354 183.727 154.336 182.58 154.336 181.212C154.336 179.082 152.81 176.888 152.682 174.598C152.614 173.361 152.021 172.403 152.021 171.125C152.021 169.701 151.69 168.41 151.69 166.991C151.69 162.117 153.079 154.475 148.971 151.189C147.204 149.775 145.287 150.983 143.679 149.535C143.038 148.959 141.056 148.053 140.261 147.826C139.33 147.56 138.471 146.815 137.468 146.815 M69.005 41.6404C69.005 38.9945 69.005 36.3486 69.005 33.7027C69.005 32.8677 69.2155 31.7109 68.9866 30.9098C68.9083 30.6358 66.7746 30.4186 66.3591 29.8992C65.2442 28.5055 65.0361 26.4852 65.0361 24.7727C65.0361 23.0166 68.9358 23.119 70.1626 23.119C71.9854 23.119 73.8416 24.2542 74.3152 25.9119C74.8525 27.7923 73.433 29.1 71.6509 29.9911C70.7047 30.4642 70.6873 31.0706 71.1548 32.3797C71.5666 33.5327 71.1681 34.8245 71.3386 36.0179C71.5012 37.1563 71.6509 38.1263 71.6509 39.3253C71.6509 40.2638 72.3124 40.7707 72.3124 41.6404 M83.2271 42.6325C83.2861 39.7964 85.221 37.5953 85.5422 35.0255C85.6213 34.3933 87.3915 30.834 86.7917 31.3139C85.5387 32.3163 84.846 26.7214 84.8807 26.0956C84.9845 24.2278 89.125 24.6531 90.1726 25.1769C91.8392 26.0102 93.48 27.0386 93.48 29.0722C93.48 30.2155 93.6665 30.8413 92.892 31.4609C92.2445 31.9789 90.6903 31.6782 90.2461 32.1224C89.7199 32.6485 89.9572 34.3025 89.4376 34.952C88.8485 35.6884 88.4042 36.7774 87.9309 37.6714C87.4812 38.5208 85.0562 41.1543 85.873 41.9711 M89.8418 44.6169C93.4006 42.0287 97.4858 39.9866 101.914 39.9866C103.898 39.9866 104.78 41.4855 106.213 42.6325C106.812 43.1117 107.393 44.1249 107.959 44.6904C108.676 45.4077 109.726 46.3209 110.348 47.0975C111.623 48.6921 113.834 49.7077 114.978 51.7094C115.408 52.462 116.05 53.2236 116.632 53.8776C117.484 54.837 116.136 55.1297 115.162 54.8515C111.408 53.7791 107.646 50.901 103.567 50.901C101.822 50.901 100.024 50.2395 98.1103 50.2395C97.035 50.2395 93.2236 50.299 92.4142 49.6515C91.8383 49.1908 90.5033 49.7045 90.5033 48.4204C90.5033 47.9272 90.4743 47.4243 90.5033 46.9321C90.5287 46.4993 91.2639 46.5882 91.569 46.3441C92.1743 45.8598 93.88 46.4206 94.6375 46.2522C95.6775 46.0211 96.8085 45.6904 97.7795 45.2049C98.9958 44.5968 102.469 44.2988 103.476 45.2049C104.84 46.433 106.395 47.51 108.032 48.3285C109.831 49.2277 111.312 50.0649 112.736 51.4889C113.251 52.0037 113.862 52.4821 114.316 53.0508C114.448 53.2145 116.143 54.4603 116.301 54.5391 M67.0208 41.9712C65.449 39.4322 63.582 37.5665 61.3247 35.7607C60.478 35.0832 58.1406 34.0948 57.0986 34.0335C55.2868 33.9269 53.5765 34.201 52.211 35.4299C50.9758 36.5416 48.785 36.5171 47.4337 37.5981C44.7628 39.7348 41.2881 40.8151 38.9815 43.6984C38.7553 43.9811 37.7849 45.2514 38.2465 45.2786C39.1627 45.3325 40.0903 45.6093 40.8924 45.6093C42.8507 45.6093 44.6344 45.9401 46.6804 45.9401C50.7595 45.9401 54.8386 45.9401 58.9177 45.9401C59.8013 45.9401 61.0284 46.1639 61.876 45.9217C62.4463 45.7587 63.0528 44.6826 63.548 44.2864C65.0792 43.0615 61.3375 41.2411 60.2407 40.9974C58.5213 40.6153 56.86 39.9868 54.9488 39.9868C53.0881 39.9868 51.0025 40.3175 49.3263 40.3175C47.7762 40.3175 45.8881 41.9819 44.3652 42.3203C42.6133 42.7096 40.6421 43.9556 38.908 43.9556 M98.11 95.5508C96.607 96.174 94.4868 97.1777 93.645 98.6928C93.0368 99.7876 92.9403 101.351 92.2302 102.239C91.9 102.652 91.9842 103.256 91.4952 103.562C91.2591 103.71 90.3141 104.469 90.1723 104.646C89.0001 106.111 88.5186 106.113 88.5186 108.119C88.5186 111.22 91.0622 110.809 92.7447 112.492C93.6233 113.371 94.8025 114.55 95.9602 115.064C97.2026 115.617 98.6005 115.144 99.7637 115.726 M96.7873 124.325C94.7478 124.325 92.7082 124.325 90.6687 124.325C89.2383 124.325 88.5712 124.948 87.3429 125.299C84.5595 126.094 84.2192 129.875 84.2192 132.263C84.2192 134.494 85.9797 136.027 86.5528 138.033C87.1908 140.266 88.9318 141.937 90.5033 143.508C91.9995 145.004 94.3554 146.049 96.2912 144.5C97.28 143.709 97.5992 142.134 98.441 141.193C99.2929 140.241 100.095 138.799 100.095 137.555C100.095 135.139 100.597 132.124 100.076 129.782C99.8385 128.712 99.4937 127.397 99.4332 126.31C99.3889 125.511 97.8243 123.154 97.4488 124.656 M80.25 154.422C82.5236 154.91 85.3232 156.695 87.122 158.134C87.7579 158.643 88.2005 159.525 88.8492 159.971C90.0358 160.787 89.4428 162.29 89.9149 163.352C91.1435 166.117 87.5106 166.077 86.2768 167.064C85.6248 167.586 83.7732 168.267 82.8959 168.313C81.9553 168.363 80.25 170.248 80.25 169.306 M86.2034 183.528C84.8646 183.789 84.09 183.934 83.1532 184.777C82.1116 185.715 83.0263 186.835 84.3843 186.835C85.6101 186.835 85.6271 186.767 86.3688 186.174C87.2608 185.46 86.1889 184.405 85.5419 184.189 M104.394 172.282C101.696 172.875 99.5083 175.184 97.6138 177.078C95.7711 178.921 96.1255 181.053 96.1255 183.527C96.1255 188.083 101.233 190.258 104.908 188.158C106.803 187.075 107.297 184.041 107.959 182.131C108.682 180.04 108.481 177.525 108.014 175.424C107.636 173.726 104.931 172.372 103.402 172.282C102.054 172.203 97.8616 171.125 97.1177 172.613 M109.025 147.146C107.171 147.553 104.064 149.872 104.064 152.107C104.064 154.037 104.064 155.966 104.064 157.895C104.064 159.344 105.85 160.913 107.04 161.442C108.779 162.215 110.6 162.03 112.497 162.03C116.021 162.03 119.409 162.014 122.585 163.426C123.455 163.813 124.247 164.252 125.157 164.602C125.722 164.819 127.565 165.112 127.877 165.502C128.284 166.011 132.529 165.879 133.169 165.594C136.192 164.25 135.201 156.715 133.499 154.588C131.798 152.462 128.459 151.163 126.039 150.472C125.41 150.292 124.035 150.123 123.412 150.123C122.416 150.123 121.684 149.461 120.766 149.461C118.898 149.461 117.154 148.138 115.235 148.138C112.997 148.138 110.931 147.808 108.694 147.808C108.022 147.808 102.565 147.963 103.402 148.8 M144.414 178.236C144.49 181.427 145.406 184.326 145.406 187.496C145.406 189.831 145.7 192.454 145.7 194.607C145.7 194.769 139.259 193.967 138.626 193.615C137.704 193.103 136.25 192.747 135.3 192.476C134.486 192.243 132.285 191.015 132.176 190.142C132.089 189.447 130.92 188.225 130.596 187.496C130.103 186.386 130.739 184.965 131.515 184.189C132.372 183.332 133.041 182.364 133.756 181.469C134.464 180.585 134.301 178.976 135.006 178.07C136.52 176.123 138.907 175.599 141.253 176.269C142.372 176.589 142.841 177.775 143.109 178.713C143.421 179.804 144.697 180.409 145.075 181.543 M123.577 208.664C122.247 205.456 120.159 202.122 117.697 199.66C116.855 198.818 115.356 197.749 114.151 197.749C112.322 197.749 111.453 198.691 109.851 199.403C107.51 200.443 105.41 201.788 103.218 203.041C101.794 203.855 100.52 204.637 100.425 206.348C100.402 206.773 100.002 210.502 100.425 209.656 M148.382 232.146C146.929 231.869 144.57 231.206 143.495 232.55C143.002 233.166 143.421 235.643 143.421 236.446C143.421 237.497 144.311 239.32 145.075 240.084C146.261 241.27 147.434 240.415 148.713 240.415 M133.175 212.31C133.175 217.497 133.929 222.439 133.929 227.624C133.929 232.236 133.678 236.799 133.678 241.431C133.678 242.598 134.223 245.948 133.538 246.829C132.525 248.132 132.085 249.418 131.293 250.845C130.809 251.717 129.432 254.877 131.418 254.988C132.208 255.031 133.012 254.988 133.803 254.988C134.498 254.988 135.013 255.49 135.686 255.49 M30.6225 133C30.4305 133 30.2865 132.964 30.1905 132.892C30.1065 132.82 30.0645 132.7 30.0645 132.532V130.174C29.9085 130.066 29.6145 129.97 29.1825 129.886C28.7505 129.802 28.3425 129.748 27.9585 129.724C27.8265 129.976 27.7305 130.282 27.6705 130.642L27.5985 131.002C27.5865 131.086 27.5505 131.272 27.4905 131.56C27.4305 131.848 27.3645 132.1 27.2925 132.316C27.2205 132.52 27.1485 132.682 27.0765 132.802C26.6205 132.802 26.3565 132.682 26.2845 132.442C26.4165 132.25 26.5665 131.686 26.7345 130.75L27.3285 127.456C27.5925 125.896 27.8325 124.564 28.0485 123.46C28.2765 122.356 28.5165 121.432 28.7685 120.688C29.0445 119.86 29.3085 119.446 29.5605 119.446C29.8125 119.446 30.0045 119.494 30.1365 119.59C30.1365 120.07 30.2505 121.228 30.4785 123.064C30.7185 124.864 30.8385 126.094 30.8385 126.754C30.8385 127.39 30.9045 128.302 31.0365 129.49C31.1565 130.702 31.2165 131.668 31.2165 132.388C31.2165 132.796 31.0185 133 30.6225 133ZM29.6865 129.13C29.7825 129.13 29.9025 129.112 30.0465 129.076C30.0105 128.548 29.9505 127.894 29.8665 127.114C29.5905 124.402 29.4525 122.74 29.4525 122.128V121.984C29.3325 122.104 29.1645 122.65 28.9485 123.622C28.7445 124.582 28.5525 125.614 28.3725 126.718C28.1925 127.822 28.0965 128.554 28.0845 128.914C28.5885 129.058 29.1225 129.13 29.6865 129.13ZM36.1415 133.288C35.7095 133.144 35.1755 133.072 34.5395 133.072C34.3475 133.192 34.1435 133.252 33.9275 133.252C33.7835 133.252 33.6575 133.186 33.5495 133.054C33.4535 132.934 33.4055 132.802 33.4055 132.658C33.4055 131.65 33.4475 130.306 33.5315 128.626C33.6035 126.838 33.6395 125.5 33.6395 124.612V124.486C33.5675 123.73 33.5315 123.166 33.5315 122.794C33.5315 121.654 33.7415 121.084 34.1615 121.084C34.2815 121.084 34.3835 121.132 34.4675 121.228C34.5635 121.312 34.6115 121.414 34.6115 121.534C34.6115 121.678 34.5935 121.906 34.5575 122.218C34.5215 122.518 34.5035 122.746 34.5035 122.902C34.5035 123.706 34.5095 124.432 34.5215 125.08C34.5335 125.716 34.5395 126.436 34.5395 127.24C34.4795 127.42 34.4495 127.672 34.4495 127.996V128.212L34.4135 129.634C34.3895 130.054 34.3775 130.534 34.3775 131.074C34.3775 131.902 34.5755 132.316 34.9715 132.316C34.9955 132.316 35.0315 132.316 35.0795 132.316C35.1395 132.304 35.2175 132.298 35.3135 132.298C35.4215 132.286 35.5595 132.28 35.7275 132.28C36.3755 132.28 36.6995 132.46 36.6995 132.82C36.6995 132.94 36.6455 133.042 36.5375 133.126C36.4295 133.21 36.2975 133.264 36.1415 133.288ZM38.5099 133.252C38.2939 133.216 38.1079 133.138 37.9519 133.018C37.8079 132.898 37.7239 132.742 37.6999 132.55L37.8979 132.244C37.9699 132.244 38.0839 132.268 38.2399 132.316C38.4199 132.352 38.5579 132.37 38.6539 132.37C38.8699 132.37 39.0619 132.274 39.2299 132.082C39.4099 131.89 39.5419 131.638 39.6259 131.326C39.7819 130.75 39.8599 130.234 39.8599 129.778C39.8599 128.986 39.6079 128.152 39.1039 127.276L38.9059 126.934C38.6779 126.538 38.4859 126.184 38.3299 125.872C38.1739 125.56 38.0419 125.224 37.9339 124.864C37.7899 124.396 37.7179 123.928 37.7179 123.46C37.7179 122.932 37.8379 122.38 38.0779 121.804C38.1979 121.528 38.3659 121.306 38.5819 121.138C38.8099 120.958 39.0619 120.868 39.3379 120.868C39.5539 120.868 39.7519 120.94 39.9319 121.084C40.1239 121.216 40.2199 121.378 40.2199 121.57C40.2199 121.678 40.1779 121.762 40.0939 121.822C40.0099 121.882 39.9079 121.912 39.7879 121.912C39.6559 121.912 39.5299 121.876 39.4099 121.804C39.1459 121.816 38.9359 122.05 38.7799 122.506C38.6479 122.926 38.5819 123.274 38.5819 123.55C38.5819 123.898 38.6359 124.252 38.7439 124.612C38.8519 124.96 38.9899 125.278 39.1579 125.566L39.5539 126.286L40.1839 127.474C40.3519 127.81 40.4839 128.2 40.5799 128.644C40.6879 129.088 40.7419 129.538 40.7419 129.994C40.7419 130.726 40.5739 131.422 40.2379 132.082C40.0699 132.418 39.8299 132.688 39.5179 132.892C39.2179 133.096 38.8819 133.198 38.5099 133.198V133.252ZM44.7392 133.342C44.4272 133.342 44.1392 133.24 43.8752 133.036C43.6112 132.844 43.3952 132.58 43.2272 132.244C42.8792 131.512 42.6632 130.714 42.5792 129.85C42.4712 129.034 42.4172 128.248 42.4172 127.492C42.4172 127.348 42.4232 127.228 42.4352 127.132V126.808C42.4352 126.748 42.4292 126.718 42.4172 126.718V126.394L42.4352 125.134C42.4472 124.75 42.4952 124.138 42.5792 123.298C42.6392 122.722 42.7772 122.164 42.9932 121.624C43.0772 121.384 43.1852 121.204 43.3172 121.084C43.4492 120.952 43.5992 120.886 43.7672 120.886C44.2472 120.886 44.6792 120.976 45.0632 121.156C45.4472 121.324 45.7712 121.564 46.0352 121.876C46.2752 122.176 46.4792 122.548 46.6472 122.992C46.8152 123.424 46.9352 123.886 47.0072 124.378C47.0792 124.882 47.1152 125.416 47.1152 125.98V126.124C47.1152 126.496 47.1212 126.832 47.1332 127.132L47.1512 128.158C47.1512 131.614 46.3472 133.342 44.7392 133.342ZM44.6672 132.586C44.8832 132.586 45.0812 132.502 45.2612 132.334C45.4412 132.154 45.5792 131.914 45.6752 131.614C45.9032 131.002 46.0412 130.342 46.0892 129.634C46.1492 129.022 46.1792 128.494 46.1792 128.05C46.1792 127.51 46.1372 126.802 46.0532 125.926C45.9812 125.002 45.9452 124.312 45.9452 123.856V123.532C45.9212 123.076 45.7652 122.68 45.4772 122.344C45.2012 122.008 44.8592 121.84 44.4512 121.84C44.0432 121.84 43.7732 122.074 43.6412 122.542C43.5212 122.914 43.4612 123.394 43.4612 123.982C43.4612 124.21 43.4672 124.402 43.4792 124.558V125.044L43.4432 125.872C43.4192 126.124 43.4072 126.4 43.4072 126.7C43.4072 127.348 43.4252 127.99 43.4612 128.626C43.5092 129.526 43.6292 130.402 43.8212 131.254C44.0132 132.142 44.2952 132.586 44.6672 132.586ZM35.4622 156.054C35.3182 156.054 35.2102 156.018 35.1382 155.946C35.0662 155.862 35.0122 155.724 34.9762 155.532L34.8682 155.19V155.154V155.1C34.8682 154.704 34.4542 153.354 33.6262 151.05C32.8102 148.746 32.1682 147.042 31.7002 145.938V154.992L31.7722 155.118C31.7842 155.142 31.8082 155.184 31.8442 155.244C31.8802 155.304 31.8982 155.364 31.8982 155.424C31.8982 155.58 31.8442 155.712 31.7362 155.82C31.6282 155.928 31.4962 155.982 31.3402 155.982C30.9562 155.982 30.7642 155.616 30.7642 154.884L30.7462 151.806C30.7342 150.882 30.7282 149.85 30.7282 148.71C30.7282 148.326 30.7462 147.768 30.7822 147.036C30.8182 146.28 30.8362 145.722 30.8362 145.362C30.8362 144.798 31.0522 144.354 31.4842 144.03V144.138C31.5562 144.114 31.6042 144.102 31.6282 144.102C31.9042 144.102 32.2522 144.582 32.6722 145.542C33.0082 146.31 33.3082 147.12 33.5722 147.972C33.8482 148.824 34.2082 150.036 34.6522 151.608L34.8322 152.256C35.1082 153.228 35.3182 153.924 35.4622 154.344C35.7022 151.764 35.8222 148.716 35.8222 145.2V144.966C35.8102 144.894 35.8042 144.816 35.8042 144.732C35.8042 144.372 35.9482 144.192 36.2362 144.192C36.4042 144.192 36.5302 144.258 36.6142 144.39C36.7102 144.522 36.7582 144.69 36.7582 144.894V146.244C36.7342 148.092 36.6622 150.096 36.5422 152.256C36.4222 154.416 36.2782 155.634 36.1102 155.91C35.7622 156.006 35.5462 156.054 35.4622 156.054ZM41.2675 156.342C40.9555 156.342 40.6675 156.24 40.4035 156.036C40.1395 155.844 39.9235 155.58 39.7555 155.244C39.4075 154.512 39.1915 153.714 39.1075 152.85C38.9995 152.034 38.9455 151.248 38.9455 150.492C38.9455 150.348 38.9515 150.228 38.9635 150.132V149.808C38.9635 149.748 38.9575 149.718 38.9455 149.718V149.394L38.9635 148.134C38.9755 147.75 39.0235 147.138 39.1075 146.298C39.1675 145.722 39.3055 145.164 39.5215 144.624C39.6055 144.384 39.7135 144.204 39.8455 144.084C39.9775 143.952 40.1275 143.886 40.2955 143.886C40.7755 143.886 41.2075 143.976 41.5915 144.156C41.9755 144.324 42.2995 144.564 42.5635 144.876C42.8035 145.176 43.0075 145.548 43.1755 145.992C43.3435 146.424 43.4635 146.886 43.5355 147.378C43.6075 147.882 43.6435 148.416 43.6435 148.98V149.124C43.6435 149.496 43.6495 149.832 43.6615 150.132L43.6795 151.158C43.6795 154.614 42.8755 156.342 41.2675 156.342ZM41.1955 155.586C41.4115 155.586 41.6095 155.502 41.7895 155.334C41.9695 155.154 42.1075 154.914 42.2035 154.614C42.4315 154.002 42.5695 153.342 42.6175 152.634C42.6775 152.022 42.7075 151.494 42.7075 151.05C42.7075 150.51 42.6655 149.802 42.5815 148.926C42.5095 148.002 42.4735 147.312 42.4735 146.856V146.532C42.4495 146.076 42.2935 145.68 42.0055 145.344C41.7295 145.008 41.3875 144.84 40.9795 144.84C40.5715 144.84 40.3015 145.074 40.1695 145.542C40.0495 145.914 39.9895 146.394 39.9895 146.982C39.9895 147.21 39.9955 147.402 40.0075 147.558V148.044L39.9715 148.872C39.9475 149.124 39.9355 149.4 39.9355 149.7C39.9355 150.348 39.9535 150.99 39.9895 151.626C40.0375 152.526 40.1575 153.402 40.3495 154.254C40.5415 155.142 40.8235 155.586 41.1955 155.586ZM25.4126 179.396C24.9806 179.396 24.6086 179.318 24.2966 179.162C24.1046 179.054 24.0086 178.928 24.0086 178.784C24.0086 178.64 24.0446 178.526 24.1166 178.442C24.1886 178.346 24.2906 178.298 24.4226 178.298C24.5426 178.298 24.7166 178.346 24.9446 178.442C25.1966 178.538 25.3526 178.586 25.4126 178.586C25.6406 178.586 25.8446 178.49 26.0246 178.298C26.2166 178.094 26.3666 177.83 26.4746 177.506C26.6906 176.906 26.7986 176.366 26.7986 175.886C26.7986 175.37 26.7146 174.83 26.5466 174.266C26.3906 173.69 26.1746 173.132 25.8986 172.592L25.6106 172.016C25.3106 171.416 25.0766 170.942 24.9086 170.594C24.7526 170.246 24.6146 169.868 24.4946 169.46C24.3146 168.884 24.2246 168.326 24.2246 167.786C24.2246 167.354 24.2966 166.946 24.4406 166.562C24.5966 166.178 24.8246 165.854 25.1246 165.59C25.4246 165.302 25.7966 165.158 26.2406 165.158C26.4566 165.158 26.6666 165.224 26.8706 165.356C27.0746 165.476 27.2186 165.632 27.3026 165.824L26.9966 166.202C26.6846 166.202 26.4506 166.142 26.2946 166.022C26.0786 166.046 25.8866 166.154 25.7186 166.346C25.5626 166.526 25.4426 166.736 25.3586 166.976C25.2866 167.204 25.2506 167.432 25.2506 167.66C25.2506 168.116 25.3106 168.584 25.4306 169.064C25.5626 169.532 25.7306 169.976 25.9346 170.396L27.1946 172.916C27.3986 173.348 27.5606 173.834 27.6806 174.374C27.8006 174.914 27.8606 175.454 27.8606 175.994C27.8606 176.786 27.6686 177.53 27.2846 178.226C27.0806 178.586 26.8166 178.868 26.4926 179.072C26.1686 179.288 25.8086 179.396 25.4126 179.396ZM32.6962 179.288C32.2642 179.144 31.7302 179.072 31.0942 179.072C30.9022 179.192 30.6982 179.252 30.4822 179.252C30.3382 179.252 30.2122 179.186 30.1042 179.054C30.0082 178.934 29.9602 178.802 29.9602 178.658C29.9602 177.65 30.0022 176.306 30.0862 174.626C30.1582 172.838 30.1942 171.5 30.1942 170.612V170.486C30.1222 169.73 30.0862 169.166 30.0862 168.794C30.0862 167.654 30.2962 167.084 30.7162 167.084C30.8362 167.084 30.9382 167.132 31.0222 167.228C31.1182 167.312 31.1662 167.414 31.1662 167.534C31.1662 167.678 31.1482 167.906 31.1122 168.218C31.0762 168.518 31.0582 168.746 31.0582 168.902C31.0582 169.706 31.0642 170.432 31.0762 171.08C31.0882 171.716 31.0942 172.436 31.0942 173.24C31.0342 173.42 31.0042 173.672 31.0042 173.996V174.212L30.9682 175.634C30.9442 176.054 30.9322 176.534 30.9322 177.074C30.9322 177.902 31.1302 178.316 31.5262 178.316C31.5502 178.316 31.5862 178.316 31.6342 178.316C31.6942 178.304 31.7722 178.298 31.8682 178.298C31.9762 178.286 32.1142 178.28 32.2822 178.28C32.9302 178.28 33.2542 178.46 33.2542 178.82C33.2542 178.94 33.2002 179.042 33.0922 179.126C32.9842 179.21 32.8522 179.264 32.6962 179.288ZM36.8466 179.342C36.5346 179.342 36.2466 179.24 35.9826 179.036C35.7186 178.844 35.5026 178.58 35.3346 178.244C34.9866 177.512 34.7706 176.714 34.6866 175.85C34.5786 175.034 34.5246 174.248 34.5246 173.492C34.5246 173.348 34.5306 173.228 34.5426 173.132V172.808C34.5426 172.748 34.5366 172.718 34.5246 172.718V172.394L34.5426 171.134C34.5546 170.75 34.6026 170.138 34.6866 169.298C34.7466 168.722 34.8846 168.164 35.1006 167.624C35.1846 167.384 35.2926 167.204 35.4246 167.084C35.5566 166.952 35.7066 166.886 35.8746 166.886C36.3546 166.886 36.7866 166.976 37.1706 167.156C37.5546 167.324 37.8786 167.564 38.1426 167.876C38.3826 168.176 38.5866 168.548 38.7546 168.992C38.9226 169.424 39.0426 169.886 39.1146 170.378C39.1866 170.882 39.2226 171.416 39.2226 171.98V172.124C39.2226 172.496 39.2286 172.832 39.2406 173.132L39.2586 174.158C39.2586 177.614 38.4546 179.342 36.8466 179.342ZM36.7746 178.586C36.9906 178.586 37.1886 178.502 37.3686 178.334C37.5486 178.154 37.6866 177.914 37.7826 177.614C38.0106 177.002 38.1486 176.342 38.1966 175.634C38.2566 175.022 38.2866 174.494 38.2866 174.05C38.2866 173.51 38.2446 172.802 38.1606 171.926C38.0886 171.002 38.0526 170.312 38.0526 169.856V169.532C38.0286 169.076 37.8726 168.68 37.5846 168.344C37.3086 168.008 36.9666 167.84 36.5586 167.84C36.1506 167.84 35.8806 168.074 35.7486 168.542C35.6286 168.914 35.5686 169.394 35.5686 169.982C35.5686 170.21 35.5746 170.402 35.5866 170.558V171.044L35.5506 171.872C35.5266 172.124 35.5146 172.4 35.5146 172.7C35.5146 173.348 35.5326 173.99 35.5686 174.626C35.6166 175.526 35.7366 176.402 35.9286 177.254C36.1206 178.142 36.4026 178.586 36.7746 178.586ZM42.2349 178.712L42.2169 178.01C42.2049 177.806 42.1989 177.578 42.1989 177.326L42.2169 176.714C42.1809 176.582 42.0909 175.268 41.9469 172.772C41.8029 170.276 41.7189 168.674 41.6949 167.966C40.9989 167.942 40.5549 167.87 40.3629 167.75C40.2309 167.654 40.1649 167.546 40.1649 167.426C40.1649 167.33 40.2249 167.246 40.3449 167.174C40.4769 167.09 40.6089 167.048 40.7409 167.048C41.0769 167.048 41.4849 167.072 41.9649 167.12C42.4209 167.18 42.8289 167.21 43.1889 167.21H43.3329H43.4769C43.8489 167.21 44.0349 167.354 44.0349 167.642C44.0349 167.786 43.9749 167.906 43.8549 168.002C43.7349 168.086 43.5969 168.128 43.4409 168.128C43.3329 168.128 43.1769 168.11 42.9729 168.074L42.6129 168.002L42.5949 168.092L42.5769 168.182C42.5769 169.25 42.6789 170.954 42.8829 173.294C43.0749 175.49 43.1709 177.194 43.1709 178.406C43.1709 178.55 43.1049 178.676 42.9729 178.784C42.8529 178.892 42.7149 178.946 42.5589 178.946L42.2349 178.712ZM49.0004 179C48.5924 179 48.3884 178.01 48.3884 176.03L48.4064 175.004L48.4244 174.176V174.122V173.942C48.4364 173.846 48.4424 173.732 48.4424 173.6C48.4424 173.576 48.4244 173.546 48.3884 173.51C48.3524 173.474 48.3344 173.444 48.3344 173.42V173.402C48.2744 173.426 48.1664 173.438 48.0104 173.438C47.8544 173.438 47.6624 173.414 47.4344 173.366C47.3624 173.354 47.1704 173.324 46.8584 173.276V175.346C46.8584 175.658 46.8764 176.15 46.9124 176.822C46.9484 177.482 46.9664 177.974 46.9664 178.298C46.9664 178.478 46.9184 178.634 46.8224 178.766C46.7264 178.898 46.6004 178.964 46.4444 178.964C46.2164 178.964 46.0544 178.742 45.9584 178.298C45.8624 177.842 45.8144 177.248 45.8144 176.516L45.8504 175.058C45.8624 174.65 45.8684 174.218 45.8684 173.762V173.456V173.204C45.8684 173.012 45.8624 172.886 45.8504 172.826V172.736L45.9044 171.692C45.9044 171.236 45.8864 170.558 45.8504 169.658C45.8144 168.758 45.7964 168.08 45.7964 167.624C45.7964 167.48 45.8444 167.354 45.9404 167.246C46.0364 167.138 46.1564 167.084 46.3004 167.084C46.6844 167.084 46.8764 167.444 46.8764 168.164L46.8404 170.396C46.8164 171.068 46.8044 171.818 46.8044 172.646C46.9844 172.706 47.3084 172.736 47.7764 172.736H48.4424C48.4664 172.664 48.4784 172.592 48.4784 172.52C48.4784 171.944 48.4424 171.092 48.3704 169.964C48.2864 168.908 48.2444 168.05 48.2444 167.39C48.2444 167.258 48.2924 167.15 48.3884 167.066C48.4964 166.97 48.6224 166.922 48.7664 166.922C48.8504 166.922 48.9704 166.952 49.1264 167.012L49.2884 167.084C49.2884 168.788 49.3484 171.062 49.4684 173.906L49.6304 178.46C49.6304 178.628 49.5644 178.76 49.4324 178.856C49.3124 178.952 49.1684 179 49.0004 179Z M38.9711 191.456C38.9711 194.801 38.8373 198.191 38.9711 201.537C39.0697 204.002 41.555 206.05 42.4832 208.138C44.1963 211.993 51.0396 212.598 54.4502 211.358C59.2335 209.618 62.0558 205.221 64.0109 200.822C65.4097 197.674 67.3601 194.969 68.8237 192.041 M63.5557 192.041C64.7951 191.637 72.3358 188.162 72.3358 190.285C72.3358 192.627 72.3358 199.651 72.3358 197.309';

  var animalPig = 'M24 8C27.4421 8 30.3902 7.68623 33.2473 6.46329C36.0973 5.24337 39.5112 5.48539 42.6758 5.48539C45.4734 5.48539 47.9517 4.43592 50.8352 5.4233C51.9405 5.80179 53.0835 5.80949 54.0183 6.38568C54.8863 6.92071 56.0127 7.49288 57 8 M60.3333 6.74229C57.4633 7.33314 56 7.36681 56 10.7868C56 11.7864 55.6667 12.6972 55.6667 13.7762C55.6667 15.0181 56.6981 15.5762 57.3333 16.4139C57.914 17.1797 60.3004 18.4137 61.1852 18.6804C62.9752 19.22 63.0355 22.0485 64.4815 22.9203C65.7047 23.6578 66.6258 24.7489 67.2593 26.0855C68.0764 27.8098 68.8916 28.8415 70.0741 30.2277C71.5074 31.9081 73.4176 33.7442 75.6667 32.6896C76.554 32.2735 77.414 31.8544 77.6852 30.853C77.9384 29.918 77.6819 28.4233 78.0741 27.4923C78.6741 26.068 79 23.2305 79 21.6894C79 19.6964 79 17.7035 79 15.7105C79 13.4491 78.8892 11.0335 77.8333 9.02831C77.5858 8.55821 77.7787 8.12311 77.6481 7.64107C77.5162 7.15394 76.837 6.55469 76.5926 6.0389C76.2242 5.26158 75.5519 4.0214 74.8148 3.57703C72.0518 1.91118 67.8402 0.0568419 64.6667 1.54501C60.7696 3.37245 57.1029 5.57866 54 8.85246 M79.017 13.0527C82.9451 13.0527 86.2965 12 90.1762 12C94.4274 12 98.6785 12 102.93 12C105.625 12 108.483 14.8653 110.901 16.1328C113.062 17.2663 115.892 18.699 117.631 20.4216C118.409 21.1914 118.325 21.5048 119.226 22.0006C119.951 22.3995 120.358 22.9073 120.899 23.5017C121.994 24.7075 122.813 25.9921 123.811 27.2641C124.744 28.4518 125.694 30.4843 125.779 32.0012C125.821 32.748 126.305 33.5531 126.468 34.2821C126.673 35.1945 126.259 36.1852 126.665 37.0698C127.359 38.5814 127.179 40.4313 127.531 42.0019C127.944 43.8426 127.905 45.7708 127.905 47.7137C127.905 51.0046 128.361 54.5885 127.275 57.6949C126.222 60.7091 125.252 63.073 123.654 65.8435C122.564 67.7321 120.09 69.0475 118.694 70.7756C117.48 72.2795 118.198 68.512 118.32 67.9684C118.409 67.5725 117.322 70.5549 117.277 71.3019C117.098 74.3274 114.797 76.8129 114.797 79.7235C114.797 83.6951 113.568 87.7126 111.609 91.1082C110.89 92.3544 104.98 95.0261 103.815 93.584C101.645 90.8972 102.044 87.461 102.044 84.1097C102.044 81.1313 101.69 72.2029 101.69 75.1813C101.69 77.2171 101.506 79.043 100.962 80.9322C100.816 81.4361 96.6857 81.1271 96.0215 81.1271C94.6111 81.1271 87.2695 80.7709 87.165 82.5307C87.0499 84.4691 88.9609 88.6558 90.5305 89.8996C92.2397 91.254 95.8597 93.0382 97.6354 90.7768C99.6641 88.1933 101.335 86.3627 101.335 82.8816C101.335 82.521 101.543 80.9102 101.139 80.7957C100.702 80.6722 98.8151 80.5632 98.5014 80.9517C97.9738 81.6048 94.8228 81.148 93.896 81.556C92.5811 82.1348 90.7322 81.8289 89.2906 81.8289C87.647 81.8289 85.9936 82.1798 84.508 82.1798C81.2016 82.1798 77.8952 82.1798 74.5887 82.1798C73.0555 82.1798 71.5812 81.8289 69.9833 81.8289C67.664 81.8289 67.3194 81.5813 68.3104 79.3726C68.994 77.8493 69.4519 75.2054 69.4519 73.5828C69.4519 72.1 70.3568 70.6697 70.7903 69.2745C71.0951 68.2933 71.0735 67.4009 70.8493 69.177C70.7174 70.2222 70.2164 71.3019 70.1605 72.3546C70.0545 74.3482 69.9028 76.2226 69.4716 78.1445C69.34 78.731 69.1587 79.5607 69.0977 80.0744C69.0546 80.4367 68.8653 82.2043 68.6647 82.4527C67.9336 83.3579 68.1061 85.6324 67.1492 86.3906C66.472 86.9272 65.8355 88.5874 65.2008 89.3732C64.4755 90.2712 63.8462 91.4929 62.721 92.083C61.3493 92.8023 59.8209 93.0577 58.2927 93.0577C56.4129 93.0577 55.7638 92.6412 55.006 90.9523C54.4039 89.6104 54.6107 88.0127 54.199 86.5855C53.9173 85.6087 54.0312 83.0746 53.4315 82.2578C52.6624 81.2103 53.1559 78.3756 53.1559 77.0918C53.1559 75.5127 53.1559 73.9337 53.1559 72.3546 M50 78C46.4124 77.7448 43.6916 74.9936 40.5277 73.724C38.9287 73.0823 39.2747 71.9083 38.44 70.8195C37.7389 69.9052 37.3749 68.5565 36.8548 67.4713C36.1851 66.0738 35.1695 65.1545 34.0712 64.1231C32.0748 62.2485 30.027 60.8129 27.7305 59.4034C26.7286 58.7885 24.9107 58.0017 23.9803 57.2251C22.8202 56.2567 22.3835 55.2707 21.3899 54.1189C19.7064 52.1671 19.4079 49.7459 17.717 47.7856C16.9927 46.9458 16.3031 44.6043 16.2479 43.5096C16.2014 42.5885 16.3383 39.9062 15.8226 39.2335C14.4568 37.4522 15.204 32.7205 15.204 30.4395C15.204 27.293 15.204 24.1465 15.204 21 M23.9744 14.3144C21.6349 15.2739 20.098 16.3734 18.4111 18.0419C17.3101 19.1309 15.3753 21.1931 14.0642 21.7695C12.6318 22.3991 11.074 24.17 9.97644 25.3195C8.7162 26.6393 6.85806 28.7603 5.94854 30.2896C5.4973 31.0483 3.51585 34.1073 3.51585 32.5774C3.51585 31.1739 2.47312 29.2537 2.1001 27.9623C1.68612 26.5292 2.05989 24.9141 1.64147 23.4656C1.34397 22.4357 1.00339 21.5734 1.00339 20.527C1.00339 18.5238 0.895229 16.992 1.9007 15.2019C2.8919 13.4372 3.45983 11.4699 4.51285 9.69935C5.24576 8.467 6.46321 7.19739 7.46399 6.14931C10.1037 3.38478 13.1874 1.33282 16.0781 4.90679C17.8465 7.09318 20.2262 7.56985 22.1 9.42323C23.1164 10.4285 23.9744 11.8393 23.9744 13.2494C23.9744 14.0912 24.1429 14.9049 23.6155 15.5569C23.1656 16.1132 22.1798 16.9049 22.1798 15.7344 M37.0139 70C37.0139 73.7586 36.6881 76.4353 39.1948 79.4161C39.697 80.0133 40.3658 82.5113 40.4111 83.2863C40.5046 84.8871 41.5735 86.4205 42.4662 87.755C43.9287 89.9414 45.9152 91.5371 47.583 93.5204C48.7864 94.9514 54 92.8851 54 91.1863 M125 29C129.101 28.937 134.954 28.3275 137.135 24.7692C138.153 23.1085 138.368 17.7268 136.865 16.2137C135.891 15.2322 130.493 12.3685 129.107 13.9385C128.039 15.149 127.24 15.6849 127.24 17.3231C127.24 18.799 127.444 20.2448 127.614 21.5538C127.92 23.9129 132.932 24.9385 134.895 24.9385C138.495 24.9385 141.128 22.4986 142.839 19.8615C144.203 17.7605 144.378 14.7929 143.296 12.5846C142.416 10.7897 140.676 8.12454 138.815 7 M56.4802 32.0302C54.3804 32.0302 53.0733 31.8111 51.5537 32.5532C50.9794 32.8336 49.1602 33.7509 50.4559 34.3837C51.6122 34.9483 53.8893 37.6108 55.8912 36.0834C57.2687 35.0323 57.9492 31.9474 54.3382 33.2069C53.4253 33.5254 52.8328 34.1665 53.1334 34.8086C53.4006 35.3795 55.9039 33.8684 54.9273 33.2723C52.6144 31.8605 49.3202 35.5604 53.8295 35.5604C55.2669 35.5604 55.3248 34.3422 55.0076 33.6645C54.6387 32.8765 52.6247 33.6696 52.6247 34.3837C52.6247 37.8007 58.1456 32.7301 55.2754 32.3407C54.07 32.1772 51.7098 33.0819 51.6608 33.8607C51.628 34.3808 51.5474 36.4794 53.3476 35.3806C57.3034 32.9659 50.9234 31.4393 51.1788 34.0895C51.3322 35.6811 57.9465 33.8405 55.7305 32.4878C54.0601 31.4682 48.9455 33.1944 50.804 34.6125C53.0248 36.307 57.0195 35.3151 55.9715 33.0762C55.2542 31.5438 49.6204 33.3418 52.1427 34.972C55.8202 37.3488 57.3584 32.6186 54.7934 32.6186C51.3971 32.6186 51.659 36.0665 54.0705 36.8025C56.0534 37.4077 56.4802 36.5289 56.4802 35.4296C56.4802 34.4766 55.4702 34.0801 54.0705 33.7953 M23.0533 35.1846C23.4511 34.2056 24.7335 31.5932 23.284 30.7976C22.0714 30.1322 21.5332 30.6074 20.5617 31.5953C18.7744 33.4128 21.6743 36.3318 23.3762 34.6972C25.0838 33.0572 23.7323 29.3789 22.1305 31.9941C21.7835 32.5607 20.6659 33.6214 21.6229 34.4092C22.6719 35.2727 24.0972 37.0372 25.3372 35.1846C26.2305 33.8501 28.2606 30 24.9219 30C22.8575 30 21.4807 32.8724 22.8687 34.5864C24.7041 36.8528 28.2383 32.6312 26.5599 31.0192C24.8718 29.398 21.8075 30.5567 21.8075 32.7917C21.8075 36.1195 26.2806 31.7166 24.299 30.709C21.5529 29.3127 20.0159 31.7312 20.1465 33.9882C20.1912 34.7621 21.8098 35.3847 22.4534 35.5613C23.3313 35.8022 24.2769 33.4934 24.299 32.7917C24.3364 31.608 24.7336 30.3988 23.2609 30.3988C21.6268 30.3988 21.3922 30.9953 21.3922 32.5923C21.3922 35.7683 24.7975 36.7195 25.5679 33.39C25.8055 32.3631 26.1607 31.5953 24.622 31.5953C23.8905 31.5953 22.1148 31.2601 21.8306 32.2157C21.0863 34.7175 23.4607 35.6216 24.945 33.7888C27.5978 30.513 21.5856 31.5334 20.1465 31.9941 M37.0537 34C37.7665 34.0167 38.4204 34.2448 39.094 34.2448C39.5815 34.2448 40.3941 34.2808 40.8863 34.4284C41.2412 34.5349 41.5549 34.5681 41.8993 34.7073C42.1496 34.8084 42.5446 35.072 42.7919 35.1017C43.2018 35.1509 43.958 35.8502 44.3788 36.081C46.33 37.1514 47 39.7256 47 41.7732C47 42.3037 47 42.8341 47 43.3646C47 43.8795 46.4809 44.547 46.2632 45.0171C45.8326 45.9473 44.7786 46.539 43.8121 47.003C42.6573 47.5572 41.758 48.0533 40.525 48.4175C39.4702 48.729 38.207 48.4695 37.1812 48.9072C36.732 49.0988 35.8926 48.9344 35.396 48.9344C34.7849 48.9344 34.2871 48.6511 33.7241 48.5739C32.8992 48.4608 31.1324 47.5626 30.6779 46.7989C30.4361 46.3927 29.8979 45.964 29.5585 45.602C29.2073 45.2274 29.2558 44.4881 28.8289 44.1603C28.5309 43.9314 28.4439 43.0381 28.2834 42.6913C28.0616 42.2122 28 41.5867 28 41.0387C28 39.8732 28.3322 39.0612 28.8643 38.0396C29.1167 37.555 29.516 37.2134 29.7852 36.7611C30.0166 36.3725 30.8485 36.1523 31.2163 35.8634C32.1823 35.1046 32.9191 34.3672 34.2483 34.3672C34.8377 34.3672 35.3685 34.1224 35.9698 34.1224C36.5436 34.1224 37.1174 34.1224 37.6913 34.1224 M35.163 42.428C33.9194 40.8541 33 42.7551 33 43.9962C33 44.8408 33.248 44.8806 34.0415 44.8516C34.8271 44.8228 35.163 43.1324 35.163 42.4913C35.163 42.1233 34.8573 41.0236 34.2257 41.5092C33.5732 42.011 33.721 42.7798 33.721 43.4972C33.721 47.3314 37.1503 42.7128 35.5956 41.9211C33.8263 41.02 33.4679 44.0806 34.5862 44.1388C35.3932 44.1807 35.5139 42.1593 35.4514 41.5726C35.422 41.296 35.0017 41.0172 34.7304 41.0023C34.2312 40.9749 34.1169 41.1902 33.9373 41.6439C33.7318 42.1631 33.3293 44.5385 34.2337 44.7011C35.3269 44.8976 35.9155 44.0735 35.5636 43.0299C35.3151 42.293 34.2568 42.4706 34.1216 43.1091C33.9289 44.0192 34.1572 45.1297 34.8025 43.8536C35.0104 43.4427 35.0188 43.0975 35.0188 42.6497C35.0188 42.1509 34.5813 42.7594 34.5221 42.9349C34.3743 43.3732 34.442 43.8885 34.442 44.3447C34.442 44.5321 34.6482 44.8399 34.7945 44.5506C34.9334 44.2759 34.9352 43.6754 34.8666 43.3705C34.7886 43.0235 34.442 43.6177 34.442 43.7823C34.442 44.1188 34.7304 44.0079 34.7304 43.7031C34.7304 43.1566 34.5821 42.8557 34.0094 42.8557C33.3911 42.8557 33.3512 44.4634 33.8652 44.6773C34.9094 45.112 34.7574 42.6013 34.4741 42.1428C33.7277 40.9354 33.5768 42.5567 33.5768 43.1091C33.5768 43.831 34.2319 44.93 34.442 43.6319C34.471 43.4529 35.0654 41.2701 34.6503 41.1528C33.6386 40.867 33.5768 42.0854 33.5768 42.7844C33.5768 43.1941 33.9008 45.0706 34.7224 44.1229C35.1499 43.6298 35.215 41.9459 34.9868 41.3191C34.6928 40.5118 33.733 41.7161 33.721 42.1428C33.7074 42.6278 33.5053 44.7141 34.434 44.408C34.8251 44.2792 34.9771 43.3399 35.0108 43.0062C35.0706 42.4148 34.6434 42.3574 34.2257 42.0716C33.1803 41.356 33.46 43.3375 33.721 43.8536 M41.5778 41.9539C41.7399 41.1068 41.7503 40.8798 41.0518 40.5119C40.3008 40.1163 40 41.1049 40 41.7213C40 41.9709 40.0431 42.8155 40.3798 42.89C41.1025 43.0498 41.4595 41.6224 41.5544 41.1398C41.6694 40.5549 41.5625 39.8576 40.7947 40.0758C40.6145 40.1271 40.7324 41.5414 40.7363 41.7445C40.748 42.3644 41.1133 42.6122 41.6245 42.8434C42.0446 43.0334 41.9985 42.6601 41.9985 42.3492C41.9985 41.7733 41.94 41.6385 41.4726 41.3026C41.1334 41.0589 40.6881 40.9237 40.263 41.0177C39.9862 41.0789 40.0979 41.7351 40.1052 41.9306C40.118 42.2746 40.6959 42.5178 40.9993 42.4713C41.6677 42.369 41.7373 40.9924 41.7823 40.5003C41.8303 39.9747 41.5791 39.9908 41.2856 40.384C40.9537 40.8285 40.9467 41.3171 40.9467 41.8434C40.9467 42.1733 41.1435 42.4502 41.157 41.9539C41.1711 41.4376 41.2387 40.8949 40.7889 40.5468C40.1745 40.0713 39.7337 41.8078 40.3681 41.948C40.888 42.063 41.211 40.3557 40.7363 40.0933C40.2603 39.8302 40.3156 40.164 40.3156 40.5933C40.3156 40.8376 40.1721 41.8115 40.4441 41.9306C40.8051 42.0887 41.0296 42.1367 41.2096 41.7387C41.3806 41.3607 41.682 40.7086 41.3148 40.3433C40.6317 39.6636 40.4207 41.2783 40.4207 41.5875C40.4207 41.9318 40.7464 42.2142 41.0518 42.3492C41.2903 42.4547 41.5722 41.1054 41.5778 40.9073C41.6052 39.9246 40.5927 40.2962 40.4441 41.0352C40.3449 41.5286 40.3357 42.0969 40.8941 42.2678C41.4536 42.4391 41.4181 42.2709 41.5778 41.7445C41.6551 41.4897 41.85 40.7484 41.5719 40.541C41.374 40.3933 41.0209 40.2639 40.8415 40.5119C40.6041 40.8399 40.5643 41.2885 40.637 41.6864C40.6829 41.9377 41.2417 42.0673 41.42 41.8899C41.9212 41.3912 41.383 39.8319 41.0051 41.1747C40.923 41.4664 40.8177 42.2937 40.97 42.5818C41.2103 43.0361 41.6569 42.9184 41.7648 42.4771C41.9185 41.8481 41.6574 41.5517 41.2096 41.1747C41.0195 41.0147 40.5372 40.7588 40.5259 41.1631C40.5205 41.3561 40.3926 42.4308 40.637 42.4713C41.1167 42.5509 41.3674 42.4647 41.3674 41.948C41.3674 41.6456 41.5044 40.9255 41.0285 40.9073C40.6443 40.8926 40.4741 40.873 40.3681 41.2736C40.2878 41.5774 40.3278 41.9313 40.7363 41.9539C41.1115 41.9746 41.1854 41.1941 41.309 40.9131C41.608 40.2331 41.0693 39.7354 40.6895 40.5991C40.4423 41.1613 40.185 42.7703 40.9934 42.9772C41.7512 43.1711 41.8186 42.0813 41.7881 41.5352C41.7706 41.2206 41.3191 41.0119 41.0518 41.0119C40.5628 41.0119 40.4717 41.0262 40.4149 41.5352C40.3593 42.0332 40.2335 42.2461 40.8181 42.4539C41.3996 42.6605 41.2622 42.1284 41.2622 41.698C41.2622 41.2549 41.256 41.2088 40.8415 41.0352C40.5188 40.9 40.6311 41.4626 40.6311 41.6399 M139.438 84.27C139.198 84.27 138.706 83.034 137.962 80.562C137.122 77.67 136.396 75.012 135.784 72.588V78.492C135.784 78.996 135.832 79.854 135.928 81.066C136.012 82.386 136.054 83.238 136.054 83.622C136.054 83.73 135.988 83.826 135.856 83.91C135.724 83.982 135.574 84.018 135.406 84.018C135.154 84.018 135.028 83.922 135.028 83.73L135.064 83.208C135.088 82.824 135.1 82.572 135.1 82.452C135.1 81.816 135.064 80.808 134.992 79.428C134.92 78.024 134.884 77.172 134.884 76.872V74.568C134.884 74.196 134.902 73.644 134.938 72.912C134.986 72.276 135.01 71.724 135.01 71.256V71.148C135.01 70.548 135.142 70.248 135.406 70.248C135.562 70.248 135.76 70.512 136 71.04C136.396 71.904 136.9 73.452 137.512 75.684C137.86 76.98 138.268 78.648 138.736 80.688C138.724 80.64 138.82 81.054 139.024 81.93L139.042 82.02C139.042 80.856 139.054 79.812 139.078 78.888L139.114 75.756V70.428C139.162 70.128 139.354 69.978 139.69 69.978C140.014 69.978 140.176 70.212 140.176 70.68V70.788C140.104 70.932 140.068 71.106 140.068 71.31C140.068 72.042 140.05 73.146 140.014 74.622C139.978 76.11 139.96 77.226 139.96 77.97V83.46C139.96 83.652 139.906 83.832 139.798 84C139.702 84.18 139.582 84.27 139.438 84.27ZM144.534 84.342C144.222 84.342 143.934 84.24 143.67 84.036C143.406 83.844 143.19 83.58 143.022 83.244C142.674 82.512 142.458 81.714 142.374 80.85C142.266 80.034 142.212 79.248 142.212 78.492C142.212 78.348 142.218 78.228 142.23 78.132V77.808C142.23 77.748 142.224 77.718 142.212 77.718V77.394L142.23 76.134C142.242 75.75 142.29 75.138 142.374 74.298C142.434 73.722 142.572 73.164 142.788 72.624C142.872 72.384 142.98 72.204 143.112 72.084C143.244 71.952 143.394 71.886 143.562 71.886C144.042 71.886 144.474 71.976 144.858 72.156C145.242 72.324 145.566 72.564 145.83 72.876C146.07 73.176 146.274 73.548 146.442 73.992C146.61 74.424 146.73 74.886 146.802 75.378C146.874 75.882 146.91 76.416 146.91 76.98V77.124C146.91 77.496 146.916 77.832 146.928 78.132L146.946 79.158C146.946 82.614 146.142 84.342 144.534 84.342ZM144.462 83.586C144.678 83.586 144.876 83.502 145.056 83.334C145.236 83.154 145.374 82.914 145.47 82.614C145.698 82.002 145.836 81.342 145.884 80.634C145.944 80.022 145.974 79.494 145.974 79.05C145.974 78.51 145.932 77.802 145.848 76.926C145.776 76.002 145.74 75.312 145.74 74.856V74.532C145.716 74.076 145.56 73.68 145.272 73.344C144.996 73.008 144.654 72.84 144.246 72.84C143.838 72.84 143.568 73.074 143.436 73.542C143.316 73.914 143.256 74.394 143.256 74.982C143.256 75.21 143.262 75.402 143.274 75.558V76.044L143.238 76.872C143.214 77.124 143.202 77.4 143.202 77.7C143.202 78.348 143.22 78.99 143.256 79.626C143.304 80.526 143.424 81.402 143.616 82.254C143.808 83.142 144.09 83.586 144.462 83.586ZM149.922 83.712L149.904 83.01C149.892 82.806 149.886 82.578 149.886 82.326L149.904 81.714C149.868 81.582 149.778 80.268 149.634 77.772C149.49 75.276 149.406 73.674 149.382 72.966C148.686 72.942 148.242 72.87 148.05 72.75C147.918 72.654 147.852 72.546 147.852 72.426C147.852 72.33 147.912 72.246 148.032 72.174C148.164 72.09 148.296 72.048 148.428 72.048C148.764 72.048 149.172 72.072 149.652 72.12C150.108 72.18 150.516 72.21 150.876 72.21H151.02H151.164C151.536 72.21 151.722 72.354 151.722 72.642C151.722 72.786 151.662 72.906 151.542 73.002C151.422 73.086 151.284 73.128 151.128 73.128C151.02 73.128 150.864 73.11 150.66 73.074L150.3 73.002L150.282 73.092L150.264 73.182C150.264 74.25 150.366 75.954 150.57 78.294C150.762 80.49 150.858 82.194 150.858 83.406C150.858 83.55 150.792 83.676 150.66 83.784C150.54 83.892 150.402 83.946 150.246 83.946L149.922 83.712ZM160.353 84.162C160.077 84.162 159.873 84.12 159.741 84.036C159.609 83.952 159.543 83.796 159.543 83.568C159.543 83.208 159.483 82.596 159.363 81.732L159.291 81.354L157.509 81.084C157.437 81.36 157.335 81.918 157.203 82.758C157.131 83.346 157.017 83.736 156.861 83.928C156.777 84.036 156.657 84.09 156.501 84.09C156.357 84.09 156.225 84.048 156.105 83.964C155.985 83.868 155.925 83.754 155.925 83.622L155.961 83.532L155.979 83.46C156.771 80.376 157.371 77.334 157.779 74.334C157.779 74.286 157.785 74.208 157.797 74.1C157.809 73.98 157.821 73.812 157.833 73.596C157.869 73.152 157.905 72.798 157.941 72.534C157.989 72.27 158.061 72.072 158.157 71.94H158.769C158.937 71.94 159.081 71.982 159.201 72.066C159.321 72.138 159.381 72.246 159.381 72.39C159.381 73.302 159.507 74.658 159.759 76.458C159.999 78.306 160.119 79.602 160.119 80.346C160.119 80.418 160.149 80.604 160.209 80.904C160.269 81.18 160.299 81.36 160.299 81.444C160.299 81.528 160.359 81.888 160.479 82.524C160.587 83.1 160.641 83.472 160.641 83.64V83.658C160.641 83.922 160.545 84.09 160.353 84.162ZM159.165 80.706C159.129 80.526 159.111 80.304 159.111 80.04C159.111 78.96 159.015 77.58 158.823 75.9L158.643 74.028C158.127 76.848 157.773 78.978 157.581 80.418C157.761 80.538 158.289 80.634 159.165 80.706ZM135.913 107.396C135.481 107.396 135.109 107.318 134.797 107.162C134.605 107.054 134.509 106.928 134.509 106.784C134.509 106.64 134.545 106.526 134.617 106.442C134.689 106.346 134.791 106.298 134.923 106.298C135.043 106.298 135.217 106.346 135.445 106.442C135.697 106.538 135.853 106.586 135.913 106.586C136.141 106.586 136.345 106.49 136.525 106.298C136.717 106.094 136.867 105.83 136.975 105.506C137.191 104.906 137.299 104.366 137.299 103.886C137.299 103.37 137.215 102.83 137.047 102.266C136.891 101.69 136.675 101.132 136.399 100.592L136.111 100.016C135.811 99.416 135.577 98.942 135.409 98.594C135.253 98.246 135.115 97.868 134.995 97.46C134.815 96.884 134.725 96.326 134.725 95.786C134.725 95.354 134.797 94.946 134.941 94.562C135.097 94.178 135.325 93.854 135.625 93.59C135.925 93.302 136.297 93.158 136.741 93.158C136.957 93.158 137.167 93.224 137.371 93.356C137.575 93.476 137.719 93.632 137.803 93.824L137.497 94.202C137.185 94.202 136.951 94.142 136.795 94.022C136.579 94.046 136.387 94.154 136.219 94.346C136.063 94.526 135.943 94.736 135.859 94.976C135.787 95.204 135.751 95.432 135.751 95.66C135.751 96.116 135.811 96.584 135.931 97.064C136.063 97.532 136.231 97.976 136.435 98.396L137.695 100.916C137.899 101.348 138.061 101.834 138.181 102.374C138.301 102.914 138.361 103.454 138.361 103.994C138.361 104.786 138.169 105.53 137.785 106.226C137.581 106.586 137.317 106.868 136.993 107.072C136.669 107.288 136.309 107.396 135.913 107.396ZM143.196 107.288C142.764 107.144 142.23 107.072 141.594 107.072C141.402 107.192 141.198 107.252 140.982 107.252C140.838 107.252 140.712 107.186 140.604 107.054C140.508 106.934 140.46 106.802 140.46 106.658C140.46 105.65 140.502 104.306 140.586 102.626C140.658 100.838 140.694 99.5 140.694 98.612V98.486C140.622 97.73 140.586 97.166 140.586 96.794C140.586 95.654 140.796 95.084 141.216 95.084C141.336 95.084 141.438 95.132 141.522 95.228C141.618 95.312 141.666 95.414 141.666 95.534C141.666 95.678 141.648 95.906 141.612 96.218C141.576 96.518 141.558 96.746 141.558 96.902C141.558 97.706 141.564 98.432 141.576 99.08C141.588 99.716 141.594 100.436 141.594 101.24C141.534 101.42 141.504 101.672 141.504 101.996V102.212L141.468 103.634C141.444 104.054 141.432 104.534 141.432 105.074C141.432 105.902 141.63 106.316 142.026 106.316C142.05 106.316 142.086 106.316 142.134 106.316C142.194 106.304 142.272 106.298 142.368 106.298C142.476 106.286 142.614 106.28 142.782 106.28C143.43 106.28 143.754 106.46 143.754 106.82C143.754 106.94 143.7 107.042 143.592 107.126C143.484 107.21 143.352 107.264 143.196 107.288ZM147.347 107.342C147.035 107.342 146.747 107.24 146.483 107.036C146.219 106.844 146.003 106.58 145.835 106.244C145.487 105.512 145.271 104.714 145.187 103.85C145.079 103.034 145.025 102.248 145.025 101.492C145.025 101.348 145.031 101.228 145.043 101.132V100.808C145.043 100.748 145.037 100.718 145.025 100.718V100.394L145.043 99.134C145.055 98.75 145.103 98.138 145.187 97.298C145.247 96.722 145.385 96.164 145.601 95.624C145.685 95.384 145.793 95.204 145.925 95.084C146.057 94.952 146.207 94.886 146.375 94.886C146.855 94.886 147.287 94.976 147.671 95.156C148.055 95.324 148.379 95.564 148.643 95.876C148.883 96.176 149.087 96.548 149.255 96.992C149.423 97.424 149.543 97.886 149.615 98.378C149.687 98.882 149.723 99.416 149.723 99.98V100.124C149.723 100.496 149.729 100.832 149.741 101.132L149.759 102.158C149.759 105.614 148.955 107.342 147.347 107.342ZM147.275 106.586C147.491 106.586 147.689 106.502 147.869 106.334C148.049 106.154 148.187 105.914 148.283 105.614C148.511 105.002 148.649 104.342 148.697 103.634C148.757 103.022 148.787 102.494 148.787 102.05C148.787 101.51 148.745 100.802 148.661 99.926C148.589 99.002 148.553 98.312 148.553 97.856V97.532C148.529 97.076 148.373 96.68 148.085 96.344C147.809 96.008 147.467 95.84 147.059 95.84C146.651 95.84 146.381 96.074 146.249 96.542C146.129 96.914 146.069 97.394 146.069 97.982C146.069 98.21 146.075 98.402 146.087 98.558V99.044L146.051 99.872C146.027 100.124 146.015 100.4 146.015 100.7C146.015 101.348 146.033 101.99 146.069 102.626C146.117 103.526 146.237 104.402 146.429 105.254C146.621 106.142 146.903 106.586 147.275 106.586ZM152.735 106.712L152.717 106.01C152.705 105.806 152.699 105.578 152.699 105.326L152.717 104.714C152.681 104.582 152.591 103.268 152.447 100.772C152.303 98.276 152.219 96.674 152.195 95.966C151.499 95.942 151.055 95.87 150.863 95.75C150.731 95.654 150.665 95.546 150.665 95.426C150.665 95.33 150.725 95.246 150.845 95.174C150.977 95.09 151.109 95.048 151.241 95.048C151.577 95.048 151.985 95.072 152.465 95.12C152.921 95.18 153.329 95.21 153.689 95.21H153.833H153.977C154.349 95.21 154.535 95.354 154.535 95.642C154.535 95.786 154.475 95.906 154.355 96.002C154.235 96.086 154.097 96.128 153.941 96.128C153.833 96.128 153.677 96.11 153.473 96.074L153.113 96.002L153.095 96.092L153.077 96.182C153.077 97.25 153.179 98.954 153.383 101.294C153.575 103.49 153.671 105.194 153.671 106.406C153.671 106.55 153.605 106.676 153.473 106.784C153.353 106.892 153.215 106.946 153.059 106.946L152.735 106.712ZM159.5 107C159.092 107 158.888 106.01 158.888 104.03L158.906 103.004L158.924 102.176V102.122V101.942C158.936 101.846 158.942 101.732 158.942 101.6C158.942 101.576 158.924 101.546 158.888 101.51C158.852 101.474 158.834 101.444 158.834 101.42V101.402C158.774 101.426 158.666 101.438 158.51 101.438C158.354 101.438 158.162 101.414 157.934 101.366C157.862 101.354 157.67 101.324 157.358 101.276V103.346C157.358 103.658 157.376 104.15 157.412 104.822C157.448 105.482 157.466 105.974 157.466 106.298C157.466 106.478 157.418 106.634 157.322 106.766C157.226 106.898 157.1 106.964 156.944 106.964C156.716 106.964 156.554 106.742 156.458 106.298C156.362 105.842 156.314 105.248 156.314 104.516L156.35 103.058C156.362 102.65 156.368 102.218 156.368 101.762V101.456V101.204C156.368 101.012 156.362 100.886 156.35 100.826V100.736L156.404 99.692C156.404 99.236 156.386 98.558 156.35 97.658C156.314 96.758 156.296 96.08 156.296 95.624C156.296 95.48 156.344 95.354 156.44 95.246C156.536 95.138 156.656 95.084 156.8 95.084C157.184 95.084 157.376 95.444 157.376 96.164L157.34 98.396C157.316 99.068 157.304 99.818 157.304 100.646C157.484 100.706 157.808 100.736 158.276 100.736H158.942C158.966 100.664 158.978 100.592 158.978 100.52C158.978 99.944 158.942 99.092 158.87 97.964C158.786 96.908 158.744 96.05 158.744 95.39C158.744 95.258 158.792 95.15 158.888 95.066C158.996 94.97 159.122 94.922 159.266 94.922C159.35 94.922 159.47 94.952 159.626 95.012L159.788 95.084C159.788 96.788 159.848 99.062 159.968 101.906L160.13 106.46C160.13 106.628 160.064 106.76 159.932 106.856C159.812 106.952 159.668 107 159.5 107Z';

  var animalSloth1 = 'M41.6675 87.8046C38.1819 88.477 33.6615 88.6092 30.2746 88.6092C27.0034 88.6092 24.0789 89.6321 20.9161 89.816C19.5714 89.8943 18.0789 91.4898 16.6438 91.8052C15.0193 92.1621 14.1172 93.7268 12.7783 94.5542C10.4356 96.0018 8.51152 98.281 6.58455 100.186C4.57936 102.169 5.04741 106.439 5.04741 109.126C5.04741 112.082 6.45718 115.124 8.619 117.261C13.5725 122.159 21.1788 121.999 27.8333 121.999C31.3931 121.999 35.0035 121.597 38.4124 121.597C39.9896 121.597 41.6302 121.091 43.0916 120.77C44.0487 120.56 44.9275 120.144 45.9173 119.966C46.9103 119.787 47.4472 118.511 48.5847 118.379C49.6037 118.26 52.4328 116.54 53.0604 115.764C53.631 115.059 54.9294 115.169 55.4792 114.535C56.0821 113.839 56.8884 113.425 57.5362 112.747C59.9303 110.24 59.9776 106.403 59.9776 103.092C59.9776 101.493 60.2155 99.2799 59.1412 98.0407C57.7393 96.4236 56.1909 95.01 54.688 93.4367C52.4144 91.0566 50.2545 87.8046 46.5502 87.8046C44.6084 87.8046 42.6735 87 40.6277 87C38.2316 87 35.8354 87 33.4393 87C28.9188 87 25.0804 89.2482 20.9161 90.6206 M4.18278 106.315C4.18278 106.98 3.71657 110.428 4.27329 111.126C4.62008 111.561 4.99739 113.305 4.99739 113.872C4.99739 116.194 6.49706 118.683 6.6266 121.021C6.76324 123.488 8.0764 125.998 8.66311 128.352C9.0353 129.845 10.3688 131.069 10.7223 132.664C10.8856 133.401 11.8761 135.032 12.4193 135.637C13.9671 137.362 14.7584 139.765 16.2208 141.651C17.3172 143.065 20.2497 144.429 20.4749 146.349C20.7224 148.459 24.0938 148.333 24.9552 149.413C26.5598 151.424 29.8224 152.426 31.7889 154.201C35.0278 157.125 39.4264 160.112 43.6911 160.647C45.8942 160.923 47.8001 162.584 50.0043 163.075C53.3948 163.831 56.6192 165.408 59.9833 166.275C65.1078 167.597 70.985 168 76.2754 168C80.3254 168 83.8942 167.183 87.9061 167.183C91.2583 167.183 94.3559 167.367 97.2515 165.753C99.6606 164.411 103.162 162.571 105.194 160.647C106.068 159.818 107.399 158.669 108.543 158.287C110.348 157.683 111.605 155.534 113.363 155.313C115.391 155.059 117.135 154.283 118.861 153.294C120.062 152.605 121.319 151.434 122.617 150.933C124.759 150.107 127.881 146.623 128.817 144.511C130.067 141.691 132.284 139.317 133.705 136.545C134.335 135.316 135.115 134.146 135.651 132.868C136.194 131.575 137.039 129.974 137.348 128.579C138.431 123.691 139 118.787 139 113.668C139 111.021 138.593 108.538 138.593 105.884C138.593 104.204 138.364 100.411 137.28 99.0525C136.226 97.7302 136.717 94.5152 135.131 93.2426C134.295 92.5717 132.607 88.5755 132.483 87.5234C132.232 85.3814 130.575 82.6549 129.836 80.5787C129.102 78.5197 127.799 76.8789 126.283 75.3589C123.521 72.5883 118.13 72 114.358 72C112.161 72 110.489 72.8447 110.489 75.2681C110.489 77.6719 112.331 78.107 114.358 78.5589C115.988 78.9221 117.742 82.0193 117.82 83.4383C117.901 84.9014 118.68 85.8279 119.359 87.1149C119.675 87.7132 120.394 89.1799 120.875 89.566C121.753 90.2701 122.643 94.5236 122.708 95.6936C122.83 97.8943 123.93 100.119 123.93 102.434C123.93 105.226 123.93 108.017 123.93 110.809C123.93 112.14 122.708 113.177 122.708 114.485C122.708 115.523 121.674 115.782 121.463 116.732C120.932 119.129 117.68 119.387 115.784 119.387C113.507 119.387 110.781 120.792 108.633 121.407C107.575 121.71 106.062 121.616 104.968 121.816C104.107 121.973 101.91 121.369 101.211 121.929C100.014 122.89 96.3659 122.247 94.785 122.247C92.7241 122.247 93.3821 121.772 93.3821 120C93.3821 118.656 93.6854 117.817 93.8799 116.573C94.1573 114.8 95.0113 112.97 95.0113 111.217C95.0113 109.591 95.0113 107.964 95.0113 106.338C95.0113 104.956 95.4186 103.823 95.4186 102.434C95.4186 101.596 94.6516 100.59 94.604 99.7787C94.43 96.8115 93.3401 93.314 92.9748 90.383C92.8864 89.6736 91.8915 88.4121 91.4361 87.8411C90.7282 86.9536 90.8497 85.4026 90.3273 84.4596C89.8171 83.5384 89.6119 82.5144 89.1054 81.6C88.5919 80.673 87.6591 80.4298 87.182 79.3532C86.517 77.8524 85.3017 74.8596 83.4032 74.8596C82.104 74.8596 77.753 73.5748 76.9995 74.8596C76.3696 75.9334 75.647 76.584 75.144 77.7191C74.9127 78.2411 74.7606 80.9974 75.2571 81.3957C76.0243 82.0113 76.4186 83.3323 77.3163 83.8468C77.962 84.2169 78.5639 84.8063 78.9002 85.4808C79.17 86.0219 78.8783 87.008 79.217 87.4326C82.0547 90.9902 83.1995 96.9472 83.1995 101.39C83.1995 103.849 83.1995 106.307 83.1995 108.766C83.1995 111.021 81.9776 113.466 81.9776 115.506C81.9776 116.655 79.5231 120.133 78.3119 120.204C77.3256 120.262 76.4201 121.386 75.4608 120.93C74.3783 120.416 73.1718 119.796 71.9987 119.796C69.8204 119.796 67.6107 118.979 65.2782 118.979C64.3818 118.979 59.2486 118.977 58.7614 118.366C57.8763 117.256 57.9467 113.116 57.9467 111.626C57.9467 109.165 58.354 107.081 58.354 104.681 M51 92C51 89.7252 51 86.0967 51 84 M66.5877 97.6558C66.5877 94.9937 66.5877 92.3317 66.5877 89.6696C66.5877 88.7822 66.5877 87.8949 66.5877 87.0075C66.5877 86.8627 66.2664 88.8446 66.171 89.4648C65.6166 93.0666 66.5877 96.8404 66.5877 100.318C66.5877 103.743 68.3526 106.878 68.3526 110.352C68.3526 111.647 69.2018 113.999 70.0195 114.948C70.9916 116.076 71 119.638 71 121 M106 121C105.014 116.564 103.532 111.865 103.532 107.312C103.532 105.553 103.179 103.588 103.179 101.705C103.179 100.161 103.81 98.7409 103.257 97.3011C102.322 94.8622 104.237 92.4289 104.237 90.1505C104.237 87.9333 105.194 84.8679 106 83 M95 86C95 87.0794 95 87.9534 95 89 M2 68C4.4723 68.494 6.41374 70.1413 8.67857 70.5994C11.0444 71.078 13.2562 71.6842 15.7619 71.6842C16.7045 71.6842 17.7542 72.1202 18.5952 72.5029C19.9954 73.1402 22.291 73.3022 23.8571 73.5058C25.7774 73.7555 27.9796 73.7826 29.7487 74.2427C31.3665 74.6634 34.3562 74.6316 36 74.6316C38.0913 74.6316 40.1825 74.6316 42.2738 74.6316C46.6519 74.6316 50.9329 75 55.4286 75C56.7565 75 60.6087 74.7247 61.5 73.7105C62.5478 72.5184 65.6861 72.7895 67.1667 72.7895C70.9549 72.7895 75.2964 71.6707 79.1071 72.4415C81.044 72.8333 82.6592 73.5263 84.6614 73.5263C87.0548 73.5263 89.3253 73.8947 91.6548 73.8947C93.7807 73.8947 96.0213 73.5263 98.3333 73.5263C99.4783 73.5263 103.347 74.7147 104 73.5263 M120 73C123.433 73.0724 127.049 73.8889 129.953 75.2848C130.474 75.5352 131.476 75.6612 132.007 75.7925C132.235 75.8488 132.993 75.6862 133.135 75.8511C133.352 76.1014 131.984 76.7338 132.639 76.847C134.56 77.1794 136.927 76.8666 138.891 76.8666C145.633 76.8666 152.248 76.1636 159 76.1636 M160 89C158.542 88.7619 156.583 88.3848 155.13 88.3208C154.463 88.2914 152.264 88.8877 151.884 88.4906C150.783 87.3388 147.402 87.3021 145.797 87.3021C143.806 87.3021 132.722 86.4337 132 87.6417 M119 84.051C114.05 83.9362 109.526 84.051 104.6 84.051C103.454 84.051 102.597 84.8306 101.4 84.8306C100.262 84.8306 99.3231 84.9892 98.3556 85.1988C96.4931 85.6021 95.0096 86 93 86 M77 86C74.0007 85.5911 71.1947 85.1964 68.2594 85.1964C66.2822 85.1964 64.2006 84.3929 62.1613 84.3929C57.5732 84.3929 52.9895 83.1876 48.5421 83.1876C44.1605 83.1876 40.1162 81.5805 35.7361 81.5805C33.6151 81.5805 30.9256 80.4124 28.8249 79.951C27.8355 79.7337 26.9086 79.3516 25.9791 79.1475C25.3865 79.0173 22.7949 78.9024 22.5235 78.5671C21.6708 77.5137 17.8327 77.8683 16.4254 77.2502C15.5549 76.8679 13.8665 77.3111 13.2634 76.3573C12.8598 75.7191 11.9681 74.3966 11.1403 74.3485C9.90035 74.2764 9.56395 73.6252 8.52042 74.9511C7.8997 75.7398 6.70095 76.7591 5.65204 76.7591C3.4558 76.7591 2.51342 79.6031 1.20268 76.5806C0.921162 75.9314 3.59501 74.2752 4.22915 73.8574C5.00618 73.3455 3.46006 72.2045 3.09987 71.8485C1.6296 70.3955 -0.225699 69.503 2.1061 67.429C3.51439 66.1764 5.53001 67.9843 6.57805 68.8129C7.78241 69.7651 11.1653 69.9289 12.7665 69.9289 M77 74.3636C76.6446 74.1564 76.0757 73.7822 75.6311 73.7576C75.4365 73.7468 75.0581 73.6949 74.9043 73.5724C74.5294 73.2736 73.9114 73 73.4255 73C72.0973 73 73.4004 75.0844 73.4931 75.5C73.5569 75.7858 74.338 76.8589 73.4171 76.4512C73.0795 76.3017 72.5656 75.8788 72.2003 75.8788C71.1039 75.8788 69.809 76.8974 70.8398 77.9242C71.2698 78.3527 71.8005 78.4736 72.3608 78.5976C72.6238 78.6559 73.3823 78.8923 73.1129 78.8923C73.0792 78.8923 72.5489 78.4767 72.4369 78.4209C71.4842 77.9464 69.92 77.9556 70.0032 79.3636C70.0154 79.5699 71.5379 80.3683 71.7524 80.4158C72.0365 80.4787 72.2947 80.6435 72.589 80.7273C72.9384 80.8267 73.4247 80.781 73.7382 80.9125C74.6995 81.3156 75.445 82.0232 75.9353 83 M110.272 78C109.081 78 107.992 77.6689 107.261 76.6809C106.413 75.533 107.833 75.5169 108.624 75.5169C108.979 75.5169 109.608 75.3861 109.874 75.6376C110.181 75.9285 109.204 75.1282 108.839 74.9306C108.402 74.6945 106.916 73.3975 107.978 72.9131C108.193 72.8153 109.41 72.4493 109.555 72.6459C109.788 72.9601 110.709 72.9439 110.838 73.4304C110.914 73.7192 110.951 73.8903 111.204 74.0426C111.502 74.2219 111.068 73.821 110.989 73.5856C110.834 73.1237 110.379 72.8161 110.28 72.3355C110.171 71.8054 109.985 71.5511 110.559 71.206C111.039 70.9175 111.601 71.0163 112.136 71.0163C112.634 71.0163 113.778 72.0882 114 72.5683 M99 74C99.211 73.1201 99.4548 72.173 100.131 71.5012C100.386 71.2481 100.705 71.1706 101.036 71.039C101.49 70.8589 101.612 71.3466 101.828 71.5951C102.118 71.9284 102.055 72.9859 102.055 73.415C102.055 73.7416 102.055 72.8947 102.055 72.7651C102.055 72.5205 102.473 72.1548 102.604 71.9201C102.871 71.4421 103.974 70.822 104.349 71.5301C104.693 72.1783 104.673 72.8288 104.673 73.5306C104.673 73.854 104.93 72.9231 105.109 72.6423C105.306 72.3337 105.535 72.3101 105.909 72.3101C107.103 72.3101 106.744 72.8237 107 73.74 M56 75C56.1279 74.4047 56.4274 73.8232 56.8421 73.38C57.2644 72.9287 57.9162 73.5662 57.9649 73.92C57.9836 74.0559 58.1457 74.2333 58.2456 74.34C58.3603 74.4625 58.4884 73.6491 58.6043 73.4933C58.8564 73.1546 58.8929 72.48 59.5088 72.48C60.0909 72.48 60.65 72.7301 60.7641 73.2667C60.7735 73.3105 60.8004 74.0132 60.8811 73.8667C61.1032 73.4631 61.1519 73.144 61.4737 72.7467C61.8534 72.2777 62.4436 72 63.0877 72C63.5093 72 63.7952 72.6066 64 72.84 M152 86C148.443 86 145.163 84.4037 141.849 83.4907C139.943 82.9657 137.983 82 136 82 M113 80.9359C111.715 80.9359 109.494 81.2653 108.418 80.4308C108.181 80.2471 107.113 80.1337 106.793 80.1337C106.188 80.1337 105.624 80 105 80 M103 83C101.061 83 99.2742 82.3333 97.3382 82.3333C96.2949 82.3333 94.938 82.5906 94 82 M99 78C98.4367 78 94.2607 78 94 78 M68 81.9171C66.3814 81.9171 64.5681 82.1739 62.979 81.7836C61.8981 81.5181 61.0748 80.629 60.0556 80.2011C59.5482 79.9882 58.9285 79 58.4122 79C57.9414 79 57.4707 79 57 79 M27 77.0454C27.7265 77.0454 28.6283 76.91 29.3329 77.1069C29.6258 77.1887 29.9996 77.276 30.3043 77.2916C31.0033 77.3273 31.6541 77.6609 32.3696 77.6609C33.6365 77.6609 35.3007 78.1239 36.5076 78.4611C36.7119 78.5182 37.0326 78.7612 37.1884 78.7689C37.6695 78.7928 38.16 78.7689 38.6417 78.7689C39.9244 78.7689 41.0316 79.1155 42.275 79.2545C43.0118 79.3369 43.7434 79.4407 44.4855 79.5144C45.0719 79.5727 45.4286 80 46 80 M50 79C50.6111 79 51.2222 79 51.8333 79C52.2625 79 52.6067 79 53 79 M10 72C8.97542 72 7.96302 72 7 72 M143 80.0152C143.869 80.0152 144.739 80.0152 145.608 80.0152C146.038 80.0152 147.016 79.937 147.362 80.1355C147.887 80.437 149.308 81 150 81 M34.5891 101.946C33.764 101.533 30.9137 100.382 30.4403 102.077C30.2075 102.911 29.7349 104.546 29.22 105.205C28.9481 105.552 28.9301 106.379 29.1558 106.795C29.5539 107.528 30.1253 107.297 30.6458 107.741C31.2369 108.245 33.4567 107.859 34.2423 107.859C35.5847 107.859 36.6043 106.982 37.826 106.913C39.2369 106.833 38.982 104.914 38.982 103.956C38.982 102.631 37.4353 102.478 36.7214 101.893C35.8544 101.184 34.3531 101.627 33.4331 101 M29.5487 102.007C28.1669 103.84 27.2317 106.045 27.2317 108.408C27.2317 109.343 27 110.392 27 111.434C27 112.283 27.9206 113.216 28.1456 114.007C28.6286 115.705 29.7046 118.3 31.8657 118.3C32.7096 118.3 33.5484 118.947 34.4144 118.998C35.2743 119.049 37.2506 117.81 38.1216 117.421C39.1091 116.98 40.4767 117.581 41.4812 117.02C42.6122 116.389 42.9872 116.171 42.9872 114.693C42.9872 112.42 43.1227 109.873 42.511 107.723C42.3213 107.056 41.8701 105.72 41.4168 105.214C41.1318 104.896 40.7619 104.624 40.49 104.283C40.1052 103.8 39.9147 103.972 39.2801 103.688C38.5854 103.378 37.6048 103.128 37.0146 102.654C36.056 101.884 35.1588 102.007 33.951 102.007 M5 102.799C8.22572 99.7588 12.3663 99.0517 16.6867 99.0517C18.4288 99.0517 21.6302 98.6463 22.8313 100.106C23.236 100.597 23.8862 100.768 24.0228 101.498C24.0729 101.766 24.1988 102.645 24.3976 102.799C24.8995 103.19 25 104.663 25 105.272C25 106.074 24.0757 106.324 24.0361 107.015C24.0231 107.244 23.8824 107.963 23.7416 108.135C23.2622 108.717 22.884 109.437 22.2958 110.008C21.7055 110.582 21.1099 111.445 20.7162 112.168C20.3366 112.865 19.4259 113.032 18.9224 113.522C18.3446 114.083 17.3868 114.201 16.7537 114.693C16.4833 114.903 16.0716 114.942 15.7898 115.161C15.364 115.492 14.5167 116.148 13.9692 116.332C13.0267 116.65 12.1431 116.894 11.0776 116.853C10.1884 116.818 9.44576 117.2 8.37349 116.853 M15.6786 104.676C14.7495 105.125 14.4012 105.341 14.2161 106.603C14.1096 107.329 15.4097 106.875 15.6786 106.679C16.2505 106.262 15.7848 105.476 15.2286 105.601C14.612 105.74 14.9856 106.754 15.7195 106.451C16.0662 106.308 16.7998 104.904 16.1388 104.904C15.5172 104.904 15.088 105.466 15.1263 106.273C15.1552 106.883 15.9956 105.36 15.2183 105.36C14.5281 105.36 15.137 107.148 15.5763 106.603C15.8916 106.212 15.7865 105.132 15.3104 105.132C14.783 105.132 14.4401 105.692 14.8604 106.362C15.1343 106.799 15.6889 105.076 14.9831 104.726C14.3352 104.405 13.8697 104.882 14.2467 105.817C14.5191 106.492 15.3475 106.466 15.4843 105.703C15.5922 105.1 14.2801 103.661 14.0627 104.092C13.8698 104.475 14.144 105.87 14.5843 105.234C15.0646 104.539 14.7581 103.504 14.7581 104.333C14.7581 104.805 15.2991 105.824 15.6377 105.031C15.9448 104.312 14.853 104.152 14.9524 104.891C15.0984 105.977 15.6786 104.729 15.6786 104.219C15.6786 103.574 14.9422 104.509 14.9422 105.018C14.9422 105.825 15.2796 105.859 15.8627 105.817C16.4288 105.776 15.7646 104.702 15.6888 105.031C15.5184 105.77 16.6066 105.953 16.0877 105.31C15.7558 104.898 15.1263 105.017 15.1263 105.639C15.1263 108.443 16.9552 105.057 15.8627 105.132C15.2545 105.174 15.423 106.511 16.1286 106.261C16.6774 106.066 16.3529 104.081 16.2308 104.346C15.9544 104.946 15.9898 106.103 16.7831 106.045C17.4348 105.998 16.4575 104.676 15.9547 104.676C15.8547 104.676 15.5709 104.897 15.5354 104.853C15.4802 104.785 15.4178 103.994 15.1672 104.27C14.7574 104.722 15.6348 105.925 15.8627 105.36 M53.8433 93C48.7257 93 39.5055 97.6171 44.3781 103.672C45.0052 104.451 46.6229 105.256 47.4947 105.738C49.0316 106.586 50.3439 107 52.1119 107C52.8429 107 53.574 107 54.305 107C55.3225 107 55.5469 107.023 56.2802 106.426C56.9247 105.902 57.9376 106.188 58.5118 105.674C59.5725 104.725 60.1937 104.128 61 102.869 M50.1882 98.8646C48.8341 102.309 52.1705 99.3134 50.4471 98.4077C49.1706 97.737 48.7239 101.037 50.6485 100.349C51.5484 100.028 50.4713 99.2392 50.1738 98.9931C49.5141 98.4474 49.6071 100.087 49.9293 100.406C51.2275 101.695 51.3096 98.1894 49.9293 98.3506C49.3176 98.4221 49.1098 100.24 49.7998 100.392C50.4089 100.527 51.0852 100.528 50.9074 99.7783C50.7512 99.1195 50.4803 98.1026 49.5553 98.3649C49.144 98.4816 49.2795 100.114 49.9293 100.149C51.3713 100.229 49.8232 96.5671 48.491 98.5505C47.1234 100.587 50.2728 101.721 50.1882 98.8646ZM50.1882 98.8646C50.1722 98.3234 49.023 96.9104 48.9081 97.9937C48.8709 98.3444 49.2917 100.682 49.8718 99.3214C50.047 98.9103 50.533 97.292 49.7855 97.08C49.082 96.8805 48.7593 97.0496 48.5773 97.6368C47.9123 99.7818 51.1833 99.7462 49.1526 97.8367C48.0991 96.846 48.117 98.9299 48.117 99.4927C48.117 100.59 48.4757 100.983 49.6704 100.92C50.5181 100.876 48.3759 98.0744 48.3759 100.149C48.3759 102.583 50.9112 99.0103 48.8937 99.1216C48.3426 99.1519 47.5528 100.825 48.0019 100.506C48.4639 100.179 48.6207 99.2498 48.3759 99.4927C47.7628 100.101 48.4142 101.441 48.1026 100.05C48.0289 99.7201 47.8384 100.137 47.6999 100.107C47.553 100.074 46.7445 99.6355 47.0814 99.6355 M28.1071 50.3647C26.9551 50.3684 25.9624 50.1637 25.129 49.7504C24.6161 49.464 24.359 49.1289 24.3578 48.7449C24.3565 48.3609 24.4515 48.0566 24.6428 47.832C24.8339 47.5753 25.1055 47.4464 25.4575 47.4453C25.7775 47.4442 26.2419 47.5707 26.8508 47.8247C27.5236 48.0786 27.94 48.2052 28.1 48.2047C28.708 48.2027 29.2512 47.9449 29.7295 47.4314C30.2397 46.8857 30.6374 46.1804 30.9226 45.3154C31.4934 43.7136 31.7767 42.2726 31.7725 40.9927C31.768 39.6167 31.5393 38.1774 31.0864 36.6749C30.6654 35.1402 30.0846 33.6541 29.3439 32.2165L28.5708 30.683C27.7656 29.0857 27.1375 27.8237 26.6865 26.8972C26.2675 25.9705 25.8962 24.9637 25.5726 23.8768C25.0876 22.3424 24.8428 20.8552 24.8381 19.4152C24.8343 18.2632 25.0228 17.1745 25.4034 16.1493C25.8161 15.1239 26.4212 14.258 27.2189 13.5514C28.0164 12.7808 29.0072 12.3935 30.1912 12.3897C30.7672 12.3878 31.3277 12.5619 31.8729 12.9122C32.4179 13.2304 32.8033 13.6451 33.029 14.1564L32.2162 15.1671C31.3842 15.1698 30.7597 15.0118 30.3427 14.6932C29.7669 14.7591 29.2558 15.0487 28.8095 15.5622C28.3951 16.0435 28.0769 16.6046 27.855 17.2453C27.665 17.8539 27.571 18.4622 27.573 19.0702C27.5769 20.2862 27.741 21.5337 28.0652 22.8126C28.4212 24.0595 28.8731 25.242 29.4207 26.3602L32.8027 33.0692C33.3504 34.2195 33.7866 35.5141 34.1113 36.953C34.436 38.3919 34.6007 39.8314 34.6054 41.2714C34.6123 43.3834 34.1068 45.3691 33.0889 47.2284C32.548 48.1902 31.8465 48.9445 30.9842 49.4913C30.1221 50.0701 29.1631 50.3612 28.1071 50.3647ZM47.5288 50.0133C46.3755 49.6331 44.9509 49.4457 43.2549 49.4512C42.744 49.7729 42.2005 49.9347 41.6245 49.9366C41.2405 49.9378 40.9039 49.7629 40.6148 49.4118C40.3577 49.0927 40.2286 48.7411 40.2273 48.3571C40.2186 45.6691 40.3189 42.0848 40.5282 37.6041C40.7047 32.8355 40.789 29.2672 40.7813 26.8992L40.7802 26.5632C40.5816 24.5478 40.4807 23.0441 40.4775 22.0521C40.4676 19.0122 41.0226 17.4903 42.1426 17.4867C42.4626 17.4856 42.735 17.6128 42.9599 17.868C43.2166 18.0912 43.3455 18.3628 43.3465 18.6828C43.3478 19.0668 43.3018 19.6749 43.2085 20.5072C43.1151 21.3075 43.0691 21.9157 43.0704 22.3317C43.0774 24.4757 43.0997 26.4116 43.1374 28.1395C43.1749 29.8354 43.1972 31.7553 43.2042 33.8993C43.0457 34.3798 42.9679 35.0521 42.9708 35.9161L42.9726 36.4921L42.889 40.2844C42.8287 41.4046 42.8008 42.6847 42.8055 44.1247C42.8127 46.3327 43.3443 47.4349 44.4003 47.4315C44.4643 47.4313 44.5603 47.431 44.6883 47.4305C44.8482 47.398 45.0562 47.3813 45.3122 47.3805C45.6001 47.3476 45.968 47.3304 46.416 47.3289C48.144 47.3233 49.0096 47.8004 49.0127 48.7604C49.0137 49.0804 48.8706 49.3529 48.5834 49.5778C48.2961 49.8028 47.9446 49.9479 47.5288 50.0133ZM58.5969 50.1212C57.7649 50.1239 56.9961 49.8544 56.2903 49.3127C55.5846 48.803 55.0063 48.1009 54.5554 47.2063C53.621 45.2574 53.0381 43.1313 52.8066 40.828C52.5115 38.653 52.3606 36.5575 52.3541 34.5415C52.3528 34.1575 52.3678 33.8374 52.3989 33.5813L52.3961 32.7173C52.3956 32.5573 52.3793 32.4774 52.3473 32.4775L52.3445 31.6135L52.3815 28.2533C52.4102 27.2292 52.5329 25.5968 52.7496 23.3561C52.9046 21.8196 53.2677 20.3304 53.839 18.8885C54.0609 18.2478 54.3473 17.7669 54.6983 17.4457C55.0491 17.0926 55.4486 16.9153 55.8966 16.9138C57.1766 16.9096 58.3293 17.1459 59.3549 17.6225C60.3804 18.0672 61.2464 18.7044 61.9532 19.5341C62.5958 20.332 63.143 21.3222 63.5949 22.5047C64.0466 23.6553 64.3706 24.8862 64.5669 26.1976C64.7633 27.5409 64.8639 28.9646 64.8688 30.4686L64.8701 30.8526C64.8733 31.8446 64.8923 32.7405 64.9269 33.5404L64.9838 36.2763C65.0139 45.4922 62.8849 50.1072 58.5969 50.1212ZM58.3984 48.1058C58.9744 48.1039 59.5016 47.8782 59.9802 47.4286C60.4586 46.9471 60.8245 46.3059 61.0779 45.5051C61.6806 43.8711 62.0428 42.1099 62.1647 40.2215C62.3193 38.589 62.3947 37.1807 62.3909 35.9967C62.3862 34.5567 62.268 32.6691 62.0364 30.3338C61.8364 27.8705 61.7343 26.0308 61.7304 24.8148L61.7276 23.9508C61.6596 22.735 61.2402 21.6804 60.4692 20.7869C59.7303 19.8933 58.8169 19.4483 57.7289 19.4518C56.6409 19.4554 55.9229 20.0817 55.575 21.3309C55.2582 22.3239 55.1024 23.6044 55.1075 25.1724C55.1095 25.7804 55.1272 26.2924 55.1605 26.7083L55.1648 28.0043L55.076 30.2126C55.0141 30.8848 54.9846 31.6209 54.9872 32.4209C54.9928 34.1489 55.0464 35.8607 55.1479 37.5564C55.2837 39.9559 55.6114 42.2909 56.1308 44.5612C56.6505 46.9275 57.4064 48.1091 58.3984 48.1058ZM72.9603 48.3943L72.9061 46.5225C72.8724 45.9786 72.8544 45.3706 72.8522 44.6986L72.8949 43.0665C72.7977 42.7148 72.5463 39.2116 72.1406 32.5569C71.7349 25.9022 71.4969 21.6309 71.4268 19.7432C69.5706 19.6852 68.3859 19.4971 67.8729 19.1787C67.5201 18.9239 67.3431 18.6365 67.3421 18.3165C67.3412 18.0605 67.5005 17.836 67.8199 17.6429C68.1712 17.4178 68.5228 17.3046 68.8748 17.3035C69.7708 17.3005 70.859 17.361 72.1394 17.4848C73.3559 17.6408 74.4442 17.7173 75.4042 17.7142L75.7882 17.7129L76.1722 17.7117C77.1642 17.7084 77.6614 18.0908 77.6639 18.8588C77.6652 19.2428 77.5062 19.5633 77.187 19.8204C76.8678 20.0454 76.5001 20.1586 76.0841 20.16C75.7961 20.1609 75.38 20.1143 74.8357 20.02L73.8751 19.8312L73.8278 20.0713L73.7806 20.3115C73.7899 23.1595 74.0767 27.7025 74.6411 33.9407C75.1722 39.795 75.443 44.3382 75.4536 47.5702C75.4548 47.9542 75.2799 48.2907 74.9289 48.5799C74.6098 48.8689 74.2423 49.0141 73.8263 49.0155L72.9603 48.3943ZM91.0039 49.1034C89.9159 49.107 89.3633 46.4688 89.3461 41.1888L89.3852 38.4527L89.4259 36.2445L89.4255 36.1005L89.4239 35.6205C89.4551 35.3644 89.4701 35.0604 89.4689 34.7084C89.4687 34.6444 89.4205 34.5645 89.3242 34.4688C89.2278 34.3731 89.1796 34.2933 89.1794 34.2293L89.1792 34.1813C89.0194 34.2458 88.7315 34.2788 88.3155 34.2801C87.8995 34.2815 87.3873 34.2192 86.7789 34.0931C86.5868 34.0618 86.0746 33.9834 85.2421 33.8581L85.2602 39.3781C85.2629 40.2101 85.3151 41.522 85.417 43.3136C85.5187 45.0733 85.571 46.3851 85.5738 47.2491C85.5754 47.7291 85.4488 48.1456 85.1939 48.4984C84.9391 48.8512 84.6036 49.0283 84.1876 49.0297C83.5796 49.0317 83.1457 48.4411 82.8858 47.2579C82.6259 46.0428 82.4927 44.4592 82.4863 42.5072L82.5697 38.6189C82.5981 37.5308 82.6104 36.3788 82.6064 35.1628L82.6037 34.3468L82.6015 33.6748C82.5999 33.1628 82.5828 32.8268 82.5502 32.6669L82.5495 32.4269L82.6844 29.6425C82.6804 28.4265 82.6265 26.6186 82.5227 24.219C82.4188 21.8193 82.3649 20.0115 82.361 18.7955C82.3597 18.4115 82.4866 18.0751 82.7417 17.7862C82.9967 17.4974 83.3163 17.3523 83.7003 17.3511C84.7243 17.3477 85.2394 18.3061 85.2457 20.2261L85.1691 26.1783C85.1109 27.9705 85.0855 29.9706 85.0927 32.1786C85.5732 32.3371 86.4374 32.4142 87.6854 32.4102L89.4614 32.4044C89.5248 32.2122 89.5562 32.0201 89.5555 31.8281C89.5505 30.2921 89.4471 28.0204 89.2453 25.013C89.0121 22.1978 88.8927 19.9102 88.8869 18.1502C88.8858 17.7982 89.0128 17.5098 89.2681 17.2849C89.5553 17.028 89.8908 16.8989 90.2748 16.8976C90.4988 16.8969 90.8191 16.9759 91.2356 17.1345L91.6682 17.3251C91.6831 21.8691 91.8628 27.9325 92.2076 35.5154L92.6792 47.658C92.6807 48.106 92.5058 48.4585 92.1547 48.7157C91.8355 48.9727 91.4519 49.102 91.0039 49.1034ZM100.775 41.9195C100.455 41.9206 100.15 41.5215 99.8592 40.7225C99.5685 39.8914 99.4205 38.6599 99.4152 37.0279C99.4133 36.4519 99.4418 35.3638 99.5005 33.7636C99.5607 32.5794 99.5884 31.2673 99.5837 29.8273L99.462 21.9557L99.3403 14.084C99.3387 13.572 99.5452 13.1394 99.9601 12.786C100.375 12.4007 100.838 12.2071 101.35 12.2055C101.67 12.2044 101.943 12.3155 102.167 12.5388C102.392 12.7621 102.505 13.0497 102.506 13.4017C102.515 16.2177 102.368 20.0422 102.064 24.8752C101.729 30.2203 101.565 34.0449 101.573 36.3489C101.579 38.0449 101.551 39.277 101.489 40.0452C101.459 40.7813 101.381 41.2775 101.254 41.5339C101.159 41.7903 100.999 41.9188 100.775 41.9195ZM99.9379 50.1303C99.5539 50.1315 99.1854 49.9567 98.8322 49.6059C98.5111 49.2549 98.3497 48.8235 98.348 48.3115C98.3461 47.7355 98.5365 47.2388 98.9191 46.8216C99.3017 46.3723 99.7649 46.1468 100.309 46.1451C100.885 46.1432 101.35 46.3657 101.703 46.8125C102.088 47.2273 102.282 47.7706 102.284 48.4426C102.288 49.5626 101.506 50.1252 99.9379 50.1303Z';

  var animalSloth2 = 'M78 89C71.5856 90.5503 67.7047 97.6645 64.0207 102.473C62.4341 104.543 61.6381 107.375 60.0208 109.486C58.4242 111.569 57.1523 115.006 55.8998 117.421C53.2825 122.469 52.4288 129.228 49.0919 133.744C48.2561 134.876 47.5982 137.424 47.092 138.83C46.6097 140.17 45.9786 141.484 45.6375 142.87C45.2216 144.558 44.6469 146.457 43.9002 148.058C42.6773 150.678 42.2198 153.98 41.6174 156.732C40.0868 163.724 38.0014 171.09 38.0014 178.325C38.0014 182.412 38.0014 186.5 38.0014 190.587C38.0014 193.534 37.9344 196.87 38.7286 199.692C39.5114 202.473 38.8546 205.568 39.4761 208.407C39.7388 209.607 39.5764 210.895 39.8397 212.098C40.1154 213.357 41.228 214.796 41.274 216.056C41.3329 217.67 40.9065 219.656 41.5568 221.141C41.9352 222.006 42.1877 223.008 42.3851 223.91C42.8441 226.006 44.2398 227.958 44.9102 230 M44.4976 183.308C44.4976 185.85 44.4976 188.392 44.4976 190.934C44.4976 192.386 45.1598 193.58 45.236 194.929C45.3626 197.171 46.3436 199.077 46.3436 201.386C46.3436 203.386 46.9696 205.651 47.082 207.64C47.2519 210.649 47.082 213.707 47.082 216.72C47.082 218.709 46.7681 220.627 46.7128 222.531C46.6644 224.197 46.5515 227.596 45.5231 228.987C44.3978 230.509 43.3814 231.78 41.9952 233.143C40.9065 234.214 39.1363 236.03 37.6674 236.351C36.0326 236.709 35.0528 237.784 33.237 237.784C31.8798 237.784 29.5074 237.853 28.0682 238.167C26.4595 238.519 27.1452 242.464 27.1452 243.776C27.1452 244.869 26.7503 245.983 28.0477 246.218C29.297 246.443 30.8286 246.597 31.9448 247.146C33.2515 247.789 35.7665 247.875 37.1136 247.953C38.9451 248.059 40.8165 247.953 42.6516 247.953C46.4125 247.953 49.9446 246.177 53.543 245.39C56.4986 244.744 59.4633 241.238 61.2961 239.035C62.7886 237.241 64.2452 235.455 65.706 233.607C67.0563 231.9 65.7503 229.353 66.8341 227.433C67.9221 225.507 67.4012 222.885 68.7006 220.876C69.5853 219.509 70.3415 216.543 70.3415 214.904C70.3415 212.344 69.9723 210.017 69.9723 207.459C69.9723 205.346 71.3385 203.787 71.4491 201.83C71.6392 198.465 71.8183 195.117 71.8183 191.741C71.8183 190.363 71.6264 188.842 71.8388 187.484C72.0707 186.001 72.8422 184.426 72.9259 182.944C73.0926 179.993 72.9259 177.231 72.9259 174.228C72.9259 172.498 73.0949 169.053 72.3721 167.489C71.412 165.411 72.2308 161.914 72.1875 159.701C72.1566 158.118 71.7573 156.375 71.4696 154.818C71.1625 153.157 70.3415 151.325 70.3415 149.714C70.3415 147.93 69.673 145.392 69.2544 143.54C68.9828 142.337 68.9812 139.602 67.7571 139 M50.686 249C50.686 251.759 52.0633 260.671 49.4244 262.797C48.14 263.832 47.4849 266.911 47.0614 268.404C46.6728 269.774 46 271.2 46 272.782C46 275.947 46.5835 280.951 50.5058 280.951C53.9773 280.951 57.4305 280.588 60.9793 280.588C64.6452 280.588 68.4027 279.869 71.2326 282.403C74.3901 285.23 77 284.255 77 279.862C77 277.995 76.9536 277.112 75.6382 275.787C75.0297 275.174 72.8083 273.74 71.9535 273.689C67.3259 273.415 68.0242 277.81 66.186 280.588 M76.4217 275.001C79.2411 275.001 80.3353 274.912 82.2325 276.37C83.3985 277.267 83.4916 279.156 84.6459 279.866C85.2835 280.258 85.0526 281.311 84.0132 280.911C83.379 280.667 82.3571 280.19 81.6936 280.19C79.8056 280.19 77.9692 279.866 76 279.866 M87.1793 278C88.6366 277.713 90.0739 278.17 90.0739 276.541C90.0739 275.786 89.8021 274.862 89.1693 274.352C88.0796 273.473 86.6132 273.116 85.6516 272.244C84.6394 271.325 82.5382 271.147 81.7519 270.156C80.6455 268.761 78.2239 269.244 76.9678 268.23C75.2534 266.847 74.5154 266.955 74.5154 264.319C74.5154 262.483 75.1486 260.67 75.2391 259.028C75.3583 256.865 76.6864 254.752 76.6864 252.644C76.6864 251.657 77.0482 250.882 77.0482 249.907C77.0482 248.873 76.8211 248.361 77.9528 248.995C79.0608 249.616 81.5606 249.543 82.8374 249.543C85.0184 249.543 86.7312 249.298 88.8075 248.833C90.5731 248.438 92.2227 247.718 94.054 247.718C95.6293 247.718 97.5909 247.196 98.9386 246.441C100.54 245.544 102.71 245.765 104.265 244.8C105.937 243.762 107.718 242.658 109.432 241.698C113.263 239.552 115.863 236.428 118.739 233.206C119.299 232.577 120.414 232.055 120.467 231.138C120.553 229.674 121.218 228.166 121.533 226.74C121.915 225.006 121.844 223.478 122.357 221.734C122.968 219.655 123 217.787 123 215.612C123 213.652 122.377 211.96 122.276 210.14C122.201 208.774 120.99 206.856 120.286 205.579C119.797 204.691 119.675 203.465 119.181 202.681C118.781 202.047 118.02 201.067 117.934 200.289C117.758 198.685 115.521 195.936 114.517 194.634C113.4 193.186 112.987 191.246 111.623 189.871C109.196 187.424 107.84 183.536 105.09 181.318C104.282 180.666 104.221 179.119 103.823 178.216C103.434 177.333 102.723 176.707 102.296 175.845C101.407 174.053 100.061 172.561 99.1195 170.899C98.2605 169.384 98.2793 167.919 97.5918 166.359C97.1086 165.263 96.5466 162.314 95.6822 161.616C94.5775 160.725 95.1395 157.802 95.1395 156.427C95.1395 154.448 94.054 152.94 94.054 151.036C94.054 147.144 94.054 143.253 94.054 139.361C94.054 137.407 94.8972 135.71 95.1596 133.726C95.5225 130.981 96.8621 128.338 97.9537 125.862C98.5493 124.511 99.4566 123.122 99.8633 121.687C100.072 120.949 101.08 120.188 101.471 119.477C101.905 118.69 102.049 117.638 102.657 117.025C104.406 115.261 100.56 115.647 99.3004 115.647C97.5198 115.647 95.4334 114.552 93.5112 114.552C91.6292 114.552 89.7859 114.257 87.9834 114.187C87.2058 114.157 83.2418 113.785 82.8374 113.275C82.6459 113.034 81.1608 112.844 80.8273 112.748C80.0512 112.524 79.5455 112.104 78.9377 111.552C77.9227 110.631 76.2838 109.168 75.9828 107.802C75.729 106.651 74.6025 104.446 73.8722 103.526C73.1952 102.672 73.0681 100.155 73.0681 99.0463C73.0681 97.4239 72.653 95.4314 73.8722 94.2021C74.9897 93.0752 76.3854 92.7624 77.4904 91.6482C78.2082 90.9244 79.1055 90.3557 79.8624 89.6618C80.5177 89.0611 82.0642 88.442 82.4756 87.716C83.6893 85.5744 85.7654 86.4444 87.5411 85.6486C88.8111 85.0795 91.0564 85 92.4258 85C94.1746 85 95.9234 85 97.6722 85C99.2765 85 100.564 86.0945 102.195 86.0945C103.965 86.0945 105.468 86.8242 107.08 86.8242C110.122 86.8242 114.082 88.553 115.04 91.9319C115.662 94.127 117.211 95.2563 117.211 97.6883C117.211 99.4022 117.573 101.245 117.573 103.06C117.573 106.392 113.125 108.939 110.879 110.701C109.447 111.824 107.556 112.474 105.994 113.174C104.691 113.758 102.981 115.4 101.632 115.626C100.727 115.778 100.193 116.376 99.3004 116.376C98.3959 116.376 97.4913 116.376 96.5868 116.376C95.5229 116.376 92.0134 117.369 91.5212 116.376 M76.6921 108C79.6108 107.508 83.6572 105.895 85.3357 103.38C86.1167 102.209 87.9683 101.444 88.8353 100.023C89.524 98.8941 90.5903 96.5488 89.5943 95.3827C88.7113 94.3489 87.2444 93.1477 85.7995 93.0725C83.9423 92.9758 81.9646 92.9758 80.1074 93.0725C78.9325 93.1336 75.927 94.1459 75.1742 95.0273C74.1957 96.1729 71.3795 96.7134 71.3795 98.5814C71.3795 100.314 71 102.25 71 104.09 M82.6399 98.5256C80.8961 98.5256 80.2843 98.3238 79.1131 99.296C78.5325 99.7779 80.365 99.6812 80.598 99.6812C81.5106 99.6812 81.5794 99.4644 81.5261 98.5256C81.492 97.9225 80.3388 98.6378 81.2374 98.9964C82.4403 99.4764 83.3961 99.6812 84.6817 99.6812C85.5914 99.6812 84.2985 99.296 83.9392 99.296C82.7871 99.296 83.1568 98.9783 83.4649 98.0549C83.6713 97.436 83.4892 95.328 83.3824 96.2145C83.1607 98.0546 81.169 96.63 80.8043 98.333C80.7286 98.6866 81.4443 98.0114 81.6911 97.7553C82.2744 97.1501 80.6449 97.8465 80.4949 98.1405C80.0572 98.9982 80.6029 99.296 81.2993 99.296C81.3019 99.296 81.1145 99.6306 81.1755 99.8524C81.3149 100.359 81.619 99.4061 81.7324 99.3388C82.5128 98.8761 81.7217 98.9108 81.8974 98.9108C82.8805 98.9108 82.6399 98.2069 82.6399 97.3701 M97.1079 95.333C94.5905 95.3933 93.2367 97.4566 92.0956 99.4252C90.8463 101.58 91.4609 103.867 90.7754 106.167C90.5348 106.974 89.7263 108.082 90.0947 109.053C90.4832 110.077 91.8537 111.702 93.0238 111.702C94.4056 111.702 98.9526 112.423 99.9957 111.623C101.692 110.322 103.61 109.524 104.719 107.61C105.213 106.757 104.905 105.193 104.905 104.229C104.905 103.109 104.162 102.151 104.162 101.204C104.162 99.6133 101.391 97.0617 100.078 96.3215C98.3771 95.3625 95.5291 94.0443 94.1376 96.0447 M93.5176 97.4304C94.2599 100.627 95.6417 101 98.7624 101C99.7307 101 100.301 99.9588 100.651 99.2152C101.305 97.8235 101.031 97.5074 99.9047 96.549C98.5063 95.3594 96.5872 95.5114 94.9628 95.0727C93.0725 94.5622 92.1454 96.8891 91 97.4304 M113.345 107.289C110.198 105.528 105.467 103.406 105.215 99.4712C105.116 97.9187 104.773 95.4717 105.237 93.9828C105.892 91.8771 108.996 92.0086 110.829 92.0086C113.156 92.0086 114.477 91.8007 116.055 93.43C117.075 94.4837 117.991 96.4419 117.991 97.8721C117.991 99.8266 117.991 101.781 117.991 103.736C117.991 104.56 118.108 105.822 117.517 106.5C117.021 107.07 115.945 107.491 115.668 108 M110 97C113.493 102.588 112.364 97.2808 110.933 97.7917C108.83 98.5429 112.326 100 113 100 M94 147.051C98.6671 150.403 104.035 154 109.924 154C113.627 154 117.33 154 121.033 154C124.193 154 128.055 153.886 130.846 152.354C133.079 151.129 135.646 150.024 138.067 148.961C139.235 148.448 141.314 147.523 142.141 146.503C142.513 146.043 143.326 145.755 143.807 145.385C144.795 144.626 145.489 143.345 146.585 142.744C148.144 141.888 148.83 140.136 150.288 139.289C151.993 138.299 152.481 135.783 153.806 134.474C157.158 131.164 158.805 128.379 158.805 123.827C158.805 122.364 158.805 120.901 158.805 119.438C158.805 118.517 159.294 115.654 158.723 114.948C157.818 113.831 157.756 112.017 156.871 110.925C156.132 110.013 155.679 109.078 155.102 108.08C153.661 105.59 151.219 104.436 148.807 103.245C146.949 102.328 141.983 100.962 140.207 102.716C139.437 103.477 138.445 103.725 137.615 104.545C136.645 105.503 135.77 106.697 135.455 108.101C135.29 108.834 134.735 109.526 134.735 110.295C134.735 111.781 134.321 109.511 134.282 109.462C133.569 108.582 133.109 107.366 132.862 106.272C132.533 104.806 132.513 103.433 132.513 101.883C132.513 99.9511 133.53 100.312 134.652 99.4248C135.341 98.8805 138.173 98.8732 138.993 99.3232C140.063 99.9101 140.881 101.04 141.4 102.066 M134.232 95.3226C132.635 94.1804 131.167 93.4438 129.555 92.5635C127.766 91.5861 126.644 91.2816 127.103 89.2527C127.435 87.7831 127.743 86.8248 128.911 85.6762C130.198 84.4105 131.302 84.6543 133.109 84.6543C135.425 84.6543 136.476 91.7926 136.476 93.6671C136.476 94.1481 136.718 95.3248 136.871 95.8539C137.063 96.5117 137.715 94.765 138.16 94.2394C139.211 92.9995 139.095 90.7923 139.095 89.2527C139.095 87.5597 139.844 85.6183 139.844 83.9186C139.844 82.7312 140.345 79.9203 139.553 79.0545C138.626 78.0427 138.071 76.6149 136.643 76.2138C134.974 75.745 133.783 76.1933 132.174 76.1933C130.898 76.1933 131.188 76.0857 131.239 76.9291C131.28 77.6149 131.492 78.7117 131.904 79.218C132.074 79.4271 132.349 81.3268 132.361 81.6296C132.399 82.5572 132.735 83.3189 132.735 84.2865C132.735 85.6384 133.548 87.8875 134.149 89.0688C134.794 90.3378 136.102 92.4784 136.102 93.8511 M142.183 83C145.447 83.7435 147.452 85.7464 150.291 87.3891C151.275 87.9583 152.136 88.9791 153.182 89.5837C154.291 90.2257 156.262 91.3692 156.914 92.5097C158.221 94.795 160.931 96.7716 162.574 98.9105C163.478 100.088 164.417 101.216 165.384 102.304C166.083 103.09 166.17 105.062 166.929 105.677C167.962 106.514 167.832 109.583 167.832 110.757C167.832 112.609 168.845 114.34 168.916 116.203C169.037 119.374 170 122.575 170 125.794C170 128.662 170.006 131.718 169.257 134.369C168.193 138.139 166.715 142.282 165.645 146.073C165.294 147.317 163.946 148.604 163.317 149.751C162.519 151.204 161.334 152.718 160.246 153.957C158.059 156.449 155.838 158.668 153.202 160.744C150.669 162.738 147.764 163.994 145.354 165.946C143.465 167.476 139.523 169.399 137.126 169.685C134.551 169.991 132.134 172.245 129.359 172.245C126.434 172.245 123.499 173.421 120.688 174.054C119.466 174.329 117.968 174.44 116.715 174.44C114.44 174.44 112.287 175.044 110.031 175.171C107.045 175.339 104.033 177 101 177 M25.0833 246.973C21.6015 246.973 15.4512 247.537 13.4475 243.544C11.7224 240.107 11 237.23 11 233.259C11 229.962 11.8011 232.664 13.5278 232.878C15.016 233.063 17.2122 234.055 18.5833 234.698C19.8589 235.296 22.3054 235.843 23.6389 235.926C24.5529 235.982 25.1883 236.03 25.9861 236.497C26.8346 236.994 25.0164 236.326 24.642 236.01C23.0413 234.66 21.3599 235.373 20.4691 233.259C20.2323 232.697 20.4167 227.334 20.4691 227.334C21.8329 227.334 24.4912 230.349 25.4444 231.355C26.1285 232.076 27.0452 232.816 27.7917 233.429C28.1662 233.736 28.9622 234.755 29.4167 234.783C30.107 234.826 31.1163 234.738 31.5833 235.354C31.956 235.846 32.4522 232.834 32.5864 232.497C33.1631 231.053 32.6667 228.357 32.6667 226.783C32.6667 225.122 32.7515 226.487 33.2083 227.355C33.6966 228.282 34.1029 229.263 34.5525 230.212C35.3567 231.908 36.579 233.768 37 235.545 M89.6504 251C89.6504 253.857 89.4435 256.718 89.2968 259.468C89.2416 260.504 89.2968 261.56 89.2968 262.597C89.2968 263.736 88.3978 264.242 89.7289 264.704C91.7973 265.422 93.3768 267.435 95.6599 267.567C97.7076 267.686 99.795 267.567 101.846 267.567C103.845 267.567 105.135 265.879 106.815 265.379C108.816 264.784 110.361 263.886 112.451 263.886C114.913 263.886 115.705 264.151 117.734 265.358C119.117 266.182 119.552 269.372 119.973 270.799C120.387 272.201 115.869 271.372 115.181 270.799C113.53 269.423 111.943 269.04 109.8 269.04C107.996 269.04 108.74 268.802 108.74 267.383C108.74 265.992 109.704 265.759 108.818 266.913C108.484 267.348 108.789 269.578 108.19 269.756C107.284 270.026 105.972 269.776 105.028 269.776C103.447 269.776 103.939 269.952 103.162 270.963C102.738 271.514 102.237 272.909 101.846 273.642C101.409 274.463 100.941 275.228 100.53 276.035C99.7334 277.603 101.279 276.947 102.2 277.16C102.977 277.34 107.679 278.851 107.679 277.324C107.679 275.601 107.641 271.413 105.912 270.513 M110.133 275.856C111.124 275.856 116 276.506 116 275.045C116 273.875 115.707 271.09 114.167 270.99C112.681 270.893 111.463 270.179 109.767 270.179C107.874 270.179 106.823 269.576 105 270.584 M31.5964 88.3866C30.6225 89.0019 29.6727 89.3559 28.7472 89.4486C28.1605 89.4786 27.7646 89.3313 27.5595 89.0067C27.3544 88.682 27.2732 88.3737 27.3158 88.0818C27.3414 87.7628 27.503 87.5093 27.8006 87.3213C28.0711 87.1504 28.5317 87.0108 29.1825 86.9025C29.8873 86.76 30.3074 86.646 30.4427 86.5605C30.9567 86.2358 31.2798 85.7288 31.4121 85.0395C31.5544 84.3062 31.5166 83.4973 31.2985 82.6131C30.9309 80.9528 30.4052 79.5816 29.7215 78.4995C28.9866 77.3362 28.0281 76.2384 26.846 75.2063C25.6739 74.1299 24.3922 73.1796 23.0008 72.3553L21.5311 71.467C20.0002 70.5417 18.7975 69.8064 17.9231 69.2611C17.0757 68.6988 16.2262 68.0432 15.3746 67.2943C14.1484 66.2521 13.1507 65.1224 12.3815 63.905C11.7662 62.9311 11.3474 61.9087 11.1251 60.8379C10.9298 59.75 10.9824 58.6949 11.2826 57.6724C11.5488 56.5958 12.1823 55.7413 13.1833 55.1089C13.6702 54.8013 14.2376 54.651 14.8856 54.658C15.5164 54.6379 16.0632 54.7845 16.526 55.0977L16.3746 56.3857C15.6712 56.8301 15.0582 57.0282 14.5356 56.9798C14.0829 57.3416 13.8038 57.8585 13.6986 58.5307C13.6033 59.1587 13.6318 59.803 13.7843 60.4637C13.9467 61.0803 14.1903 61.6456 14.5151 62.1596C15.1646 63.1876 15.9664 64.1572 16.9207 65.0684C17.8848 65.9354 18.896 66.6971 19.9541 67.3534L26.384 71.2398C27.4592 71.9232 28.5167 72.7881 29.5563 73.8345C30.596 74.881 31.5004 76.0129 32.2696 77.2303C33.3976 79.0158 34.0245 80.9665 34.1501 83.0826C34.203 84.1847 34.0095 85.1965 33.5696 86.1179C33.1469 87.0663 32.4891 87.8225 31.5964 88.3866ZM47.8626 77.7689C46.6836 78.0595 45.3772 78.6578 43.9434 79.5637C43.6815 80.1077 43.307 80.5335 42.8201 80.8412C42.4954 81.0463 42.1174 81.077 41.6859 80.9332C41.2985 80.7994 41.0023 80.5702 40.7972 80.2456C39.3615 77.9731 37.5418 74.8834 35.3383 70.9763C32.9539 66.8429 31.1293 63.7752 29.8645 61.7733L29.685 61.4893C28.4459 59.8875 27.5614 58.6673 27.0316 57.8286C25.4078 55.2586 25.0694 53.6745 26.0162 53.0762C26.2867 52.9053 26.5851 52.8683 26.9112 52.965C27.2472 53.0177 27.5007 53.1792 27.6717 53.4498C27.8768 53.7744 28.1609 54.3141 28.5242 55.0687C28.8703 55.7963 29.1545 56.3359 29.3767 56.6876C30.5218 58.5002 31.5694 60.1283 32.5195 61.5721C33.4524 62.9888 34.4915 64.6034 35.6366 66.416C35.7577 66.9072 36.049 67.5181 36.5105 68.2485L36.8182 68.7355L38.7624 71.9925C39.3066 72.9736 39.9632 74.0728 40.7323 75.2901C41.9117 77.1568 42.9477 77.8081 43.8405 77.2441C43.8946 77.2099 43.9758 77.1586 44.084 77.0902C44.2021 76.9777 44.3694 76.8531 44.5859 76.7164C44.8122 76.5355 45.1148 76.3254 45.4935 76.0861C46.9544 75.1631 47.9412 75.1074 48.454 75.919C48.6249 76.1896 48.6484 76.4964 48.5246 76.8396C48.4008 77.1828 48.1801 77.4926 47.8626 77.7689ZM57.2962 71.979C56.5929 72.4234 55.7983 72.6037 54.9126 72.5198C54.0439 72.463 53.181 72.1755 52.3236 71.6573C50.4965 70.5027 48.8729 69.0114 47.4529 67.1832C46.0472 65.4974 44.8059 63.8024 43.7291 62.098C43.524 61.7734 43.3666 61.4943 43.2569 61.2608L42.7954 60.5304C42.71 60.3951 42.6537 60.336 42.6267 60.3531L42.1652 59.6227L40.4111 56.7565C39.8912 55.8737 39.1277 54.4256 38.1206 52.4123C37.4355 51.0283 36.9518 49.5738 36.6696 48.0487C36.5171 47.388 36.5042 46.8284 36.6309 46.3699C36.7405 45.8843 36.9846 45.5218 37.3634 45.2825C38.4455 44.5989 39.5476 44.1864 40.6696 44.0453C41.7746 43.8771 42.8469 43.9567 43.8865 44.284C44.8548 44.6185 45.8446 45.1666 46.8557 45.9282C47.8498 46.6628 48.7784 47.5335 49.6414 48.5401C50.5216 49.5737 51.3634 50.7263 52.1667 51.9978L52.3718 52.3224C52.9017 53.1611 53.3938 53.91 53.8481 54.5693L55.3501 56.8566C60.2726 64.6479 60.9213 69.6887 57.2962 71.979ZM56.0571 70.3772C56.5441 70.0696 56.8708 69.5982 57.0373 68.9631C57.1867 68.3009 57.156 67.5633 56.9451 66.7502C56.5874 65.0458 55.9585 63.3613 55.0582 61.6968C54.3218 60.2316 53.6374 58.9986 53.005 57.9976C52.2358 56.7802 51.1327 55.2439 49.6956 53.3887C48.2172 51.4082 47.1533 49.9039 46.5038 48.8759L46.0423 48.1455C45.3387 47.1517 44.4229 46.4811 43.2951 46.1338C42.1943 45.7695 41.184 45.8779 40.2642 46.459C39.3444 47.0401 39.069 47.9522 39.438 49.1953C39.6973 50.2049 40.2458 51.3725 41.0833 52.698C41.408 53.212 41.695 53.6363 41.9443 53.9709L42.6365 55.0666L43.7347 56.9845C44.0395 57.5868 44.4056 58.2261 44.8329 58.9024C45.7559 60.3633 46.7109 61.785 47.6979 63.1675C49.088 65.1281 50.6063 66.9321 52.2527 68.5794C53.9503 70.3078 55.2185 70.9071 56.0571 70.3772ZM68.5464 62.8839L67.5059 61.327C67.1883 60.8842 66.85 60.3787 66.4911 59.8106L65.66 58.4052C65.3908 58.1589 63.3163 55.3248 59.4365 49.9029C55.5568 44.481 53.0856 40.9891 52.0231 39.4272C50.4198 40.3644 49.3163 40.8345 48.7125 40.8374C48.2782 40.809 47.9756 40.6596 47.8047 40.389C47.6679 40.1726 47.6835 39.8978 47.8515 39.5645C48.0295 39.1872 48.2672 38.9045 48.5648 38.7164C49.3223 38.2379 50.2763 37.7108 51.4268 37.1354C52.5402 36.6211 53.5028 36.1076 54.3143 35.5949L54.639 35.3898L54.9636 35.1847C55.8023 34.6548 56.4267 34.7145 56.8369 35.3638C57.042 35.6884 57.0776 36.0444 56.9439 36.4318C56.793 36.792 56.5417 37.0833 56.19 37.3055C55.9465 37.4593 55.5692 37.6409 55.058 37.8503L54.1439 38.2008L54.2315 38.4293L54.3191 38.6579C55.8403 41.0656 58.4973 44.7618 62.2902 49.7466C65.8509 54.4238 68.4944 58.1285 70.2207 60.8609C70.4258 61.1855 70.4565 61.5636 70.3127 61.9951C70.196 62.4095 69.9618 62.7278 69.6101 62.95L68.5464 62.8839ZM84.2088 53.8969C83.289 54.478 81.419 52.5367 78.5988 48.073L77.178 45.7343L76.0392 43.842L75.9623 43.7203L75.7059 43.3145C75.5962 43.081 75.4474 42.8154 75.2594 42.5178C75.2252 42.4637 75.1419 42.4217 75.0094 42.3918C74.877 42.362 74.7937 42.32 74.7595 42.2659L74.7339 42.2253C74.6328 42.3648 74.4064 42.5457 74.0547 42.7679C73.703 42.9901 73.236 43.2095 72.6536 43.426C72.4742 43.5015 71.9986 43.7074 71.2269 44.0436L74.1753 48.7102C74.6197 49.4136 75.361 50.4971 76.3993 51.9608C77.4206 53.3974 78.1619 54.4809 78.6234 55.2114C78.8798 55.6172 78.9938 56.0372 78.9654 56.4715C78.9369 56.9059 78.7469 57.2341 78.3952 57.4563C77.8812 57.7811 77.1998 57.5113 76.351 56.6471C75.485 55.7558 74.5308 54.4851 73.4881 52.8349L71.4926 49.4966C70.9385 48.5598 70.3367 47.5773 69.6872 46.5493L69.2514 45.8594L68.8925 45.2913C68.619 44.8585 68.426 44.583 68.3135 44.4648L68.1853 44.2619L66.82 41.8314C66.1705 40.8034 65.1642 39.3005 63.8012 37.3228C62.4381 35.3451 61.4318 33.8423 60.7823 32.8143C60.5772 32.4896 60.506 32.1372 60.5686 31.757C60.6312 31.3768 60.8248 31.0841 61.1494 30.879C62.0151 30.3321 62.9607 30.8702 63.9862 32.4934L67.0842 37.5765C67.9873 39.1256 69.0285 40.8335 70.2078 42.7002C70.6991 42.5791 71.4722 42.1852 72.5273 41.5186L74.0287 40.57C73.9803 40.3735 73.9048 40.1941 73.8022 40.0318C72.9818 38.7332 71.6871 36.8638 69.9181 34.4233C68.2247 32.1623 66.9079 30.2879 65.9678 28.8C65.7798 28.5024 65.7342 28.1905 65.831 27.8644C65.9377 27.4942 66.1534 27.2065 66.478 27.0014C66.6674 26.8817 66.9807 26.7785 67.4178 26.6915L67.8856 26.6231C70.3127 30.4646 73.6869 35.5057 78.0082 41.7463L84.8599 51.7821C85.0992 52.1609 85.1384 52.5525 84.9776 52.9569C84.8438 53.3442 84.5875 53.6576 84.2088 53.8969ZM96.0796 37.937C95.809 38.1079 95.3384 37.9321 94.6676 37.4096C93.9797 36.8601 93.2 35.8955 92.3283 34.5158C92.0206 34.0288 91.4665 33.0919 90.666 31.7051C90.0877 30.6699 89.414 29.5437 88.6449 28.3263L84.359 21.7226L80.0732 15.1188C79.7998 14.686 79.7449 14.2096 79.9085 13.6899C80.0551 13.143 80.3448 12.7329 80.7777 12.4594C81.0482 12.2885 81.338 12.2379 81.647 12.3076C81.956 12.3773 82.2045 12.561 82.3925 12.8586C83.8966 15.2392 85.8039 18.5575 88.1143 22.8134C90.6711 27.5193 92.5648 30.8461 93.7954 32.7939C94.7013 34.2277 95.3323 35.2864 95.6884 35.9698C96.0544 36.6091 96.2517 37.0712 96.2803 37.356C96.3358 37.6237 96.2689 37.8173 96.0796 37.937ZM99.7333 45.3375C99.4086 45.5426 99.0035 45.5904 98.5179 45.4808C98.0594 45.3542 97.6934 45.0744 97.4199 44.6416C97.1122 44.1546 97.0096 43.6328 97.1121 43.076C97.1974 42.4921 97.47 42.0549 97.9299 41.7643C98.4169 41.4567 98.9288 41.3982 99.4657 41.589C100.013 41.7355 100.465 42.0929 100.824 42.661C101.423 43.6078 101.059 44.5 99.7333 45.3375Z';

  var animalWhale = 'M32.1871 42.0408C25.4849 42.0408 20.3661 44.0759 15.149 48.1336C13.0696 49.7509 12.4188 51.9127 10.6446 53.7912C8.0851 56.5013 6.77497 59.7457 4.55176 62.6041C1.24002 66.8621 0.852539 72.7514 0.852539 78.0756C0.852539 79.8319 3.69369 82.5629 4.57352 84.1466C5.71948 86.2094 8.813 87.515 10.9492 88.1723C13.9279 89.0888 16.9318 89.2573 19.9579 90.3048C22.5234 91.1928 24.895 92.1028 27.4652 92.9595C29.6984 93.7039 32.4428 94.1345 34.9289 94.1345C36.306 94.1345 37.356 93.6605 38.6499 93.3729C39.25 93.2396 39.5916 92.7285 40.2166 92.5896C41.232 92.3639 40.3471 91.9641 40.0208 92.372C39.6521 92.8328 37.1411 93.3153 36.4956 93.3512C35.5371 93.4044 33.6303 94.0497 32.7964 94.5262C30.8024 95.6657 28.2733 95.7013 25.9202 95.7013C23.1132 95.7013 20.3061 95.7013 17.499 95.7013C15.7888 95.7013 11.4704 95.7862 10.6446 94.1345 M10.253 89.8262C7.85885 90.3517 3.57769 93.1003 5.07409 96.0931C6.05927 98.0635 8.72684 100.257 10.6447 101.272C12.6463 102.332 15.0588 103.41 17.3033 103.535C19.03 103.631 21.2045 104.593 22.7651 105.276C25.7894 106.599 28.8891 106.277 32.1655 106.277C38.2185 106.277 45.5453 107.31 51.3797 105.689C54.3656 104.86 57.3294 104.014 60.3013 103.143C61.8873 102.679 64.8158 102.225 65.8937 100.967C66.9912 99.6869 70.2602 99.5783 71.7472 98.8349 M70.9639 95.3096C72.6241 96.8722 74.3228 98.2334 75.8817 99.7922C76.7643 100.675 79.1836 101.909 80.3642 101.968C84.6201 102.181 88.7485 103.143 93.0722 103.143C96.0804 103.143 98.9724 102.409 101.907 101.99C103.069 101.824 104.22 101.697 105.127 100.88C107.093 99.1108 109.74 99.0063 109.74 96.093C109.74 94.0084 105.247 95.0536 103.865 94.4392C101.806 93.5238 99.1015 93.7162 97.2936 92.0891C95.902 90.8367 93.8911 90.0627 92.4194 88.7381C91.0207 87.4793 88.4286 86.6926 86.6312 86.6926 M97.5981 89.8259C102.734 88.0135 105.847 84.1222 109.349 80.4256C111.299 78.3668 113.696 76.6962 115.616 74.5503C116.93 73.0814 117.796 71.2737 119.141 69.8501C121.382 67.4768 123.173 63.1285 124.537 60.0581C124.715 59.6578 124.919 58.1433 125.103 58.4913C125.662 59.5481 126.694 60.4004 127.845 60.7544C129.996 61.4164 132.567 61.3576 134.808 61.2331C138.616 61.0215 144.51 59.6387 147.429 57.0117C150.393 54.3441 153.972 53.3968 156.351 49.9614C157.1 48.8791 158.78 47.6959 158.701 46.3492C158.665 45.7521 155.128 46.7409 154.392 46.7409C151.68 46.7409 148.049 47.2283 145.862 45.4788C143.611 43.6778 139.566 43.9991 136.766 43.9991C136.143 43.9991 132.686 45.6728 133.328 44.8695C134.461 43.4542 134.038 41.8935 133.328 40.474C132.642 39.1005 131.675 38.1795 131.675 36.5571C131.675 35.2714 131.24 33.0306 131.762 31.8569C132.752 29.6289 134.721 25.0727 131.675 23.7186C129.343 22.6825 124.723 23.5341 122.97 25.1113C120.481 27.3514 117.771 29.6225 116.094 32.6403C114.468 35.5671 112.874 38.6312 112.874 42.0407C112.874 43.7354 112.824 45.4387 112.874 47.1326C112.901 48.0506 113.371 51.494 114.049 51.8327 M119.924 46.3494C118.185 46.7312 113.599 47.8914 112.482 49.287C111.723 50.2361 109.371 51.3081 108.174 51.4412C106.495 51.6277 104.828 52.7802 103.082 53.0297C101.001 53.3269 99.5592 54.3362 97.3371 54.096C93.8334 53.7172 88.9979 53.196 85.8478 51.5283C84.5176 50.8241 83.0812 50.2396 81.7569 49.4828C80.4945 48.7614 79.7897 47.52 78.4058 46.8281C75.213 45.2317 71.7637 45.4863 68.6137 44.0863C67.0044 43.371 64.9548 43.9249 63.326 43.0201C62.2484 42.4214 60.0495 41.6492 58.8217 41.6492C57.5217 41.6492 56.1118 40.8658 54.709 40.8658C52.8966 40.8658 51.2577 40.4741 49.4213 40.4741C47.9198 40.4741 46.4184 40.4741 44.9169 40.4741C42.6024 40.4741 42.2095 41.1424 40.4126 42.0409 M34.1456 47.1326C33.7692 49.3374 34.1516 50.6578 36.4957 50.6578C38.1416 50.6578 39.8989 50.8997 41.3918 50.0703C42.2573 49.5894 44.2857 48.5592 43.3284 47.3285C42.2256 45.9105 40.4678 46.3493 38.8458 46.3493 M37.2791 47.5242C37.2791 44.4561 37.2791 41.3879 37.2791 38.3197C37.2791 36.7694 36.6818 35.9292 36.1911 34.5117C34.4456 29.4692 30.9432 29.5068 26.312 29.5068 M38.0627 45.566C38.0627 41.5767 38.0627 37.5873 38.0627 33.598C38.0627 32.3375 37.2793 28.6383 37.2793 29.8987 M38.8462 45.1744C38.8462 38.1256 40.8058 31.8568 47.8549 29.5071 M41.1963 29.5071C42.3766 27.949 43.5347 27.0342 45.1131 25.9819 M31.7959 27.1569C31.3341 26.821 26.5957 24.4693 27.4874 24.0234 M29.8371 35.3823C28.0495 35.054 26.3193 34.5227 24.5712 34.0332C23.2668 33.668 21.9239 33.9324 20.6108 33.6198C19.4412 33.3413 15.102 34.1131 14.5615 33.0322 M47.4629 33.4238C49.5519 33.4238 51.6408 33.4238 53.7298 33.4238 M58.4299 80.4257C56.3081 80.4257 54.9048 80.6762 54.9048 82.9717C54.9048 84.3559 56.4323 85.5176 57.6465 85.5176C60.798 85.5176 59.8672 80.2156 57.6465 79.1636C56.0485 78.4067 56.1102 81.1572 57.0808 81.7749C58.6626 82.7815 60.1058 82.7833 59.9966 80.8174C59.9377 79.756 57.2088 78.3806 56.8849 79.8382C56.6972 80.683 57.388 83.4045 58.3429 81.6008C59.0178 80.326 58.065 78.4673 56.6456 78.4673C54.6735 78.4673 54.81 79.5033 54.9048 81.2091C54.9919 82.7772 58.0382 82.9775 58.0382 81.035C58.0382 79.8233 56.0375 78.6837 54.9918 79.7294C53.478 81.2432 56.46 82.3841 57.4289 82.3841C58.2038 82.3841 58.0382 81.831 58.0382 81.2091C58.0382 79.9416 57.1639 80.0341 56.0798 80.0341C53.8438 80.0341 54.1214 80.4628 54.1214 82.58C54.1214 84.4366 57.2549 85.6829 57.2549 84.1467C57.2549 82.4149 57.2774 81.6774 55.2094 81.6008C52.6699 81.5067 57.9003 82.2093 58.9739 81.9707C60.3493 81.6651 58.4311 79.2507 57.2549 79.2507C55.7659 79.2507 56.4428 80.8174 57.8424 80.8174C59.6705 80.8174 58.8466 78.8258 57.5595 78.3803C55.5608 77.6884 55.8042 79.7478 56.1016 81.3832C56.2872 82.4042 58.8216 83.0326 58.8216 81.6008C58.8216 80.771 58.9946 80.2607 58.2341 79.8382C57.8737 79.638 56.2461 79.354 56.1016 79.86C55.4813 82.0309 58.044 82.4709 59.6049 82.3841C60.2085 82.3506 59.9966 81.4408 59.9966 81.0133C59.9966 79.68 59.216 79.3881 57.8859 79.2724C56.3763 79.1412 56.4317 82.8562 56.9502 83.9509C57.7299 85.5968 60.4735 83.2566 58.9304 82.1883C57.7564 81.3756 55.8245 81.1573 54.426 81.2091C53.2457 81.2528 53.875 82.0823 54.6001 82.2971C55.6494 82.608 60.0601 82.9463 58.9957 80.8174C58.1797 79.1855 54.3993 79.6344 56.7761 80.3387C60.3686 81.4031 57.5782 78.2123 56.8632 79.6424 M54.4854 74.6347C56.3079 74.6347 62.0864 73.9692 62.8362 76.5937C63.2278 77.9642 64.347 79.7814 64.347 81.2091 M90.985 18.27C90.745 18.27 90.253 17.034 89.509 14.562C88.669 11.67 87.943 9.012 87.331 6.588V12.492C87.331 12.996 87.379 13.854 87.475 15.066C87.559 16.386 87.601 17.238 87.601 17.622C87.601 17.73 87.535 17.826 87.403 17.91C87.271 17.982 87.121 18.018 86.953 18.018C86.701 18.018 86.575 17.922 86.575 17.73L86.611 17.208C86.635 16.824 86.647 16.572 86.647 16.452C86.647 15.816 86.611 14.808 86.539 13.428C86.467 12.024 86.431 11.172 86.431 10.872V8.568C86.431 8.196 86.449 7.644 86.485 6.912C86.533 6.276 86.557 5.724 86.557 5.256V5.148C86.557 4.548 86.689 4.248 86.953 4.248C87.109 4.248 87.307 4.512 87.547 5.04C87.943 5.904 88.447 7.452 89.059 9.684C89.407 10.98 89.815 12.648 90.283 14.688C90.271 14.64 90.367 15.054 90.571 15.93L90.589 16.02C90.589 14.856 90.601 13.812 90.625 12.888L90.661 9.756V4.428C90.709 4.128 90.901 3.978 91.237 3.978C91.561 3.978 91.723 4.212 91.723 4.68V4.788C91.651 4.932 91.615 5.106 91.615 5.31C91.615 6.042 91.597 7.146 91.561 8.622C91.525 10.11 91.507 11.226 91.507 11.97V17.46C91.507 17.652 91.453 17.832 91.345 18C91.249 18.18 91.129 18.27 90.985 18.27ZM96.081 18.342C95.769 18.342 95.481 18.24 95.217 18.036C94.953 17.844 94.737 17.58 94.569 17.244C94.221 16.512 94.005 15.714 93.921 14.85C93.813 14.034 93.759 13.248 93.759 12.492C93.759 12.348 93.765 12.228 93.777 12.132V11.808C93.777 11.748 93.771 11.718 93.759 11.718V11.394L93.777 10.134C93.789 9.75 93.837 9.138 93.921 8.298C93.981 7.722 94.119 7.164 94.335 6.624C94.419 6.384 94.527 6.204 94.659 6.084C94.791 5.952 94.941 5.886 95.109 5.886C95.589 5.886 96.021 5.976 96.405 6.156C96.789 6.324 97.113 6.564 97.377 6.876C97.617 7.176 97.821 7.548 97.989 7.992C98.157 8.424 98.277 8.886 98.349 9.378C98.421 9.882 98.457 10.416 98.457 10.98V11.124C98.457 11.496 98.463 11.832 98.475 12.132L98.493 13.158C98.493 16.614 97.689 18.342 96.081 18.342ZM96.009 17.586C96.225 17.586 96.423 17.502 96.603 17.334C96.783 17.154 96.921 16.914 97.017 16.614C97.245 16.002 97.383 15.342 97.431 14.634C97.491 14.022 97.521 13.494 97.521 13.05C97.521 12.51 97.479 11.802 97.395 10.926C97.323 10.002 97.287 9.312 97.287 8.856V8.532C97.263 8.076 97.107 7.68 96.819 7.344C96.543 7.008 96.201 6.84 95.793 6.84C95.385 6.84 95.115 7.074 94.983 7.542C94.863 7.914 94.803 8.394 94.803 8.982C94.803 9.21 94.809 9.402 94.821 9.558V10.044L94.785 10.872C94.761 11.124 94.749 11.4 94.749 11.7C94.749 12.348 94.767 12.99 94.803 13.626C94.851 14.526 94.971 15.402 95.163 16.254C95.355 17.142 95.637 17.586 96.009 17.586ZM100.857 18.126C100.701 17.49 100.623 16.608 100.623 15.48L100.659 13.878C100.683 13.398 100.695 12.864 100.695 12.276C100.623 12.108 100.587 11.958 100.587 11.826V11.772C100.707 11.544 100.767 11.028 100.767 10.224L100.785 9.396C100.797 9.132 100.803 8.838 100.803 8.514C100.803 7.806 100.755 7.248 100.659 6.84C100.695 6.672 100.755 6.528 100.839 6.408C100.923 6.276 101.025 6.21 101.145 6.21H101.937C102.273 6.21 102.567 6.288 102.819 6.444C103.071 6.588 103.263 6.798 103.395 7.074C103.635 7.566 103.755 8.148 103.755 8.82C103.755 9.3 103.749 9.678 103.737 9.954C103.713 10.302 103.653 10.62 103.557 10.908C103.521 11.064 103.467 11.196 103.395 11.304C103.335 11.4 103.245 11.52 103.125 11.664C102.957 11.868 102.681 12.06 102.297 12.24C102.141 12.324 101.937 12.402 101.685 12.474V14.4L101.721 15.552L101.757 16.11C101.805 16.782 101.829 17.352 101.829 17.82C101.829 17.964 101.769 18.084 101.649 18.18C101.529 18.288 101.391 18.342 101.235 18.342L100.857 18.126ZM101.703 11.736C102.411 11.628 102.765 10.614 102.765 8.694C102.765 8.346 102.747 8.076 102.711 7.884C102.675 7.74 102.627 7.626 102.567 7.542C102.507 7.446 102.417 7.368 102.297 7.308C102.165 7.236 102.021 7.2 101.865 7.2C101.865 7.188 101.799 7.182 101.667 7.182V8.208C101.667 8.916 101.673 9.546 101.685 10.098C101.685 10.722 101.691 11.13 101.703 11.322V11.7V11.736ZM106.352 18.234C106.196 18.234 106.052 18.18 105.92 18.072C105.8 17.964 105.734 17.832 105.722 17.676V17.208V16.848C105.71 16.74 105.704 16.614 105.704 16.47C105.704 16.218 105.686 15.834 105.65 15.318L105.614 14.166C105.614 13.578 105.632 12.702 105.668 11.538C105.716 10.494 105.74 9.618 105.74 8.91C105.74 8.742 105.722 8.49 105.686 8.154C105.65 7.806 105.632 7.554 105.632 7.398C105.632 6.546 105.884 6.12 106.388 6.12C106.784 6.12 107.24 6.198 107.756 6.354C108.284 6.51 108.548 6.696 108.548 6.912C108.548 7.032 108.494 7.146 108.386 7.254C108.29 7.35 108.17 7.428 108.026 7.488C107.522 7.308 107.066 7.188 106.658 7.128C106.67 7.308 106.676 7.566 106.676 7.902C106.676 8.382 106.67 8.814 106.658 9.198C106.622 9.774 106.604 10.206 106.604 10.494L106.658 10.782L106.946 10.764C107.042 10.752 107.162 10.746 107.306 10.746C107.882 10.746 108.17 10.914 108.17 11.25C108.17 11.382 108.116 11.496 108.008 11.592C107.9 11.676 107.762 11.718 107.594 11.718C107.378 11.718 107.21 11.706 107.09 11.682H106.64C106.664 11.994 106.676 12.45 106.676 13.05C106.676 13.65 106.67 14.19 106.658 14.67C106.622 15.402 106.604 15.948 106.604 16.308C106.604 16.98 106.616 17.316 106.64 17.316L107.234 17.298C107.438 17.286 107.684 17.28 107.972 17.28C108.428 17.28 108.656 17.424 108.656 17.712C108.656 17.88 108.578 18.006 108.422 18.09C108.278 18.186 108.098 18.234 107.882 18.234H106.352Z';

  var dataset00Grid = 'M11 66.5 L787 66.5 M35.5 14 L35.5 381 M98.5 14 L98.5 381 M166.5 14 L166.5 381 M239.5 14 L239.5 381 M295.5 14 L295.5 381 M369.5 14 L369.5 381 M450.5 14 L450.5 381 M522.5 14 L522.5 381 M592.5 14 L592.5 381 M634.5 14 L634.5 381 M723.5 14 L723.5 381';

  var dataset01Id = 'M12.992 17.592C12.8533 17.656 12.7413 17.7467 12.656 17.864C12.5707 17.9813 12.528 18.104 12.528 18.232C12.528 18.4027 12.5973 18.5733 12.736 18.744C12.7147 18.8827 12.7893 19.016 12.96 19.144C13.1307 19.272 13.3173 19.336 13.52 19.336C13.6587 19.336 13.7813 19.2987 13.888 19.224C14.1867 19.064 14.336 18.8613 14.336 18.616C14.336 18.456 14.272 18.2747 14.144 18.072C14.1547 17.8587 14.0907 17.6933 13.952 17.576C13.824 17.448 13.6693 17.384 13.488 17.384C13.2853 17.384 13.12 17.4533 12.992 17.592ZM14.032 24.664C14.1173 24.696 14.1813 24.7973 14.224 24.968C14.2773 25.1387 14.304 25.3253 14.304 25.528C14.304 25.7627 14.2667 25.9173 14.192 25.992C14.256 26.152 14.288 26.3067 14.288 26.456C14.288 26.648 14.24 26.808 14.144 26.936C14.2187 27.1173 14.256 27.3307 14.256 27.576C14.256 27.7787 14.224 27.944 14.16 28.072C14.192 28.168 14.208 28.2587 14.208 28.344C14.208 28.536 14.1387 28.6907 14 28.808C13.8613 28.9147 13.696 28.968 13.504 28.968C13.3227 28.968 13.168 28.9147 13.04 28.808C12.912 28.6907 12.8533 28.536 12.864 28.344C12.8107 28.28 12.768 28.1787 12.736 28.04C12.704 27.9013 12.688 27.7573 12.688 27.608C12.688 27.3307 12.7467 27.1493 12.864 27.064C12.7787 26.9253 12.736 26.7173 12.736 26.44C12.736 26.1627 12.7733 25.96 12.848 25.832C12.8053 25.7893 12.7733 25.688 12.752 25.528C12.7307 25.368 12.72 25.192 12.72 25C12.72 24.8187 12.7307 24.6587 12.752 24.52C12.7733 24.3707 12.8053 24.2747 12.848 24.232C12.784 24.168 12.752 23.992 12.752 23.704C12.752 23.3733 12.7893 23.1333 12.864 22.984C12.8107 22.8987 12.7627 22.7867 12.72 22.648C12.6773 22.5093 12.656 22.3813 12.656 22.264C12.656 22.1573 12.6667 22.0827 12.688 22.04C12.6027 21.7627 12.56 21.5387 12.56 21.368C12.56 21.1867 12.6027 21 12.688 20.808C12.6667 20.648 12.704 20.5253 12.8 20.44C12.896 20.3547 13.0347 20.312 13.216 20.312C13.7067 20.312 13.952 20.6107 13.952 21.208C14.048 21.272 14.1173 21.3627 14.16 21.48C14.2133 21.5867 14.24 21.7093 14.24 21.848C14.24 22.072 14.1867 22.264 14.08 22.424C14.1227 22.488 14.1547 22.584 14.176 22.712C14.208 22.84 14.224 22.968 14.224 23.096C14.224 23.2667 14.1973 23.384 14.144 23.448C14.1867 23.5013 14.208 23.6133 14.208 23.784C14.208 23.944 14.1867 24.1147 14.144 24.296C14.112 24.4773 14.0747 24.6 14.032 24.664ZM20.2998 28.056C20.2784 28.152 20.1984 28.232 20.0598 28.296C19.9211 28.36 19.7718 28.392 19.6118 28.392C19.5371 28.392 19.4838 28.3867 19.4518 28.376C19.3984 28.4613 19.2864 28.5467 19.1158 28.632C18.9451 28.7173 18.7958 28.76 18.6678 28.76C18.6038 28.76 18.5451 28.744 18.4918 28.712C18.3851 28.7333 18.2944 28.744 18.2198 28.744C18.0704 28.744 17.9211 28.7173 17.7718 28.664C17.6331 28.6107 17.5264 28.5413 17.4518 28.456C17.2704 28.4773 17.0998 28.456 16.9398 28.392C16.7904 28.3173 16.7051 28.2213 16.6838 28.104C16.5664 28.1253 16.4331 28.0773 16.2838 27.96C16.1451 27.8427 16.0704 27.6827 16.0598 27.48C15.8998 27.3947 15.7824 27.2667 15.7078 27.096C15.6331 26.9253 15.5958 26.744 15.5958 26.552C15.5958 26.4133 15.6118 26.3067 15.6438 26.232C15.5584 26.1573 15.4891 26.0027 15.4358 25.768C15.3824 25.5227 15.3558 25.2667 15.3558 25C15.3558 24.68 15.3931 24.4453 15.4678 24.296C15.4144 24.1893 15.3878 24.0667 15.3878 23.928C15.3878 23.8107 15.4038 23.6987 15.4358 23.592C15.4784 23.4853 15.5371 23.4 15.6118 23.336C15.5798 23.2827 15.5638 23.2347 15.5638 23.192C15.5638 23.1173 15.5904 23.0373 15.6438 22.952C15.6971 22.8667 15.7558 22.8027 15.8198 22.76C15.8091 22.5893 15.8518 22.4347 15.9478 22.296C16.0544 22.1467 16.1611 22.056 16.2678 22.024C16.2571 21.9173 16.2944 21.7893 16.3798 21.64C16.4651 21.4907 16.5771 21.368 16.7158 21.272C16.8651 21.176 17.0144 21.1333 17.1638 21.144C17.3771 20.8453 17.6704 20.696 18.0438 20.696C18.2038 20.696 18.3264 20.7173 18.4118 20.76C18.5291 20.7067 18.6731 20.68 18.8438 20.68C19.0144 20.68 19.2011 20.7227 19.4038 20.808C19.4678 20.776 19.5478 20.76 19.6438 20.76C19.7504 20.76 19.8518 20.7813 19.9478 20.824C20.0544 20.856 20.1238 20.904 20.1558 20.968C20.1451 20.9253 20.1398 20.8613 20.1398 20.776C20.1398 20.6053 20.1824 20.456 20.2678 20.328C20.1931 20.2 20.1558 20.072 20.1558 19.944C20.1558 19.88 20.1611 19.832 20.1718 19.8C20.1611 19.7467 20.1398 19.6773 20.1078 19.592C20.0758 19.496 20.0598 19.416 20.0598 19.352C20.0598 19.2667 20.0811 19.1813 20.1238 19.096C20.0704 18.9893 20.0438 18.8827 20.0438 18.776C20.0438 18.6587 20.0758 18.5467 20.1398 18.44C20.0651 18.2907 20.0278 18.136 20.0278 17.976C20.0278 17.7627 20.0864 17.5707 20.2038 17.4C20.3318 17.2293 20.5024 17.144 20.7158 17.144C20.8971 17.144 21.0518 17.2133 21.1798 17.352C21.3184 17.48 21.3878 17.6293 21.3878 17.8C21.3878 17.864 21.3824 17.912 21.3718 17.944C21.5318 18.072 21.6118 18.248 21.6118 18.472C21.6118 18.5893 21.5744 18.712 21.4998 18.84C21.5318 18.9147 21.5478 18.9947 21.5478 19.08C21.5478 19.1973 21.5211 19.3093 21.4678 19.416C21.5211 19.5227 21.5478 19.6347 21.5478 19.752C21.5478 19.9013 21.5104 20.0293 21.4358 20.136C21.5424 20.264 21.5958 20.3867 21.5958 20.504C21.5958 20.5893 21.5638 20.68 21.4998 20.776C21.5318 20.84 21.5478 20.92 21.5478 21.016C21.5478 21.0907 21.5318 21.1707 21.4998 21.256C21.5851 21.3733 21.6278 21.5013 21.6278 21.64C21.6278 21.7467 21.6011 21.8533 21.5478 21.96C21.6118 22.0667 21.6438 22.1947 21.6438 22.344C21.6438 22.5893 21.5851 22.76 21.4678 22.856C21.5744 22.984 21.6278 23.176 21.6278 23.432C21.6278 23.5813 21.6064 23.7307 21.5638 23.88C21.5318 24.0293 21.4998 24.136 21.4678 24.2C21.5744 24.36 21.6278 24.5627 21.6278 24.808C21.6278 24.9253 21.6011 25.0373 21.5478 25.144C21.6651 25.2613 21.7238 25.4373 21.7238 25.672C21.7238 25.928 21.6704 26.136 21.5638 26.296C21.6704 26.4347 21.7238 26.632 21.7238 26.888C21.7238 27.0587 21.6971 27.2133 21.6438 27.352C21.6011 27.48 21.5424 27.5653 21.4678 27.608C21.4784 27.6827 21.5051 27.7947 21.5478 27.944C21.6011 28.1787 21.6278 28.328 21.6278 28.392C21.6278 28.5627 21.5744 28.7013 21.4678 28.808C21.3398 28.936 21.1904 29 21.0198 29C20.8811 29 20.7531 28.952 20.6358 28.856C20.5291 28.7493 20.4651 28.6107 20.4438 28.44C20.3904 28.3867 20.3531 28.3173 20.3318 28.232C20.3104 28.136 20.2998 28.0773 20.2998 28.056ZM18.2998 27.432C18.3318 27.3573 18.4278 27.32 18.5878 27.32C18.6624 27.32 18.7264 27.3253 18.7798 27.336C18.8331 27.3467 18.8758 27.352 18.9078 27.352C18.9184 27.2773 18.9824 27.2133 19.0998 27.16C19.2278 27.096 19.3504 27.064 19.4678 27.064C19.5424 27.064 19.6064 27.08 19.6598 27.112C19.6491 27.0053 19.6704 26.92 19.7238 26.856C19.7771 26.792 19.8464 26.7333 19.9318 26.68C20.0278 26.616 20.0971 26.568 20.1398 26.536C20.1184 26.4933 20.1078 26.3973 20.1078 26.248C20.1078 25.928 20.1451 25.7307 20.2198 25.656C20.1451 25.5813 20.1078 25.432 20.1078 25.208C20.1078 24.952 20.1451 24.728 20.2198 24.536C20.1558 24.3973 20.1238 24.1627 20.1238 23.832C20.1238 23.512 20.1451 23.2987 20.1878 23.192C20.0918 23 20.0438 22.7813 20.0438 22.536C20.0438 22.344 20.0651 22.2053 20.1078 22.12C20.0438 22.1627 19.9478 22.168 19.8198 22.136C19.7024 22.0933 19.6064 22.0347 19.5318 21.96C19.4891 22.024 19.4038 22.056 19.2758 22.056C19.1904 22.056 19.1051 22.0453 19.0198 22.024C18.9344 21.992 18.8758 21.96 18.8438 21.928C18.6731 22.0027 18.5078 22.04 18.3478 22.04C18.3051 22.04 18.2411 22.0293 18.1558 22.008C18.0171 22.1573 17.9104 22.264 17.8358 22.328C17.7611 22.392 17.6598 22.4293 17.5318 22.44C17.4998 22.5147 17.4678 22.6053 17.4358 22.712C17.4038 22.808 17.3664 22.888 17.3238 22.952C17.2811 23.016 17.2064 23.0693 17.0998 23.112C17.0784 23.2507 17.0251 23.3627 16.9398 23.448C16.9504 23.4907 16.9557 23.5493 16.9557 23.624C16.9557 23.7307 16.9291 23.848 16.8758 23.976C16.9078 24.0507 16.9238 24.216 16.9238 24.472C16.9238 24.9627 16.8811 25.256 16.7958 25.352C16.8064 25.3947 16.8438 25.496 16.9078 25.656C16.9718 25.816 17.0038 25.9707 17.0038 26.12C17.0038 26.2373 16.9824 26.344 16.9398 26.44C17.1531 26.5253 17.2864 26.6747 17.3398 26.888C17.4464 26.92 17.5478 26.9893 17.6438 27.096C17.8998 27.0853 18.1184 27.1973 18.2998 27.432Z M17.5391 92.9648V92.3438C17.7266 92.3203 17.957 92.2812 18.2305 92.2266C18.5117 92.1719 18.7305 92.1328 18.8867 92.1094C18.9102 91.5469 18.9219 90.9805 18.9219 90.4102C18.9219 90.0508 18.918 89.5117 18.9102 88.793C18.9023 88.0664 18.8984 87.5195 18.8984 87.1523C18.8984 86.2852 18.9102 85.6289 18.9336 85.1836C18.2227 85.5898 17.7031 85.918 17.375 86.168L17 85.7812C17.125 85.6797 17.3398 85.5039 17.6445 85.2539C17.9492 84.9961 18.2227 84.7656 18.4648 84.5625C18.707 84.3516 18.8945 84.1797 19.0273 84.0469C19.1523 84.0625 19.2812 84.0742 19.4141 84.082C19.5469 84.082 19.6758 84.0898 19.8008 84.1055C19.8477 85.0117 19.8711 86.6719 19.8711 89.0859C19.8711 90.5234 19.8828 91.5547 19.9062 92.1797C19.9766 92.1875 20.1445 92.2188 20.4102 92.2734C20.6836 92.3203 20.8945 92.3516 21.043 92.3672L21.2305 92.9883C20.8398 92.9883 20.5 92.9883 20.2109 92.9883C19.9219 92.9883 19.5352 92.9883 19.0508 92.9883C18.5742 92.9883 18.1992 92.9883 17.9258 92.9883C17.6602 92.9805 17.5312 92.9727 17.5391 92.9648Z M21.3945 118.191L21.7578 118.965C21.1719 118.98 20.2539 118.992 19.0039 119C17.7539 119 17.0898 119 17.0117 119C17.0117 118.938 17.0078 118.828 17 118.672C17 118.516 17 118.391 17 118.297C17.1484 118.039 17.3945 117.73 17.7383 117.371C18.082 117.004 18.4258 116.648 18.7695 116.305C19.1133 115.953 19.4492 115.57 19.7773 115.156C20.1133 114.742 20.3867 114.281 20.5977 113.773C20.8086 113.258 20.9141 112.73 20.9141 112.191C20.9141 111.848 20.793 111.57 20.5508 111.359C20.3086 111.141 20.0156 111.031 19.6719 111.031C19.2734 111.031 18.9023 111.195 18.5586 111.523C18.2227 111.844 17.9883 112.336 17.8555 113L17.3281 112.812C17.3594 112.055 17.6055 111.465 18.0664 111.043C18.5352 110.621 19.0742 110.41 19.6836 110.41C20.2305 110.41 20.6992 110.582 21.0898 110.926C21.4805 111.27 21.6758 111.75 21.6758 112.367C21.6758 112.875 21.5977 113.371 21.4414 113.855C21.2852 114.332 21.0586 114.781 20.7617 115.203C20.4648 115.625 20.1875 115.988 19.9297 116.293C19.6719 116.59 19.3477 116.938 18.957 117.336C18.5742 117.727 18.3047 118.008 18.1484 118.18C18.4141 118.195 18.6406 118.203 18.8281 118.203C19.0234 118.203 19.3281 118.199 19.7422 118.191C20.1562 118.176 20.4648 118.168 20.668 118.168C20.8555 118.168 21.0977 118.176 21.3945 118.191Z M17 144.625L17.0938 144.086C17.1562 144.094 17.332 144.129 17.6211 144.191C17.918 144.254 18.1797 144.301 18.4062 144.332C18.6406 144.363 18.8477 144.379 19.0273 144.379C19.4727 144.379 19.8203 144.211 20.0703 143.875C20.3281 143.539 20.457 143.148 20.457 142.703C20.457 142.094 20.2461 141.57 19.8242 141.133C19.4102 140.688 18.8086 140.465 18.0195 140.465C17.8945 140.465 17.8008 140.469 17.7383 140.477V139.902C17.8086 139.91 17.918 139.914 18.0664 139.914C18.7773 139.914 19.3555 139.789 19.8008 139.539C20.2539 139.289 20.4805 138.891 20.4805 138.344C20.4805 137.93 20.3633 137.598 20.1289 137.348C19.8945 137.098 19.5898 136.973 19.2148 136.973C19.043 136.973 18.8555 136.984 18.6523 137.008C18.457 137.023 18.2422 137.047 18.0078 137.078C17.7734 137.109 17.625 137.129 17.5625 137.137L17.375 136.609C17.4688 136.586 17.6211 136.543 17.832 136.48C18.043 136.418 18.207 136.371 18.3242 136.34C18.4492 136.309 18.6055 136.281 18.793 136.258C18.9805 136.227 19.1562 136.211 19.3203 136.211C19.9219 136.211 20.3984 136.422 20.75 136.844C21.1016 137.258 21.2773 137.828 21.2773 138.555C21.2773 139.016 21.1641 139.395 20.9375 139.691C20.7188 139.988 20.3828 140.172 19.9297 140.242C20.3984 140.43 20.7539 140.738 20.9961 141.168C21.2461 141.59 21.3711 142.09 21.3711 142.668C21.3711 143.332 21.2148 143.902 20.9023 144.379C20.5898 144.848 20.1172 145.082 19.4844 145.082C18.5703 145.082 17.7422 144.93 17 144.625Z M21.8047 167.59L21.9219 168.117C21.5156 168.164 21.2266 168.195 21.0547 168.211C21.0703 168.57 21.0898 169.023 21.1133 169.57C21.1445 170.117 21.1641 170.566 21.1719 170.918C21.1016 171.16 20.9688 171.281 20.7734 171.281C20.6328 171.281 20.4961 171.223 20.3633 171.105C20.2305 170.988 20.1484 170.848 20.1172 170.684C20.125 170.441 20.1523 169.645 20.1992 168.293C19.9492 168.309 19.75 168.316 19.6016 168.316C19.3672 168.316 19.0039 168.305 18.5117 168.281C18.0273 168.25 17.6719 168.234 17.4453 168.234C17.3359 168.234 17.1875 168.242 17 168.258C17.0156 168.07 17.0234 167.941 17.0234 167.871C17.0234 167.824 17.0195 167.75 17.0117 167.648C17.0117 167.539 17.0117 167.457 17.0117 167.402C18.3164 165.207 19.3711 163.578 20.1758 162.516C20.418 162.516 20.75 162.566 21.1719 162.668C21.1562 163.035 21.1328 163.832 21.1016 165.059C21.0781 166.277 21.0547 167.102 21.0312 167.531C21.375 167.547 21.6328 167.566 21.8047 167.59ZM17.8672 167.438L20.2227 167.508C20.2461 167.062 20.2695 166.402 20.293 165.527C20.3164 164.652 20.3359 163.992 20.3516 163.547C20.0312 163.875 19.5664 164.562 18.957 165.609C18.3555 166.648 17.9922 167.258 17.8672 167.438Z M20.6523 188.68L20.7812 189.207C20.3984 189.277 19.9609 189.312 19.4688 189.312C18.7344 189.312 18.2656 189.324 18.0625 189.348C17.9453 190.246 17.793 191.199 17.6055 192.207C17.832 192.16 18.0508 192.137 18.2617 192.137C18.9492 192.137 19.5586 192.41 20.0898 192.957C20.6211 193.496 20.8867 194.121 20.8867 194.832C20.8867 195.504 20.625 196.078 20.1016 196.555C19.5781 197.031 18.9336 197.27 18.168 197.27C17.4258 197.27 16.7031 197.023 16 196.531C16.0078 196.523 16.0664 196.398 16.1758 196.156C16.293 195.914 16.4062 195.793 16.5156 195.793C16.5703 195.793 16.6211 195.812 16.668 195.852C17.207 196.258 17.7148 196.461 18.1914 196.461C18.6758 196.461 19.0742 196.27 19.3867 195.887C19.6992 195.504 19.8555 195.074 19.8555 194.598C19.8555 194.152 19.707 193.773 19.4102 193.461C19.1211 193.148 18.6953 192.992 18.1328 192.992C17.9297 192.992 17.7383 193.008 17.5586 193.039C17.4023 192.953 17.2305 192.867 17.043 192.781C16.8555 192.695 16.6992 192.621 16.5742 192.559C16.7539 191.855 16.9023 191.152 17.0195 190.449C17.1367 189.746 17.293 189.117 17.4883 188.562C17.7617 188.586 18.2656 188.598 19 188.598C19.7344 188.598 20.2852 188.625 20.6523 188.68Z M20.6406 214.516L20.8398 215.043C19.0117 215.824 17.9258 216.871 17.582 218.184C17.8945 217.98 18.2109 217.879 18.5312 217.879C19.2031 217.879 19.7656 218.184 20.2188 218.793C20.6719 219.395 20.8984 220.164 20.8984 221.102C20.8984 221.773 20.6914 222.309 20.2773 222.707C19.8711 223.105 19.3516 223.305 18.7188 223.305C18.125 223.305 17.6016 223.09 17.1484 222.66C16.7031 222.223 16.4805 221.645 16.4805 220.926C16.4805 220.473 16.4883 220.078 16.5039 219.742C16.5273 219.406 16.5703 219.039 16.6328 218.641C16.7031 218.234 16.7969 217.883 16.9141 217.586C17.0312 217.289 17.1914 216.98 17.3945 216.66C17.6055 216.332 17.8555 216.047 18.1445 215.805C18.4336 215.555 18.7852 215.32 19.1992 215.102C19.6211 214.875 20.1016 214.68 20.6406 214.516ZM17.3242 220.586C17.3242 221.234 17.4453 221.723 17.6875 222.051C17.9297 222.371 18.2305 222.531 18.5898 222.531C18.9727 222.531 19.3047 222.402 19.5859 222.145C19.8672 221.887 20.0078 221.531 20.0078 221.078C20.0078 220.391 19.8516 219.816 19.5391 219.355C19.2266 218.895 18.8477 218.664 18.4023 218.664C18.1992 218.664 18.0273 218.703 17.8867 218.781C17.7461 218.852 17.6406 218.934 17.5703 219.027C17.5 219.121 17.4453 219.27 17.4062 219.473C17.3672 219.668 17.3438 219.836 17.3359 219.977C17.3281 220.109 17.3242 220.312 17.3242 220.586Z M18.4531 249.094L17.5391 248.824L20.7031 241.066C18.8828 241.012 17.6484 240.957 17 240.902L16.8828 240.375C17.4297 240.312 18.2578 240.281 19.3672 240.281C20.4766 240.273 21.2422 240.254 21.6641 240.223L21.6055 241.242L18.4531 249.094Z M22.4609 272.645C22.4609 273.496 22.2539 274.129 21.8398 274.543C21.4258 274.949 20.793 275.152 19.9414 275.152C18.3008 275.152 17.4805 274.301 17.4805 272.598C17.4805 271.988 17.6055 271.453 17.8555 270.992C18.1055 270.531 18.4492 270.266 18.8867 270.195C18.4414 270.188 18.1055 270.023 17.8789 269.703C17.6523 269.383 17.5391 268.984 17.5391 268.508C17.5391 267.773 17.7383 267.195 18.1367 266.773C18.543 266.352 19.1172 266.141 19.8594 266.141C20.6406 266.141 21.2539 266.336 21.6992 266.727C22.1445 267.117 22.3672 267.719 22.3672 268.531C22.3672 269.008 22.2539 269.406 22.0273 269.727C21.8008 270.047 21.4648 270.211 21.0195 270.219C21.4727 270.289 21.8242 270.559 22.0742 271.027C22.332 271.496 22.4609 272.035 22.4609 272.645ZM20.0703 274.309C20.5078 274.309 20.8711 274.141 21.1602 273.805C21.4492 273.461 21.5938 273.055 21.5938 272.586C21.5938 272.117 21.4336 271.715 21.1133 271.379C20.793 271.035 20.3633 270.859 19.8242 270.852C19.3555 270.992 19.0039 271.215 18.7695 271.52C18.5352 271.816 18.418 272.152 18.418 272.527C18.418 272.996 18.5742 273.41 18.8867 273.77C19.1992 274.129 19.5938 274.309 20.0703 274.309ZM20.0703 266.785C19.5469 266.824 19.1484 266.996 18.875 267.301C18.6016 267.605 18.4648 267.957 18.4648 268.355C18.4648 268.762 18.5938 269.113 18.8516 269.41C19.1172 269.707 19.4688 269.855 19.9062 269.855C20.4141 269.848 20.8008 269.711 21.0664 269.445C21.332 269.172 21.4648 268.844 21.4648 268.461C21.4648 268.078 21.3359 267.723 21.0781 267.395C20.8281 267.066 20.4922 266.863 20.0703 266.785Z M17.6094 301.223L17.4219 300.695C19.2422 299.922 20.3242 298.875 20.668 297.555C20.3398 297.766 20.0234 297.871 19.7188 297.871C19.0469 297.871 18.4844 297.57 18.0312 296.969C17.5859 296.359 17.3633 295.582 17.3633 294.637C17.3633 293.965 17.5664 293.434 17.9727 293.043C18.3789 292.645 18.8984 292.445 19.5312 292.445C20.1328 292.445 20.6562 292.664 21.1016 293.102C21.5547 293.531 21.7812 294.105 21.7812 294.824C21.7812 295.277 21.7695 295.672 21.7461 296.008C21.7305 296.344 21.6875 296.711 21.6172 297.109C21.5547 297.508 21.4648 297.859 21.3477 298.164C21.2305 298.461 21.0664 298.773 20.8555 299.102C20.6523 299.422 20.4062 299.703 20.1172 299.945C19.8281 300.188 19.4727 300.422 19.0508 300.648C18.6289 300.867 18.1484 301.059 17.6094 301.223ZM20.9375 295.152C20.9375 294.504 20.8125 294.02 20.5625 293.699C20.3203 293.371 20.0195 293.207 19.6602 293.207C19.2773 293.207 18.9453 293.336 18.6641 293.594C18.3828 293.852 18.2422 294.207 18.2422 294.66C18.2422 295.348 18.3984 295.922 18.7109 296.383C19.0234 296.844 19.4062 297.074 19.8594 297.074C20.0625 297.074 20.2344 297.039 20.375 296.969C20.5156 296.891 20.6211 296.805 20.6914 296.711C20.7617 296.617 20.8164 296.473 20.8555 296.277C20.8945 296.074 20.918 295.906 20.9258 295.773C20.9336 295.633 20.9375 295.426 20.9375 295.152Z M15.5391 326.965V326.344C15.7266 326.32 15.957 326.281 16.2305 326.227C16.5117 326.172 16.7305 326.133 16.8867 326.109C16.9102 325.547 16.9219 324.98 16.9219 324.41C16.9219 324.051 16.918 323.512 16.9102 322.793C16.9023 322.066 16.8984 321.52 16.8984 321.152C16.8984 320.285 16.9102 319.629 16.9336 319.184C16.2227 319.59 15.7031 319.918 15.375 320.168L15 319.781C15.125 319.68 15.3398 319.504 15.6445 319.254C15.9492 318.996 16.2227 318.766 16.4648 318.562C16.707 318.352 16.8945 318.18 17.0273 318.047C17.1523 318.062 17.2812 318.074 17.4141 318.082C17.5469 318.082 17.6758 318.09 17.8008 318.105C17.8477 319.012 17.8711 320.672 17.8711 323.086C17.8711 324.523 17.8828 325.555 17.9062 326.18C17.9766 326.188 18.1445 326.219 18.4102 326.273C18.6836 326.32 18.8945 326.352 19.043 326.367L19.2305 326.988C18.8398 326.988 18.5 326.988 18.2109 326.988C17.9219 326.988 17.5352 326.988 17.0508 326.988C16.5742 326.988 16.1992 326.988 15.9258 326.988C15.6602 326.98 15.5312 326.973 15.5391 326.965ZM19.7109 323.098C19.7188 321.41 19.9375 320.195 20.3672 319.453C20.7969 318.703 21.4492 318.305 22.3242 318.258C22.707 318.258 23.0469 318.363 23.3438 318.574C23.6406 318.785 23.875 319.055 24.0469 319.383C24.2266 319.703 24.375 320.09 24.4922 320.543C24.6094 320.988 24.6875 321.414 24.7266 321.82C24.7734 322.219 24.8047 322.645 24.8203 323.098C24.8203 323.715 24.7266 324.348 24.5391 324.996C24.3594 325.637 24.0781 326.199 23.6953 326.684C23.3203 327.16 22.8984 327.398 22.4297 327.398C20.6172 327.398 19.7109 325.965 19.7109 323.098ZM22.1602 319.16C21.9727 319.199 21.8047 319.262 21.6562 319.348C21.5078 319.434 21.3828 319.531 21.2812 319.641C21.1875 319.75 21.1055 319.895 21.0352 320.074C20.9648 320.254 20.9102 320.422 20.8711 320.578C20.8398 320.727 20.8086 320.922 20.7773 321.164C20.7539 321.406 20.7383 321.617 20.7305 321.797C20.7227 321.969 20.7109 322.199 20.6953 322.488C20.6875 322.77 20.6758 323 20.6602 323.18C20.6602 323.539 20.6797 323.883 20.7188 324.211C20.7578 324.531 20.8281 324.867 20.9297 325.219C21.0391 325.57 21.207 325.855 21.4336 326.074C21.6602 326.293 21.9336 326.418 22.2539 326.449C22.7383 326.449 23.1367 326.113 23.4492 325.441C23.7695 324.77 23.9297 324.09 23.9297 323.402C23.9297 320.605 23.3398 319.191 22.1602 319.16Z M20.3125 347.07C20.7344 347.07 21.0859 347.258 21.3672 347.633C21.6641 347.992 21.8125 348.406 21.8125 348.875C21.8125 349.219 21.7266 349.5 21.5547 349.719C21.3984 349.922 21.1797 350.023 20.8984 350.023C20.4609 350.023 20.1094 349.844 19.8438 349.484C19.5938 349.125 19.4688 348.703 19.4688 348.219C19.4688 347.875 19.5391 347.602 19.6797 347.398C19.8359 347.18 20.0469 347.07 20.3125 347.07Z M20.3125 357.07C20.7344 357.07 21.0859 357.258 21.3672 357.633C21.6641 357.992 21.8125 358.406 21.8125 358.875C21.8125 359.219 21.7266 359.5 21.5547 359.719C21.3984 359.922 21.1797 360.023 20.8984 360.023C20.4609 360.023 20.1094 359.844 19.8438 359.484C19.5938 359.125 19.4688 358.703 19.4688 358.219C19.4688 357.875 19.5391 357.602 19.6797 357.398C19.8359 357.18 20.0469 357.07 20.3125 357.07Z M20.3125 367.07C20.7344 367.07 21.0859 367.258 21.3672 367.633C21.6641 367.992 21.8125 368.406 21.8125 368.875C21.8125 369.219 21.7266 369.5 21.5547 369.719C21.3984 369.922 21.1797 370.023 20.8984 370.023C20.4609 370.023 20.1094 369.844 19.8438 369.484C19.5938 369.125 19.4688 368.703 19.4688 368.219C19.4688 367.875 19.5391 367.602 19.6797 367.398C19.8359 367.18 20.0469 367.07 20.3125 367.07Z';

  var dataset02Quality = 'M46.624 25.192C46.5173 25.0853 46.464 24.9093 46.464 24.664C46.464 24.4933 46.4853 24.36 46.528 24.264C46.464 24.072 46.432 23.912 46.432 23.784C46.432 23.592 46.4853 23.4107 46.592 23.24C46.5813 23.1973 46.576 23.1333 46.576 23.048C46.576 22.8453 46.6613 22.616 46.832 22.36C46.8853 22.264 46.9387 22.1893 46.992 22.136C47.056 22.0827 47.1307 22.0507 47.216 22.04C47.2373 21.912 47.328 21.7893 47.488 21.672C47.4987 21.5547 47.5627 21.432 47.68 21.304C47.7973 21.176 47.9467 21.1067 48.128 21.096C48.224 20.84 48.448 20.6427 48.8 20.504C48.9493 20.44 49.1253 20.408 49.328 20.408C49.3813 20.3333 49.52 20.264 49.744 20.2C49.9893 20.1467 50.2133 20.12 50.416 20.12C50.8427 20.12 51.2373 20.2267 51.6 20.44C51.728 20.1947 51.9093 20.072 52.144 20.072C52.272 20.072 52.384 20.1147 52.48 20.2C52.5867 20.2747 52.6667 20.392 52.72 20.552C52.7413 20.6373 52.752 20.6907 52.752 20.712C52.752 20.776 52.7413 20.8453 52.72 20.92C52.6987 20.9947 52.6933 21.064 52.704 21.128C52.704 21.224 52.7093 21.32 52.72 21.416C52.7413 21.512 52.752 21.608 52.752 21.704C52.752 21.8 52.736 21.896 52.704 21.992C52.8 22.0987 52.848 22.248 52.848 22.44C52.848 22.5787 52.816 22.7173 52.752 22.856C52.6987 22.9947 52.6293 23.112 52.544 23.208C52.7253 23.336 52.816 23.5173 52.816 23.752C52.816 23.9227 52.7573 24.0773 52.64 24.216C52.6613 24.2693 52.672 24.3333 52.672 24.408C52.672 24.4827 52.6453 24.5733 52.592 24.68C52.5387 24.7867 52.5013 24.872 52.48 24.936C52.608 25.064 52.672 25.224 52.672 25.416C52.672 25.5547 52.6453 25.6667 52.592 25.752C52.6453 25.8373 52.688 25.9493 52.72 26.088C52.752 26.2267 52.768 26.3653 52.768 26.504C52.768 26.6747 52.7467 26.8187 52.704 26.936C52.8 26.9253 52.9013 26.9893 53.008 27.128C53.1147 27.2667 53.168 27.4107 53.168 27.56C53.168 27.624 53.1627 27.672 53.152 27.704C53.2053 27.896 53.1467 28.0507 52.976 28.168C52.8053 28.2853 52.6453 28.344 52.496 28.344C52.5387 28.5787 52.56 28.7333 52.56 28.808C52.56 28.8933 52.544 28.9947 52.512 29.112C52.576 29.2613 52.608 29.464 52.608 29.72C52.608 29.9867 52.5813 30.1733 52.528 30.28C52.6347 30.4613 52.688 30.712 52.688 31.032C52.688 31.2987 52.64 31.5333 52.544 31.736C52.4587 31.9387 52.32 32.056 52.128 32.088C52.0427 32.1093 51.984 32.12 51.952 32.12C51.7813 32.12 51.6427 32.04 51.536 31.88C51.44 31.72 51.392 31.528 51.392 31.304C51.392 31.1653 51.4027 31.0587 51.424 30.984C51.3387 30.92 51.2693 30.8133 51.216 30.664C51.1733 30.5253 51.152 30.3867 51.152 30.248C51.152 30.024 51.2053 29.8587 51.312 29.752C51.2693 29.5813 51.248 29.384 51.248 29.16C51.248 29.0107 51.264 28.8827 51.296 28.776C51.1893 28.8507 51.088 28.888 50.992 28.888C50.928 28.888 50.8533 28.8613 50.768 28.808C50.6293 28.936 50.4693 29 50.288 29C50.1173 29 49.952 28.9467 49.792 28.84C49.76 28.8507 49.712 28.856 49.648 28.856C49.456 28.856 49.2427 28.808 49.008 28.712C48.784 28.616 48.624 28.4933 48.528 28.344C48.0267 28.2267 47.696 27.96 47.536 27.544C47.3653 27.512 47.2107 27.448 47.072 27.352C46.944 27.2453 46.864 27.1067 46.832 26.936C46.6827 26.7547 46.608 26.552 46.608 26.328C46.608 26.2427 46.624 26.1627 46.656 26.088C46.56 25.928 46.512 25.7733 46.512 25.624C46.512 25.464 46.5493 25.32 46.624 25.192ZM49.872 21.56C49.8613 21.6667 49.7547 21.7573 49.552 21.832C49.36 21.9067 49.1893 21.9333 49.04 21.912C48.9973 22.0293 48.944 22.12 48.88 22.184C48.8267 22.2373 48.7307 22.312 48.592 22.408C48.496 22.6107 48.2933 22.8347 47.984 23.08C48.016 23.3467 47.9147 23.5867 47.68 23.8C47.7333 23.928 47.76 24.0773 47.76 24.248C47.76 24.376 47.7387 24.5147 47.696 24.664C47.76 24.7387 47.808 24.84 47.84 24.968C47.8827 25.096 47.904 25.224 47.904 25.352C47.904 25.512 47.872 25.6507 47.808 25.768C47.8827 25.8853 47.9093 26.0133 47.888 26.152C48.0267 26.248 48.16 26.3653 48.288 26.504C48.4267 26.632 48.512 26.76 48.544 26.888C48.8427 26.9413 49.0827 27.1013 49.264 27.368C49.36 27.336 49.456 27.32 49.552 27.32C49.6907 27.32 49.8507 27.3573 50.032 27.432C50.1173 27.3787 50.2133 27.352 50.32 27.352C50.4587 27.352 50.6027 27.3893 50.752 27.464C50.9333 27.336 51.104 27.272 51.264 27.272C51.264 27.2293 51.28 27.176 51.312 27.112C51.344 27.048 51.3813 26.9947 51.424 26.952C51.264 26.7493 51.184 26.5787 51.184 26.44C51.184 26.3333 51.2213 26.2107 51.296 26.072C51.2427 25.9653 51.216 25.8587 51.216 25.752C51.216 25.6453 51.2427 25.5387 51.296 25.432C51.232 25.3147 51.2 25.176 51.2 25.016C51.2 24.8027 51.2373 24.6107 51.312 24.44C51.248 24.3227 51.216 24.2053 51.216 24.088C51.216 23.9387 51.2587 23.8053 51.344 23.688C51.2907 23.5813 51.264 23.4533 51.264 23.304C51.264 23.1013 51.344 22.8293 51.504 22.488C51.4613 22.4347 51.44 22.2693 51.44 21.992C51.44 21.7467 51.456 21.592 51.488 21.528C51.4027 21.5493 51.328 21.56 51.264 21.56C51.0613 21.56 50.9173 21.5227 50.832 21.448C50.7573 21.4907 50.6667 21.512 50.56 21.512C50.464 21.512 50.4 21.496 50.368 21.464C50.2507 21.5387 50.1333 21.576 50.016 21.576C49.952 21.576 49.904 21.5707 49.872 21.56ZM57.1964 28.728C57.079 28.7707 56.967 28.792 56.8604 28.792C56.711 28.792 56.5884 28.7387 56.4924 28.632C56.375 28.6427 56.2417 28.5947 56.0924 28.488C55.9537 28.3707 55.8684 28.2587 55.8364 28.152C55.7084 28.12 55.591 28.0507 55.4844 27.944C55.3884 27.8267 55.3244 27.6827 55.2924 27.512C55.1644 27.48 55.0577 27.3947 54.9724 27.256C54.8977 27.1067 54.8604 26.936 54.8604 26.744C54.8604 26.6267 54.8764 26.5147 54.9084 26.408C54.8337 26.2907 54.807 26.1413 54.8284 25.96C54.679 25.832 54.6044 25.6827 54.6044 25.512C54.6044 25.4267 54.6204 25.3467 54.6524 25.272C54.5884 25.176 54.5564 25.064 54.5564 24.936C54.5564 24.776 54.6044 24.632 54.7004 24.504C54.551 24.376 54.4764 24.216 54.4764 24.024C54.4764 23.9067 54.5084 23.8053 54.5724 23.72C54.4764 23.5813 54.4284 23.416 54.4284 23.224C54.4284 23.0747 54.4604 22.9627 54.5244 22.888C54.4177 22.8027 54.3644 22.6747 54.3644 22.504C54.3644 22.3973 54.3964 22.28 54.4604 22.152C54.407 22.0667 54.3804 21.944 54.3804 21.784C54.3804 21.5493 54.4444 21.368 54.5724 21.24C54.5404 21.144 54.5244 21.0533 54.5244 20.968C54.5244 20.776 54.5884 20.6267 54.7164 20.52C54.855 20.4027 55.015 20.344 55.1964 20.344C55.3777 20.344 55.5324 20.4027 55.6604 20.52C55.799 20.6373 55.8684 20.808 55.8684 21.032C55.8684 21.2027 55.831 21.384 55.7564 21.576C55.9057 21.704 55.9804 21.8693 55.9804 22.072C55.9804 22.2213 55.9324 22.3547 55.8364 22.472C55.9004 22.5893 55.9324 22.744 55.9324 22.936C55.9324 23.1387 55.9004 23.304 55.8364 23.432C55.9324 23.56 55.9804 23.7573 55.9804 24.024C55.9804 24.2053 55.9697 24.328 55.9484 24.392C56.0337 24.488 56.0764 24.6107 56.0764 24.76C56.0764 24.8453 56.055 24.9413 56.0124 25.048C56.119 25.1653 56.1724 25.3253 56.1724 25.528C56.1724 25.592 56.1617 25.656 56.1404 25.72C56.183 25.752 56.2204 25.8107 56.2524 25.896C56.2844 25.9707 56.3004 26.0507 56.3004 26.136C56.3004 26.2427 56.2737 26.3333 56.2204 26.408C56.3057 26.4187 56.3644 26.4773 56.3964 26.584C56.4284 26.68 56.4337 26.776 56.4124 26.872H56.4284C56.503 26.872 56.567 26.9147 56.6204 27C56.6844 27.0747 56.7057 27.144 56.6844 27.208C56.7164 27.1867 56.7644 27.176 56.8284 27.176C56.9137 27.176 56.9884 27.1973 57.0524 27.24C57.127 27.272 57.1804 27.3147 57.2124 27.368C57.4257 27.2507 57.6284 27.192 57.8204 27.192C57.9164 27.192 58.0017 27.208 58.0764 27.24C58.1724 27.1653 58.295 27.1013 58.4444 27.048C58.6044 26.984 58.743 26.952 58.8604 26.952C58.9137 26.952 58.9617 26.9627 59.0044 26.984C58.9297 26.8667 58.8924 26.7173 58.8924 26.536C58.8924 26.3333 58.9564 26.2053 59.0844 26.152C59.0097 26.0667 58.9724 25.8853 58.9724 25.608C58.9724 25.2773 59.0417 25.0427 59.1804 24.904C59.0844 24.744 59.0364 24.568 59.0364 24.376C59.0364 24.2053 59.0684 24.088 59.1324 24.024C59.0684 23.9387 59.0364 23.832 59.0364 23.704C59.0364 23.576 59.0577 23.4427 59.1004 23.304C59.1537 23.1547 59.2177 23.0373 59.2924 22.952C59.1537 22.856 59.0844 22.648 59.0844 22.328C59.0844 22.1253 59.1004 21.96 59.1324 21.832C59.0364 21.6187 58.9884 21.4373 58.9884 21.288C58.9884 21.096 59.0524 20.9413 59.1804 20.824C59.3084 20.7067 59.4577 20.648 59.6284 20.648C59.831 20.648 60.0017 20.728 60.1404 20.888C60.2897 21.048 60.359 21.2773 60.3484 21.576C60.4017 21.6293 60.4444 21.7147 60.4764 21.832C60.519 21.9387 60.5404 22.0507 60.5404 22.168C60.5404 22.4027 60.4817 22.568 60.3644 22.664C60.5564 22.8987 60.6524 23.128 60.6524 23.352C60.6524 23.5013 60.6097 23.624 60.5244 23.72C60.6097 23.8373 60.6524 23.9653 60.6524 24.104C60.6524 24.2427 60.615 24.3867 60.5404 24.536C60.6044 24.632 60.6364 24.7387 60.6364 24.856C60.6364 25.048 60.5564 25.2133 60.3964 25.352C60.503 25.4693 60.5564 25.608 60.5564 25.768C60.5564 25.9387 60.487 26.1307 60.3484 26.344C60.455 26.408 60.5084 26.5413 60.5084 26.744C60.5084 26.9467 60.4657 27.1547 60.3804 27.368C60.4657 27.4853 60.5084 27.64 60.5084 27.832C60.5084 27.9493 60.487 28.0453 60.4444 28.12C60.4657 28.2267 60.4764 28.3067 60.4764 28.36C60.4764 28.5627 60.4124 28.7227 60.2844 28.84C60.167 28.9467 60.023 29 59.8524 29C59.703 29 59.5697 28.952 59.4524 28.856C59.335 28.7493 59.2657 28.6 59.2444 28.408C59.2337 28.3973 59.2177 28.3813 59.1964 28.36C59.1857 28.328 59.175 28.3013 59.1644 28.28C58.983 28.3867 58.8177 28.44 58.6684 28.44C58.615 28.44 58.5724 28.4347 58.5404 28.424C58.4017 28.52 58.2684 28.568 58.1404 28.568C58.0337 28.568 57.9324 28.5467 57.8364 28.504C57.7937 28.5787 57.7244 28.6373 57.6284 28.68C57.543 28.7227 57.447 28.744 57.3404 28.744C57.2764 28.744 57.2284 28.7387 57.1964 28.728ZM62.4113 22.792C62.3259 22.6533 62.2833 22.52 62.2833 22.392C62.2833 22.2 62.3473 22.04 62.4753 21.912C62.5073 21.752 62.5819 21.6027 62.6993 21.464C62.8166 21.3147 62.9446 21.2027 63.0833 21.128C63.2326 21.0427 63.3499 21.0107 63.4353 21.032C63.5099 20.9147 63.6593 20.808 63.8832 20.712C64.1073 20.6053 64.3153 20.552 64.5073 20.552C64.5499 20.552 64.6139 20.5627 64.6993 20.584C64.8166 20.456 64.9713 20.392 65.1633 20.392C65.3126 20.392 65.4193 20.4347 65.4833 20.52C65.6219 20.424 65.8033 20.376 66.0273 20.376C66.2939 20.376 66.5286 20.44 66.7313 20.568C66.9446 20.696 67.0673 20.8667 67.0993 21.08C67.2913 21.144 67.4353 21.2453 67.5313 21.384C67.6379 21.512 67.7019 21.6933 67.7233 21.928C67.8619 22.0667 67.9633 22.232 68.0273 22.424C68.0913 22.6053 68.1233 22.792 68.1233 22.984C68.1233 23.2293 68.0806 23.4267 67.9953 23.576C68.0699 23.6827 68.1339 23.8427 68.1873 24.056C68.2406 24.2693 68.2673 24.4773 68.2673 24.68C68.2673 24.7653 68.2566 24.872 68.2353 25C68.3099 25.16 68.3473 25.2667 68.3473 25.32C68.3473 25.352 68.3313 25.4267 68.2993 25.544C68.3099 25.5867 68.3206 25.64 68.3313 25.704C68.3419 25.7573 68.3473 25.8267 68.3473 25.912C68.3473 26.072 68.2886 26.216 68.1713 26.344C68.2139 26.4613 68.2353 26.6053 68.2353 26.776C68.2353 27 68.1819 27.1813 68.0753 27.32C68.0966 27.3627 68.1073 27.432 68.1073 27.528C68.1073 27.752 68.0166 27.9387 67.8353 28.088C67.7926 28.2373 67.7126 28.3547 67.5953 28.44C67.4779 28.5147 67.3499 28.552 67.2113 28.552C67.0726 28.552 66.9606 28.5093 66.8753 28.424C66.5979 28.5413 66.3739 28.6 66.2033 28.6C66.1179 28.6 66.0539 28.5947 66.0113 28.584C65.7339 28.6693 65.4993 28.712 65.3073 28.712C65.1686 28.712 64.9766 28.6853 64.7313 28.632C64.5819 28.7173 64.4379 28.76 64.2993 28.76C64.1713 28.76 64.0539 28.7227 63.9473 28.648C63.8939 28.6587 63.8139 28.664 63.7073 28.664C63.2913 28.664 62.9713 28.4773 62.7473 28.104C62.3419 27.8693 62.1393 27.5173 62.1393 27.048C62.1393 26.9307 62.1446 26.84 62.1553 26.776C62.0593 26.712 62.0113 26.5787 62.0113 26.376C62.0113 26.2373 62.0379 26.1147 62.0913 26.008C62.0486 25.816 62.0273 25.6933 62.0273 25.64C62.0273 25.3307 62.1766 25.0533 62.4753 24.808C62.5926 24.5627 62.7259 24.3973 62.8753 24.312C63.0353 24.2267 63.2326 24.1627 63.4673 24.12C63.5313 23.9387 63.6806 23.816 63.9153 23.752C64.1499 23.688 64.3793 23.6667 64.6033 23.688C64.6673 23.6453 64.7579 23.608 64.8753 23.576C64.9926 23.5333 65.1099 23.512 65.2273 23.512C65.3553 23.512 65.4673 23.5333 65.5633 23.576C65.5846 23.5547 65.6379 23.544 65.7233 23.544C65.7873 23.544 65.8513 23.5493 65.9153 23.56C65.9793 23.5707 66.0219 23.5867 66.0433 23.608C66.1926 23.416 66.3686 23.32 66.5713 23.32C66.6353 23.32 66.6993 23.336 66.7633 23.368V23.32C66.7633 23.1387 66.8006 23.0107 66.8753 22.936C66.7686 22.904 66.6513 22.8133 66.5233 22.664C66.4059 22.504 66.3366 22.36 66.3153 22.232C66.1446 22.1573 66.0273 22.0347 65.9633 21.864C65.8353 21.96 65.6859 22.008 65.5153 22.008C65.3979 22.008 65.2859 21.976 65.1793 21.912C64.9979 21.9653 64.8806 21.9867 64.8273 21.976C64.6779 22.0827 64.5126 22.136 64.3313 22.136C64.1713 22.3493 63.9846 22.4453 63.7713 22.424C63.6753 22.5947 63.5419 22.744 63.3713 22.872C63.2113 23 63.0459 23.064 62.8753 23.064C62.6833 23.064 62.5286 22.9733 62.4113 22.792ZM63.2913 26.36C63.4193 26.488 63.4833 26.6107 63.4833 26.728C63.4833 26.8133 63.4619 26.92 63.4193 27.048C63.4619 27.048 63.5206 27.0747 63.5953 27.128C63.6806 27.1707 63.7286 27.2187 63.7393 27.272C63.8246 27.24 63.9313 27.224 64.0593 27.224C64.2939 27.224 64.4486 27.2773 64.5233 27.384C64.6406 27.3413 64.7633 27.32 64.8913 27.32C65.0939 27.32 65.2539 27.3787 65.3713 27.496C65.4566 27.4107 65.5953 27.3413 65.7873 27.288C65.9899 27.2347 66.1713 27.208 66.3313 27.208C66.4273 27.016 66.5979 26.904 66.8433 26.872C66.8646 26.7973 66.9233 26.7013 67.0193 26.584C66.9766 26.52 66.9393 26.4347 66.9073 26.328C66.8753 26.2213 66.8593 26.1147 66.8593 26.008C66.8593 25.784 66.9126 25.6187 67.0193 25.512C66.9019 25.3627 66.8433 25.1867 66.8433 24.984C66.8433 24.8453 66.8646 24.728 66.9073 24.632C66.8219 24.6853 66.7259 24.712 66.6193 24.712C66.5233 24.712 66.4433 24.6747 66.3793 24.6C66.2833 24.696 66.1499 24.744 65.9793 24.744C65.8726 24.744 65.7659 24.7173 65.6593 24.664C65.5419 24.7813 65.3979 24.84 65.2273 24.84C65.1739 24.84 65.0939 24.8187 64.9873 24.776C64.8273 24.936 64.6833 24.984 64.5553 24.92C64.4913 25.0693 64.4059 25.1707 64.2993 25.224C64.2033 25.2773 64.0646 25.304 63.8832 25.304C63.8406 25.4213 63.7659 25.5173 63.6593 25.592C63.5633 25.6667 63.4619 25.6933 63.3553 25.672C63.4086 25.7467 63.4353 25.832 63.4353 25.928C63.4353 26.088 63.3873 26.232 63.2913 26.36ZM71.5928 27C71.6994 27.1173 71.7528 27.2987 71.7528 27.544C71.7528 27.704 71.7261 27.8587 71.6728 28.008C71.6301 28.1467 71.5714 28.248 71.4968 28.312C71.5288 28.5147 71.4754 28.68 71.3368 28.808C71.1981 28.936 71.0328 29 70.8408 29C70.7128 29 70.5901 28.968 70.4728 28.904C70.3554 28.84 70.2701 28.7333 70.2168 28.584C70.1634 28.4347 70.1368 28.2747 70.1368 28.104C70.1368 27.8693 70.1741 27.6827 70.2488 27.544C70.1954 27.448 70.1688 27.3093 70.1688 27.128C70.1688 26.9253 70.2008 26.7173 70.2648 26.504C70.1901 26.4187 70.1528 26.264 70.1528 26.04C70.1528 25.752 70.1954 25.5387 70.2808 25.4C70.2168 25.2507 70.1848 25.1067 70.1848 24.968C70.1848 24.776 70.2328 24.584 70.3288 24.392C70.2434 24.168 70.2008 23.9653 70.2008 23.784C70.2008 23.6347 70.2328 23.464 70.2968 23.272C70.1901 23.1547 70.1368 23.0053 70.1368 22.824C70.1368 22.7493 70.1421 22.696 70.1528 22.664C70.0354 22.5253 69.9768 22.3653 69.9768 22.184C69.9768 22.0667 70.0088 21.9547 70.0728 21.848C69.9981 21.6773 69.9608 21.512 69.9608 21.352C69.9608 21.096 70.0248 20.904 70.1528 20.776C70.0888 20.6267 70.0568 20.4453 70.0568 20.232C70.0568 20.0613 70.0834 19.9387 70.1368 19.864C70.0834 19.832 70.0408 19.7733 70.0088 19.688C69.9768 19.6027 69.9608 19.5067 69.9608 19.4C69.9608 19.2187 70.0034 19.0693 70.0888 18.952C70.0568 18.8667 70.0408 18.7547 70.0408 18.616C70.0408 18.5093 70.0514 18.4133 70.0728 18.328C69.9448 18.2 69.8808 18.0507 69.8808 17.88C69.8808 17.6987 69.9554 17.544 70.1048 17.416C70.2648 17.2773 70.4408 17.208 70.6328 17.208C70.7608 17.208 70.8781 17.2507 70.9848 17.336C71.0914 17.4107 71.1661 17.528 71.2088 17.688C71.3688 17.7947 71.4488 17.96 71.4488 18.184C71.4488 18.2267 71.4381 18.2907 71.4168 18.376C71.5448 18.504 71.6088 18.6693 71.6088 18.872C71.6088 19.0427 71.5554 19.176 71.4488 19.272C71.5021 19.3147 71.5501 19.3893 71.5928 19.496C71.6354 19.592 71.6568 19.6987 71.6568 19.816C71.6568 20.008 71.5874 20.168 71.4488 20.296C71.5341 20.4133 71.5768 20.5573 71.5768 20.728C71.5768 20.8987 71.5448 21.0373 71.4808 21.144C71.5234 21.1867 71.5448 21.2933 71.5448 21.464C71.5448 21.56 71.5341 21.6613 71.5128 21.768C71.4914 21.8747 71.4594 21.9493 71.4168 21.992C71.5768 22.1307 71.6568 22.3067 71.6568 22.52C71.6568 22.6373 71.6354 22.7387 71.5928 22.824C71.6568 22.92 71.6888 23.064 71.6888 23.256C71.6888 23.5013 71.6461 23.6987 71.5608 23.848C71.6354 23.9973 71.6728 24.1947 71.6728 24.44C71.6728 24.7387 71.6248 24.952 71.5288 25.08C71.6034 25.1867 71.6408 25.32 71.6408 25.48C71.6408 25.6187 71.6088 25.784 71.5448 25.976C71.6408 26.0827 71.6888 26.248 71.6888 26.472C71.6888 26.664 71.6568 26.84 71.5928 27ZM73.7733 17.592C73.6346 17.656 73.5226 17.7467 73.4373 17.864C73.3519 17.9813 73.3092 18.104 73.3092 18.232C73.3092 18.4027 73.3786 18.5733 73.5173 18.744C73.4959 18.8827 73.5706 19.016 73.7413 19.144C73.9119 19.272 74.0986 19.336 74.3013 19.336C74.4399 19.336 74.5626 19.2987 74.6693 19.224C74.9679 19.064 75.1173 18.8613 75.1173 18.616C75.1173 18.456 75.0533 18.2747 74.9253 18.072C74.9359 17.8587 74.8719 17.6933 74.7333 17.576C74.6053 17.448 74.4506 17.384 74.2693 17.384C74.0666 17.384 73.9013 17.4533 73.7733 17.592ZM74.8133 24.664C74.8986 24.696 74.9626 24.7973 75.0053 24.968C75.0586 25.1387 75.0853 25.3253 75.0853 25.528C75.0853 25.7627 75.0479 25.9173 74.9733 25.992C75.0373 26.152 75.0693 26.3067 75.0693 26.456C75.0693 26.648 75.0213 26.808 74.9253 26.936C74.9999 27.1173 75.0373 27.3307 75.0373 27.576C75.0373 27.7787 75.0053 27.944 74.9413 28.072C74.9733 28.168 74.9893 28.2587 74.9893 28.344C74.9893 28.536 74.9199 28.6907 74.7812 28.808C74.6426 28.9147 74.4773 28.968 74.2853 28.968C74.1039 28.968 73.9493 28.9147 73.8213 28.808C73.6933 28.6907 73.6346 28.536 73.6453 28.344C73.5919 28.28 73.5493 28.1787 73.5173 28.04C73.4853 27.9013 73.4693 27.7573 73.4693 27.608C73.4693 27.3307 73.5279 27.1493 73.6453 27.064C73.5599 26.9253 73.5173 26.7173 73.5173 26.44C73.5173 26.1627 73.5546 25.96 73.6293 25.832C73.5866 25.7893 73.5546 25.688 73.5333 25.528C73.5119 25.368 73.5013 25.192 73.5013 25C73.5013 24.8187 73.5119 24.6587 73.5333 24.52C73.5546 24.3707 73.5866 24.2747 73.6293 24.232C73.5653 24.168 73.5333 23.992 73.5333 23.704C73.5333 23.3733 73.5706 23.1333 73.6453 22.984C73.5919 22.8987 73.5439 22.7867 73.5013 22.648C73.4586 22.5093 73.4373 22.3813 73.4373 22.264C73.4373 22.1573 73.4479 22.0827 73.4693 22.04C73.3839 21.7627 73.3413 21.5387 73.3413 21.368C73.3413 21.1867 73.3839 21 73.4693 20.808C73.4479 20.648 73.4853 20.5253 73.5813 20.44C73.6773 20.3547 73.8159 20.312 73.9973 20.312C74.4879 20.312 74.7333 20.6107 74.7333 21.208C74.8293 21.272 74.8986 21.3627 74.9413 21.48C74.9946 21.5867 75.0213 21.7093 75.0213 21.848C75.0213 22.072 74.9679 22.264 74.8613 22.424C74.9039 22.488 74.9359 22.584 74.9573 22.712C74.9893 22.84 75.0053 22.968 75.0053 23.096C75.0053 23.2667 74.9786 23.384 74.9253 23.448C74.9679 23.5013 74.9893 23.6133 74.9893 23.784C74.9893 23.944 74.9679 24.1147 74.9253 24.296C74.8933 24.4773 74.8559 24.6 74.8133 24.664ZM81.065 27.624C81.0757 27.5707 81.1023 27.5333 81.145 27.512C81.1983 27.4907 81.257 27.4747 81.321 27.464C81.3637 27.4533 81.417 27.448 81.481 27.448C81.6623 27.448 81.8063 27.5173 81.913 27.656C82.0303 27.784 82.089 27.9387 82.089 28.12C82.089 28.2587 82.0517 28.3813 81.977 28.488C81.9023 28.584 81.7903 28.6533 81.641 28.696C81.417 28.888 81.1503 28.968 80.841 28.936C80.7557 29.0107 80.6437 29.048 80.505 29.048C80.313 29.048 80.137 28.9787 79.977 28.84C79.8703 28.8187 79.7423 28.7653 79.593 28.68C79.4437 28.584 79.369 28.4987 79.369 28.424C79.2197 28.4027 79.065 28.3173 78.905 28.168C78.7557 28.0187 78.7023 27.8373 78.745 27.624C78.6277 27.496 78.5583 27.3627 78.537 27.224C78.409 27.16 78.313 27.064 78.249 26.936C78.1957 26.808 78.1797 26.6747 78.201 26.536C78.0623 26.408 77.993 26.216 77.993 25.96C77.993 25.864 78.0037 25.7413 78.025 25.592C77.8757 25.4747 77.801 25.3147 77.801 25.112C77.801 24.9307 77.8597 24.7813 77.977 24.664C77.849 24.536 77.785 24.3707 77.785 24.168C77.785 24.0933 77.8063 24.0027 77.849 23.896C77.785 23.768 77.753 23.64 77.753 23.512C77.753 23.3413 77.801 23.208 77.897 23.112C77.833 22.984 77.801 22.8453 77.801 22.696C77.801 22.568 77.817 22.456 77.849 22.36C77.8917 22.2533 77.9397 22.1733 77.993 22.12C77.8757 21.9813 77.817 21.832 77.817 21.672C77.817 21.5867 77.833 21.496 77.865 21.4C77.769 21.432 77.6623 21.448 77.545 21.448C77.3637 21.448 77.2303 21.4107 77.145 21.336C77.017 21.368 76.905 21.384 76.809 21.384C76.617 21.384 76.4197 21.3253 76.217 21.208C76.1103 21.272 75.9983 21.304 75.881 21.304C75.7103 21.304 75.5717 21.2347 75.465 21.096C75.3477 20.9467 75.289 20.7813 75.289 20.6C75.289 20.44 75.3423 20.3067 75.449 20.2C75.545 20.0827 75.689 20.0187 75.881 20.008C76.009 19.9547 76.1263 19.928 76.233 19.928C76.4463 19.928 76.633 19.9813 76.793 20.088C76.9317 20.0347 77.0863 20.008 77.257 20.008C77.4063 20.008 77.5237 20.0347 77.609 20.088C77.6197 20.0453 77.6623 20.008 77.737 19.976C77.8223 19.9333 77.8917 19.9173 77.945 19.928C77.9023 19.832 77.881 19.704 77.881 19.544C77.881 19.352 77.9237 19.2507 78.009 19.24C77.9343 19.1333 77.897 18.9787 77.897 18.776C77.897 18.4987 77.9663 18.3067 78.105 18.2C78.0943 17.9867 78.137 17.8267 78.233 17.72C78.329 17.6133 78.4517 17.56 78.601 17.56C78.7503 17.56 78.889 17.6133 79.017 17.72C79.145 17.816 79.209 17.944 79.209 18.104C79.209 18.2107 79.1663 18.3333 79.081 18.472C79.1877 18.568 79.241 18.728 79.241 18.952C79.241 19.048 79.225 19.1493 79.193 19.256C79.1717 19.352 79.1397 19.4267 79.097 19.48C79.161 19.5227 79.193 19.608 79.193 19.736C79.193 19.8427 79.1663 19.9867 79.113 20.168C79.209 20.136 79.3103 20.12 79.417 20.12C79.577 20.12 79.6997 20.1573 79.785 20.232C79.8917 20.1787 79.977 20.152 80.041 20.152C80.1477 20.152 80.233 20.1947 80.297 20.28C80.3717 20.2267 80.4623 20.2 80.569 20.2C80.7183 20.2 80.8357 20.2587 80.921 20.376C81.1237 20.376 81.273 20.424 81.369 20.52C81.4757 20.6053 81.529 20.7173 81.529 20.856C81.529 21.0267 81.4597 21.192 81.321 21.352C81.193 21.5013 81.0437 21.576 80.873 21.576C80.777 21.576 80.681 21.544 80.585 21.48C80.4783 21.5653 80.3397 21.608 80.169 21.608C80.009 21.608 79.8757 21.5707 79.769 21.496C79.6303 21.5493 79.529 21.576 79.465 21.576C79.3797 21.576 79.2783 21.5387 79.161 21.464C79.257 21.592 79.305 21.7307 79.305 21.88C79.305 22.04 79.241 22.184 79.113 22.312C79.209 22.44 79.257 22.6 79.257 22.792C79.257 22.9627 79.209 23.1227 79.113 23.272C79.241 23.3573 79.305 23.496 79.305 23.688C79.305 23.848 79.257 23.9867 79.161 24.104C79.2677 24.2213 79.321 24.4293 79.321 24.728C79.321 24.856 79.305 24.9627 79.273 25.048C79.3477 25.1547 79.385 25.2667 79.385 25.384C79.385 25.448 79.369 25.5333 79.337 25.64C79.3157 25.736 79.2997 25.816 79.289 25.88C79.417 26.0293 79.481 26.1733 79.481 26.312C79.6623 26.4507 79.753 26.616 79.753 26.808C79.9663 26.9253 80.073 27.1227 80.073 27.4C80.0943 27.432 80.1157 27.4533 80.137 27.464C80.1583 27.4747 80.1743 27.4853 80.185 27.496L80.297 27.48C80.457 27.48 80.585 27.528 80.681 27.624C80.7663 27.6027 80.8357 27.592 80.889 27.592C80.921 27.592 80.9797 27.6027 81.065 27.624ZM87.7581 26.056C87.7155 26.1947 87.6248 26.3173 87.4861 26.424C87.5075 26.8507 87.3955 27.1173 87.1501 27.224C87.1288 27.3947 87.0541 27.576 86.9261 27.768C86.7981 27.96 86.6595 28.088 86.5101 28.152C86.5101 28.1947 86.4995 28.2853 86.4781 28.424C86.4675 28.552 86.4355 28.6587 86.3821 28.744C86.3395 28.8293 86.2701 28.9147 86.1741 29C86.2275 29.3733 86.0515 29.7467 85.6461 30.12C85.6355 30.376 85.5501 30.5787 85.3901 30.728C85.2408 30.888 85.0595 30.984 84.8461 31.016C84.8248 31.1653 84.7128 31.3093 84.5101 31.448C84.3181 31.5973 84.1315 31.672 83.9501 31.672C83.9075 31.7893 83.7315 31.9067 83.4221 32.024C83.1235 32.152 82.9261 32.184 82.8301 32.12C82.5741 32.1413 82.3715 32.0773 82.2221 31.928C82.0728 31.7787 81.9981 31.6027 81.9981 31.4C81.9981 31.2507 82.0408 31.1227 82.1261 31.016C82.2115 30.9093 82.3341 30.856 82.4941 30.856C82.5475 30.856 82.5901 30.8613 82.6221 30.872C82.9208 30.648 83.1608 30.536 83.3421 30.536C83.4061 30.536 83.4541 30.5413 83.4861 30.552C83.5075 30.424 83.5821 30.3013 83.7101 30.184C83.8381 30.0773 83.9875 29.992 84.1581 29.928C84.1581 29.8213 84.2008 29.7093 84.2861 29.592C84.3715 29.4747 84.4728 29.3787 84.5901 29.304C84.5688 29.24 84.5581 29.192 84.5581 29.16C84.5581 29 84.6275 28.824 84.7661 28.632C84.9048 28.4293 85.0435 28.3013 85.1821 28.248C84.9368 28.12 84.8141 27.9227 84.8141 27.656C84.7075 27.6453 84.6061 27.5707 84.5101 27.432C84.4248 27.2933 84.3821 27.144 84.3821 26.984C84.3821 26.888 84.4088 26.7973 84.4621 26.712C84.3021 26.6587 84.1795 26.5733 84.0941 26.456C84.0195 26.3387 83.9821 26.2 83.9821 26.04C83.9821 25.9227 84.0035 25.8053 84.0461 25.688C83.8968 25.6027 83.7795 25.512 83.6941 25.416C83.6195 25.32 83.5875 25.208 83.5981 25.08C83.4381 24.9733 83.3581 24.808 83.3581 24.584C83.3581 24.4773 83.3741 24.376 83.4061 24.28C83.1395 23.992 83.0061 23.6827 83.0061 23.352C83.0061 23.256 83.0115 23.1813 83.0221 23.128C82.8728 23.0533 82.7608 22.952 82.6861 22.824C82.6115 22.6853 82.5741 22.5307 82.5741 22.36C82.5741 22.2 82.6061 22.0507 82.6701 21.912C82.3928 21.72 82.2541 21.5067 82.2541 21.272C82.2541 21.0053 82.3715 20.792 82.6061 20.632C82.7021 20.568 82.8088 20.536 82.9261 20.536C83.0861 20.536 83.2301 20.5947 83.3581 20.712C83.4968 20.8293 83.5981 20.9733 83.6621 21.144C83.7581 21.2293 83.8381 21.3627 83.9021 21.544C83.9661 21.7253 83.9981 21.896 83.9981 22.056C83.9981 22.152 83.9928 22.216 83.9821 22.248C84.3021 22.5893 84.4621 22.92 84.4621 23.24C84.4621 23.2827 84.4515 23.3573 84.4301 23.464C84.5688 23.5387 84.6701 23.6507 84.7341 23.8C84.7981 23.9387 84.8195 24.0827 84.7981 24.232C84.9048 24.3173 84.9795 24.424 85.0221 24.552C85.0755 24.68 85.0915 24.808 85.0701 24.936C85.1661 24.936 85.2515 25.0107 85.3261 25.16C85.4115 25.2987 85.4435 25.4427 85.4221 25.592C85.5608 25.6667 85.6515 25.768 85.6941 25.896C85.7368 26.0133 85.7475 26.1573 85.7261 26.328C85.8648 26.3707 85.9341 26.504 85.9341 26.728C85.9661 26.5467 86.0035 26.4133 86.0461 26.328C86.0888 26.2427 86.1528 26.152 86.2381 26.056C86.2168 25.9493 86.2061 25.88 86.2061 25.848C86.2061 25.7307 86.2275 25.64 86.2701 25.576C86.3128 25.5013 86.3715 25.4587 86.4461 25.448C86.4035 25.2453 86.4568 25.048 86.6061 24.856C86.5741 24.792 86.5581 24.728 86.5581 24.664C86.5581 24.5893 86.5901 24.5093 86.6541 24.424C86.7288 24.328 86.7768 24.264 86.7981 24.232C86.7341 24.04 86.7021 23.88 86.7021 23.752C86.7021 23.6453 86.7235 23.544 86.7661 23.448C86.8088 23.352 86.8781 23.2347 86.9741 23.096C86.9101 22.968 86.8781 22.776 86.8781 22.52C86.8781 22.1787 86.9475 21.8693 87.0861 21.592C87.0435 21.4427 87.0221 21.3253 87.0221 21.24C87.0221 21.112 87.0541 21 87.1181 20.904C87.1181 20.648 87.1981 20.4453 87.3581 20.296C87.5181 20.1467 87.6995 20.072 87.9021 20.072C88.0728 20.072 88.2168 20.136 88.3341 20.264C88.4621 20.3813 88.5208 20.552 88.5101 20.776C88.5848 20.9253 88.6221 21.1067 88.6221 21.32C88.6221 21.704 88.5315 22.04 88.3501 22.328C88.3928 22.4667 88.4141 22.616 88.4141 22.776C88.4141 23.0427 88.3181 23.2987 88.1261 23.544C88.1368 23.6293 88.1581 23.7307 88.1901 23.848C88.2221 23.9653 88.2381 24.0613 88.2381 24.136C88.2381 24.296 88.1848 24.4347 88.0781 24.552C88.1315 24.7013 88.0195 25.016 87.7421 25.496C87.7848 25.624 87.8061 25.7253 87.8061 25.8C87.8061 25.8853 87.7901 25.9707 87.7581 26.056Z M66.5391 196.965V196.344C66.7266 196.32 66.957 196.281 67.2305 196.227C67.5117 196.172 67.7305 196.133 67.8867 196.109C67.9102 195.547 67.9219 194.98 67.9219 194.41C67.9219 194.051 67.918 193.512 67.9102 192.793C67.9023 192.066 67.8984 191.52 67.8984 191.152C67.8984 190.285 67.9102 189.629 67.9336 189.184C67.2227 189.59 66.7031 189.918 66.375 190.168L66 189.781C66.125 189.68 66.3398 189.504 66.6445 189.254C66.9492 188.996 67.2227 188.766 67.4648 188.562C67.707 188.352 67.8945 188.18 68.0273 188.047C68.1523 188.062 68.2812 188.074 68.4141 188.082C68.5469 188.082 68.6758 188.09 68.8008 188.105C68.8477 189.012 68.8711 190.672 68.8711 193.086C68.8711 194.523 68.8828 195.555 68.9062 196.18C68.9766 196.188 69.1445 196.219 69.4102 196.273C69.6836 196.32 69.8945 196.352 70.043 196.367L70.2305 196.988C69.8398 196.988 69.5 196.988 69.2109 196.988C68.9219 196.988 68.5352 196.988 68.0508 196.988C67.5742 196.988 67.1992 196.988 66.9258 196.988C66.6602 196.98 66.5312 196.973 66.5391 196.965Z M70.3945 274.191L70.7578 274.965C70.1719 274.98 69.2539 274.992 68.0039 275C66.7539 275 66.0898 275 66.0117 275C66.0117 274.938 66.0078 274.828 66 274.672C66 274.516 66 274.391 66 274.297C66.1484 274.039 66.3945 273.73 66.7383 273.371C67.082 273.004 67.4258 272.648 67.7695 272.305C68.1133 271.953 68.4492 271.57 68.7773 271.156C69.1133 270.742 69.3867 270.281 69.5977 269.773C69.8086 269.258 69.9141 268.73 69.9141 268.191C69.9141 267.848 69.793 267.57 69.5508 267.359C69.3086 267.141 69.0156 267.031 68.6719 267.031C68.2734 267.031 67.9023 267.195 67.5586 267.523C67.2227 267.844 66.9883 268.336 66.8555 269L66.3281 268.812C66.3594 268.055 66.6055 267.465 67.0664 267.043C67.5352 266.621 68.0742 266.41 68.6836 266.41C69.2305 266.41 69.6992 266.582 70.0898 266.926C70.4805 267.27 70.6758 267.75 70.6758 268.367C70.6758 268.875 70.5977 269.371 70.4414 269.855C70.2852 270.332 70.0586 270.781 69.7617 271.203C69.4648 271.625 69.1875 271.988 68.9297 272.293C68.6719 272.59 68.3477 272.938 67.957 273.336C67.5742 273.727 67.3047 274.008 67.1484 274.18C67.4141 274.195 67.6406 274.203 67.8281 274.203C68.0234 274.203 68.3281 274.199 68.7422 274.191C69.1562 274.176 69.4648 274.168 69.668 274.168C69.8555 274.168 70.0977 274.176 70.3945 274.191Z M70.3945 92.1914L70.7578 92.9648C70.1719 92.9805 69.2539 92.9922 68.0039 93C66.7539 93 66.0898 93 66.0117 93C66.0117 92.9375 66.0078 92.8281 66 92.6719C66 92.5156 66 92.3906 66 92.2969C66.1484 92.0391 66.3945 91.7305 66.7383 91.3711C67.082 91.0039 67.4258 90.6484 67.7695 90.3047C68.1133 89.9531 68.4492 89.5703 68.7773 89.1562C69.1133 88.7422 69.3867 88.2812 69.5977 87.7734C69.8086 87.2578 69.9141 86.7305 69.9141 86.1914C69.9141 85.8477 69.793 85.5703 69.5508 85.3594C69.3086 85.1406 69.0156 85.0312 68.6719 85.0312C68.2734 85.0312 67.9023 85.1953 67.5586 85.5234C67.2227 85.8438 66.9883 86.3359 66.8555 87L66.3281 86.8125C66.3594 86.0547 66.6055 85.4648 67.0664 85.043C67.5352 84.6211 68.0742 84.4102 68.6836 84.4102C69.2305 84.4102 69.6992 84.582 70.0898 84.9258C70.4805 85.2695 70.6758 85.75 70.6758 86.3672C70.6758 86.875 70.5977 87.3711 70.4414 87.8555C70.2852 88.332 70.0586 88.7812 69.7617 89.2031C69.4648 89.625 69.1875 89.9883 68.9297 90.293C68.6719 90.5898 68.3477 90.9375 67.957 91.3359C67.5742 91.7266 67.3047 92.0078 67.1484 92.1797C67.4141 92.1953 67.6406 92.2031 67.8281 92.2031C68.0234 92.2031 68.3281 92.1992 68.7422 92.1914C69.1562 92.1758 69.4648 92.168 69.668 92.168C69.8555 92.168 70.0977 92.1758 70.3945 92.1914Z M69.8047 297.59L69.9219 298.117C69.5156 298.164 69.2266 298.195 69.0547 298.211C69.0703 298.57 69.0898 299.023 69.1133 299.57C69.1445 300.117 69.1641 300.566 69.1719 300.918C69.1016 301.16 68.9688 301.281 68.7734 301.281C68.6328 301.281 68.4961 301.223 68.3633 301.105C68.2305 300.988 68.1484 300.848 68.1172 300.684C68.125 300.441 68.1523 299.645 68.1992 298.293C67.9492 298.309 67.75 298.316 67.6016 298.316C67.3672 298.316 67.0039 298.305 66.5117 298.281C66.0273 298.25 65.6719 298.234 65.4453 298.234C65.3359 298.234 65.1875 298.242 65 298.258C65.0156 298.07 65.0234 297.941 65.0234 297.871C65.0234 297.824 65.0195 297.75 65.0117 297.648C65.0117 297.539 65.0117 297.457 65.0117 297.402C66.3164 295.207 67.3711 293.578 68.1758 292.516C68.418 292.516 68.75 292.566 69.1719 292.668C69.1562 293.035 69.1328 293.832 69.1016 295.059C69.0781 296.277 69.0547 297.102 69.0312 297.531C69.375 297.547 69.6328 297.566 69.8047 297.59ZM65.8672 297.438L68.2227 297.508C68.2461 297.062 68.2695 296.402 68.293 295.527C68.3164 294.652 68.3359 293.992 68.3516 293.547C68.0312 293.875 67.5664 294.562 66.957 295.609C66.3555 296.648 65.9922 297.258 65.8672 297.438Z M69.8047 141.59L69.9219 142.117C69.5156 142.164 69.2266 142.195 69.0547 142.211C69.0703 142.57 69.0898 143.023 69.1133 143.57C69.1445 144.117 69.1641 144.566 69.1719 144.918C69.1016 145.16 68.9688 145.281 68.7734 145.281C68.6328 145.281 68.4961 145.223 68.3633 145.105C68.2305 144.988 68.1484 144.848 68.1172 144.684C68.125 144.441 68.1523 143.645 68.1992 142.293C67.9492 142.309 67.75 142.316 67.6016 142.316C67.3672 142.316 67.0039 142.305 66.5117 142.281C66.0273 142.25 65.6719 142.234 65.4453 142.234C65.3359 142.234 65.1875 142.242 65 142.258C65.0156 142.07 65.0234 141.941 65.0234 141.871C65.0234 141.824 65.0195 141.75 65.0117 141.648C65.0117 141.539 65.0117 141.457 65.0117 141.402C66.3164 139.207 67.3711 137.578 68.1758 136.516C68.418 136.516 68.75 136.566 69.1719 136.668C69.1562 137.035 69.1328 137.832 69.1016 139.059C69.0781 140.277 69.0547 141.102 69.0312 141.531C69.375 141.547 69.6328 141.566 69.8047 141.59ZM65.8672 141.438L68.2227 141.508C68.2461 141.062 68.2695 140.402 68.293 139.527C68.3164 138.652 68.3359 137.992 68.3516 137.547C68.0312 137.875 67.5664 138.562 66.957 139.609C66.3555 140.648 65.9922 141.258 65.8672 141.438Z M69.6406 110.516L69.8398 111.043C68.0117 111.824 66.9258 112.871 66.582 114.184C66.8945 113.98 67.2109 113.879 67.5312 113.879C68.2031 113.879 68.7656 114.184 69.2188 114.793C69.6719 115.395 69.8984 116.164 69.8984 117.102C69.8984 117.773 69.6914 118.309 69.2773 118.707C68.8711 119.105 68.3516 119.305 67.7188 119.305C67.125 119.305 66.6016 119.09 66.1484 118.66C65.7031 118.223 65.4805 117.645 65.4805 116.926C65.4805 116.473 65.4883 116.078 65.5039 115.742C65.5273 115.406 65.5703 115.039 65.6328 114.641C65.7031 114.234 65.7969 113.883 65.9141 113.586C66.0312 113.289 66.1914 112.98 66.3945 112.66C66.6055 112.332 66.8555 112.047 67.1445 111.805C67.4336 111.555 67.7852 111.32 68.1992 111.102C68.6211 110.875 69.1016 110.68 69.6406 110.516ZM66.3242 116.586C66.3242 117.234 66.4453 117.723 66.6875 118.051C66.9297 118.371 67.2305 118.531 67.5898 118.531C67.9727 118.531 68.3047 118.402 68.5859 118.145C68.8672 117.887 69.0078 117.531 69.0078 117.078C69.0078 116.391 68.8516 115.816 68.5391 115.355C68.2266 114.895 67.8477 114.664 67.4023 114.664C67.1992 114.664 67.0273 114.703 66.8867 114.781C66.7461 114.852 66.6406 114.934 66.5703 115.027C66.5 115.121 66.4453 115.27 66.4062 115.473C66.3672 115.668 66.3438 115.836 66.3359 115.977C66.3281 116.109 66.3242 116.312 66.3242 116.586Z M67.4531 327.094L66.5391 326.824L69.7031 319.066C67.8828 319.012 66.6484 318.957 66 318.902L65.8828 318.375C66.4297 318.312 67.2578 318.281 68.3672 318.281C69.4766 318.273 70.2422 318.254 70.6641 318.223L70.6055 319.242L67.4531 327.094Z M70.4609 246.645C70.4609 247.496 70.2539 248.129 69.8398 248.543C69.4258 248.949 68.793 249.152 67.9414 249.152C66.3008 249.152 65.4805 248.301 65.4805 246.598C65.4805 245.988 65.6055 245.453 65.8555 244.992C66.1055 244.531 66.4492 244.266 66.8867 244.195C66.4414 244.188 66.1055 244.023 65.8789 243.703C65.6523 243.383 65.5391 242.984 65.5391 242.508C65.5391 241.773 65.7383 241.195 66.1367 240.773C66.543 240.352 67.1172 240.141 67.8594 240.141C68.6406 240.141 69.2539 240.336 69.6992 240.727C70.1445 241.117 70.3672 241.719 70.3672 242.531C70.3672 243.008 70.2539 243.406 70.0273 243.727C69.8008 244.047 69.4648 244.211 69.0195 244.219C69.4727 244.289 69.8242 244.559 70.0742 245.027C70.332 245.496 70.4609 246.035 70.4609 246.645ZM68.0703 248.309C68.5078 248.309 68.8711 248.141 69.1602 247.805C69.4492 247.461 69.5938 247.055 69.5938 246.586C69.5938 246.117 69.4336 245.715 69.1133 245.379C68.793 245.035 68.3633 244.859 67.8242 244.852C67.3555 244.992 67.0039 245.215 66.7695 245.52C66.5352 245.816 66.418 246.152 66.418 246.527C66.418 246.996 66.5742 247.41 66.8867 247.77C67.1992 248.129 67.5938 248.309 68.0703 248.309ZM68.0703 240.785C67.5469 240.824 67.1484 240.996 66.875 241.301C66.6016 241.605 66.4648 241.957 66.4648 242.355C66.4648 242.762 66.5938 243.113 66.8516 243.41C67.1172 243.707 67.4688 243.855 67.9062 243.855C68.4141 243.848 68.8008 243.711 69.0664 243.445C69.332 243.172 69.4648 242.844 69.4648 242.461C69.4648 242.078 69.3359 241.723 69.0781 241.395C68.8281 241.066 68.4922 240.863 68.0703 240.785Z M70.4609 168.645C70.4609 169.496 70.2539 170.129 69.8398 170.543C69.4258 170.949 68.793 171.152 67.9414 171.152C66.3008 171.152 65.4805 170.301 65.4805 168.598C65.4805 167.988 65.6055 167.453 65.8555 166.992C66.1055 166.531 66.4492 166.266 66.8867 166.195C66.4414 166.188 66.1055 166.023 65.8789 165.703C65.6523 165.383 65.5391 164.984 65.5391 164.508C65.5391 163.773 65.7383 163.195 66.1367 162.773C66.543 162.352 67.1172 162.141 67.8594 162.141C68.6406 162.141 69.2539 162.336 69.6992 162.727C70.1445 163.117 70.3672 163.719 70.3672 164.531C70.3672 165.008 70.2539 165.406 70.0273 165.727C69.8008 166.047 69.4648 166.211 69.0195 166.219C69.4727 166.289 69.8242 166.559 70.0742 167.027C70.332 167.496 70.4609 168.035 70.4609 168.645ZM68.0703 170.309C68.5078 170.309 68.8711 170.141 69.1602 169.805C69.4492 169.461 69.5938 169.055 69.5938 168.586C69.5938 168.117 69.4336 167.715 69.1133 167.379C68.793 167.035 68.3633 166.859 67.8242 166.852C67.3555 166.992 67.0039 167.215 66.7695 167.52C66.5352 167.816 66.418 168.152 66.418 168.527C66.418 168.996 66.5742 169.41 66.8867 169.77C67.1992 170.129 67.5938 170.309 68.0703 170.309ZM68.0703 162.785C67.5469 162.824 67.1484 162.996 66.875 163.301C66.6016 163.605 66.4648 163.957 66.4648 164.355C66.4648 164.762 66.5938 165.113 66.8516 165.41C67.1172 165.707 67.4688 165.855 67.9062 165.855C68.4141 165.848 68.8008 165.711 69.0664 165.445C69.332 165.172 69.4648 164.844 69.4648 164.461C69.4648 164.078 69.3359 163.723 69.0781 163.395C68.8281 163.066 68.4922 162.863 68.0703 162.785Z M65.6094 223.223L65.4219 222.695C67.2422 221.922 68.3242 220.875 68.668 219.555C68.3398 219.766 68.0234 219.871 67.7188 219.871C67.0469 219.871 66.4844 219.57 66.0312 218.969C65.5859 218.359 65.3633 217.582 65.3633 216.637C65.3633 215.965 65.5664 215.434 65.9727 215.043C66.3789 214.645 66.8984 214.445 67.5312 214.445C68.1328 214.445 68.6562 214.664 69.1016 215.102C69.5547 215.531 69.7812 216.105 69.7812 216.824C69.7812 217.277 69.7695 217.672 69.7461 218.008C69.7305 218.344 69.6875 218.711 69.6172 219.109C69.5547 219.508 69.4648 219.859 69.3477 220.164C69.2305 220.461 69.0664 220.773 68.8555 221.102C68.6523 221.422 68.4062 221.703 68.1172 221.945C67.8281 222.188 67.4727 222.422 67.0508 222.648C66.6289 222.867 66.1484 223.059 65.6094 223.223ZM68.9375 217.152C68.9375 216.504 68.8125 216.02 68.5625 215.699C68.3203 215.371 68.0195 215.207 67.6602 215.207C67.2773 215.207 66.9453 215.336 66.6641 215.594C66.3828 215.852 66.2422 216.207 66.2422 216.66C66.2422 217.348 66.3984 217.922 66.7109 218.383C67.0234 218.844 67.4062 219.074 67.8594 219.074C68.0625 219.074 68.2344 219.039 68.375 218.969C68.5156 218.891 68.6211 218.805 68.6914 218.711C68.7617 218.617 68.8164 218.473 68.8555 218.277C68.8945 218.074 68.918 217.906 68.9258 217.773C68.9336 217.633 68.9375 217.426 68.9375 217.152Z M68.3125 347.07C68.7344 347.07 69.0859 347.258 69.3672 347.633C69.6641 347.992 69.8125 348.406 69.8125 348.875C69.8125 349.219 69.7266 349.5 69.5547 349.719C69.3984 349.922 69.1797 350.023 68.8984 350.023C68.4609 350.023 68.1094 349.844 67.8438 349.484C67.5938 349.125 67.4688 348.703 67.4688 348.219C67.4688 347.875 67.5391 347.602 67.6797 347.398C67.8359 347.18 68.0469 347.07 68.3125 347.07Z M68.3125 357.07C68.7344 357.07 69.0859 357.258 69.3672 357.633C69.6641 357.992 69.8125 358.406 69.8125 358.875C69.8125 359.219 69.7266 359.5 69.5547 359.719C69.3984 359.922 69.1797 360.023 68.8984 360.023C68.4609 360.023 68.1094 359.844 67.8438 359.484C67.5938 359.125 67.4688 358.703 67.4688 358.219C67.4688 357.875 67.5391 357.602 67.6797 357.398C67.8359 357.18 68.0469 357.07 68.3125 357.07Z M68.3125 367.07C68.7344 367.07 69.0859 367.258 69.3672 367.633C69.6641 367.992 69.8125 368.406 69.8125 368.875C69.8125 369.219 69.7266 369.5 69.5547 369.719C69.3984 369.922 69.1797 370.023 68.8984 370.023C68.4609 370.023 68.1094 369.844 67.8438 369.484C67.5938 369.125 67.4688 368.703 67.4688 368.219C67.4688 367.875 67.5391 367.602 67.6797 367.398C67.8359 367.18 68.0469 367.07 68.3125 367.07Z';

  var dataset03FAcidity = 'M130.453 197.094L129.539 196.824L132.703 189.066C130.883 189.012 129.648 188.957 129 188.902L128.883 188.375C129.43 188.312 130.258 188.281 131.367 188.281C132.477 188.273 133.242 188.254 133.664 188.223L133.605 189.242L130.453 197.094ZM132.633 195.535C132.844 195.535 133.02 195.629 133.16 195.816C133.309 195.996 133.383 196.203 133.383 196.438C133.383 196.609 133.34 196.75 133.254 196.859C133.176 196.961 133.066 197.012 132.926 197.012C132.707 197.012 132.531 196.922 132.398 196.742C132.273 196.562 132.211 196.352 132.211 196.109C132.211 195.938 132.246 195.801 132.316 195.699C132.395 195.59 132.5 195.535 132.633 195.535ZM133.617 196.625L133.711 196.086C133.773 196.094 133.949 196.129 134.238 196.191C134.535 196.254 134.797 196.301 135.023 196.332C135.258 196.363 135.465 196.379 135.645 196.379C136.09 196.379 136.438 196.211 136.688 195.875C136.945 195.539 137.074 195.148 137.074 194.703C137.074 194.094 136.863 193.57 136.441 193.133C136.027 192.688 135.426 192.465 134.637 192.465C134.512 192.465 134.418 192.469 134.355 192.477V191.902C134.426 191.91 134.535 191.914 134.684 191.914C135.395 191.914 135.973 191.789 136.418 191.539C136.871 191.289 137.098 190.891 137.098 190.344C137.098 189.93 136.98 189.598 136.746 189.348C136.512 189.098 136.207 188.973 135.832 188.973C135.66 188.973 135.473 188.984 135.27 189.008C135.074 189.023 134.859 189.047 134.625 189.078C134.391 189.109 134.242 189.129 134.18 189.137L133.992 188.609C134.086 188.586 134.238 188.543 134.449 188.48C134.66 188.418 134.824 188.371 134.941 188.34C135.066 188.309 135.223 188.281 135.41 188.258C135.598 188.227 135.773 188.211 135.938 188.211C136.539 188.211 137.016 188.422 137.367 188.844C137.719 189.258 137.895 189.828 137.895 190.555C137.895 191.016 137.781 191.395 137.555 191.691C137.336 191.988 137 192.172 136.547 192.242C137.016 192.43 137.371 192.738 137.613 193.168C137.863 193.59 137.988 194.09 137.988 194.668C137.988 195.332 137.832 195.902 137.52 196.379C137.207 196.848 136.734 197.082 136.102 197.082C135.188 197.082 134.359 196.93 133.617 196.625Z M130.641 266.516L130.84 267.043C129.012 267.824 127.926 268.871 127.582 270.184C127.895 269.98 128.211 269.879 128.531 269.879C129.203 269.879 129.766 270.184 130.219 270.793C130.672 271.395 130.898 272.164 130.898 273.102C130.898 273.773 130.691 274.309 130.277 274.707C129.871 275.105 129.352 275.305 128.719 275.305C128.125 275.305 127.602 275.09 127.148 274.66C126.703 274.223 126.48 273.645 126.48 272.926C126.48 272.473 126.488 272.078 126.504 271.742C126.527 271.406 126.57 271.039 126.633 270.641C126.703 270.234 126.797 269.883 126.914 269.586C127.031 269.289 127.191 268.98 127.395 268.66C127.605 268.332 127.855 268.047 128.145 267.805C128.434 267.555 128.785 267.32 129.199 267.102C129.621 266.875 130.102 266.68 130.641 266.516ZM127.324 272.586C127.324 273.234 127.445 273.723 127.688 274.051C127.93 274.371 128.23 274.531 128.59 274.531C128.973 274.531 129.305 274.402 129.586 274.145C129.867 273.887 130.008 273.531 130.008 273.078C130.008 272.391 129.852 271.816 129.539 271.355C129.227 270.895 128.848 270.664 128.402 270.664C128.199 270.664 128.027 270.703 127.887 270.781C127.746 270.852 127.641 270.934 127.57 271.027C127.5 271.121 127.445 271.27 127.406 271.473C127.367 271.668 127.344 271.836 127.336 271.977C127.328 272.109 127.324 272.312 127.324 272.586ZM132.023 273.535C132.234 273.535 132.41 273.629 132.551 273.816C132.699 273.996 132.773 274.203 132.773 274.438C132.773 274.609 132.73 274.75 132.645 274.859C132.566 274.961 132.457 275.012 132.316 275.012C132.098 275.012 131.922 274.922 131.789 274.742C131.664 274.562 131.602 274.352 131.602 274.109C131.602 273.938 131.637 273.801 131.707 273.699C131.785 273.59 131.891 273.535 132.023 273.535ZM133.617 275.223L133.43 274.695C135.25 273.922 136.332 272.875 136.676 271.555C136.348 271.766 136.031 271.871 135.727 271.871C135.055 271.871 134.492 271.57 134.039 270.969C133.594 270.359 133.371 269.582 133.371 268.637C133.371 267.965 133.574 267.434 133.98 267.043C134.387 266.645 134.906 266.445 135.539 266.445C136.141 266.445 136.664 266.664 137.109 267.102C137.562 267.531 137.789 268.105 137.789 268.824C137.789 269.277 137.777 269.672 137.754 270.008C137.738 270.344 137.695 270.711 137.625 271.109C137.562 271.508 137.473 271.859 137.355 272.164C137.238 272.461 137.074 272.773 136.863 273.102C136.66 273.422 136.414 273.703 136.125 273.945C135.836 274.188 135.48 274.422 135.059 274.648C134.637 274.867 134.156 275.059 133.617 275.223ZM136.945 269.152C136.945 268.504 136.82 268.02 136.57 267.699C136.328 267.371 136.027 267.207 135.668 267.207C135.285 267.207 134.953 267.336 134.672 267.594C134.391 267.852 134.25 268.207 134.25 268.66C134.25 269.348 134.406 269.922 134.719 270.383C135.031 270.844 135.414 271.074 135.867 271.074C136.07 271.074 136.242 271.039 136.383 270.969C136.523 270.891 136.629 270.805 136.699 270.711C136.77 270.617 136.824 270.473 136.863 270.277C136.902 270.074 136.926 269.906 136.934 269.773C136.941 269.633 136.945 269.426 136.945 269.152Z M130.453 93.0938L129.539 92.8242L132.703 85.0664C130.883 85.0117 129.648 84.957 129 84.9023L128.883 84.375C129.43 84.3125 130.258 84.2812 131.367 84.2812C132.477 84.2734 133.242 84.2539 133.664 84.2227L133.605 85.2422L130.453 93.0938ZM132.633 91.5352C132.844 91.5352 133.02 91.6289 133.16 91.8164C133.309 91.9961 133.383 92.2031 133.383 92.4375C133.383 92.6094 133.34 92.75 133.254 92.8594C133.176 92.9609 133.066 93.0117 132.926 93.0117C132.707 93.0117 132.531 92.9219 132.398 92.7422C132.273 92.5625 132.211 92.3516 132.211 92.1094C132.211 91.9375 132.246 91.8008 132.316 91.6992C132.395 91.5898 132.5 91.5352 132.633 91.5352ZM138.012 92.1914L138.375 92.9648C137.789 92.9805 136.871 92.9922 135.621 93C134.371 93 133.707 93 133.629 93C133.629 92.9375 133.625 92.8281 133.617 92.6719C133.617 92.5156 133.617 92.3906 133.617 92.2969C133.766 92.0391 134.012 91.7305 134.355 91.3711C134.699 91.0039 135.043 90.6484 135.387 90.3047C135.73 89.9531 136.066 89.5703 136.395 89.1562C136.73 88.7422 137.004 88.2812 137.215 87.7734C137.426 87.2578 137.531 86.7305 137.531 86.1914C137.531 85.8477 137.41 85.5703 137.168 85.3594C136.926 85.1406 136.633 85.0312 136.289 85.0312C135.891 85.0312 135.52 85.1953 135.176 85.5234C134.84 85.8438 134.605 86.3359 134.473 87L133.945 86.8125C133.977 86.0547 134.223 85.4648 134.684 85.043C135.152 84.6211 135.691 84.4102 136.301 84.4102C136.848 84.4102 137.316 84.582 137.707 84.9258C138.098 85.2695 138.293 85.75 138.293 86.3672C138.293 86.875 138.215 87.3711 138.059 87.8555C137.902 88.332 137.676 88.7812 137.379 89.2031C137.082 89.625 136.805 89.9883 136.547 90.293C136.289 90.5898 135.965 90.9375 135.574 91.3359C135.191 91.7266 134.922 92.0078 134.766 92.1797C135.031 92.1953 135.258 92.2031 135.445 92.2031C135.641 92.2031 135.945 92.1992 136.359 92.1914C136.773 92.1758 137.082 92.168 137.285 92.168C137.473 92.168 137.715 92.1758 138.012 92.1914Z M130.453 301.094L129.539 300.824L132.703 293.066C130.883 293.012 129.648 292.957 129 292.902L128.883 292.375C129.43 292.312 130.258 292.281 131.367 292.281C132.477 292.273 133.242 292.254 133.664 292.223L133.605 293.242L130.453 301.094ZM132.633 299.535C132.844 299.535 133.02 299.629 133.16 299.816C133.309 299.996 133.383 300.203 133.383 300.438C133.383 300.609 133.34 300.75 133.254 300.859C133.176 300.961 133.066 301.012 132.926 301.012C132.707 301.012 132.531 300.922 132.398 300.742C132.273 300.562 132.211 300.352 132.211 300.109C132.211 299.938 132.246 299.801 132.316 299.699C132.395 299.59 132.5 299.535 132.633 299.535ZM133.617 300.625L133.711 300.086C133.773 300.094 133.949 300.129 134.238 300.191C134.535 300.254 134.797 300.301 135.023 300.332C135.258 300.363 135.465 300.379 135.645 300.379C136.09 300.379 136.438 300.211 136.688 299.875C136.945 299.539 137.074 299.148 137.074 298.703C137.074 298.094 136.863 297.57 136.441 297.133C136.027 296.688 135.426 296.465 134.637 296.465C134.512 296.465 134.418 296.469 134.355 296.477V295.902C134.426 295.91 134.535 295.914 134.684 295.914C135.395 295.914 135.973 295.789 136.418 295.539C136.871 295.289 137.098 294.891 137.098 294.344C137.098 293.93 136.98 293.598 136.746 293.348C136.512 293.098 136.207 292.973 135.832 292.973C135.66 292.973 135.473 292.984 135.27 293.008C135.074 293.023 134.859 293.047 134.625 293.078C134.391 293.109 134.242 293.129 134.18 293.137L133.992 292.609C134.086 292.586 134.238 292.543 134.449 292.48C134.66 292.418 134.824 292.371 134.941 292.34C135.066 292.309 135.223 292.281 135.41 292.258C135.598 292.227 135.773 292.211 135.938 292.211C136.539 292.211 137.016 292.422 137.367 292.844C137.719 293.258 137.895 293.828 137.895 294.555C137.895 295.016 137.781 295.395 137.555 295.691C137.336 295.988 137 296.172 136.547 296.242C137.016 296.43 137.371 296.738 137.613 297.168C137.863 297.59 137.988 298.09 137.988 298.668C137.988 299.332 137.832 299.902 137.52 300.379C137.207 300.848 136.734 301.082 136.102 301.082C135.188 301.082 134.359 300.93 133.617 300.625Z M129.453 145.094L128.539 144.824L131.703 137.066C129.883 137.012 128.648 136.957 128 136.902L127.883 136.375C128.43 136.312 129.258 136.281 130.367 136.281C131.477 136.273 132.242 136.254 132.664 136.223L132.605 137.242L129.453 145.094ZM131.633 143.535C131.844 143.535 132.02 143.629 132.16 143.816C132.309 143.996 132.383 144.203 132.383 144.438C132.383 144.609 132.34 144.75 132.254 144.859C132.176 144.961 132.066 145.012 131.926 145.012C131.707 145.012 131.531 144.922 131.398 144.742C131.273 144.562 131.211 144.352 131.211 144.109C131.211 143.938 131.246 143.801 131.316 143.699C131.395 143.59 131.5 143.535 131.633 143.535ZM138.078 142.645C138.078 143.496 137.871 144.129 137.457 144.543C137.043 144.949 136.41 145.152 135.559 145.152C133.918 145.152 133.098 144.301 133.098 142.598C133.098 141.988 133.223 141.453 133.473 140.992C133.723 140.531 134.066 140.266 134.504 140.195C134.059 140.188 133.723 140.023 133.496 139.703C133.27 139.383 133.156 138.984 133.156 138.508C133.156 137.773 133.355 137.195 133.754 136.773C134.16 136.352 134.734 136.141 135.477 136.141C136.258 136.141 136.871 136.336 137.316 136.727C137.762 137.117 137.984 137.719 137.984 138.531C137.984 139.008 137.871 139.406 137.645 139.727C137.418 140.047 137.082 140.211 136.637 140.219C137.09 140.289 137.441 140.559 137.691 141.027C137.949 141.496 138.078 142.035 138.078 142.645ZM135.688 144.309C136.125 144.309 136.488 144.141 136.777 143.805C137.066 143.461 137.211 143.055 137.211 142.586C137.211 142.117 137.051 141.715 136.73 141.379C136.41 141.035 135.98 140.859 135.441 140.852C134.973 140.992 134.621 141.215 134.387 141.52C134.152 141.816 134.035 142.152 134.035 142.527C134.035 142.996 134.191 143.41 134.504 143.77C134.816 144.129 135.211 144.309 135.688 144.309ZM135.688 136.785C135.164 136.824 134.766 136.996 134.492 137.301C134.219 137.605 134.082 137.957 134.082 138.355C134.082 138.762 134.211 139.113 134.469 139.41C134.734 139.707 135.086 139.855 135.523 139.855C136.031 139.848 136.418 139.711 136.684 139.445C136.949 139.172 137.082 138.844 137.082 138.461C137.082 138.078 136.953 137.723 136.695 137.395C136.445 137.066 136.109 136.863 135.688 136.785Z M124.539 118.965V118.344C124.727 118.32 124.957 118.281 125.23 118.227C125.512 118.172 125.73 118.133 125.887 118.109C125.91 117.547 125.922 116.98 125.922 116.41C125.922 116.051 125.918 115.512 125.91 114.793C125.902 114.066 125.898 113.52 125.898 113.152C125.898 112.285 125.91 111.629 125.934 111.184C125.223 111.59 124.703 111.918 124.375 112.168L124 111.781C124.125 111.68 124.34 111.504 124.645 111.254C124.949 110.996 125.223 110.766 125.465 110.562C125.707 110.352 125.895 110.18 126.027 110.047C126.152 110.062 126.281 110.074 126.414 110.082C126.547 110.082 126.676 110.09 126.801 110.105C126.848 111.012 126.871 112.672 126.871 115.086C126.871 116.523 126.883 117.555 126.906 118.18C126.977 118.188 127.145 118.219 127.41 118.273C127.684 118.32 127.895 118.352 128.043 118.367L128.23 118.988C127.84 118.988 127.5 118.988 127.211 118.988C126.922 118.988 126.535 118.988 126.051 118.988C125.574 118.988 125.199 118.988 124.926 118.988C124.66 118.98 124.531 118.973 124.539 118.965ZM128.77 118.965V118.344C128.957 118.32 129.188 118.281 129.461 118.227C129.742 118.172 129.961 118.133 130.117 118.109C130.141 117.547 130.152 116.98 130.152 116.41C130.152 116.051 130.148 115.512 130.141 114.793C130.133 114.066 130.129 113.52 130.129 113.152C130.129 112.285 130.141 111.629 130.164 111.184C129.453 111.59 128.934 111.918 128.605 112.168L128.23 111.781C128.355 111.68 128.57 111.504 128.875 111.254C129.18 110.996 129.453 110.766 129.695 110.562C129.938 110.352 130.125 110.18 130.258 110.047C130.383 110.062 130.512 110.074 130.645 110.082C130.777 110.082 130.906 110.09 131.031 110.105C131.078 111.012 131.102 112.672 131.102 115.086C131.102 116.523 131.113 117.555 131.137 118.18C131.207 118.188 131.375 118.219 131.641 118.273C131.914 118.32 132.125 118.352 132.273 118.367L132.461 118.988C132.07 118.988 131.73 118.988 131.441 118.988C131.152 118.988 130.766 118.988 130.281 118.988C129.805 118.988 129.43 118.988 129.156 118.988C128.891 118.98 128.762 118.973 128.77 118.965ZM133.117 117.535C133.328 117.535 133.504 117.629 133.645 117.816C133.793 117.996 133.867 118.203 133.867 118.438C133.867 118.609 133.824 118.75 133.738 118.859C133.66 118.961 133.551 119.012 133.41 119.012C133.191 119.012 133.016 118.922 132.883 118.742C132.758 118.562 132.695 118.352 132.695 118.109C132.695 117.938 132.73 117.801 132.801 117.699C132.879 117.59 132.984 117.535 133.117 117.535ZM138.496 118.191L138.859 118.965C138.273 118.98 137.355 118.992 136.105 119C134.855 119 134.191 119 134.113 119C134.113 118.938 134.109 118.828 134.102 118.672C134.102 118.516 134.102 118.391 134.102 118.297C134.25 118.039 134.496 117.73 134.84 117.371C135.184 117.004 135.527 116.648 135.871 116.305C136.215 115.953 136.551 115.57 136.879 115.156C137.215 114.742 137.488 114.281 137.699 113.773C137.91 113.258 138.016 112.73 138.016 112.191C138.016 111.848 137.895 111.57 137.652 111.359C137.41 111.141 137.117 111.031 136.773 111.031C136.375 111.031 136.004 111.195 135.66 111.523C135.324 111.844 135.09 112.336 134.957 113L134.43 112.812C134.461 112.055 134.707 111.465 135.168 111.043C135.637 110.621 136.176 110.41 136.785 110.41C137.332 110.41 137.801 110.582 138.191 110.926C138.582 111.27 138.777 111.75 138.777 112.367C138.777 112.875 138.699 113.371 138.543 113.855C138.387 114.332 138.16 114.781 137.863 115.203C137.566 115.625 137.289 115.988 137.031 116.293C136.773 116.59 136.449 116.938 136.059 117.336C135.676 117.727 135.406 118.008 135.25 118.18C135.516 118.195 135.742 118.203 135.93 118.203C136.125 118.203 136.43 118.199 136.844 118.191C137.258 118.176 137.566 118.168 137.77 118.168C137.957 118.168 138.199 118.176 138.496 118.191Z M130.461 324.645C130.461 325.496 130.254 326.129 129.84 326.543C129.426 326.949 128.793 327.152 127.941 327.152C126.301 327.152 125.48 326.301 125.48 324.598C125.48 323.988 125.605 323.453 125.855 322.992C126.105 322.531 126.449 322.266 126.887 322.195C126.441 322.188 126.105 322.023 125.879 321.703C125.652 321.383 125.539 320.984 125.539 320.508C125.539 319.773 125.738 319.195 126.137 318.773C126.543 318.352 127.117 318.141 127.859 318.141C128.641 318.141 129.254 318.336 129.699 318.727C130.145 319.117 130.367 319.719 130.367 320.531C130.367 321.008 130.254 321.406 130.027 321.727C129.801 322.047 129.465 322.211 129.02 322.219C129.473 322.289 129.824 322.559 130.074 323.027C130.332 323.496 130.461 324.035 130.461 324.645ZM128.07 326.309C128.508 326.309 128.871 326.141 129.16 325.805C129.449 325.461 129.594 325.055 129.594 324.586C129.594 324.117 129.434 323.715 129.113 323.379C128.793 323.035 128.363 322.859 127.824 322.852C127.355 322.992 127.004 323.215 126.77 323.52C126.535 323.816 126.418 324.152 126.418 324.527C126.418 324.996 126.574 325.41 126.887 325.77C127.199 326.129 127.594 326.309 128.07 326.309ZM128.07 318.785C127.547 318.824 127.148 318.996 126.875 319.301C126.602 319.605 126.465 319.957 126.465 320.355C126.465 320.762 126.594 321.113 126.852 321.41C127.117 321.707 127.469 321.855 127.906 321.855C128.414 321.848 128.801 321.711 129.066 321.445C129.332 321.172 129.465 320.844 129.465 320.461C129.465 320.078 129.336 319.723 129.078 319.395C128.828 319.066 128.492 318.863 128.07 318.785ZM131.586 325.535C131.797 325.535 131.973 325.629 132.113 325.816C132.262 325.996 132.336 326.203 132.336 326.438C132.336 326.609 132.293 326.75 132.207 326.859C132.129 326.961 132.02 327.012 131.879 327.012C131.66 327.012 131.484 326.922 131.352 326.742C131.227 326.562 131.164 326.352 131.164 326.109C131.164 325.938 131.199 325.801 131.27 325.699C131.348 325.59 131.453 325.535 131.586 325.535ZM133.051 323.098C133.059 321.41 133.277 320.195 133.707 319.453C134.137 318.703 134.789 318.305 135.664 318.258C136.047 318.258 136.387 318.363 136.684 318.574C136.98 318.785 137.215 319.055 137.387 319.383C137.566 319.703 137.715 320.09 137.832 320.543C137.949 320.988 138.027 321.414 138.066 321.82C138.113 322.219 138.145 322.645 138.16 323.098C138.16 323.715 138.066 324.348 137.879 324.996C137.699 325.637 137.418 326.199 137.035 326.684C136.66 327.16 136.238 327.398 135.77 327.398C133.957 327.398 133.051 325.965 133.051 323.098ZM135.5 319.16C135.312 319.199 135.145 319.262 134.996 319.348C134.848 319.434 134.723 319.531 134.621 319.641C134.527 319.75 134.445 319.895 134.375 320.074C134.305 320.254 134.25 320.422 134.211 320.578C134.18 320.727 134.148 320.922 134.117 321.164C134.094 321.406 134.078 321.617 134.07 321.797C134.062 321.969 134.051 322.199 134.035 322.488C134.027 322.77 134.016 323 134 323.18C134 323.539 134.02 323.883 134.059 324.211C134.098 324.531 134.168 324.867 134.27 325.219C134.379 325.57 134.547 325.855 134.773 326.074C135 326.293 135.273 326.418 135.594 326.449C136.078 326.449 136.477 326.113 136.789 325.441C137.109 324.77 137.27 324.09 137.27 323.402C137.27 320.605 136.68 319.191 135.5 319.16Z M127.609 249.223L127.422 248.695C129.242 247.922 130.324 246.875 130.668 245.555C130.34 245.766 130.023 245.871 129.719 245.871C129.047 245.871 128.484 245.57 128.031 244.969C127.586 244.359 127.363 243.582 127.363 242.637C127.363 241.965 127.566 241.434 127.973 241.043C128.379 240.645 128.898 240.445 129.531 240.445C130.133 240.445 130.656 240.664 131.102 241.102C131.555 241.531 131.781 242.105 131.781 242.824C131.781 243.277 131.77 243.672 131.746 244.008C131.73 244.344 131.688 244.711 131.617 245.109C131.555 245.508 131.465 245.859 131.348 246.164C131.23 246.461 131.066 246.773 130.855 247.102C130.652 247.422 130.406 247.703 130.117 247.945C129.828 248.188 129.473 248.422 129.051 248.648C128.629 248.867 128.148 249.059 127.609 249.223ZM130.938 243.152C130.938 242.504 130.812 242.02 130.562 241.699C130.32 241.371 130.02 241.207 129.66 241.207C129.277 241.207 128.945 241.336 128.664 241.594C128.383 241.852 128.242 242.207 128.242 242.66C128.242 243.348 128.398 243.922 128.711 244.383C129.023 244.844 129.406 245.074 129.859 245.074C130.062 245.074 130.234 245.039 130.375 244.969C130.516 244.891 130.621 244.805 130.691 244.711C130.762 244.617 130.816 244.473 130.855 244.277C130.895 244.074 130.918 243.906 130.926 243.773C130.934 243.633 130.938 243.426 130.938 243.152ZM131.676 247.535C131.887 247.535 132.062 247.629 132.203 247.816C132.352 247.996 132.426 248.203 132.426 248.438C132.426 248.609 132.383 248.75 132.297 248.859C132.219 248.961 132.109 249.012 131.969 249.012C131.75 249.012 131.574 248.922 131.441 248.742C131.316 248.562 131.254 248.352 131.254 248.109C131.254 247.938 131.289 247.801 131.359 247.699C131.438 247.59 131.543 247.535 131.676 247.535ZM133.141 245.098C133.148 243.41 133.367 242.195 133.797 241.453C134.227 240.703 134.879 240.305 135.754 240.258C136.137 240.258 136.477 240.363 136.773 240.574C137.07 240.785 137.305 241.055 137.477 241.383C137.656 241.703 137.805 242.09 137.922 242.543C138.039 242.988 138.117 243.414 138.156 243.82C138.203 244.219 138.234 244.645 138.25 245.098C138.25 245.715 138.156 246.348 137.969 246.996C137.789 247.637 137.508 248.199 137.125 248.684C136.75 249.16 136.328 249.398 135.859 249.398C134.047 249.398 133.141 247.965 133.141 245.098ZM135.59 241.16C135.402 241.199 135.234 241.262 135.086 241.348C134.938 241.434 134.812 241.531 134.711 241.641C134.617 241.75 134.535 241.895 134.465 242.074C134.395 242.254 134.34 242.422 134.301 242.578C134.27 242.727 134.238 242.922 134.207 243.164C134.184 243.406 134.168 243.617 134.16 243.797C134.152 243.969 134.141 244.199 134.125 244.488C134.117 244.77 134.105 245 134.09 245.18C134.09 245.539 134.109 245.883 134.148 246.211C134.188 246.531 134.258 246.867 134.359 247.219C134.469 247.57 134.637 247.855 134.863 248.074C135.09 248.293 135.363 248.418 135.684 248.449C136.168 248.449 136.566 248.113 136.879 247.441C137.199 246.77 137.359 246.09 137.359 245.402C137.359 242.605 136.77 241.191 135.59 241.16Z M132.461 168.645C132.461 169.496 132.254 170.129 131.84 170.543C131.426 170.949 130.793 171.152 129.941 171.152C128.301 171.152 127.48 170.301 127.48 168.598C127.48 167.988 127.605 167.453 127.855 166.992C128.105 166.531 128.449 166.266 128.887 166.195C128.441 166.188 128.105 166.023 127.879 165.703C127.652 165.383 127.539 164.984 127.539 164.508C127.539 163.773 127.738 163.195 128.137 162.773C128.543 162.352 129.117 162.141 129.859 162.141C130.641 162.141 131.254 162.336 131.699 162.727C132.145 163.117 132.367 163.719 132.367 164.531C132.367 165.008 132.254 165.406 132.027 165.727C131.801 166.047 131.465 166.211 131.02 166.219C131.473 166.289 131.824 166.559 132.074 167.027C132.332 167.496 132.461 168.035 132.461 168.645ZM130.07 170.309C130.508 170.309 130.871 170.141 131.16 169.805C131.449 169.461 131.594 169.055 131.594 168.586C131.594 168.117 131.434 167.715 131.113 167.379C130.793 167.035 130.363 166.859 129.824 166.852C129.355 166.992 129.004 167.215 128.77 167.52C128.535 167.816 128.418 168.152 128.418 168.527C128.418 168.996 128.574 169.41 128.887 169.77C129.199 170.129 129.594 170.309 130.07 170.309ZM130.07 162.785C129.547 162.824 129.148 162.996 128.875 163.301C128.602 163.605 128.465 163.957 128.465 164.355C128.465 164.762 128.594 165.113 128.852 165.41C129.117 165.707 129.469 165.855 129.906 165.855C130.414 165.848 130.801 165.711 131.066 165.445C131.332 165.172 131.465 164.844 131.465 164.461C131.465 164.078 131.336 163.723 131.078 163.395C130.828 163.066 130.492 162.863 130.07 162.785ZM133.586 169.535C133.797 169.535 133.973 169.629 134.113 169.816C134.262 169.996 134.336 170.203 134.336 170.438C134.336 170.609 134.293 170.75 134.207 170.859C134.129 170.961 134.02 171.012 133.879 171.012C133.66 171.012 133.484 170.922 133.352 170.742C133.227 170.562 133.164 170.352 133.164 170.109C133.164 169.938 133.199 169.801 133.27 169.699C133.348 169.59 133.453 169.535 133.586 169.535ZM135.109 170.965V170.344C135.297 170.32 135.527 170.281 135.801 170.227C136.082 170.172 136.301 170.133 136.457 170.109C136.48 169.547 136.492 168.98 136.492 168.41C136.492 168.051 136.488 167.512 136.48 166.793C136.473 166.066 136.469 165.52 136.469 165.152C136.469 164.285 136.48 163.629 136.504 163.184C135.793 163.59 135.273 163.918 134.945 164.168L134.57 163.781C134.695 163.68 134.91 163.504 135.215 163.254C135.52 162.996 135.793 162.766 136.035 162.562C136.277 162.352 136.465 162.18 136.598 162.047C136.723 162.062 136.852 162.074 136.984 162.082C137.117 162.082 137.246 162.09 137.371 162.105C137.418 163.012 137.441 164.672 137.441 167.086C137.441 168.523 137.453 169.555 137.477 170.18C137.547 170.188 137.715 170.219 137.98 170.273C138.254 170.32 138.465 170.352 138.613 170.367L138.801 170.988C138.41 170.988 138.07 170.988 137.781 170.988C137.492 170.988 137.105 170.988 136.621 170.988C136.145 170.988 135.77 170.988 135.496 170.988C135.23 170.98 135.102 170.973 135.109 170.965Z M130.453 223.094L129.539 222.824L132.703 215.066C130.883 215.012 129.648 214.957 129 214.902L128.883 214.375C129.43 214.312 130.258 214.281 131.367 214.281C132.477 214.273 133.242 214.254 133.664 214.223L133.605 215.242L130.453 223.094ZM132.633 221.535C132.844 221.535 133.02 221.629 133.16 221.816C133.309 221.996 133.383 222.203 133.383 222.438C133.383 222.609 133.34 222.75 133.254 222.859C133.176 222.961 133.066 223.012 132.926 223.012C132.707 223.012 132.531 222.922 132.398 222.742C132.273 222.562 132.211 222.352 132.211 222.109C132.211 221.938 132.246 221.801 132.316 221.699C132.395 221.59 132.5 221.535 132.633 221.535ZM134.227 223.223L134.039 222.695C135.859 221.922 136.941 220.875 137.285 219.555C136.957 219.766 136.641 219.871 136.336 219.871C135.664 219.871 135.102 219.57 134.648 218.969C134.203 218.359 133.98 217.582 133.98 216.637C133.98 215.965 134.184 215.434 134.59 215.043C134.996 214.645 135.516 214.445 136.148 214.445C136.75 214.445 137.273 214.664 137.719 215.102C138.172 215.531 138.398 216.105 138.398 216.824C138.398 217.277 138.387 217.672 138.363 218.008C138.348 218.344 138.305 218.711 138.234 219.109C138.172 219.508 138.082 219.859 137.965 220.164C137.848 220.461 137.684 220.773 137.473 221.102C137.27 221.422 137.023 221.703 136.734 221.945C136.445 222.188 136.09 222.422 135.668 222.648C135.246 222.867 134.766 223.059 134.227 223.223ZM137.555 217.152C137.555 216.504 137.43 216.02 137.18 215.699C136.938 215.371 136.637 215.207 136.277 215.207C135.895 215.207 135.562 215.336 135.281 215.594C135 215.852 134.859 216.207 134.859 216.66C134.859 217.348 135.016 217.922 135.328 218.383C135.641 218.844 136.023 219.074 136.477 219.074C136.68 219.074 136.852 219.039 136.992 218.969C137.133 218.891 137.238 218.805 137.309 218.711C137.379 218.617 137.434 218.473 137.473 218.277C137.512 218.074 137.535 217.906 137.543 217.773C137.551 217.633 137.555 217.426 137.555 217.152Z M132.312 347.07C132.734 347.07 133.086 347.258 133.367 347.633C133.664 347.992 133.812 348.406 133.812 348.875C133.812 349.219 133.727 349.5 133.555 349.719C133.398 349.922 133.18 350.023 132.898 350.023C132.461 350.023 132.109 349.844 131.844 349.484C131.594 349.125 131.469 348.703 131.469 348.219C131.469 347.875 131.539 347.602 131.68 347.398C131.836 347.18 132.047 347.07 132.312 347.07Z M132.312 357.07C132.734 357.07 133.086 357.258 133.367 357.633C133.664 357.992 133.812 358.406 133.812 358.875C133.812 359.219 133.727 359.5 133.555 359.719C133.398 359.922 133.18 360.023 132.898 360.023C132.461 360.023 132.109 359.844 131.844 359.484C131.594 359.125 131.469 358.703 131.469 358.219C131.469 357.875 131.539 357.602 131.68 357.398C131.836 357.18 132.047 357.07 132.312 357.07Z M132.312 367.07C132.734 367.07 133.086 367.258 133.367 367.633C133.664 367.992 133.812 368.406 133.812 368.875C133.812 369.219 133.727 369.5 133.555 369.719C133.398 369.922 133.18 370.023 132.898 370.023C132.461 370.023 132.109 369.844 131.844 369.484C131.594 369.125 131.469 368.703 131.469 368.219C131.469 367.875 131.539 367.602 131.68 367.398C131.836 367.18 132.047 367.07 132.312 367.07Z M117.985 22.184C117.804 22.1733 117.649 22.104 117.521 21.976C117.404 21.848 117.345 21.6987 117.345 21.528C117.345 21.3147 117.425 21.1547 117.585 21.048C117.756 20.9307 117.953 20.872 118.177 20.872C118.358 20.872 118.502 20.904 118.609 20.968L118.641 20.952C118.577 20.8027 118.545 20.5733 118.545 20.264C118.545 20.0933 118.561 19.976 118.593 19.912C118.572 19.7413 118.561 19.6133 118.561 19.528C118.561 19.1867 118.646 18.9147 118.817 18.712C118.87 18.552 118.966 18.4027 119.105 18.264C119.244 18.1253 119.393 18.0347 119.553 17.992C119.585 17.8747 119.713 17.7467 119.937 17.608C120.161 17.4693 120.385 17.4053 120.609 17.416C120.673 17.3093 120.849 17.256 121.137 17.256C121.404 17.256 121.59 17.2827 121.697 17.336C121.793 17.272 121.921 17.24 122.081 17.24C122.348 17.24 122.604 17.3093 122.849 17.448C123.094 17.5867 123.217 17.7573 123.217 17.96C123.217 18.1413 123.137 18.296 122.977 18.424C122.828 18.5413 122.652 18.6 122.449 18.6C122.278 18.6 122.134 18.5627 122.017 18.488C121.91 18.552 121.798 18.584 121.681 18.584C121.564 18.584 121.457 18.552 121.361 18.488C121.329 18.552 121.244 18.6 121.105 18.632C120.977 18.6533 120.87 18.6533 120.785 18.632C120.625 18.8987 120.438 19.032 120.225 19.032C120.225 19.192 120.204 19.3627 120.161 19.544C120.129 19.7147 120.07 19.8267 119.985 19.88C120.07 19.9973 120.113 20.168 120.113 20.392C120.113 20.5733 120.076 20.7173 120.001 20.824C120.044 20.8133 120.102 20.808 120.177 20.808C120.348 20.808 120.502 20.8613 120.641 20.968C120.737 20.9147 120.876 20.888 121.057 20.888C121.238 20.888 121.372 20.9147 121.457 20.968C121.638 20.9787 121.772 21.0373 121.857 21.144C121.953 21.24 122.001 21.3627 122.001 21.512C122.001 21.6933 121.942 21.864 121.825 22.024C121.708 22.1733 121.558 22.248 121.377 22.248C121.302 22.248 121.201 22.2213 121.073 22.168C120.977 22.232 120.849 22.264 120.689 22.264C120.572 22.264 120.428 22.2427 120.257 22.2C120.214 22.2533 120.145 22.3013 120.049 22.344C120.07 22.408 120.081 22.4667 120.081 22.52C120.081 22.68 120.017 22.824 119.889 22.952C119.9 22.984 119.905 23.0373 119.905 23.112C119.905 23.176 119.9 23.224 119.889 23.256C120.017 23.384 120.081 23.5387 120.081 23.72C120.081 23.7947 120.065 23.8747 120.033 23.96C120.14 24.0987 120.193 24.3067 120.193 24.584C120.193 24.7227 120.172 24.8347 120.129 24.92C120.214 25.0373 120.257 25.208 120.257 25.432C120.257 25.5707 120.23 25.704 120.177 25.832C120.241 25.9387 120.273 26.0507 120.273 26.168C120.273 26.3067 120.236 26.4293 120.161 26.536C120.268 26.792 120.321 26.9893 120.321 27.128C120.321 27.288 120.262 27.4267 120.145 27.544C120.156 27.5867 120.188 27.704 120.241 27.896C120.294 28.0773 120.321 28.248 120.321 28.408C120.321 28.824 120.092 29.016 119.633 28.984C119.409 28.9733 119.222 28.8133 119.073 28.504C118.934 28.184 118.865 27.8587 118.865 27.528C118.865 27.304 118.902 27.1387 118.977 27.032C118.881 26.8187 118.833 26.6373 118.833 26.488C118.833 26.3813 118.854 26.2853 118.897 26.2C118.833 26.104 118.801 25.9973 118.801 25.88C118.801 25.7307 118.844 25.5973 118.929 25.48C118.844 25.4267 118.774 25.352 118.721 25.256C118.678 25.16 118.657 25.0587 118.657 24.952C118.657 24.7493 118.732 24.584 118.881 24.456C118.785 24.392 118.737 24.2053 118.737 23.896C118.737 23.7787 118.748 23.672 118.769 23.576C118.801 23.4693 118.838 23.4 118.881 23.368C118.806 23.2933 118.742 23.192 118.689 23.064C118.646 22.936 118.625 22.8133 118.625 22.696C118.625 22.536 118.657 22.4027 118.721 22.296C118.614 22.3173 118.529 22.328 118.465 22.328C118.273 22.328 118.113 22.28 117.985 22.184ZM124.449 17.592C124.31 17.656 124.198 17.7467 124.113 17.864C124.028 17.9813 123.985 18.104 123.985 18.232C123.985 18.4027 124.054 18.5733 124.193 18.744C124.172 18.8827 124.246 19.016 124.417 19.144C124.588 19.272 124.774 19.336 124.977 19.336C125.116 19.336 125.238 19.2987 125.345 19.224C125.644 19.064 125.793 18.8613 125.793 18.616C125.793 18.456 125.729 18.2747 125.601 18.072C125.612 17.8587 125.548 17.6933 125.409 17.576C125.281 17.448 125.126 17.384 124.945 17.384C124.742 17.384 124.577 17.4533 124.449 17.592ZM125.489 24.664C125.574 24.696 125.638 24.7973 125.681 24.968C125.734 25.1387 125.761 25.3253 125.761 25.528C125.761 25.7627 125.724 25.9173 125.649 25.992C125.713 26.152 125.745 26.3067 125.745 26.456C125.745 26.648 125.697 26.808 125.601 26.936C125.676 27.1173 125.713 27.3307 125.713 27.576C125.713 27.7787 125.681 27.944 125.617 28.072C125.649 28.168 125.665 28.2587 125.665 28.344C125.665 28.536 125.596 28.6907 125.457 28.808C125.318 28.9147 125.153 28.968 124.961 28.968C124.78 28.968 124.625 28.9147 124.497 28.808C124.369 28.6907 124.31 28.536 124.321 28.344C124.268 28.28 124.225 28.1787 124.193 28.04C124.161 27.9013 124.145 27.7573 124.145 27.608C124.145 27.3307 124.204 27.1493 124.321 27.064C124.236 26.9253 124.193 26.7173 124.193 26.44C124.193 26.1627 124.23 25.96 124.305 25.832C124.262 25.7893 124.23 25.688 124.209 25.528C124.188 25.368 124.177 25.192 124.177 25C124.177 24.8187 124.188 24.6587 124.209 24.52C124.23 24.3707 124.262 24.2747 124.305 24.232C124.241 24.168 124.209 23.992 124.209 23.704C124.209 23.3733 124.246 23.1333 124.321 22.984C124.268 22.8987 124.22 22.7867 124.177 22.648C124.134 22.5093 124.113 22.3813 124.113 22.264C124.113 22.1573 124.124 22.0827 124.145 22.04C124.06 21.7627 124.017 21.5387 124.017 21.368C124.017 21.1867 124.06 21 124.145 20.808C124.124 20.648 124.161 20.5253 124.257 20.44C124.353 20.3547 124.492 20.312 124.673 20.312C125.164 20.312 125.409 20.6107 125.409 21.208C125.505 21.272 125.574 21.3627 125.617 21.48C125.67 21.5867 125.697 21.7093 125.697 21.848C125.697 22.072 125.644 22.264 125.537 22.424C125.58 22.488 125.612 22.584 125.633 22.712C125.665 22.84 125.681 22.968 125.681 23.096C125.681 23.2667 125.654 23.384 125.601 23.448C125.644 23.5013 125.665 23.6133 125.665 23.784C125.665 23.944 125.644 24.1147 125.601 24.296C125.569 24.4773 125.532 24.6 125.489 24.664ZM130.305 26.072C130.305 26.1787 130.262 26.3067 130.177 26.456C130.091 26.5947 129.995 26.6693 129.889 26.68C129.878 27.0213 129.702 27.272 129.361 27.432C129.393 27.5813 129.339 27.7733 129.201 28.008C129.073 28.2427 128.934 28.392 128.785 28.456C128.731 28.6693 128.635 28.856 128.497 29.016C128.358 29.1867 128.193 29.272 128.001 29.272C127.83 29.272 127.686 29.208 127.569 29.08C127.451 28.9627 127.393 28.8133 127.393 28.632C127.393 28.3867 127.499 28.152 127.713 27.928C127.702 27.7467 127.739 27.576 127.825 27.416C127.91 27.256 128.027 27.128 128.177 27.032C128.166 26.808 128.214 26.6267 128.321 26.488C128.427 26.3493 128.555 26.2853 128.705 26.296C128.683 26.1467 128.705 26.008 128.769 25.88C128.843 25.7413 128.95 25.64 129.089 25.576C129.11 25.48 129.19 25.352 129.329 25.192C129.425 25.096 129.494 25.0053 129.537 24.92C129.291 24.792 129.179 24.5893 129.201 24.312C129.019 24.3013 128.87 24.232 128.753 24.104C128.635 23.9653 128.577 23.8107 128.577 23.64C128.577 23.544 128.587 23.4747 128.609 23.432C128.513 23.4107 128.411 23.336 128.305 23.208C128.209 23.08 128.166 22.9573 128.177 22.84C128.017 22.7547 127.894 22.6747 127.809 22.6C127.723 22.5147 127.654 22.408 127.601 22.28C127.345 22.12 127.185 21.928 127.121 21.704C126.769 21.448 126.593 21.1653 126.593 20.856C126.593 20.7707 126.609 20.68 126.641 20.584C126.769 20.2853 126.955 20.136 127.201 20.136C127.382 20.136 127.563 20.216 127.745 20.376C127.926 20.5253 128.049 20.6907 128.113 20.872C128.347 20.9147 128.545 21.032 128.705 21.224C128.875 21.4053 128.961 21.592 128.961 21.784C128.961 21.8373 128.955 21.88 128.945 21.912C129.307 22.0933 129.531 22.3973 129.617 22.824C129.787 22.8987 129.942 23.0107 130.081 23.16C130.219 23.3093 130.31 23.496 130.353 23.72C130.374 23.6987 130.411 23.64 130.465 23.544C130.518 23.4373 130.582 23.3467 130.657 23.272C130.731 23.1867 130.817 23.144 130.913 23.144C130.891 23.0267 130.918 22.8827 130.993 22.712C131.078 22.5307 131.179 22.4187 131.297 22.376C131.286 22.3333 131.281 22.2693 131.281 22.184C131.281 22.0453 131.318 21.9333 131.393 21.848C131.467 21.7627 131.553 21.7253 131.649 21.736C131.649 21.512 131.702 21.3307 131.809 21.192C131.926 21.0533 132.054 20.9893 132.193 21C132.214 20.7867 132.289 20.616 132.417 20.488C132.555 20.3493 132.71 20.28 132.881 20.28C133.083 20.28 133.238 20.3813 133.345 20.584C133.451 20.7333 133.505 20.888 133.505 21.048C133.505 21.24 133.419 21.4053 133.249 21.544C133.27 21.6293 133.281 21.6827 133.281 21.704C133.281 21.832 133.233 21.9493 133.137 22.056C133.041 22.1627 132.939 22.232 132.833 22.264V22.328C132.833 22.4987 132.737 22.6053 132.545 22.648C132.534 23.0427 132.321 23.3893 131.905 23.688C131.915 23.9013 131.862 24.104 131.745 24.296C131.627 24.4773 131.478 24.6053 131.297 24.68C131.307 24.712 131.313 24.76 131.313 24.824C131.313 24.8987 131.297 24.984 131.265 25.08C131.361 25.144 131.457 25.24 131.553 25.368C131.659 25.4853 131.707 25.6187 131.697 25.768C131.803 25.8 131.899 25.864 131.985 25.96C132.081 26.056 132.123 26.1733 132.113 26.312C132.486 26.4933 132.673 26.7227 132.673 27C132.673 27.032 132.662 27.1013 132.641 27.208C132.779 27.208 132.891 27.2613 132.977 27.368C133.073 27.4747 133.115 27.608 133.105 27.768C133.201 27.8 133.281 27.8587 133.345 27.944C133.419 28.0293 133.457 28.152 133.457 28.312C133.457 28.3547 133.446 28.44 133.425 28.568C133.489 28.664 133.521 28.76 133.521 28.856C133.521 28.9947 133.467 29.112 133.361 29.208C133.254 29.304 133.126 29.352 132.977 29.352C132.635 29.352 132.379 29.1173 132.209 28.648C132.059 28.584 131.91 28.4293 131.761 28.184C131.611 27.9387 131.537 27.7307 131.537 27.56C131.323 27.4213 131.131 27.256 130.961 27.064C130.801 26.872 130.705 26.68 130.673 26.488C130.481 26.424 130.358 26.2853 130.305 26.072ZM141.585 22.744C141.702 22.7973 141.809 22.9253 141.905 23.128C142.011 23.3307 142.065 23.5387 142.065 23.752C142.065 24.1147 141.905 24.36 141.585 24.488C141.499 24.6373 141.382 24.7547 141.233 24.84C141.094 24.9253 140.939 24.968 140.769 24.968C140.63 24.968 140.486 24.936 140.337 24.872C140.251 24.9253 140.134 24.9733 139.985 25.016C139.835 25.0587 139.686 25.08 139.537 25.08C139.281 25.08 139.105 25.0267 139.009 24.92C138.902 25.0053 138.731 25.048 138.497 25.048C138.326 25.048 138.171 25.016 138.033 24.952C137.883 25.0267 137.713 25.064 137.521 25.064C137.339 25.064 137.19 25.0373 137.073 24.984C136.966 25.08 136.747 25.128 136.417 25.128C136.235 25.128 136.113 25.112 136.049 25.08C136.081 25.3893 136.038 25.6187 135.921 25.768C136.123 25.9707 136.203 26.1893 136.161 26.424C136.171 26.4347 136.23 26.4773 136.337 26.552C136.443 26.6267 136.518 26.7493 136.561 26.92C136.678 26.92 136.785 26.968 136.881 27.064C136.987 27.16 137.051 27.256 137.073 27.352C137.115 27.3093 137.201 27.288 137.329 27.288C137.425 27.288 137.51 27.304 137.585 27.336C137.659 27.368 137.702 27.4053 137.713 27.448C137.787 27.4053 137.873 27.384 137.969 27.384C138.107 27.384 138.235 27.432 138.353 27.528C138.459 27.5067 138.539 27.496 138.593 27.496C138.699 27.496 138.79 27.512 138.865 27.544C138.897 27.4587 138.982 27.3787 139.121 27.304C139.259 27.2187 139.403 27.1813 139.553 27.192C139.638 27.0853 139.755 27 139.905 26.936C140.054 26.872 140.203 26.84 140.353 26.84C140.641 26.84 140.849 26.9573 140.977 27.192C141.019 27.2773 141.041 27.3787 141.041 27.496C141.041 27.752 140.923 27.9547 140.689 28.104C140.635 28.136 140.545 28.1947 140.417 28.28C140.289 28.3547 140.171 28.4133 140.065 28.456C139.958 28.4987 139.862 28.52 139.777 28.52C139.617 28.712 139.398 28.808 139.121 28.808C138.993 28.808 138.897 28.7973 138.833 28.776C138.705 28.8827 138.518 28.936 138.273 28.936C138.049 28.936 137.894 28.8933 137.809 28.808C137.734 28.84 137.659 28.856 137.585 28.856C137.435 28.856 137.297 28.8027 137.169 28.696C136.625 28.728 136.257 28.5573 136.065 28.184C135.915 28.184 135.745 28.0933 135.553 27.912C135.371 27.72 135.27 27.5547 135.249 27.416C135.003 27.32 134.849 27.144 134.785 26.888C134.774 26.8027 134.774 26.7227 134.785 26.648C134.742 26.6373 134.705 26.5947 134.673 26.52C134.651 26.4347 134.641 26.3493 134.641 26.264C134.641 26.2 134.646 26.1573 134.657 26.136C134.571 25.88 134.529 25.6453 134.529 25.432C134.529 25.2187 134.571 25.0267 134.657 24.856C134.593 24.7387 134.561 24.6107 134.561 24.472C134.561 24.3013 134.598 24.1307 134.673 23.96C134.747 23.7893 134.817 23.6773 134.881 23.624C134.859 23.5707 134.875 23.48 134.929 23.352C134.982 23.2133 135.051 23.0907 135.137 22.984C135.233 22.8667 135.329 22.7973 135.425 22.776L135.409 22.6C135.409 22.184 135.633 21.9227 136.081 21.816C136.081 21.6347 136.187 21.4587 136.401 21.288C136.614 21.1173 136.801 21.0427 136.961 21.064C136.982 20.9467 137.083 20.856 137.265 20.792C137.457 20.7173 137.601 20.696 137.697 20.728C137.782 20.5893 137.953 20.4933 138.209 20.44C138.305 20.3333 138.443 20.28 138.625 20.28C138.678 20.28 138.747 20.2907 138.833 20.312L138.977 20.296C139.105 20.296 139.211 20.3227 139.297 20.376C139.393 20.4187 139.435 20.472 139.425 20.536C139.659 20.5573 139.857 20.6107 140.017 20.696C140.177 20.7813 140.273 20.936 140.305 21.16C140.443 21.128 140.619 21.1653 140.833 21.272C141.046 21.368 141.227 21.5227 141.377 21.736C141.537 21.9387 141.617 22.1787 141.617 22.456C141.617 22.52 141.606 22.616 141.585 22.744ZM139.233 23.784C139.339 23.6347 139.601 23.56 140.017 23.56C140.251 23.56 140.433 23.5813 140.561 23.624C140.475 23.5813 140.395 23.4907 140.321 23.352C140.257 23.2027 140.225 23.064 140.225 22.936C140.225 22.8507 140.241 22.7867 140.273 22.744C140.123 22.7547 139.995 22.7173 139.889 22.632C139.793 22.536 139.702 22.4293 139.617 22.312C139.542 22.1947 139.483 22.1093 139.441 22.056C139.387 22.088 139.275 22.0613 139.105 21.976C138.945 21.88 138.859 21.784 138.849 21.688C138.806 21.7413 138.715 21.7893 138.577 21.832C138.438 21.864 138.331 21.8747 138.257 21.864C138.225 21.9173 138.15 21.9707 138.033 22.024C137.915 22.0773 137.793 22.0933 137.665 22.072C137.558 22.2747 137.446 22.44 137.329 22.568C137.211 22.696 137.062 22.792 136.881 22.856C136.859 23.0053 136.79 23.1707 136.673 23.352C136.566 23.5333 136.454 23.672 136.337 23.768L136.401 23.784C136.55 23.6773 136.753 23.624 137.009 23.624C137.158 23.624 137.297 23.64 137.425 23.672C137.563 23.704 137.659 23.7413 137.713 23.784C137.969 23.624 138.251 23.544 138.561 23.544C138.817 23.544 139.041 23.624 139.233 23.784ZM147.651 28.056C147.63 28.152 147.55 28.232 147.411 28.296C147.273 28.36 147.123 28.392 146.963 28.392C146.889 28.392 146.835 28.3867 146.803 28.376C146.75 28.4613 146.638 28.5467 146.467 28.632C146.297 28.7173 146.147 28.76 146.019 28.76C145.955 28.76 145.897 28.744 145.843 28.712C145.737 28.7333 145.646 28.744 145.571 28.744C145.422 28.744 145.273 28.7173 145.123 28.664C144.985 28.6107 144.878 28.5413 144.803 28.456C144.622 28.4773 144.451 28.456 144.291 28.392C144.142 28.3173 144.057 28.2213 144.035 28.104C143.918 28.1253 143.785 28.0773 143.635 27.96C143.497 27.8427 143.422 27.6827 143.411 27.48C143.251 27.3947 143.134 27.2667 143.059 27.096C142.985 26.9253 142.947 26.744 142.947 26.552C142.947 26.4133 142.963 26.3067 142.995 26.232C142.91 26.1573 142.841 26.0027 142.787 25.768C142.734 25.5227 142.707 25.2667 142.707 25C142.707 24.68 142.745 24.4453 142.819 24.296C142.766 24.1893 142.739 24.0667 142.739 23.928C142.739 23.8107 142.755 23.6987 142.787 23.592C142.83 23.4853 142.889 23.4 142.963 23.336C142.931 23.2827 142.915 23.2347 142.915 23.192C142.915 23.1173 142.942 23.0373 142.995 22.952C143.049 22.8667 143.107 22.8027 143.171 22.76C143.161 22.5893 143.203 22.4347 143.299 22.296C143.406 22.1467 143.513 22.056 143.619 22.024C143.609 21.9173 143.646 21.7893 143.731 21.64C143.817 21.4907 143.929 21.368 144.067 21.272C144.217 21.176 144.366 21.1333 144.515 21.144C144.729 20.8453 145.022 20.696 145.395 20.696C145.555 20.696 145.678 20.7173 145.763 20.76C145.881 20.7067 146.025 20.68 146.195 20.68C146.366 20.68 146.553 20.7227 146.755 20.808C146.819 20.776 146.899 20.76 146.995 20.76C147.102 20.76 147.203 20.7813 147.299 20.824C147.406 20.856 147.475 20.904 147.507 20.968C147.497 20.9253 147.491 20.8613 147.491 20.776C147.491 20.6053 147.534 20.456 147.619 20.328C147.545 20.2 147.507 20.072 147.507 19.944C147.507 19.88 147.513 19.832 147.523 19.8C147.513 19.7467 147.491 19.6773 147.459 19.592C147.427 19.496 147.411 19.416 147.411 19.352C147.411 19.2667 147.433 19.1813 147.475 19.096C147.422 18.9893 147.395 18.8827 147.395 18.776C147.395 18.6587 147.427 18.5467 147.491 18.44C147.417 18.2907 147.379 18.136 147.379 17.976C147.379 17.7627 147.438 17.5707 147.555 17.4C147.683 17.2293 147.854 17.144 148.067 17.144C148.249 17.144 148.403 17.2133 148.531 17.352C148.67 17.48 148.739 17.6293 148.739 17.8C148.739 17.864 148.734 17.912 148.723 17.944C148.883 18.072 148.963 18.248 148.963 18.472C148.963 18.5893 148.926 18.712 148.851 18.84C148.883 18.9147 148.899 18.9947 148.899 19.08C148.899 19.1973 148.873 19.3093 148.819 19.416C148.873 19.5227 148.899 19.6347 148.899 19.752C148.899 19.9013 148.862 20.0293 148.787 20.136C148.894 20.264 148.947 20.3867 148.947 20.504C148.947 20.5893 148.915 20.68 148.851 20.776C148.883 20.84 148.899 20.92 148.899 21.016C148.899 21.0907 148.883 21.1707 148.851 21.256C148.937 21.3733 148.979 21.5013 148.979 21.64C148.979 21.7467 148.953 21.8533 148.899 21.96C148.963 22.0667 148.995 22.1947 148.995 22.344C148.995 22.5893 148.937 22.76 148.819 22.856C148.926 22.984 148.979 23.176 148.979 23.432C148.979 23.5813 148.958 23.7307 148.915 23.88C148.883 24.0293 148.851 24.136 148.819 24.2C148.926 24.36 148.979 24.5627 148.979 24.808C148.979 24.9253 148.953 25.0373 148.899 25.144C149.017 25.2613 149.075 25.4373 149.075 25.672C149.075 25.928 149.022 26.136 148.915 26.296C149.022 26.4347 149.075 26.632 149.075 26.888C149.075 27.0587 149.049 27.2133 148.995 27.352C148.953 27.48 148.894 27.5653 148.819 27.608C148.83 27.6827 148.857 27.7947 148.899 27.944C148.953 28.1787 148.979 28.328 148.979 28.392C148.979 28.5627 148.926 28.7013 148.819 28.808C148.691 28.936 148.542 29 148.371 29C148.233 29 148.105 28.952 147.987 28.856C147.881 28.7493 147.817 28.6107 147.795 28.44C147.742 28.3867 147.705 28.3173 147.683 28.232C147.662 28.136 147.651 28.0773 147.651 28.056ZM145.651 27.432C145.683 27.3573 145.779 27.32 145.939 27.32C146.014 27.32 146.078 27.3253 146.131 27.336C146.185 27.3467 146.227 27.352 146.259 27.352C146.27 27.2773 146.334 27.2133 146.451 27.16C146.579 27.096 146.702 27.064 146.819 27.064C146.894 27.064 146.958 27.08 147.011 27.112C147.001 27.0053 147.022 26.92 147.075 26.856C147.129 26.792 147.198 26.7333 147.283 26.68C147.379 26.616 147.449 26.568 147.491 26.536C147.47 26.4933 147.459 26.3973 147.459 26.248C147.459 25.928 147.497 25.7307 147.571 25.656C147.497 25.5813 147.459 25.432 147.459 25.208C147.459 24.952 147.497 24.728 147.571 24.536C147.507 24.3973 147.475 24.1627 147.475 23.832C147.475 23.512 147.497 23.2987 147.539 23.192C147.443 23 147.395 22.7813 147.395 22.536C147.395 22.344 147.417 22.2053 147.459 22.12C147.395 22.1627 147.299 22.168 147.171 22.136C147.054 22.0933 146.958 22.0347 146.883 21.96C146.841 22.024 146.755 22.056 146.627 22.056C146.542 22.056 146.457 22.0453 146.371 22.024C146.286 21.992 146.227 21.96 146.195 21.928C146.025 22.0027 145.859 22.04 145.699 22.04C145.657 22.04 145.593 22.0293 145.507 22.008C145.369 22.1573 145.262 22.264 145.187 22.328C145.113 22.392 145.011 22.4293 144.883 22.44C144.851 22.5147 144.819 22.6053 144.787 22.712C144.755 22.808 144.718 22.888 144.675 22.952C144.633 23.016 144.558 23.0693 144.451 23.112C144.43 23.2507 144.377 23.3627 144.291 23.448C144.302 23.4907 144.307 23.5493 144.307 23.624C144.307 23.7307 144.281 23.848 144.227 23.976C144.259 24.0507 144.275 24.216 144.275 24.472C144.275 24.9627 144.233 25.256 144.147 25.352C144.158 25.3947 144.195 25.496 144.259 25.656C144.323 25.816 144.355 25.9707 144.355 26.12C144.355 26.2373 144.334 26.344 144.291 26.44C144.505 26.5253 144.638 26.6747 144.691 26.888C144.798 26.92 144.899 26.9893 144.995 27.096C145.251 27.0853 145.47 27.1973 145.651 27.432ZM113.193 42.792C113.107 42.6533 113.065 42.52 113.065 42.392C113.065 42.2 113.129 42.04 113.257 41.912C113.289 41.752 113.363 41.6027 113.481 41.464C113.598 41.3147 113.726 41.2027 113.865 41.128C114.014 41.0427 114.131 41.0107 114.217 41.032C114.291 40.9147 114.441 40.808 114.664 40.712C114.889 40.6053 115.097 40.552 115.289 40.552C115.331 40.552 115.395 40.5627 115.481 40.584C115.598 40.456 115.753 40.392 115.945 40.392C116.094 40.392 116.201 40.4347 116.265 40.52C116.403 40.424 116.585 40.376 116.809 40.376C117.075 40.376 117.31 40.44 117.513 40.568C117.726 40.696 117.849 40.8667 117.881 41.08C118.073 41.144 118.217 41.2453 118.313 41.384C118.419 41.512 118.483 41.6933 118.505 41.928C118.643 42.0667 118.745 42.232 118.809 42.424C118.873 42.6053 118.905 42.792 118.905 42.984C118.905 43.2293 118.862 43.4267 118.777 43.576C118.851 43.6827 118.915 43.8427 118.969 44.056C119.022 44.2693 119.049 44.4773 119.049 44.68C119.049 44.7653 119.038 44.872 119.017 45C119.091 45.16 119.129 45.2667 119.129 45.32C119.129 45.352 119.113 45.4267 119.081 45.544C119.091 45.5867 119.102 45.64 119.113 45.704C119.123 45.7573 119.129 45.8267 119.129 45.912C119.129 46.072 119.07 46.216 118.953 46.344C118.995 46.4613 119.017 46.6053 119.017 46.776C119.017 47 118.963 47.1813 118.857 47.32C118.878 47.3627 118.889 47.432 118.889 47.528C118.889 47.752 118.798 47.9387 118.617 48.088C118.574 48.2373 118.494 48.3547 118.377 48.44C118.259 48.5147 118.131 48.552 117.993 48.552C117.854 48.552 117.742 48.5093 117.657 48.424C117.379 48.5413 117.155 48.6 116.985 48.6C116.899 48.6 116.835 48.5947 116.793 48.584C116.515 48.6693 116.281 48.712 116.089 48.712C115.95 48.712 115.758 48.6853 115.513 48.632C115.363 48.7173 115.219 48.76 115.081 48.76C114.953 48.76 114.835 48.7227 114.729 48.648C114.675 48.6587 114.595 48.664 114.489 48.664C114.073 48.664 113.753 48.4773 113.529 48.104C113.123 47.8693 112.921 47.5173 112.921 47.048C112.921 46.9307 112.926 46.84 112.937 46.776C112.841 46.712 112.793 46.5787 112.793 46.376C112.793 46.2373 112.819 46.1147 112.873 46.008C112.83 45.816 112.809 45.6933 112.809 45.64C112.809 45.3307 112.958 45.0533 113.257 44.808C113.374 44.5627 113.507 44.3973 113.657 44.312C113.817 44.2267 114.014 44.1627 114.249 44.12C114.313 43.9387 114.462 43.816 114.697 43.752C114.931 43.688 115.161 43.6667 115.385 43.688C115.449 43.6453 115.539 43.608 115.657 43.576C115.774 43.5333 115.891 43.512 116.009 43.512C116.137 43.512 116.249 43.5333 116.345 43.576C116.366 43.5547 116.419 43.544 116.505 43.544C116.569 43.544 116.633 43.5493 116.697 43.56C116.761 43.5707 116.803 43.5867 116.825 43.608C116.974 43.416 117.15 43.32 117.353 43.32C117.417 43.32 117.481 43.336 117.545 43.368V43.32C117.545 43.1387 117.582 43.0107 117.657 42.936C117.55 42.904 117.433 42.8133 117.305 42.664C117.187 42.504 117.118 42.36 117.097 42.232C116.926 42.1573 116.809 42.0347 116.745 41.864C116.617 41.96 116.467 42.008 116.297 42.008C116.179 42.008 116.067 41.976 115.961 41.912C115.779 41.9653 115.662 41.9867 115.609 41.976C115.459 42.0827 115.294 42.136 115.113 42.136C114.953 42.3493 114.766 42.4453 114.553 42.424C114.457 42.5947 114.323 42.744 114.153 42.872C113.993 43 113.827 43.064 113.657 43.064C113.465 43.064 113.31 42.9733 113.193 42.792ZM114.073 46.36C114.201 46.488 114.265 46.6107 114.265 46.728C114.265 46.8133 114.243 46.92 114.201 47.048C114.243 47.048 114.302 47.0747 114.377 47.128C114.462 47.1707 114.51 47.2187 114.521 47.272C114.606 47.24 114.713 47.224 114.841 47.224C115.075 47.224 115.23 47.2773 115.305 47.384C115.422 47.3413 115.545 47.32 115.673 47.32C115.875 47.32 116.035 47.3787 116.153 47.496C116.238 47.4107 116.377 47.3413 116.569 47.288C116.771 47.2347 116.953 47.208 117.113 47.208C117.209 47.016 117.379 46.904 117.625 46.872C117.646 46.7973 117.705 46.7013 117.801 46.584C117.758 46.52 117.721 46.4347 117.689 46.328C117.657 46.2213 117.641 46.1147 117.641 46.008C117.641 45.784 117.694 45.6187 117.801 45.512C117.683 45.3627 117.625 45.1867 117.625 44.984C117.625 44.8453 117.646 44.728 117.689 44.632C117.603 44.6853 117.507 44.712 117.401 44.712C117.305 44.712 117.225 44.6747 117.161 44.6C117.065 44.696 116.931 44.744 116.761 44.744C116.654 44.744 116.547 44.7173 116.441 44.664C116.323 44.7813 116.179 44.84 116.009 44.84C115.955 44.84 115.875 44.8187 115.769 44.776C115.609 44.936 115.465 44.984 115.337 44.92C115.273 45.0693 115.187 45.1707 115.081 45.224C114.985 45.2773 114.846 45.304 114.664 45.304C114.622 45.4213 114.547 45.5173 114.441 45.592C114.345 45.6667 114.243 45.6933 114.137 45.672C114.19 45.7467 114.217 45.832 114.217 45.928C114.217 46.088 114.169 46.232 114.073 46.36ZM125.318 48.648C125.222 48.7653 125.094 48.856 124.934 48.92C124.774 48.9733 124.609 49 124.438 49C124.225 49 124.075 48.9627 123.99 48.888C123.915 48.92 123.835 48.936 123.75 48.936C123.547 48.936 123.377 48.8667 123.238 48.728C123.11 48.7813 122.998 48.808 122.902 48.808C122.731 48.808 122.561 48.7653 122.39 48.68C122.23 48.584 122.118 48.472 122.054 48.344C121.851 48.3653 121.649 48.3067 121.446 48.168C121.254 48.0187 121.142 47.848 121.11 47.656C120.79 47.5173 120.571 47.144 120.454 46.536C120.39 46.4827 120.342 46.4027 120.31 46.296C120.278 46.1893 120.262 46.0827 120.262 45.976C120.262 45.9013 120.267 45.848 120.278 45.816C120.097 45.4533 120.006 45.08 120.006 44.696C120.006 44.344 120.081 44.056 120.23 43.832C120.209 43.7253 120.198 43.6453 120.198 43.592C120.198 43.4107 120.241 43.24 120.326 43.08C120.411 42.9093 120.518 42.7867 120.646 42.712C120.625 42.6587 120.614 42.584 120.614 42.488C120.614 42.3173 120.667 42.1627 120.774 42.024C120.891 41.8747 121.003 41.784 121.11 41.752C121.153 41.6027 121.254 41.464 121.414 41.336C121.585 41.1973 121.761 41.1333 121.942 41.144C122.155 40.824 122.369 40.68 122.582 40.712C122.678 40.584 122.806 40.4933 122.966 40.44C123.137 40.3867 123.291 40.3653 123.43 40.376C123.537 40.3013 123.654 40.264 123.782 40.264C123.91 40.264 124.038 40.296 124.166 40.36C124.251 40.296 124.369 40.264 124.518 40.264C124.625 40.264 124.726 40.28 124.822 40.312C124.918 40.344 124.982 40.3813 125.014 40.424C125.099 40.4027 125.19 40.424 125.286 40.488C125.382 40.5413 125.441 40.6107 125.462 40.696C125.643 40.696 125.798 40.7547 125.926 40.872C126.065 40.9787 126.166 41.1067 126.23 41.256C126.305 41.3947 126.337 41.5013 126.326 41.576C126.507 41.6613 126.635 41.8 126.71 41.992C126.785 42.1627 126.822 42.312 126.822 42.44C126.822 42.6533 126.742 42.8187 126.582 42.936C126.475 43.0107 126.363 43.048 126.246 43.048C126.054 43.048 125.867 42.968 125.686 42.808C125.515 42.648 125.403 42.4507 125.35 42.216C125.211 42.1947 125.078 42.1467 124.95 42.072C124.822 41.9867 124.721 41.896 124.646 41.8C124.614 41.8107 124.534 41.816 124.406 41.816C124.289 41.816 124.209 41.8107 124.166 41.8C124.07 41.896 123.963 41.944 123.846 41.944C123.729 41.944 123.617 41.9067 123.51 41.832C123.371 42.0453 123.169 42.152 122.902 42.152C122.763 42.344 122.641 42.4933 122.534 42.6C122.427 42.696 122.283 42.7333 122.102 42.712C122.113 42.744 122.118 42.792 122.118 42.856C122.118 42.984 122.086 43.096 122.022 43.192C121.958 43.288 121.883 43.3787 121.798 43.464C121.723 43.5387 121.665 43.5973 121.622 43.64C121.675 43.8 121.702 43.9493 121.702 44.088C121.702 44.3333 121.627 44.6267 121.478 44.968C121.531 45.0427 121.574 45.1493 121.606 45.288C121.649 45.416 121.67 45.544 121.67 45.672C121.67 45.7467 121.665 45.8 121.654 45.832C121.729 45.8853 121.793 45.976 121.846 46.104C121.91 46.232 121.942 46.3547 121.942 46.472C122.209 46.5573 122.427 46.68 122.598 46.84C122.779 47 122.87 47.1493 122.87 47.288C122.987 47.192 123.115 47.144 123.254 47.144C123.382 47.144 123.505 47.176 123.622 47.24C123.75 47.304 123.846 47.3893 123.91 47.496C123.963 47.4853 124.027 47.48 124.102 47.48C124.262 47.48 124.401 47.5333 124.518 47.64C124.561 47.5547 124.667 47.464 124.838 47.368C125.009 47.272 125.147 47.2293 125.254 47.24C125.318 47.1333 125.403 47.0533 125.51 47C125.627 46.9467 125.75 46.92 125.878 46.92C125.963 46.92 126.022 46.9253 126.054 46.936C126.193 46.7653 126.379 46.68 126.614 46.68C126.817 46.68 126.993 46.7493 127.142 46.888C127.291 47.0267 127.366 47.1973 127.366 47.4C127.366 47.6347 127.265 47.832 127.062 47.992C126.87 48.1413 126.651 48.216 126.406 48.216C126.31 48.216 126.241 48.2107 126.198 48.2C126.283 48.2213 126.273 48.2693 126.166 48.344C126.07 48.4187 125.931 48.4933 125.75 48.568C125.569 48.632 125.425 48.6587 125.318 48.648ZM128.867 37.592C128.728 37.656 128.616 37.7467 128.531 37.864C128.446 37.9813 128.403 38.104 128.403 38.232C128.403 38.4027 128.472 38.5733 128.611 38.744C128.59 38.8827 128.664 39.016 128.835 39.144C129.006 39.272 129.192 39.336 129.395 39.336C129.534 39.336 129.656 39.2987 129.763 39.224C130.062 39.064 130.211 38.8613 130.211 38.616C130.211 38.456 130.147 38.2747 130.019 38.072C130.03 37.8587 129.966 37.6933 129.827 37.576C129.699 37.448 129.544 37.384 129.363 37.384C129.16 37.384 128.995 37.4533 128.867 37.592ZM129.907 44.664C129.992 44.696 130.056 44.7973 130.099 44.968C130.152 45.1387 130.179 45.3253 130.179 45.528C130.179 45.7627 130.142 45.9173 130.067 45.992C130.131 46.152 130.163 46.3067 130.163 46.456C130.163 46.648 130.115 46.808 130.019 46.936C130.094 47.1173 130.131 47.3307 130.131 47.576C130.131 47.7787 130.099 47.944 130.035 48.072C130.067 48.168 130.083 48.2587 130.083 48.344C130.083 48.536 130.014 48.6907 129.875 48.808C129.736 48.9147 129.571 48.968 129.379 48.968C129.198 48.968 129.043 48.9147 128.915 48.808C128.787 48.6907 128.728 48.536 128.739 48.344C128.686 48.28 128.643 48.1787 128.611 48.04C128.579 47.9013 128.563 47.7573 128.563 47.608C128.563 47.3307 128.622 47.1493 128.739 47.064C128.654 46.9253 128.611 46.7173 128.611 46.44C128.611 46.1627 128.648 45.96 128.723 45.832C128.68 45.7893 128.648 45.688 128.627 45.528C128.606 45.368 128.595 45.192 128.595 45C128.595 44.8187 128.606 44.6587 128.627 44.52C128.648 44.3707 128.68 44.2747 128.723 44.232C128.659 44.168 128.627 43.992 128.627 43.704C128.627 43.3733 128.664 43.1333 128.739 42.984C128.686 42.8987 128.638 42.7867 128.595 42.648C128.552 42.5093 128.531 42.3813 128.531 42.264C128.531 42.1573 128.542 42.0827 128.563 42.04C128.478 41.7627 128.435 41.5387 128.435 41.368C128.435 41.1867 128.478 41 128.563 40.808C128.542 40.648 128.579 40.5253 128.675 40.44C128.771 40.3547 128.91 40.312 129.091 40.312C129.582 40.312 129.827 40.6107 129.827 41.208C129.923 41.272 129.992 41.3627 130.035 41.48C130.088 41.5867 130.115 41.7093 130.115 41.848C130.115 42.072 130.062 42.264 129.955 42.424C129.998 42.488 130.03 42.584 130.051 42.712C130.083 42.84 130.099 42.968 130.099 43.096C130.099 43.2667 130.072 43.384 130.019 43.448C130.062 43.5013 130.083 43.6133 130.083 43.784C130.083 43.944 130.062 44.1147 130.019 44.296C129.987 44.4773 129.95 44.6 129.907 44.664ZM136.175 48.056C136.153 48.152 136.073 48.232 135.935 48.296C135.796 48.36 135.647 48.392 135.487 48.392C135.412 48.392 135.359 48.3867 135.327 48.376C135.273 48.4613 135.161 48.5467 134.991 48.632C134.82 48.7173 134.671 48.76 134.543 48.76C134.479 48.76 134.42 48.744 134.367 48.712C134.26 48.7333 134.169 48.744 134.095 48.744C133.945 48.744 133.796 48.7173 133.647 48.664C133.508 48.6107 133.401 48.5413 133.327 48.456C133.145 48.4773 132.975 48.456 132.815 48.392C132.665 48.3173 132.58 48.2213 132.559 48.104C132.441 48.1253 132.308 48.0773 132.159 47.96C132.02 47.8427 131.945 47.6827 131.935 47.48C131.775 47.3947 131.657 47.2667 131.583 47.096C131.508 46.9253 131.471 46.744 131.471 46.552C131.471 46.4133 131.487 46.3067 131.519 46.232C131.433 46.1573 131.364 46.0027 131.311 45.768C131.257 45.5227 131.231 45.2667 131.231 45C131.231 44.68 131.268 44.4453 131.343 44.296C131.289 44.1893 131.263 44.0667 131.263 43.928C131.263 43.8107 131.279 43.6987 131.311 43.592C131.353 43.4853 131.412 43.4 131.487 43.336C131.455 43.2827 131.439 43.2347 131.439 43.192C131.439 43.1173 131.465 43.0373 131.519 42.952C131.572 42.8667 131.631 42.8027 131.695 42.76C131.684 42.5893 131.727 42.4347 131.823 42.296C131.929 42.1467 132.036 42.056 132.143 42.024C132.132 41.9173 132.169 41.7893 132.255 41.64C132.34 41.4907 132.452 41.368 132.591 41.272C132.74 41.176 132.889 41.1333 133.039 41.144C133.252 40.8453 133.545 40.696 133.919 40.696C134.079 40.696 134.201 40.7173 134.287 40.76C134.404 40.7067 134.548 40.68 134.719 40.68C134.889 40.68 135.076 40.7227 135.279 40.808C135.343 40.776 135.423 40.76 135.519 40.76C135.625 40.76 135.727 40.7813 135.823 40.824C135.929 40.856 135.999 40.904 136.031 40.968C136.02 40.9253 136.015 40.8613 136.015 40.776C136.015 40.6053 136.057 40.456 136.143 40.328C136.068 40.2 136.031 40.072 136.031 39.944C136.031 39.88 136.036 39.832 136.047 39.8C136.036 39.7467 136.015 39.6773 135.983 39.592C135.951 39.496 135.935 39.416 135.935 39.352C135.935 39.2667 135.956 39.1813 135.999 39.096C135.945 38.9893 135.919 38.8827 135.919 38.776C135.919 38.6587 135.951 38.5467 136.015 38.44C135.94 38.2907 135.903 38.136 135.903 37.976C135.903 37.7627 135.961 37.5707 136.079 37.4C136.207 37.2293 136.377 37.144 136.591 37.144C136.772 37.144 136.927 37.2133 137.055 37.352C137.193 37.48 137.263 37.6293 137.263 37.8C137.263 37.864 137.257 37.912 137.247 37.944C137.407 38.072 137.487 38.248 137.487 38.472C137.487 38.5893 137.449 38.712 137.375 38.84C137.407 38.9147 137.423 38.9947 137.423 39.08C137.423 39.1973 137.396 39.3093 137.343 39.416C137.396 39.5227 137.423 39.6347 137.423 39.752C137.423 39.9013 137.385 40.0293 137.311 40.136C137.417 40.264 137.471 40.3867 137.471 40.504C137.471 40.5893 137.439 40.68 137.375 40.776C137.407 40.84 137.423 40.92 137.423 41.016C137.423 41.0907 137.407 41.1707 137.375 41.256C137.46 41.3733 137.503 41.5013 137.503 41.64C137.503 41.7467 137.476 41.8533 137.423 41.96C137.487 42.0667 137.519 42.1947 137.519 42.344C137.519 42.5893 137.46 42.76 137.343 42.856C137.449 42.984 137.503 43.176 137.503 43.432C137.503 43.5813 137.481 43.7307 137.439 43.88C137.407 44.0293 137.375 44.136 137.343 44.2C137.449 44.36 137.503 44.5627 137.503 44.808C137.503 44.9253 137.476 45.0373 137.423 45.144C137.54 45.2613 137.599 45.4373 137.599 45.672C137.599 45.928 137.545 46.136 137.439 46.296C137.545 46.4347 137.599 46.632 137.599 46.888C137.599 47.0587 137.572 47.2133 137.519 47.352C137.476 47.48 137.417 47.5653 137.343 47.608C137.353 47.6827 137.38 47.7947 137.423 47.944C137.476 48.1787 137.503 48.328 137.503 48.392C137.503 48.5627 137.449 48.7013 137.343 48.808C137.215 48.936 137.065 49 136.895 49C136.756 49 136.628 48.952 136.511 48.856C136.404 48.7493 136.34 48.6107 136.319 48.44C136.265 48.3867 136.228 48.3173 136.207 48.232C136.185 48.136 136.175 48.0773 136.175 48.056ZM134.175 47.432C134.207 47.3573 134.303 47.32 134.463 47.32C134.537 47.32 134.601 47.3253 134.655 47.336C134.708 47.3467 134.751 47.352 134.783 47.352C134.793 47.2773 134.857 47.2133 134.975 47.16C135.103 47.096 135.225 47.064 135.343 47.064C135.417 47.064 135.481 47.08 135.535 47.112C135.524 47.0053 135.545 46.92 135.599 46.856C135.652 46.792 135.721 46.7333 135.807 46.68C135.903 46.616 135.972 46.568 136.015 46.536C135.993 46.4933 135.983 46.3973 135.983 46.248C135.983 45.928 136.02 45.7307 136.095 45.656C136.02 45.5813 135.983 45.432 135.983 45.208C135.983 44.952 136.02 44.728 136.095 44.536C136.031 44.3973 135.999 44.1627 135.999 43.832C135.999 43.512 136.02 43.2987 136.063 43.192C135.967 43 135.919 42.7813 135.919 42.536C135.919 42.344 135.94 42.2053 135.983 42.12C135.919 42.1627 135.823 42.168 135.695 42.136C135.577 42.0933 135.481 42.0347 135.407 41.96C135.364 42.024 135.279 42.056 135.151 42.056C135.065 42.056 134.98 42.0453 134.895 42.024C134.809 41.992 134.751 41.96 134.719 41.928C134.548 42.0027 134.383 42.04 134.223 42.04C134.18 42.04 134.116 42.0293 134.031 42.008C133.892 42.1573 133.785 42.264 133.711 42.328C133.636 42.392 133.535 42.4293 133.407 42.44C133.375 42.5147 133.343 42.6053 133.311 42.712C133.279 42.808 133.241 42.888 133.199 42.952C133.156 43.016 133.081 43.0693 132.975 43.112C132.953 43.2507 132.9 43.3627 132.815 43.448C132.825 43.4907 132.831 43.5493 132.831 43.624C132.831 43.7307 132.804 43.848 132.751 43.976C132.783 44.0507 132.799 44.216 132.799 44.472C132.799 44.9627 132.756 45.256 132.671 45.352C132.681 45.3947 132.719 45.496 132.783 45.656C132.847 45.816 132.879 45.9707 132.879 46.12C132.879 46.2373 132.857 46.344 132.815 46.44C133.028 46.5253 133.161 46.6747 133.215 46.888C133.321 46.92 133.423 46.9893 133.519 47.096C133.775 47.0853 133.993 47.1973 134.175 47.432ZM139.555 37.592C139.416 37.656 139.304 37.7467 139.219 37.864C139.133 37.9813 139.09 38.104 139.09 38.232C139.09 38.4027 139.16 38.5733 139.299 38.744C139.277 38.8827 139.352 39.016 139.523 39.144C139.693 39.272 139.88 39.336 140.083 39.336C140.221 39.336 140.344 39.2987 140.451 39.224C140.749 39.064 140.899 38.8613 140.899 38.616C140.899 38.456 140.835 38.2747 140.707 38.072C140.717 37.8587 140.653 37.6933 140.515 37.576C140.387 37.448 140.232 37.384 140.051 37.384C139.848 37.384 139.683 37.4533 139.555 37.592ZM140.595 44.664C140.68 44.696 140.744 44.7973 140.787 44.968C140.84 45.1387 140.867 45.3253 140.867 45.528C140.867 45.7627 140.829 45.9173 140.755 45.992C140.819 46.152 140.851 46.3067 140.851 46.456C140.851 46.648 140.803 46.808 140.707 46.936C140.781 47.1173 140.819 47.3307 140.819 47.576C140.819 47.7787 140.787 47.944 140.723 48.072C140.755 48.168 140.771 48.2587 140.771 48.344C140.771 48.536 140.701 48.6907 140.562 48.808C140.424 48.9147 140.259 48.968 140.067 48.968C139.885 48.968 139.731 48.9147 139.603 48.808C139.475 48.6907 139.416 48.536 139.427 48.344C139.373 48.28 139.331 48.1787 139.299 48.04C139.267 47.9013 139.251 47.7573 139.251 47.608C139.251 47.3307 139.309 47.1493 139.427 47.064C139.341 46.9253 139.299 46.7173 139.299 46.44C139.299 46.1627 139.336 45.96 139.411 45.832C139.368 45.7893 139.336 45.688 139.315 45.528C139.293 45.368 139.283 45.192 139.283 45C139.283 44.8187 139.293 44.6587 139.315 44.52C139.336 44.3707 139.368 44.2747 139.411 44.232C139.347 44.168 139.315 43.992 139.315 43.704C139.315 43.3733 139.352 43.1333 139.427 42.984C139.373 42.8987 139.325 42.7867 139.283 42.648C139.24 42.5093 139.219 42.3813 139.219 42.264C139.219 42.1573 139.229 42.0827 139.251 42.04C139.165 41.7627 139.123 41.5387 139.123 41.368C139.123 41.1867 139.165 41 139.251 40.808C139.229 40.648 139.267 40.5253 139.363 40.44C139.459 40.3547 139.597 40.312 139.779 40.312C140.269 40.312 140.515 40.6107 140.515 41.208C140.611 41.272 140.68 41.3627 140.723 41.48C140.776 41.5867 140.803 41.7093 140.803 41.848C140.803 42.072 140.749 42.264 140.643 42.424C140.685 42.488 140.717 42.584 140.739 42.712C140.771 42.84 140.787 42.968 140.787 43.096C140.787 43.2667 140.76 43.384 140.707 43.448C140.749 43.5013 140.771 43.6133 140.771 43.784C140.771 43.944 140.749 44.1147 140.707 44.296C140.675 44.4773 140.637 44.6 140.595 44.664ZM146.846 47.624C146.857 47.5707 146.884 47.5333 146.926 47.512C146.98 47.4907 147.038 47.4747 147.102 47.464C147.145 47.4533 147.198 47.448 147.262 47.448C147.444 47.448 147.588 47.5173 147.694 47.656C147.812 47.784 147.87 47.9387 147.87 48.12C147.87 48.2587 147.833 48.3813 147.758 48.488C147.684 48.584 147.572 48.6533 147.422 48.696C147.198 48.888 146.932 48.968 146.622 48.936C146.537 49.0107 146.425 49.048 146.286 49.048C146.094 49.048 145.918 48.9787 145.758 48.84C145.652 48.8187 145.524 48.7653 145.374 48.68C145.225 48.584 145.15 48.4987 145.15 48.424C145.001 48.4027 144.846 48.3173 144.686 48.168C144.537 48.0187 144.484 47.8373 144.526 47.624C144.409 47.496 144.34 47.3627 144.318 47.224C144.19 47.16 144.094 47.064 144.03 46.936C143.977 46.808 143.961 46.6747 143.982 46.536C143.844 46.408 143.774 46.216 143.774 45.96C143.774 45.864 143.785 45.7413 143.806 45.592C143.657 45.4747 143.582 45.3147 143.582 45.112C143.582 44.9307 143.641 44.7813 143.758 44.664C143.63 44.536 143.566 44.3707 143.566 44.168C143.566 44.0933 143.588 44.0027 143.63 43.896C143.566 43.768 143.534 43.64 143.534 43.512C143.534 43.3413 143.582 43.208 143.678 43.112C143.614 42.984 143.582 42.8453 143.582 42.696C143.582 42.568 143.598 42.456 143.63 42.36C143.673 42.2533 143.721 42.1733 143.774 42.12C143.657 41.9813 143.598 41.832 143.598 41.672C143.598 41.5867 143.614 41.496 143.646 41.4C143.55 41.432 143.444 41.448 143.326 41.448C143.145 41.448 143.012 41.4107 142.926 41.336C142.798 41.368 142.686 41.384 142.59 41.384C142.398 41.384 142.201 41.3253 141.998 41.208C141.892 41.272 141.78 41.304 141.662 41.304C141.492 41.304 141.353 41.2347 141.246 41.096C141.129 40.9467 141.07 40.7813 141.07 40.6C141.07 40.44 141.124 40.3067 141.23 40.2C141.326 40.0827 141.47 40.0187 141.662 40.008C141.79 39.9547 141.908 39.928 142.014 39.928C142.228 39.928 142.414 39.9813 142.574 40.088C142.713 40.0347 142.868 40.008 143.038 40.008C143.188 40.008 143.305 40.0347 143.39 40.088C143.401 40.0453 143.444 40.008 143.518 39.976C143.604 39.9333 143.673 39.9173 143.726 39.928C143.684 39.832 143.662 39.704 143.662 39.544C143.662 39.352 143.705 39.2507 143.79 39.24C143.716 39.1333 143.678 38.9787 143.678 38.776C143.678 38.4987 143.748 38.3067 143.886 38.2C143.876 37.9867 143.918 37.8267 144.014 37.72C144.11 37.6133 144.233 37.56 144.382 37.56C144.532 37.56 144.67 37.6133 144.798 37.72C144.926 37.816 144.99 37.944 144.99 38.104C144.99 38.2107 144.948 38.3333 144.862 38.472C144.969 38.568 145.022 38.728 145.022 38.952C145.022 39.048 145.006 39.1493 144.974 39.256C144.953 39.352 144.921 39.4267 144.878 39.48C144.942 39.5227 144.974 39.608 144.974 39.736C144.974 39.8427 144.948 39.9867 144.894 40.168C144.99 40.136 145.092 40.12 145.198 40.12C145.358 40.12 145.481 40.1573 145.566 40.232C145.673 40.1787 145.758 40.152 145.822 40.152C145.929 40.152 146.014 40.1947 146.078 40.28C146.153 40.2267 146.244 40.2 146.35 40.2C146.5 40.2 146.617 40.2587 146.702 40.376C146.905 40.376 147.054 40.424 147.15 40.52C147.257 40.6053 147.31 40.7173 147.31 40.856C147.31 41.0267 147.241 41.192 147.102 41.352C146.974 41.5013 146.825 41.576 146.654 41.576C146.558 41.576 146.462 41.544 146.366 41.48C146.26 41.5653 146.121 41.608 145.95 41.608C145.79 41.608 145.657 41.5707 145.55 41.496C145.412 41.5493 145.31 41.576 145.246 41.576C145.161 41.576 145.06 41.5387 144.942 41.464C145.038 41.592 145.086 41.7307 145.086 41.88C145.086 42.04 145.022 42.184 144.894 42.312C144.99 42.44 145.038 42.6 145.038 42.792C145.038 42.9627 144.99 43.1227 144.894 43.272C145.022 43.3573 145.086 43.496 145.086 43.688C145.086 43.848 145.038 43.9867 144.942 44.104C145.049 44.2213 145.102 44.4293 145.102 44.728C145.102 44.856 145.086 44.9627 145.054 45.048C145.129 45.1547 145.166 45.2667 145.166 45.384C145.166 45.448 145.15 45.5333 145.118 45.64C145.097 45.736 145.081 45.816 145.07 45.88C145.198 46.0293 145.262 46.1733 145.262 46.312C145.444 46.4507 145.534 46.616 145.534 46.808C145.748 46.9253 145.854 47.1227 145.854 47.4C145.876 47.432 145.897 47.4533 145.918 47.464C145.94 47.4747 145.956 47.4853 145.966 47.496L146.078 47.48C146.238 47.48 146.366 47.528 146.462 47.624C146.548 47.6027 146.617 47.592 146.67 47.592C146.702 47.592 146.761 47.6027 146.846 47.624ZM153.539 46.056C153.497 46.1947 153.406 46.3173 153.267 46.424C153.289 46.8507 153.177 47.1173 152.931 47.224C152.91 47.3947 152.835 47.576 152.707 47.768C152.579 47.96 152.441 48.088 152.291 48.152C152.291 48.1947 152.281 48.2853 152.259 48.424C152.249 48.552 152.217 48.6587 152.163 48.744C152.121 48.8293 152.051 48.9147 151.955 49C152.009 49.3733 151.833 49.7467 151.427 50.12C151.417 50.376 151.331 50.5787 151.171 50.728C151.022 50.888 150.841 50.984 150.627 51.016C150.606 51.1653 150.494 51.3093 150.291 51.448C150.099 51.5973 149.913 51.672 149.731 51.672C149.689 51.7893 149.513 51.9067 149.203 52.024C148.905 52.152 148.707 52.184 148.611 52.12C148.355 52.1413 148.153 52.0773 148.003 51.928C147.854 51.7787 147.779 51.6027 147.779 51.4C147.779 51.2507 147.822 51.1227 147.907 51.016C147.993 50.9093 148.115 50.856 148.275 50.856C148.329 50.856 148.371 50.8613 148.403 50.872C148.702 50.648 148.942 50.536 149.123 50.536C149.187 50.536 149.235 50.5413 149.267 50.552C149.289 50.424 149.363 50.3013 149.491 50.184C149.619 50.0773 149.769 49.992 149.939 49.928C149.939 49.8213 149.982 49.7093 150.067 49.592C150.153 49.4747 150.254 49.3787 150.371 49.304C150.35 49.24 150.339 49.192 150.339 49.16C150.339 49 150.409 48.824 150.547 48.632C150.686 48.4293 150.825 48.3013 150.963 48.248C150.718 48.12 150.595 47.9227 150.595 47.656C150.489 47.6453 150.387 47.5707 150.291 47.432C150.206 47.2933 150.163 47.144 150.163 46.984C150.163 46.888 150.19 46.7973 150.243 46.712C150.083 46.6587 149.961 46.5733 149.875 46.456C149.801 46.3387 149.763 46.2 149.763 46.04C149.763 45.9227 149.785 45.8053 149.827 45.688C149.678 45.6027 149.561 45.512 149.475 45.416C149.401 45.32 149.369 45.208 149.379 45.08C149.219 44.9733 149.139 44.808 149.139 44.584C149.139 44.4773 149.155 44.376 149.187 44.28C148.921 43.992 148.787 43.6827 148.787 43.352C148.787 43.256 148.793 43.1813 148.803 43.128C148.654 43.0533 148.542 42.952 148.467 42.824C148.393 42.6853 148.355 42.5307 148.355 42.36C148.355 42.2 148.387 42.0507 148.451 41.912C148.174 41.72 148.035 41.5067 148.035 41.272C148.035 41.0053 148.153 40.792 148.387 40.632C148.483 40.568 148.59 40.536 148.707 40.536C148.867 40.536 149.011 40.5947 149.139 40.712C149.278 40.8293 149.379 40.9733 149.443 41.144C149.539 41.2293 149.619 41.3627 149.683 41.544C149.747 41.7253 149.779 41.896 149.779 42.056C149.779 42.152 149.774 42.216 149.763 42.248C150.083 42.5893 150.243 42.92 150.243 43.24C150.243 43.2827 150.233 43.3573 150.211 43.464C150.35 43.5387 150.451 43.6507 150.515 43.8C150.579 43.9387 150.601 44.0827 150.579 44.232C150.686 44.3173 150.761 44.424 150.803 44.552C150.857 44.68 150.873 44.808 150.851 44.936C150.947 44.936 151.033 45.0107 151.107 45.16C151.193 45.2987 151.225 45.4427 151.203 45.592C151.342 45.6667 151.433 45.768 151.475 45.896C151.518 46.0133 151.529 46.1573 151.507 46.328C151.646 46.3707 151.715 46.504 151.715 46.728C151.747 46.5467 151.785 46.4133 151.827 46.328C151.87 46.2427 151.934 46.152 152.019 46.056C151.998 45.9493 151.987 45.88 151.987 45.848C151.987 45.7307 152.009 45.64 152.051 45.576C152.094 45.5013 152.153 45.4587 152.227 45.448C152.185 45.2453 152.238 45.048 152.387 44.856C152.355 44.792 152.339 44.728 152.339 44.664C152.339 44.5893 152.371 44.5093 152.435 44.424C152.51 44.328 152.558 44.264 152.579 44.232C152.515 44.04 152.483 43.88 152.483 43.752C152.483 43.6453 152.505 43.544 152.547 43.448C152.59 43.352 152.659 43.2347 152.755 43.096C152.691 42.968 152.659 42.776 152.659 42.52C152.659 42.1787 152.729 41.8693 152.867 41.592C152.825 41.4427 152.803 41.3253 152.803 41.24C152.803 41.112 152.835 41 152.899 40.904C152.899 40.648 152.979 40.4453 153.139 40.296C153.299 40.1467 153.481 40.072 153.683 40.072C153.854 40.072 153.998 40.136 154.115 40.264C154.243 40.3813 154.302 40.552 154.291 40.776C154.366 40.9253 154.403 41.1067 154.403 41.32C154.403 41.704 154.313 42.04 154.131 42.328C154.174 42.4667 154.195 42.616 154.195 42.776C154.195 43.0427 154.099 43.2987 153.907 43.544C153.918 43.6293 153.939 43.7307 153.971 43.848C154.003 43.9653 154.019 44.0613 154.019 44.136C154.019 44.296 153.966 44.4347 153.859 44.552C153.913 44.7013 153.801 45.016 153.523 45.496C153.566 45.624 153.587 45.7253 153.587 45.8C153.587 45.8853 153.571 45.9707 153.539 46.056Z';

  var dataset04VAcidity = 'M183.323 26.984C183.344 27.0907 183.355 27.1813 183.355 27.256C183.355 27.4693 183.307 27.6773 183.211 27.88C183.125 28.0827 183.029 28.2107 182.923 28.264C182.859 28.5093 182.763 28.696 182.635 28.824C182.507 28.9413 182.363 29 182.203 29C181.989 29 181.803 28.904 181.643 28.712C181.429 28.6373 181.323 28.4933 181.323 28.28C181.323 28.184 181.339 28.0987 181.371 28.024C181.296 28.024 181.205 27.96 181.099 27.832C181.003 27.704 180.955 27.5707 180.955 27.432C180.955 27.368 180.971 27.304 181.003 27.24C180.971 27.1867 180.917 27.1173 180.843 27.032C180.768 26.936 180.725 26.8347 180.715 26.728C180.597 26.6853 180.507 26.616 180.443 26.52C180.379 26.4133 180.347 26.296 180.347 26.168C180.347 26.072 180.357 25.9973 180.379 25.944C180.272 25.8373 180.181 25.6827 180.107 25.48C180.032 25.2667 180 25.0853 180.011 24.936C179.925 24.872 179.856 24.792 179.803 24.696C179.76 24.6 179.739 24.504 179.739 24.408C179.739 24.344 179.744 24.296 179.755 24.264C179.595 24.2213 179.451 24.1147 179.323 23.944C179.195 23.7627 179.136 23.5493 179.147 23.304C179.029 23.2293 178.949 23.1707 178.907 23.128C178.875 23.0747 178.859 23.0107 178.859 22.936L178.875 22.68C178.715 22.552 178.587 22.4187 178.491 22.28C178.395 22.1307 178.352 21.9387 178.363 21.704C178.235 21.48 178.171 21.2933 178.171 21.144C178.171 20.9627 178.256 20.792 178.427 20.632C178.565 20.504 178.715 20.44 178.875 20.44C179.067 20.44 179.227 20.52 179.355 20.68C179.493 20.8293 179.552 20.984 179.531 21.144C179.648 21.144 179.739 21.2027 179.803 21.32C179.867 21.4373 179.899 21.5653 179.899 21.704C179.899 21.768 179.893 21.816 179.883 21.848C180.064 22.0293 180.155 22.2213 180.155 22.424C180.155 22.4987 180.139 22.568 180.107 22.632C180.309 22.664 180.453 22.7653 180.539 22.936C180.624 23.1067 180.651 23.288 180.619 23.48C180.917 23.6187 181.045 23.8427 181.003 24.152C181.141 24.2587 181.227 24.376 181.259 24.504C181.291 24.632 181.312 24.8027 181.323 25.016C181.44 25.1013 181.547 25.2187 181.643 25.368C181.739 25.5173 181.771 25.6827 181.739 25.864C181.899 26.024 181.968 26.2 181.947 26.392C181.979 26.4133 182.016 26.456 182.059 26.52C182.069 26.3493 182.101 26.216 182.155 26.12C182.208 26.024 182.277 25.9227 182.363 25.816C182.341 25.752 182.352 25.672 182.395 25.576C182.437 25.48 182.501 25.3947 182.587 25.32C182.544 25.2453 182.523 25.16 182.523 25.064C182.523 24.8827 182.587 24.7547 182.715 24.68C182.683 24.616 182.667 24.5253 182.667 24.408C182.667 24.2907 182.688 24.168 182.731 24.04C182.773 23.912 182.837 23.8 182.923 23.704C182.912 23.6613 182.907 23.5973 182.907 23.512C182.907 23.256 182.987 23.048 183.147 22.888C183.115 22.824 183.099 22.7333 183.099 22.616C183.099 22.392 183.173 22.2107 183.323 22.072C183.28 21.9547 183.259 21.832 183.259 21.704C183.259 21.5227 183.291 21.3467 183.355 21.176C183.419 21.0053 183.488 20.8827 183.563 20.808C183.605 20.6693 183.68 20.5627 183.787 20.488C183.893 20.4133 184.005 20.376 184.123 20.376C184.293 20.376 184.448 20.44 184.587 20.568C184.736 20.6853 184.811 20.8347 184.811 21.016C184.811 21.1227 184.784 21.224 184.731 21.32C184.773 21.3947 184.795 21.4853 184.795 21.592C184.795 21.7413 184.763 21.8907 184.699 22.04C184.635 22.1787 184.549 22.2853 184.443 22.36C184.453 22.4347 184.459 22.5413 184.459 22.68C184.459 22.9253 184.4 23.1333 184.283 23.304C184.304 23.3893 184.315 23.4853 184.315 23.592C184.315 23.7627 184.288 23.928 184.235 24.088C184.181 24.248 184.091 24.3707 183.963 24.456C183.995 24.552 184.011 24.664 184.011 24.792C184.011 25.0907 183.936 25.3093 183.787 25.448C183.797 25.48 183.803 25.528 183.803 25.592C183.803 25.72 183.781 25.848 183.739 25.976C183.696 26.0933 183.637 26.1947 183.563 26.28C183.584 26.3867 183.595 26.4613 183.595 26.504C183.595 26.6 183.573 26.68 183.531 26.744C183.499 26.7973 183.456 26.8507 183.403 26.904C183.36 26.9467 183.333 26.9733 183.323 26.984ZM190.542 28.808C190.414 28.936 190.217 29 189.95 29C189.747 29 189.582 28.968 189.454 28.904C189.262 28.9467 189.091 28.968 188.942 28.968C188.526 28.968 188.227 28.8613 188.046 28.648C188.003 28.6587 187.945 28.664 187.87 28.664C187.625 28.664 187.438 28.552 187.31 28.328C187.203 28.3387 187.065 28.2853 186.894 28.168C186.734 28.04 186.665 27.9173 186.686 27.8C186.515 27.7573 186.371 27.656 186.254 27.496C186.147 27.3253 186.099 27.1333 186.11 26.92C185.993 26.8773 185.902 26.792 185.838 26.664C185.774 26.536 185.742 26.392 185.742 26.232C185.742 26.0613 185.769 25.9387 185.822 25.864C185.705 25.6827 185.646 25.4747 185.646 25.24C185.646 24.9947 185.721 24.7973 185.87 24.648C185.753 24.5627 185.694 24.4347 185.694 24.264C185.694 24.1573 185.721 24.0507 185.774 23.944C185.827 23.8373 185.897 23.7627 185.982 23.72C185.961 23.5707 185.977 23.432 186.03 23.304C186.094 23.1653 186.179 23.064 186.286 23C186.265 22.968 186.254 22.92 186.254 22.856C186.254 22.76 186.286 22.664 186.35 22.568C186.425 22.472 186.505 22.4133 186.59 22.392C186.579 22.36 186.574 22.3173 186.574 22.264C186.574 22.04 186.659 21.848 186.83 21.688C187.001 21.5173 187.166 21.4427 187.326 21.464C187.326 21.3147 187.39 21.192 187.518 21.096C187.657 20.9893 187.833 20.936 188.046 20.936C188.142 20.936 188.217 20.9413 188.27 20.952C188.345 20.792 188.473 20.664 188.654 20.568C188.835 20.4613 189.022 20.408 189.214 20.408C189.342 20.408 189.449 20.4347 189.534 20.488C189.683 20.36 189.87 20.296 190.094 20.296C190.275 20.296 190.435 20.3387 190.574 20.424C190.723 20.5093 190.814 20.6267 190.846 20.776C191.017 20.776 191.198 20.84 191.39 20.968C191.582 21.0853 191.694 21.208 191.726 21.336C191.982 21.4107 192.227 21.576 192.462 21.832C192.707 22.0773 192.83 22.328 192.83 22.584C192.83 22.6267 192.819 22.6907 192.798 22.776C193.257 22.872 193.465 23.336 193.422 24.168C193.518 24.328 193.566 24.4987 193.566 24.68C193.566 24.8933 193.497 25.1067 193.358 25.32C193.39 25.416 193.406 25.5067 193.406 25.592C193.406 25.72 193.379 25.8427 193.326 25.96C193.273 26.0773 193.203 26.168 193.118 26.232C193.129 26.4027 193.097 26.5413 193.022 26.648C192.958 26.7547 192.835 26.8987 192.654 27.08C192.665 27.1227 192.67 27.1867 192.67 27.272C192.67 27.592 192.489 27.8 192.126 27.896C192.094 28.0667 192.003 28.2053 191.854 28.312C191.715 28.4187 191.545 28.472 191.342 28.472C191.171 28.7067 190.963 28.824 190.718 28.824C190.643 28.824 190.585 28.8187 190.542 28.808ZM189.038 27.688C189.123 27.6133 189.267 27.576 189.47 27.576C189.619 27.576 189.699 27.5973 189.71 27.64C189.795 27.544 189.902 27.4693 190.03 27.416C190.158 27.3627 190.275 27.3413 190.382 27.352C190.563 27.1707 190.761 27.08 190.974 27.08C191.049 27.08 191.102 27.0853 191.134 27.096C191.123 27 191.15 26.9093 191.214 26.824C191.278 26.728 191.353 26.664 191.438 26.632C191.438 26.4933 191.47 26.376 191.534 26.28C191.609 26.1733 191.699 26.0933 191.806 26.04C191.806 25.8267 191.849 25.656 191.934 25.528C191.902 25.4427 191.886 25.3573 191.886 25.272C191.886 25.1547 191.913 25.0427 191.966 24.936C192.019 24.8187 192.094 24.7227 192.19 24.648C192.083 24.552 192.03 24.4347 192.03 24.296C192.03 24.168 192.067 24.04 192.142 23.912C191.929 23.784 191.785 23.6613 191.71 23.544C191.646 23.416 191.614 23.1867 191.614 22.856C191.518 22.8667 191.417 22.8133 191.31 22.696C191.214 22.5787 191.155 22.4453 191.134 22.296C191.017 22.328 190.873 22.296 190.702 22.2C190.542 22.0933 190.462 21.96 190.462 21.8C190.377 21.8427 190.275 21.864 190.158 21.864C189.934 21.864 189.753 21.784 189.614 21.624C189.497 21.7413 189.342 21.8373 189.15 21.912C188.969 21.976 188.809 21.9973 188.67 21.976C188.659 22.0827 188.563 22.2107 188.382 22.36C188.211 22.4987 188.057 22.5893 187.918 22.632C187.95 22.696 187.966 22.7707 187.966 22.856C187.966 22.9627 187.939 23.0693 187.886 23.176C187.833 23.2827 187.758 23.3733 187.662 23.448C187.673 23.5973 187.635 23.7413 187.55 23.88C187.475 24.0187 187.369 24.1147 187.23 24.168C187.251 24.2533 187.262 24.3227 187.262 24.376C187.262 24.5253 187.225 24.6427 187.15 24.728C187.182 24.8027 187.198 24.8773 187.198 24.952C187.198 25.0693 187.139 25.1973 187.022 25.336C187.289 25.5173 187.422 25.7787 187.422 26.12C187.422 26.3013 187.39 26.456 187.326 26.584C187.433 26.5947 187.507 26.6267 187.55 26.68C187.593 26.7333 187.63 26.8187 187.662 26.936C187.929 26.968 188.126 27.096 188.254 27.32C188.371 27.32 188.515 27.3573 188.686 27.432C188.867 27.5067 188.985 27.592 189.038 27.688ZM196.64 27C196.746 27.1173 196.8 27.2987 196.8 27.544C196.8 27.704 196.773 27.8587 196.72 28.008C196.677 28.1467 196.618 28.248 196.544 28.312C196.576 28.5147 196.522 28.68 196.384 28.808C196.245 28.936 196.08 29 195.888 29C195.76 29 195.637 28.968 195.52 28.904C195.402 28.84 195.317 28.7333 195.264 28.584C195.21 28.4347 195.184 28.2747 195.184 28.104C195.184 27.8693 195.221 27.6827 195.296 27.544C195.242 27.448 195.216 27.3093 195.216 27.128C195.216 26.9253 195.248 26.7173 195.312 26.504C195.237 26.4187 195.2 26.264 195.2 26.04C195.2 25.752 195.242 25.5387 195.328 25.4C195.264 25.2507 195.232 25.1067 195.232 24.968C195.232 24.776 195.28 24.584 195.376 24.392C195.29 24.168 195.248 23.9653 195.248 23.784C195.248 23.6347 195.28 23.464 195.344 23.272C195.237 23.1547 195.184 23.0053 195.184 22.824C195.184 22.7493 195.189 22.696 195.2 22.664C195.082 22.5253 195.024 22.3653 195.024 22.184C195.024 22.0667 195.056 21.9547 195.12 21.848C195.045 21.6773 195.008 21.512 195.008 21.352C195.008 21.096 195.072 20.904 195.2 20.776C195.136 20.6267 195.104 20.4453 195.104 20.232C195.104 20.0613 195.13 19.9387 195.184 19.864C195.13 19.832 195.088 19.7733 195.056 19.688C195.024 19.6027 195.008 19.5067 195.008 19.4C195.008 19.2187 195.05 19.0693 195.136 18.952C195.104 18.8667 195.088 18.7547 195.088 18.616C195.088 18.5093 195.098 18.4133 195.12 18.328C194.992 18.2 194.928 18.0507 194.928 17.88C194.928 17.6987 195.002 17.544 195.152 17.416C195.312 17.2773 195.488 17.208 195.68 17.208C195.808 17.208 195.925 17.2507 196.032 17.336C196.138 17.4107 196.213 17.528 196.256 17.688C196.416 17.7947 196.496 17.96 196.496 18.184C196.496 18.2267 196.485 18.2907 196.464 18.376C196.592 18.504 196.656 18.6693 196.656 18.872C196.656 19.0427 196.602 19.176 196.496 19.272C196.549 19.3147 196.597 19.3893 196.64 19.496C196.682 19.592 196.704 19.6987 196.704 19.816C196.704 20.008 196.634 20.168 196.496 20.296C196.581 20.4133 196.624 20.5573 196.624 20.728C196.624 20.8987 196.592 21.0373 196.528 21.144C196.57 21.1867 196.592 21.2933 196.592 21.464C196.592 21.56 196.581 21.6613 196.56 21.768C196.538 21.8747 196.506 21.9493 196.464 21.992C196.624 22.1307 196.704 22.3067 196.704 22.52C196.704 22.6373 196.682 22.7387 196.64 22.824C196.704 22.92 196.736 23.064 196.736 23.256C196.736 23.5013 196.693 23.6987 196.608 23.848C196.682 23.9973 196.72 24.1947 196.72 24.44C196.72 24.7387 196.672 24.952 196.576 25.08C196.65 25.1867 196.688 25.32 196.688 25.48C196.688 25.6187 196.656 25.784 196.592 25.976C196.688 26.0827 196.736 26.248 196.736 26.472C196.736 26.664 196.704 26.84 196.64 27ZM198.708 22.792C198.623 22.6533 198.58 22.52 198.58 22.392C198.58 22.2 198.644 22.04 198.772 21.912C198.804 21.752 198.879 21.6027 198.996 21.464C199.113 21.3147 199.241 21.2027 199.38 21.128C199.529 21.0427 199.647 21.0107 199.732 21.032C199.807 20.9147 199.956 20.808 200.18 20.712C200.404 20.6053 200.612 20.552 200.804 20.552C200.847 20.552 200.911 20.5627 200.996 20.584C201.113 20.456 201.268 20.392 201.46 20.392C201.609 20.392 201.716 20.4347 201.78 20.52C201.919 20.424 202.1 20.376 202.324 20.376C202.591 20.376 202.825 20.44 203.028 20.568C203.241 20.696 203.364 20.8667 203.396 21.08C203.588 21.144 203.732 21.2453 203.828 21.384C203.935 21.512 203.999 21.6933 204.02 21.928C204.159 22.0667 204.26 22.232 204.324 22.424C204.388 22.6053 204.42 22.792 204.42 22.984C204.42 23.2293 204.377 23.4267 204.292 23.576C204.367 23.6827 204.431 23.8427 204.484 24.056C204.537 24.2693 204.564 24.4773 204.564 24.68C204.564 24.7653 204.553 24.872 204.532 25C204.607 25.16 204.644 25.2667 204.644 25.32C204.644 25.352 204.628 25.4267 204.596 25.544C204.607 25.5867 204.617 25.64 204.628 25.704C204.639 25.7573 204.644 25.8267 204.644 25.912C204.644 26.072 204.585 26.216 204.468 26.344C204.511 26.4613 204.532 26.6053 204.532 26.776C204.532 27 204.479 27.1813 204.372 27.32C204.393 27.3627 204.404 27.432 204.404 27.528C204.404 27.752 204.313 27.9387 204.132 28.088C204.089 28.2373 204.009 28.3547 203.892 28.44C203.775 28.5147 203.647 28.552 203.508 28.552C203.369 28.552 203.257 28.5093 203.172 28.424C202.895 28.5413 202.671 28.6 202.5 28.6C202.415 28.6 202.351 28.5947 202.308 28.584C202.031 28.6693 201.796 28.712 201.604 28.712C201.465 28.712 201.273 28.6853 201.028 28.632C200.879 28.7173 200.735 28.76 200.596 28.76C200.468 28.76 200.351 28.7227 200.244 28.648C200.191 28.6587 200.111 28.664 200.004 28.664C199.588 28.664 199.268 28.4773 199.044 28.104C198.639 27.8693 198.436 27.5173 198.436 27.048C198.436 26.9307 198.441 26.84 198.452 26.776C198.356 26.712 198.308 26.5787 198.308 26.376C198.308 26.2373 198.335 26.1147 198.388 26.008C198.345 25.816 198.324 25.6933 198.324 25.64C198.324 25.3307 198.473 25.0533 198.772 24.808C198.889 24.5627 199.023 24.3973 199.172 24.312C199.332 24.2267 199.529 24.1627 199.764 24.12C199.828 23.9387 199.977 23.816 200.212 23.752C200.447 23.688 200.676 23.6667 200.9 23.688C200.964 23.6453 201.055 23.608 201.172 23.576C201.289 23.5333 201.407 23.512 201.524 23.512C201.652 23.512 201.764 23.5333 201.86 23.576C201.881 23.5547 201.935 23.544 202.02 23.544C202.084 23.544 202.148 23.5493 202.212 23.56C202.276 23.5707 202.319 23.5867 202.34 23.608C202.489 23.416 202.665 23.32 202.868 23.32C202.932 23.32 202.996 23.336 203.06 23.368V23.32C203.06 23.1387 203.097 23.0107 203.172 22.936C203.065 22.904 202.948 22.8133 202.82 22.664C202.703 22.504 202.633 22.36 202.612 22.232C202.441 22.1573 202.324 22.0347 202.26 21.864C202.132 21.96 201.983 22.008 201.812 22.008C201.695 22.008 201.583 21.976 201.476 21.912C201.295 21.9653 201.177 21.9867 201.124 21.976C200.975 22.0827 200.809 22.136 200.628 22.136C200.468 22.3493 200.281 22.4453 200.068 22.424C199.972 22.5947 199.839 22.744 199.668 22.872C199.508 23 199.343 23.064 199.172 23.064C198.98 23.064 198.825 22.9733 198.708 22.792ZM199.588 26.36C199.716 26.488 199.78 26.6107 199.78 26.728C199.78 26.8133 199.759 26.92 199.716 27.048C199.759 27.048 199.817 27.0747 199.892 27.128C199.977 27.1707 200.025 27.2187 200.036 27.272C200.121 27.24 200.228 27.224 200.356 27.224C200.591 27.224 200.745 27.2773 200.82 27.384C200.937 27.3413 201.06 27.32 201.188 27.32C201.391 27.32 201.551 27.3787 201.668 27.496C201.753 27.4107 201.892 27.3413 202.084 27.288C202.287 27.2347 202.468 27.208 202.628 27.208C202.724 27.016 202.895 26.904 203.14 26.872C203.161 26.7973 203.22 26.7013 203.316 26.584C203.273 26.52 203.236 26.4347 203.204 26.328C203.172 26.2213 203.156 26.1147 203.156 26.008C203.156 25.784 203.209 25.6187 203.316 25.512C203.199 25.3627 203.14 25.1867 203.14 24.984C203.14 24.8453 203.161 24.728 203.204 24.632C203.119 24.6853 203.023 24.712 202.916 24.712C202.82 24.712 202.74 24.6747 202.676 24.6C202.58 24.696 202.447 24.744 202.276 24.744C202.169 24.744 202.063 24.7173 201.956 24.664C201.839 24.7813 201.695 24.84 201.524 24.84C201.471 24.84 201.391 24.8187 201.284 24.776C201.124 24.936 200.98 24.984 200.852 24.92C200.788 25.0693 200.703 25.1707 200.596 25.224C200.5 25.2773 200.361 25.304 200.18 25.304C200.137 25.4213 200.063 25.5173 199.956 25.592C199.86 25.6667 199.759 25.6933 199.652 25.672C199.705 25.7467 199.732 25.832 199.732 25.928C199.732 26.088 199.684 26.232 199.588 26.36ZM210.221 27.624C210.232 27.5707 210.259 27.5333 210.301 27.512C210.355 27.4907 210.413 27.4747 210.477 27.464C210.52 27.4533 210.573 27.448 210.637 27.448C210.819 27.448 210.963 27.5173 211.069 27.656C211.187 27.784 211.245 27.9387 211.245 28.12C211.245 28.2587 211.208 28.3813 211.133 28.488C211.059 28.584 210.947 28.6533 210.797 28.696C210.573 28.888 210.307 28.968 209.997 28.936C209.912 29.0107 209.8 29.048 209.661 29.048C209.469 29.048 209.293 28.9787 209.133 28.84C209.027 28.8187 208.899 28.7653 208.749 28.68C208.6 28.584 208.525 28.4987 208.525 28.424C208.376 28.4027 208.221 28.3173 208.061 28.168C207.912 28.0187 207.859 27.8373 207.901 27.624C207.784 27.496 207.715 27.3627 207.693 27.224C207.565 27.16 207.469 27.064 207.405 26.936C207.352 26.808 207.336 26.6747 207.357 26.536C207.219 26.408 207.149 26.216 207.149 25.96C207.149 25.864 207.16 25.7413 207.181 25.592C207.032 25.4747 206.957 25.3147 206.957 25.112C206.957 24.9307 207.016 24.7813 207.133 24.664C207.005 24.536 206.941 24.3707 206.941 24.168C206.941 24.0933 206.963 24.0027 207.005 23.896C206.941 23.768 206.909 23.64 206.909 23.512C206.909 23.3413 206.957 23.208 207.053 23.112C206.989 22.984 206.957 22.8453 206.957 22.696C206.957 22.568 206.973 22.456 207.005 22.36C207.048 22.2533 207.096 22.1733 207.149 22.12C207.032 21.9813 206.973 21.832 206.973 21.672C206.973 21.5867 206.989 21.496 207.021 21.4C206.925 21.432 206.819 21.448 206.701 21.448C206.52 21.448 206.387 21.4107 206.301 21.336C206.173 21.368 206.061 21.384 205.965 21.384C205.773 21.384 205.576 21.3253 205.373 21.208C205.267 21.272 205.155 21.304 205.037 21.304C204.867 21.304 204.728 21.2347 204.621 21.096C204.504 20.9467 204.445 20.7813 204.445 20.6C204.445 20.44 204.499 20.3067 204.605 20.2C204.701 20.0827 204.845 20.0187 205.037 20.008C205.165 19.9547 205.283 19.928 205.389 19.928C205.603 19.928 205.789 19.9813 205.949 20.088C206.088 20.0347 206.243 20.008 206.413 20.008C206.563 20.008 206.68 20.0347 206.765 20.088C206.776 20.0453 206.819 20.008 206.893 19.976C206.979 19.9333 207.048 19.9173 207.101 19.928C207.059 19.832 207.037 19.704 207.037 19.544C207.037 19.352 207.08 19.2507 207.165 19.24C207.091 19.1333 207.053 18.9787 207.053 18.776C207.053 18.4987 207.123 18.3067 207.261 18.2C207.251 17.9867 207.293 17.8267 207.389 17.72C207.485 17.6133 207.608 17.56 207.757 17.56C207.907 17.56 208.045 17.6133 208.173 17.72C208.301 17.816 208.365 17.944 208.365 18.104C208.365 18.2107 208.323 18.3333 208.237 18.472C208.344 18.568 208.397 18.728 208.397 18.952C208.397 19.048 208.381 19.1493 208.349 19.256C208.328 19.352 208.296 19.4267 208.253 19.48C208.317 19.5227 208.349 19.608 208.349 19.736C208.349 19.8427 208.323 19.9867 208.269 20.168C208.365 20.136 208.467 20.12 208.573 20.12C208.733 20.12 208.856 20.1573 208.941 20.232C209.048 20.1787 209.133 20.152 209.197 20.152C209.304 20.152 209.389 20.1947 209.453 20.28C209.528 20.2267 209.619 20.2 209.725 20.2C209.875 20.2 209.992 20.2587 210.077 20.376C210.28 20.376 210.429 20.424 210.525 20.52C210.632 20.6053 210.685 20.7173 210.685 20.856C210.685 21.0267 210.616 21.192 210.477 21.352C210.349 21.5013 210.2 21.576 210.029 21.576C209.933 21.576 209.837 21.544 209.741 21.48C209.635 21.5653 209.496 21.608 209.325 21.608C209.165 21.608 209.032 21.5707 208.925 21.496C208.787 21.5493 208.685 21.576 208.621 21.576C208.536 21.576 208.435 21.5387 208.317 21.464C208.413 21.592 208.461 21.7307 208.461 21.88C208.461 22.04 208.397 22.184 208.269 22.312C208.365 22.44 208.413 22.6 208.413 22.792C208.413 22.9627 208.365 23.1227 208.269 23.272C208.397 23.3573 208.461 23.496 208.461 23.688C208.461 23.848 208.413 23.9867 208.317 24.104C208.424 24.2213 208.477 24.4293 208.477 24.728C208.477 24.856 208.461 24.9627 208.429 25.048C208.504 25.1547 208.541 25.2667 208.541 25.384C208.541 25.448 208.525 25.5333 208.493 25.64C208.472 25.736 208.456 25.816 208.445 25.88C208.573 26.0293 208.637 26.1733 208.637 26.312C208.819 26.4507 208.909 26.616 208.909 26.808C209.123 26.9253 209.229 27.1227 209.229 27.4C209.251 27.432 209.272 27.4533 209.293 27.464C209.315 27.4747 209.331 27.4853 209.341 27.496L209.453 27.48C209.613 27.48 209.741 27.528 209.837 27.624C209.923 27.6027 209.992 27.592 210.045 27.592C210.077 27.592 210.136 27.6027 210.221 27.624ZM212.226 17.592C212.088 17.656 211.976 17.7467 211.89 17.864C211.805 17.9813 211.762 18.104 211.762 18.232C211.762 18.4027 211.832 18.5733 211.97 18.744C211.949 18.8827 212.024 19.016 212.194 19.144C212.365 19.272 212.552 19.336 212.754 19.336C212.893 19.336 213.016 19.2987 213.122 19.224C213.421 19.064 213.57 18.8613 213.57 18.616C213.57 18.456 213.506 18.2747 213.378 18.072C213.389 17.8587 213.325 17.6933 213.186 17.576C213.058 17.448 212.904 17.384 212.722 17.384C212.52 17.384 212.354 17.4533 212.226 17.592ZM213.266 24.664C213.352 24.696 213.416 24.7973 213.458 24.968C213.512 25.1387 213.538 25.3253 213.538 25.528C213.538 25.7627 213.501 25.9173 213.426 25.992C213.49 26.152 213.522 26.3067 213.522 26.456C213.522 26.648 213.474 26.808 213.378 26.936C213.453 27.1173 213.49 27.3307 213.49 27.576C213.49 27.7787 213.458 27.944 213.394 28.072C213.426 28.168 213.442 28.2587 213.442 28.344C213.442 28.536 213.373 28.6907 213.234 28.808C213.096 28.9147 212.93 28.968 212.738 28.968C212.557 28.968 212.402 28.9147 212.274 28.808C212.146 28.6907 212.088 28.536 212.098 28.344C212.045 28.28 212.002 28.1787 211.97 28.04C211.938 27.9013 211.922 27.7573 211.922 27.608C211.922 27.3307 211.981 27.1493 212.098 27.064C212.013 26.9253 211.97 26.7173 211.97 26.44C211.97 26.1627 212.008 25.96 212.082 25.832C212.04 25.7893 212.008 25.688 211.986 25.528C211.965 25.368 211.954 25.192 211.954 25C211.954 24.8187 211.965 24.6587 211.986 24.52C212.008 24.3707 212.04 24.2747 212.082 24.232C212.018 24.168 211.986 23.992 211.986 23.704C211.986 23.3733 212.024 23.1333 212.098 22.984C212.045 22.8987 211.997 22.7867 211.954 22.648C211.912 22.5093 211.89 22.3813 211.89 22.264C211.89 22.1573 211.901 22.0827 211.922 22.04C211.837 21.7627 211.794 21.5387 211.794 21.368C211.794 21.1867 211.837 21 211.922 20.808C211.901 20.648 211.938 20.5253 212.034 20.44C212.13 20.3547 212.269 20.312 212.45 20.312C212.941 20.312 213.186 20.6107 213.186 21.208C213.282 21.272 213.352 21.3627 213.394 21.48C213.448 21.5867 213.474 21.7093 213.474 21.848C213.474 22.072 213.421 22.264 213.314 22.424C213.357 22.488 213.389 22.584 213.41 22.712C213.442 22.84 213.458 22.968 213.458 23.096C213.458 23.2667 213.432 23.384 213.378 23.448C213.421 23.5013 213.442 23.6133 213.442 23.784C213.442 23.944 213.421 24.1147 213.378 24.296C213.346 24.4773 213.309 24.6 213.266 24.664ZM216.702 27C216.809 27.1173 216.862 27.2987 216.862 27.544C216.862 27.704 216.835 27.8587 216.782 28.008C216.739 28.1467 216.681 28.248 216.606 28.312C216.638 28.5147 216.585 28.68 216.446 28.808C216.307 28.936 216.142 29 215.95 29C215.822 29 215.699 28.968 215.582 28.904C215.465 28.84 215.379 28.7333 215.326 28.584C215.273 28.4347 215.246 28.2747 215.246 28.104C215.246 27.8693 215.283 27.6827 215.358 27.544C215.305 27.448 215.278 27.3093 215.278 27.128C215.278 26.9253 215.31 26.7173 215.374 26.504C215.299 26.4187 215.262 26.264 215.262 26.04C215.262 25.752 215.305 25.5387 215.39 25.4C215.326 25.2507 215.294 25.1067 215.294 24.968C215.294 24.776 215.342 24.584 215.438 24.392C215.353 24.168 215.31 23.9653 215.31 23.784C215.31 23.6347 215.342 23.464 215.406 23.272C215.299 23.1547 215.246 23.0053 215.246 22.824C215.246 22.7493 215.251 22.696 215.262 22.664C215.145 22.5253 215.086 22.3653 215.086 22.184C215.086 22.0667 215.118 21.9547 215.182 21.848C215.107 21.6773 215.07 21.512 215.07 21.352C215.07 21.096 215.134 20.904 215.262 20.776C215.198 20.6267 215.166 20.4453 215.166 20.232C215.166 20.0613 215.193 19.9387 215.246 19.864C215.193 19.832 215.15 19.7733 215.118 19.688C215.086 19.6027 215.07 19.5067 215.07 19.4C215.07 19.2187 215.113 19.0693 215.198 18.952C215.166 18.8667 215.15 18.7547 215.15 18.616C215.15 18.5093 215.161 18.4133 215.182 18.328C215.054 18.2 214.99 18.0507 214.99 17.88C214.99 17.6987 215.065 17.544 215.214 17.416C215.374 17.2773 215.55 17.208 215.742 17.208C215.87 17.208 215.987 17.2507 216.094 17.336C216.201 17.4107 216.275 17.528 216.318 17.688C216.478 17.7947 216.558 17.96 216.558 18.184C216.558 18.2267 216.547 18.2907 216.526 18.376C216.654 18.504 216.718 18.6693 216.718 18.872C216.718 19.0427 216.665 19.176 216.558 19.272C216.611 19.3147 216.659 19.3893 216.702 19.496C216.745 19.592 216.766 19.6987 216.766 19.816C216.766 20.008 216.697 20.168 216.558 20.296C216.643 20.4133 216.686 20.5573 216.686 20.728C216.686 20.8987 216.654 21.0373 216.59 21.144C216.633 21.1867 216.654 21.2933 216.654 21.464C216.654 21.56 216.643 21.6613 216.622 21.768C216.601 21.8747 216.569 21.9493 216.526 21.992C216.686 22.1307 216.766 22.3067 216.766 22.52C216.766 22.6373 216.745 22.7387 216.702 22.824C216.766 22.92 216.798 23.064 216.798 23.256C216.798 23.5013 216.755 23.6987 216.67 23.848C216.745 23.9973 216.782 24.1947 216.782 24.44C216.782 24.7387 216.734 24.952 216.638 25.08C216.713 25.1867 216.75 25.32 216.75 25.48C216.75 25.6187 216.718 25.784 216.654 25.976C216.75 26.0827 216.798 26.248 216.798 26.472C216.798 26.664 216.766 26.84 216.702 27ZM225.171 22.744C225.288 22.7973 225.395 22.9253 225.491 23.128C225.597 23.3307 225.651 23.5387 225.651 23.752C225.651 24.1147 225.491 24.36 225.171 24.488C225.085 24.6373 224.968 24.7547 224.819 24.84C224.68 24.9253 224.525 24.968 224.355 24.968C224.216 24.968 224.072 24.936 223.923 24.872C223.837 24.9253 223.72 24.9733 223.571 25.016C223.421 25.0587 223.272 25.08 223.123 25.08C222.867 25.08 222.691 25.0267 222.595 24.92C222.488 25.0053 222.317 25.048 222.083 25.048C221.912 25.048 221.757 25.016 221.619 24.952C221.469 25.0267 221.299 25.064 221.107 25.064C220.925 25.064 220.776 25.0373 220.659 24.984C220.552 25.08 220.333 25.128 220.003 25.128C219.821 25.128 219.699 25.112 219.635 25.08C219.667 25.3893 219.624 25.6187 219.507 25.768C219.709 25.9707 219.789 26.1893 219.747 26.424C219.757 26.4347 219.816 26.4773 219.923 26.552C220.029 26.6267 220.104 26.7493 220.147 26.92C220.264 26.92 220.371 26.968 220.467 27.064C220.573 27.16 220.637 27.256 220.659 27.352C220.701 27.3093 220.787 27.288 220.915 27.288C221.011 27.288 221.096 27.304 221.171 27.336C221.245 27.368 221.288 27.4053 221.299 27.448C221.373 27.4053 221.459 27.384 221.555 27.384C221.693 27.384 221.821 27.432 221.939 27.528C222.045 27.5067 222.125 27.496 222.179 27.496C222.285 27.496 222.376 27.512 222.451 27.544C222.483 27.4587 222.568 27.3787 222.707 27.304C222.845 27.2187 222.989 27.1813 223.139 27.192C223.224 27.0853 223.341 27 223.491 26.936C223.64 26.872 223.789 26.84 223.939 26.84C224.227 26.84 224.435 26.9573 224.563 27.192C224.605 27.2773 224.627 27.3787 224.627 27.496C224.627 27.752 224.509 27.9547 224.275 28.104C224.221 28.136 224.131 28.1947 224.003 28.28C223.875 28.3547 223.757 28.4133 223.651 28.456C223.544 28.4987 223.448 28.52 223.363 28.52C223.203 28.712 222.984 28.808 222.707 28.808C222.579 28.808 222.483 28.7973 222.419 28.776C222.291 28.8827 222.104 28.936 221.859 28.936C221.635 28.936 221.48 28.8933 221.395 28.808C221.32 28.84 221.245 28.856 221.171 28.856C221.021 28.856 220.883 28.8027 220.755 28.696C220.211 28.728 219.843 28.5573 219.651 28.184C219.501 28.184 219.331 28.0933 219.139 27.912C218.957 27.72 218.856 27.5547 218.835 27.416C218.589 27.32 218.435 27.144 218.371 26.888C218.36 26.8027 218.36 26.7227 218.371 26.648C218.328 26.6373 218.291 26.5947 218.259 26.52C218.237 26.4347 218.227 26.3493 218.227 26.264C218.227 26.2 218.232 26.1573 218.243 26.136C218.157 25.88 218.115 25.6453 218.115 25.432C218.115 25.2187 218.157 25.0267 218.243 24.856C218.179 24.7387 218.147 24.6107 218.147 24.472C218.147 24.3013 218.184 24.1307 218.259 23.96C218.333 23.7893 218.403 23.6773 218.467 23.624C218.445 23.5707 218.461 23.48 218.515 23.352C218.568 23.2133 218.637 23.0907 218.723 22.984C218.819 22.8667 218.915 22.7973 219.011 22.776L218.995 22.6C218.995 22.184 219.219 21.9227 219.667 21.816C219.667 21.6347 219.773 21.4587 219.987 21.288C220.2 21.1173 220.387 21.0427 220.547 21.064C220.568 20.9467 220.669 20.856 220.851 20.792C221.043 20.7173 221.187 20.696 221.283 20.728C221.368 20.5893 221.539 20.4933 221.795 20.44C221.891 20.3333 222.029 20.28 222.211 20.28C222.264 20.28 222.333 20.2907 222.419 20.312L222.563 20.296C222.691 20.296 222.797 20.3227 222.883 20.376C222.979 20.4187 223.021 20.472 223.011 20.536C223.245 20.5573 223.443 20.6107 223.603 20.696C223.763 20.7813 223.859 20.936 223.891 21.16C224.029 21.128 224.205 21.1653 224.419 21.272C224.632 21.368 224.813 21.5227 224.963 21.736C225.123 21.9387 225.203 22.1787 225.203 22.456C225.203 22.52 225.192 22.616 225.171 22.744ZM222.819 23.784C222.925 23.6347 223.187 23.56 223.603 23.56C223.837 23.56 224.019 23.5813 224.147 23.624C224.061 23.5813 223.981 23.4907 223.907 23.352C223.843 23.2027 223.811 23.064 223.811 22.936C223.811 22.8507 223.827 22.7867 223.859 22.744C223.709 22.7547 223.581 22.7173 223.475 22.632C223.379 22.536 223.288 22.4293 223.203 22.312C223.128 22.1947 223.069 22.1093 223.027 22.056C222.973 22.088 222.861 22.0613 222.691 21.976C222.531 21.88 222.445 21.784 222.435 21.688C222.392 21.7413 222.301 21.7893 222.163 21.832C222.024 21.864 221.917 21.8747 221.843 21.864C221.811 21.9173 221.736 21.9707 221.619 22.024C221.501 22.0773 221.379 22.0933 221.251 22.072C221.144 22.2747 221.032 22.44 220.915 22.568C220.797 22.696 220.648 22.792 220.467 22.856C220.445 23.0053 220.376 23.1707 220.259 23.352C220.152 23.5333 220.04 23.672 219.923 23.768L219.987 23.784C220.136 23.6773 220.339 23.624 220.595 23.624C220.744 23.624 220.883 23.64 221.011 23.672C221.149 23.704 221.245 23.7413 221.299 23.784C221.555 23.624 221.837 23.544 222.147 23.544C222.403 23.544 222.627 23.624 222.819 23.784ZM181.693 42.792C181.607 42.6533 181.565 42.52 181.565 42.392C181.565 42.2 181.629 42.04 181.757 41.912C181.789 41.752 181.863 41.6027 181.981 41.464C182.098 41.3147 182.226 41.2027 182.365 41.128C182.514 41.0427 182.631 41.0107 182.717 41.032C182.791 40.9147 182.941 40.808 183.164 40.712C183.389 40.6053 183.597 40.552 183.789 40.552C183.831 40.552 183.895 40.5627 183.981 40.584C184.098 40.456 184.253 40.392 184.445 40.392C184.594 40.392 184.701 40.4347 184.765 40.52C184.903 40.424 185.085 40.376 185.309 40.376C185.575 40.376 185.81 40.44 186.013 40.568C186.226 40.696 186.349 40.8667 186.381 41.08C186.573 41.144 186.717 41.2453 186.813 41.384C186.919 41.512 186.983 41.6933 187.005 41.928C187.143 42.0667 187.245 42.232 187.309 42.424C187.373 42.6053 187.405 42.792 187.405 42.984C187.405 43.2293 187.362 43.4267 187.277 43.576C187.351 43.6827 187.415 43.8427 187.469 44.056C187.522 44.2693 187.549 44.4773 187.549 44.68C187.549 44.7653 187.538 44.872 187.517 45C187.591 45.16 187.629 45.2667 187.629 45.32C187.629 45.352 187.613 45.4267 187.581 45.544C187.591 45.5867 187.602 45.64 187.613 45.704C187.623 45.7573 187.629 45.8267 187.629 45.912C187.629 46.072 187.57 46.216 187.453 46.344C187.495 46.4613 187.517 46.6053 187.517 46.776C187.517 47 187.463 47.1813 187.357 47.32C187.378 47.3627 187.389 47.432 187.389 47.528C187.389 47.752 187.298 47.9387 187.117 48.088C187.074 48.2373 186.994 48.3547 186.877 48.44C186.759 48.5147 186.631 48.552 186.493 48.552C186.354 48.552 186.242 48.5093 186.157 48.424C185.879 48.5413 185.655 48.6 185.485 48.6C185.399 48.6 185.335 48.5947 185.293 48.584C185.015 48.6693 184.781 48.712 184.589 48.712C184.45 48.712 184.258 48.6853 184.013 48.632C183.863 48.7173 183.719 48.76 183.581 48.76C183.453 48.76 183.335 48.7227 183.229 48.648C183.175 48.6587 183.095 48.664 182.989 48.664C182.573 48.664 182.253 48.4773 182.029 48.104C181.623 47.8693 181.421 47.5173 181.421 47.048C181.421 46.9307 181.426 46.84 181.437 46.776C181.341 46.712 181.293 46.5787 181.293 46.376C181.293 46.2373 181.319 46.1147 181.373 46.008C181.33 45.816 181.309 45.6933 181.309 45.64C181.309 45.3307 181.458 45.0533 181.757 44.808C181.874 44.5627 182.007 44.3973 182.157 44.312C182.317 44.2267 182.514 44.1627 182.749 44.12C182.813 43.9387 182.962 43.816 183.197 43.752C183.431 43.688 183.661 43.6667 183.885 43.688C183.949 43.6453 184.039 43.608 184.157 43.576C184.274 43.5333 184.391 43.512 184.509 43.512C184.637 43.512 184.749 43.5333 184.845 43.576C184.866 43.5547 184.919 43.544 185.005 43.544C185.069 43.544 185.133 43.5493 185.197 43.56C185.261 43.5707 185.303 43.5867 185.325 43.608C185.474 43.416 185.65 43.32 185.853 43.32C185.917 43.32 185.981 43.336 186.045 43.368V43.32C186.045 43.1387 186.082 43.0107 186.157 42.936C186.05 42.904 185.933 42.8133 185.805 42.664C185.687 42.504 185.618 42.36 185.597 42.232C185.426 42.1573 185.309 42.0347 185.245 41.864C185.117 41.96 184.967 42.008 184.797 42.008C184.679 42.008 184.567 41.976 184.461 41.912C184.279 41.9653 184.162 41.9867 184.109 41.976C183.959 42.0827 183.794 42.136 183.613 42.136C183.453 42.3493 183.266 42.4453 183.053 42.424C182.957 42.5947 182.823 42.744 182.653 42.872C182.493 43 182.327 43.064 182.157 43.064C181.965 43.064 181.81 42.9733 181.693 42.792ZM182.573 46.36C182.701 46.488 182.765 46.6107 182.765 46.728C182.765 46.8133 182.743 46.92 182.701 47.048C182.743 47.048 182.802 47.0747 182.877 47.128C182.962 47.1707 183.01 47.2187 183.021 47.272C183.106 47.24 183.213 47.224 183.341 47.224C183.575 47.224 183.73 47.2773 183.805 47.384C183.922 47.3413 184.045 47.32 184.173 47.32C184.375 47.32 184.535 47.3787 184.653 47.496C184.738 47.4107 184.877 47.3413 185.069 47.288C185.271 47.2347 185.453 47.208 185.613 47.208C185.709 47.016 185.879 46.904 186.125 46.872C186.146 46.7973 186.205 46.7013 186.301 46.584C186.258 46.52 186.221 46.4347 186.189 46.328C186.157 46.2213 186.141 46.1147 186.141 46.008C186.141 45.784 186.194 45.6187 186.301 45.512C186.183 45.3627 186.125 45.1867 186.125 44.984C186.125 44.8453 186.146 44.728 186.189 44.632C186.103 44.6853 186.007 44.712 185.901 44.712C185.805 44.712 185.725 44.6747 185.661 44.6C185.565 44.696 185.431 44.744 185.261 44.744C185.154 44.744 185.047 44.7173 184.941 44.664C184.823 44.7813 184.679 44.84 184.509 44.84C184.455 44.84 184.375 44.8187 184.269 44.776C184.109 44.936 183.965 44.984 183.837 44.92C183.773 45.0693 183.687 45.1707 183.581 45.224C183.485 45.2773 183.346 45.304 183.164 45.304C183.122 45.4213 183.047 45.5173 182.941 45.592C182.845 45.6667 182.743 45.6933 182.637 45.672C182.69 45.7467 182.717 45.832 182.717 45.928C182.717 46.088 182.669 46.232 182.573 46.36ZM193.818 48.648C193.722 48.7653 193.594 48.856 193.434 48.92C193.274 48.9733 193.109 49 192.938 49C192.725 49 192.575 48.9627 192.49 48.888C192.415 48.92 192.335 48.936 192.25 48.936C192.047 48.936 191.877 48.8667 191.738 48.728C191.61 48.7813 191.498 48.808 191.402 48.808C191.231 48.808 191.061 48.7653 190.89 48.68C190.73 48.584 190.618 48.472 190.554 48.344C190.351 48.3653 190.149 48.3067 189.946 48.168C189.754 48.0187 189.642 47.848 189.61 47.656C189.29 47.5173 189.071 47.144 188.954 46.536C188.89 46.4827 188.842 46.4027 188.81 46.296C188.778 46.1893 188.762 46.0827 188.762 45.976C188.762 45.9013 188.767 45.848 188.778 45.816C188.597 45.4533 188.506 45.08 188.506 44.696C188.506 44.344 188.581 44.056 188.73 43.832C188.709 43.7253 188.698 43.6453 188.698 43.592C188.698 43.4107 188.741 43.24 188.826 43.08C188.911 42.9093 189.018 42.7867 189.146 42.712C189.125 42.6587 189.114 42.584 189.114 42.488C189.114 42.3173 189.167 42.1627 189.274 42.024C189.391 41.8747 189.503 41.784 189.61 41.752C189.653 41.6027 189.754 41.464 189.914 41.336C190.085 41.1973 190.261 41.1333 190.442 41.144C190.655 40.824 190.869 40.68 191.082 40.712C191.178 40.584 191.306 40.4933 191.466 40.44C191.637 40.3867 191.791 40.3653 191.93 40.376C192.037 40.3013 192.154 40.264 192.282 40.264C192.41 40.264 192.538 40.296 192.666 40.36C192.751 40.296 192.869 40.264 193.018 40.264C193.125 40.264 193.226 40.28 193.322 40.312C193.418 40.344 193.482 40.3813 193.514 40.424C193.599 40.4027 193.69 40.424 193.786 40.488C193.882 40.5413 193.941 40.6107 193.962 40.696C194.143 40.696 194.298 40.7547 194.426 40.872C194.565 40.9787 194.666 41.1067 194.73 41.256C194.805 41.3947 194.837 41.5013 194.826 41.576C195.007 41.6613 195.135 41.8 195.21 41.992C195.285 42.1627 195.322 42.312 195.322 42.44C195.322 42.6533 195.242 42.8187 195.082 42.936C194.975 43.0107 194.863 43.048 194.746 43.048C194.554 43.048 194.367 42.968 194.186 42.808C194.015 42.648 193.903 42.4507 193.85 42.216C193.711 42.1947 193.578 42.1467 193.45 42.072C193.322 41.9867 193.221 41.896 193.146 41.8C193.114 41.8107 193.034 41.816 192.906 41.816C192.789 41.816 192.709 41.8107 192.666 41.8C192.57 41.896 192.463 41.944 192.346 41.944C192.229 41.944 192.117 41.9067 192.01 41.832C191.871 42.0453 191.669 42.152 191.402 42.152C191.263 42.344 191.141 42.4933 191.034 42.6C190.927 42.696 190.783 42.7333 190.602 42.712C190.613 42.744 190.618 42.792 190.618 42.856C190.618 42.984 190.586 43.096 190.522 43.192C190.458 43.288 190.383 43.3787 190.298 43.464C190.223 43.5387 190.165 43.5973 190.122 43.64C190.175 43.8 190.202 43.9493 190.202 44.088C190.202 44.3333 190.127 44.6267 189.978 44.968C190.031 45.0427 190.074 45.1493 190.106 45.288C190.149 45.416 190.17 45.544 190.17 45.672C190.17 45.7467 190.165 45.8 190.154 45.832C190.229 45.8853 190.293 45.976 190.346 46.104C190.41 46.232 190.442 46.3547 190.442 46.472C190.709 46.5573 190.927 46.68 191.098 46.84C191.279 47 191.37 47.1493 191.37 47.288C191.487 47.192 191.615 47.144 191.754 47.144C191.882 47.144 192.005 47.176 192.122 47.24C192.25 47.304 192.346 47.3893 192.41 47.496C192.463 47.4853 192.527 47.48 192.602 47.48C192.762 47.48 192.901 47.5333 193.018 47.64C193.061 47.5547 193.167 47.464 193.338 47.368C193.509 47.272 193.647 47.2293 193.754 47.24C193.818 47.1333 193.903 47.0533 194.01 47C194.127 46.9467 194.25 46.92 194.378 46.92C194.463 46.92 194.522 46.9253 194.554 46.936C194.693 46.7653 194.879 46.68 195.114 46.68C195.317 46.68 195.493 46.7493 195.642 46.888C195.791 47.0267 195.866 47.1973 195.866 47.4C195.866 47.6347 195.765 47.832 195.562 47.992C195.37 48.1413 195.151 48.216 194.906 48.216C194.81 48.216 194.741 48.2107 194.698 48.2C194.783 48.2213 194.773 48.2693 194.666 48.344C194.57 48.4187 194.431 48.4933 194.25 48.568C194.069 48.632 193.925 48.6587 193.818 48.648ZM197.367 37.592C197.228 37.656 197.116 37.7467 197.031 37.864C196.946 37.9813 196.903 38.104 196.903 38.232C196.903 38.4027 196.972 38.5733 197.111 38.744C197.09 38.8827 197.164 39.016 197.335 39.144C197.506 39.272 197.692 39.336 197.895 39.336C198.034 39.336 198.156 39.2987 198.263 39.224C198.562 39.064 198.711 38.8613 198.711 38.616C198.711 38.456 198.647 38.2747 198.519 38.072C198.53 37.8587 198.466 37.6933 198.327 37.576C198.199 37.448 198.044 37.384 197.863 37.384C197.66 37.384 197.495 37.4533 197.367 37.592ZM198.407 44.664C198.492 44.696 198.556 44.7973 198.599 44.968C198.652 45.1387 198.679 45.3253 198.679 45.528C198.679 45.7627 198.642 45.9173 198.567 45.992C198.631 46.152 198.663 46.3067 198.663 46.456C198.663 46.648 198.615 46.808 198.519 46.936C198.594 47.1173 198.631 47.3307 198.631 47.576C198.631 47.7787 198.599 47.944 198.535 48.072C198.567 48.168 198.583 48.2587 198.583 48.344C198.583 48.536 198.514 48.6907 198.375 48.808C198.236 48.9147 198.071 48.968 197.879 48.968C197.698 48.968 197.543 48.9147 197.415 48.808C197.287 48.6907 197.228 48.536 197.239 48.344C197.186 48.28 197.143 48.1787 197.111 48.04C197.079 47.9013 197.063 47.7573 197.063 47.608C197.063 47.3307 197.122 47.1493 197.239 47.064C197.154 46.9253 197.111 46.7173 197.111 46.44C197.111 46.1627 197.148 45.96 197.223 45.832C197.18 45.7893 197.148 45.688 197.127 45.528C197.106 45.368 197.095 45.192 197.095 45C197.095 44.8187 197.106 44.6587 197.127 44.52C197.148 44.3707 197.18 44.2747 197.223 44.232C197.159 44.168 197.127 43.992 197.127 43.704C197.127 43.3733 197.164 43.1333 197.239 42.984C197.186 42.8987 197.138 42.7867 197.095 42.648C197.052 42.5093 197.031 42.3813 197.031 42.264C197.031 42.1573 197.042 42.0827 197.063 42.04C196.978 41.7627 196.935 41.5387 196.935 41.368C196.935 41.1867 196.978 41 197.063 40.808C197.042 40.648 197.079 40.5253 197.175 40.44C197.271 40.3547 197.41 40.312 197.591 40.312C198.082 40.312 198.327 40.6107 198.327 41.208C198.423 41.272 198.492 41.3627 198.535 41.48C198.588 41.5867 198.615 41.7093 198.615 41.848C198.615 42.072 198.562 42.264 198.455 42.424C198.498 42.488 198.53 42.584 198.551 42.712C198.583 42.84 198.599 42.968 198.599 43.096C198.599 43.2667 198.572 43.384 198.519 43.448C198.562 43.5013 198.583 43.6133 198.583 43.784C198.583 43.944 198.562 44.1147 198.519 44.296C198.487 44.4773 198.45 44.6 198.407 44.664ZM204.675 48.056C204.653 48.152 204.573 48.232 204.435 48.296C204.296 48.36 204.147 48.392 203.987 48.392C203.912 48.392 203.859 48.3867 203.827 48.376C203.773 48.4613 203.661 48.5467 203.491 48.632C203.32 48.7173 203.171 48.76 203.043 48.76C202.979 48.76 202.92 48.744 202.867 48.712C202.76 48.7333 202.669 48.744 202.595 48.744C202.445 48.744 202.296 48.7173 202.147 48.664C202.008 48.6107 201.901 48.5413 201.827 48.456C201.645 48.4773 201.475 48.456 201.315 48.392C201.165 48.3173 201.08 48.2213 201.059 48.104C200.941 48.1253 200.808 48.0773 200.659 47.96C200.52 47.8427 200.445 47.6827 200.435 47.48C200.275 47.3947 200.157 47.2667 200.083 47.096C200.008 46.9253 199.971 46.744 199.971 46.552C199.971 46.4133 199.987 46.3067 200.019 46.232C199.933 46.1573 199.864 46.0027 199.811 45.768C199.757 45.5227 199.731 45.2667 199.731 45C199.731 44.68 199.768 44.4453 199.843 44.296C199.789 44.1893 199.763 44.0667 199.763 43.928C199.763 43.8107 199.779 43.6987 199.811 43.592C199.853 43.4853 199.912 43.4 199.987 43.336C199.955 43.2827 199.939 43.2347 199.939 43.192C199.939 43.1173 199.965 43.0373 200.019 42.952C200.072 42.8667 200.131 42.8027 200.195 42.76C200.184 42.5893 200.227 42.4347 200.323 42.296C200.429 42.1467 200.536 42.056 200.643 42.024C200.632 41.9173 200.669 41.7893 200.755 41.64C200.84 41.4907 200.952 41.368 201.091 41.272C201.24 41.176 201.389 41.1333 201.539 41.144C201.752 40.8453 202.045 40.696 202.419 40.696C202.579 40.696 202.701 40.7173 202.787 40.76C202.904 40.7067 203.048 40.68 203.219 40.68C203.389 40.68 203.576 40.7227 203.779 40.808C203.843 40.776 203.923 40.76 204.019 40.76C204.125 40.76 204.227 40.7813 204.323 40.824C204.429 40.856 204.499 40.904 204.531 40.968C204.52 40.9253 204.515 40.8613 204.515 40.776C204.515 40.6053 204.557 40.456 204.643 40.328C204.568 40.2 204.531 40.072 204.531 39.944C204.531 39.88 204.536 39.832 204.547 39.8C204.536 39.7467 204.515 39.6773 204.483 39.592C204.451 39.496 204.435 39.416 204.435 39.352C204.435 39.2667 204.456 39.1813 204.499 39.096C204.445 38.9893 204.419 38.8827 204.419 38.776C204.419 38.6587 204.451 38.5467 204.515 38.44C204.44 38.2907 204.403 38.136 204.403 37.976C204.403 37.7627 204.461 37.5707 204.579 37.4C204.707 37.2293 204.877 37.144 205.091 37.144C205.272 37.144 205.427 37.2133 205.555 37.352C205.693 37.48 205.763 37.6293 205.763 37.8C205.763 37.864 205.757 37.912 205.747 37.944C205.907 38.072 205.987 38.248 205.987 38.472C205.987 38.5893 205.949 38.712 205.875 38.84C205.907 38.9147 205.923 38.9947 205.923 39.08C205.923 39.1973 205.896 39.3093 205.843 39.416C205.896 39.5227 205.923 39.6347 205.923 39.752C205.923 39.9013 205.885 40.0293 205.811 40.136C205.917 40.264 205.971 40.3867 205.971 40.504C205.971 40.5893 205.939 40.68 205.875 40.776C205.907 40.84 205.923 40.92 205.923 41.016C205.923 41.0907 205.907 41.1707 205.875 41.256C205.96 41.3733 206.003 41.5013 206.003 41.64C206.003 41.7467 205.976 41.8533 205.923 41.96C205.987 42.0667 206.019 42.1947 206.019 42.344C206.019 42.5893 205.96 42.76 205.843 42.856C205.949 42.984 206.003 43.176 206.003 43.432C206.003 43.5813 205.981 43.7307 205.939 43.88C205.907 44.0293 205.875 44.136 205.843 44.2C205.949 44.36 206.003 44.5627 206.003 44.808C206.003 44.9253 205.976 45.0373 205.923 45.144C206.04 45.2613 206.099 45.4373 206.099 45.672C206.099 45.928 206.045 46.136 205.939 46.296C206.045 46.4347 206.099 46.632 206.099 46.888C206.099 47.0587 206.072 47.2133 206.019 47.352C205.976 47.48 205.917 47.5653 205.843 47.608C205.853 47.6827 205.88 47.7947 205.923 47.944C205.976 48.1787 206.003 48.328 206.003 48.392C206.003 48.5627 205.949 48.7013 205.843 48.808C205.715 48.936 205.565 49 205.395 49C205.256 49 205.128 48.952 205.011 48.856C204.904 48.7493 204.84 48.6107 204.819 48.44C204.765 48.3867 204.728 48.3173 204.707 48.232C204.685 48.136 204.675 48.0773 204.675 48.056ZM202.675 47.432C202.707 47.3573 202.803 47.32 202.963 47.32C203.037 47.32 203.101 47.3253 203.155 47.336C203.208 47.3467 203.251 47.352 203.283 47.352C203.293 47.2773 203.357 47.2133 203.475 47.16C203.603 47.096 203.725 47.064 203.843 47.064C203.917 47.064 203.981 47.08 204.035 47.112C204.024 47.0053 204.045 46.92 204.099 46.856C204.152 46.792 204.221 46.7333 204.307 46.68C204.403 46.616 204.472 46.568 204.515 46.536C204.493 46.4933 204.483 46.3973 204.483 46.248C204.483 45.928 204.52 45.7307 204.595 45.656C204.52 45.5813 204.483 45.432 204.483 45.208C204.483 44.952 204.52 44.728 204.595 44.536C204.531 44.3973 204.499 44.1627 204.499 43.832C204.499 43.512 204.52 43.2987 204.563 43.192C204.467 43 204.419 42.7813 204.419 42.536C204.419 42.344 204.44 42.2053 204.483 42.12C204.419 42.1627 204.323 42.168 204.195 42.136C204.077 42.0933 203.981 42.0347 203.907 41.96C203.864 42.024 203.779 42.056 203.651 42.056C203.565 42.056 203.48 42.0453 203.395 42.024C203.309 41.992 203.251 41.96 203.219 41.928C203.048 42.0027 202.883 42.04 202.723 42.04C202.68 42.04 202.616 42.0293 202.531 42.008C202.392 42.1573 202.285 42.264 202.211 42.328C202.136 42.392 202.035 42.4293 201.907 42.44C201.875 42.5147 201.843 42.6053 201.811 42.712C201.779 42.808 201.741 42.888 201.699 42.952C201.656 43.016 201.581 43.0693 201.475 43.112C201.453 43.2507 201.4 43.3627 201.315 43.448C201.325 43.4907 201.331 43.5493 201.331 43.624C201.331 43.7307 201.304 43.848 201.251 43.976C201.283 44.0507 201.299 44.216 201.299 44.472C201.299 44.9627 201.256 45.256 201.171 45.352C201.181 45.3947 201.219 45.496 201.283 45.656C201.347 45.816 201.379 45.9707 201.379 46.12C201.379 46.2373 201.357 46.344 201.315 46.44C201.528 46.5253 201.661 46.6747 201.715 46.888C201.821 46.92 201.923 46.9893 202.019 47.096C202.275 47.0853 202.493 47.1973 202.675 47.432ZM208.055 37.592C207.916 37.656 207.804 37.7467 207.719 37.864C207.633 37.9813 207.59 38.104 207.59 38.232C207.59 38.4027 207.66 38.5733 207.799 38.744C207.777 38.8827 207.852 39.016 208.023 39.144C208.193 39.272 208.38 39.336 208.583 39.336C208.721 39.336 208.844 39.2987 208.951 39.224C209.249 39.064 209.399 38.8613 209.399 38.616C209.399 38.456 209.335 38.2747 209.207 38.072C209.217 37.8587 209.153 37.6933 209.015 37.576C208.887 37.448 208.732 37.384 208.551 37.384C208.348 37.384 208.183 37.4533 208.055 37.592ZM209.095 44.664C209.18 44.696 209.244 44.7973 209.287 44.968C209.34 45.1387 209.367 45.3253 209.367 45.528C209.367 45.7627 209.329 45.9173 209.255 45.992C209.319 46.152 209.351 46.3067 209.351 46.456C209.351 46.648 209.303 46.808 209.207 46.936C209.281 47.1173 209.319 47.3307 209.319 47.576C209.319 47.7787 209.287 47.944 209.223 48.072C209.255 48.168 209.271 48.2587 209.271 48.344C209.271 48.536 209.201 48.6907 209.062 48.808C208.924 48.9147 208.759 48.968 208.567 48.968C208.385 48.968 208.231 48.9147 208.103 48.808C207.975 48.6907 207.916 48.536 207.927 48.344C207.873 48.28 207.831 48.1787 207.799 48.04C207.767 47.9013 207.751 47.7573 207.751 47.608C207.751 47.3307 207.809 47.1493 207.927 47.064C207.841 46.9253 207.799 46.7173 207.799 46.44C207.799 46.1627 207.836 45.96 207.911 45.832C207.868 45.7893 207.836 45.688 207.815 45.528C207.793 45.368 207.783 45.192 207.783 45C207.783 44.8187 207.793 44.6587 207.815 44.52C207.836 44.3707 207.868 44.2747 207.911 44.232C207.847 44.168 207.815 43.992 207.815 43.704C207.815 43.3733 207.852 43.1333 207.927 42.984C207.873 42.8987 207.825 42.7867 207.783 42.648C207.74 42.5093 207.719 42.3813 207.719 42.264C207.719 42.1573 207.729 42.0827 207.751 42.04C207.665 41.7627 207.623 41.5387 207.623 41.368C207.623 41.1867 207.665 41 207.751 40.808C207.729 40.648 207.767 40.5253 207.863 40.44C207.959 40.3547 208.097 40.312 208.279 40.312C208.769 40.312 209.015 40.6107 209.015 41.208C209.111 41.272 209.18 41.3627 209.223 41.48C209.276 41.5867 209.303 41.7093 209.303 41.848C209.303 42.072 209.249 42.264 209.143 42.424C209.185 42.488 209.217 42.584 209.239 42.712C209.271 42.84 209.287 42.968 209.287 43.096C209.287 43.2667 209.26 43.384 209.207 43.448C209.249 43.5013 209.271 43.6133 209.271 43.784C209.271 43.944 209.249 44.1147 209.207 44.296C209.175 44.4773 209.137 44.6 209.095 44.664ZM215.346 47.624C215.357 47.5707 215.384 47.5333 215.426 47.512C215.48 47.4907 215.538 47.4747 215.602 47.464C215.645 47.4533 215.698 47.448 215.762 47.448C215.944 47.448 216.088 47.5173 216.194 47.656C216.312 47.784 216.37 47.9387 216.37 48.12C216.37 48.2587 216.333 48.3813 216.258 48.488C216.184 48.584 216.072 48.6533 215.922 48.696C215.698 48.888 215.432 48.968 215.122 48.936C215.037 49.0107 214.925 49.048 214.786 49.048C214.594 49.048 214.418 48.9787 214.258 48.84C214.152 48.8187 214.024 48.7653 213.874 48.68C213.725 48.584 213.65 48.4987 213.65 48.424C213.501 48.4027 213.346 48.3173 213.186 48.168C213.037 48.0187 212.984 47.8373 213.026 47.624C212.909 47.496 212.84 47.3627 212.818 47.224C212.69 47.16 212.594 47.064 212.53 46.936C212.477 46.808 212.461 46.6747 212.482 46.536C212.344 46.408 212.274 46.216 212.274 45.96C212.274 45.864 212.285 45.7413 212.306 45.592C212.157 45.4747 212.082 45.3147 212.082 45.112C212.082 44.9307 212.141 44.7813 212.258 44.664C212.13 44.536 212.066 44.3707 212.066 44.168C212.066 44.0933 212.088 44.0027 212.13 43.896C212.066 43.768 212.034 43.64 212.034 43.512C212.034 43.3413 212.082 43.208 212.178 43.112C212.114 42.984 212.082 42.8453 212.082 42.696C212.082 42.568 212.098 42.456 212.13 42.36C212.173 42.2533 212.221 42.1733 212.274 42.12C212.157 41.9813 212.098 41.832 212.098 41.672C212.098 41.5867 212.114 41.496 212.146 41.4C212.05 41.432 211.944 41.448 211.826 41.448C211.645 41.448 211.512 41.4107 211.426 41.336C211.298 41.368 211.186 41.384 211.09 41.384C210.898 41.384 210.701 41.3253 210.498 41.208C210.392 41.272 210.28 41.304 210.162 41.304C209.992 41.304 209.853 41.2347 209.746 41.096C209.629 40.9467 209.57 40.7813 209.57 40.6C209.57 40.44 209.624 40.3067 209.73 40.2C209.826 40.0827 209.97 40.0187 210.162 40.008C210.29 39.9547 210.408 39.928 210.514 39.928C210.728 39.928 210.914 39.9813 211.074 40.088C211.213 40.0347 211.368 40.008 211.538 40.008C211.688 40.008 211.805 40.0347 211.89 40.088C211.901 40.0453 211.944 40.008 212.018 39.976C212.104 39.9333 212.173 39.9173 212.226 39.928C212.184 39.832 212.162 39.704 212.162 39.544C212.162 39.352 212.205 39.2507 212.29 39.24C212.216 39.1333 212.178 38.9787 212.178 38.776C212.178 38.4987 212.248 38.3067 212.386 38.2C212.376 37.9867 212.418 37.8267 212.514 37.72C212.61 37.6133 212.733 37.56 212.882 37.56C213.032 37.56 213.17 37.6133 213.298 37.72C213.426 37.816 213.49 37.944 213.49 38.104C213.49 38.2107 213.448 38.3333 213.362 38.472C213.469 38.568 213.522 38.728 213.522 38.952C213.522 39.048 213.506 39.1493 213.474 39.256C213.453 39.352 213.421 39.4267 213.378 39.48C213.442 39.5227 213.474 39.608 213.474 39.736C213.474 39.8427 213.448 39.9867 213.394 40.168C213.49 40.136 213.592 40.12 213.698 40.12C213.858 40.12 213.981 40.1573 214.066 40.232C214.173 40.1787 214.258 40.152 214.322 40.152C214.429 40.152 214.514 40.1947 214.578 40.28C214.653 40.2267 214.744 40.2 214.85 40.2C215 40.2 215.117 40.2587 215.202 40.376C215.405 40.376 215.554 40.424 215.65 40.52C215.757 40.6053 215.81 40.7173 215.81 40.856C215.81 41.0267 215.741 41.192 215.602 41.352C215.474 41.5013 215.325 41.576 215.154 41.576C215.058 41.576 214.962 41.544 214.866 41.48C214.76 41.5653 214.621 41.608 214.45 41.608C214.29 41.608 214.157 41.5707 214.05 41.496C213.912 41.5493 213.81 41.576 213.746 41.576C213.661 41.576 213.56 41.5387 213.442 41.464C213.538 41.592 213.586 41.7307 213.586 41.88C213.586 42.04 213.522 42.184 213.394 42.312C213.49 42.44 213.538 42.6 213.538 42.792C213.538 42.9627 213.49 43.1227 213.394 43.272C213.522 43.3573 213.586 43.496 213.586 43.688C213.586 43.848 213.538 43.9867 213.442 44.104C213.549 44.2213 213.602 44.4293 213.602 44.728C213.602 44.856 213.586 44.9627 213.554 45.048C213.629 45.1547 213.666 45.2667 213.666 45.384C213.666 45.448 213.65 45.5333 213.618 45.64C213.597 45.736 213.581 45.816 213.57 45.88C213.698 46.0293 213.762 46.1733 213.762 46.312C213.944 46.4507 214.034 46.616 214.034 46.808C214.248 46.9253 214.354 47.1227 214.354 47.4C214.376 47.432 214.397 47.4533 214.418 47.464C214.44 47.4747 214.456 47.4853 214.466 47.496L214.578 47.48C214.738 47.48 214.866 47.528 214.962 47.624C215.048 47.6027 215.117 47.592 215.17 47.592C215.202 47.592 215.261 47.6027 215.346 47.624ZM222.039 46.056C221.997 46.1947 221.906 46.3173 221.767 46.424C221.789 46.8507 221.677 47.1173 221.431 47.224C221.41 47.3947 221.335 47.576 221.207 47.768C221.079 47.96 220.941 48.088 220.791 48.152C220.791 48.1947 220.781 48.2853 220.759 48.424C220.749 48.552 220.717 48.6587 220.663 48.744C220.621 48.8293 220.551 48.9147 220.455 49C220.509 49.3733 220.333 49.7467 219.927 50.12C219.917 50.376 219.831 50.5787 219.671 50.728C219.522 50.888 219.341 50.984 219.127 51.016C219.106 51.1653 218.994 51.3093 218.791 51.448C218.599 51.5973 218.413 51.672 218.231 51.672C218.189 51.7893 218.013 51.9067 217.703 52.024C217.405 52.152 217.207 52.184 217.111 52.12C216.855 52.1413 216.653 52.0773 216.503 51.928C216.354 51.7787 216.279 51.6027 216.279 51.4C216.279 51.2507 216.322 51.1227 216.407 51.016C216.493 50.9093 216.615 50.856 216.775 50.856C216.829 50.856 216.871 50.8613 216.903 50.872C217.202 50.648 217.442 50.536 217.623 50.536C217.687 50.536 217.735 50.5413 217.767 50.552C217.789 50.424 217.863 50.3013 217.991 50.184C218.119 50.0773 218.269 49.992 218.439 49.928C218.439 49.8213 218.482 49.7093 218.567 49.592C218.653 49.4747 218.754 49.3787 218.871 49.304C218.85 49.24 218.839 49.192 218.839 49.16C218.839 49 218.909 48.824 219.047 48.632C219.186 48.4293 219.325 48.3013 219.463 48.248C219.218 48.12 219.095 47.9227 219.095 47.656C218.989 47.6453 218.887 47.5707 218.791 47.432C218.706 47.2933 218.663 47.144 218.663 46.984C218.663 46.888 218.69 46.7973 218.743 46.712C218.583 46.6587 218.461 46.5733 218.375 46.456C218.301 46.3387 218.263 46.2 218.263 46.04C218.263 45.9227 218.285 45.8053 218.327 45.688C218.178 45.6027 218.061 45.512 217.975 45.416C217.901 45.32 217.869 45.208 217.879 45.08C217.719 44.9733 217.639 44.808 217.639 44.584C217.639 44.4773 217.655 44.376 217.687 44.28C217.421 43.992 217.287 43.6827 217.287 43.352C217.287 43.256 217.293 43.1813 217.303 43.128C217.154 43.0533 217.042 42.952 216.967 42.824C216.893 42.6853 216.855 42.5307 216.855 42.36C216.855 42.2 216.887 42.0507 216.951 41.912C216.674 41.72 216.535 41.5067 216.535 41.272C216.535 41.0053 216.653 40.792 216.887 40.632C216.983 40.568 217.09 40.536 217.207 40.536C217.367 40.536 217.511 40.5947 217.639 40.712C217.778 40.8293 217.879 40.9733 217.943 41.144C218.039 41.2293 218.119 41.3627 218.183 41.544C218.247 41.7253 218.279 41.896 218.279 42.056C218.279 42.152 218.274 42.216 218.263 42.248C218.583 42.5893 218.743 42.92 218.743 43.24C218.743 43.2827 218.733 43.3573 218.711 43.464C218.85 43.5387 218.951 43.6507 219.015 43.8C219.079 43.9387 219.101 44.0827 219.079 44.232C219.186 44.3173 219.261 44.424 219.303 44.552C219.357 44.68 219.373 44.808 219.351 44.936C219.447 44.936 219.533 45.0107 219.607 45.16C219.693 45.2987 219.725 45.4427 219.703 45.592C219.842 45.6667 219.933 45.768 219.975 45.896C220.018 46.0133 220.029 46.1573 220.007 46.328C220.146 46.3707 220.215 46.504 220.215 46.728C220.247 46.5467 220.285 46.4133 220.327 46.328C220.37 46.2427 220.434 46.152 220.519 46.056C220.498 45.9493 220.487 45.88 220.487 45.848C220.487 45.7307 220.509 45.64 220.551 45.576C220.594 45.5013 220.653 45.4587 220.727 45.448C220.685 45.2453 220.738 45.048 220.887 44.856C220.855 44.792 220.839 44.728 220.839 44.664C220.839 44.5893 220.871 44.5093 220.935 44.424C221.01 44.328 221.058 44.264 221.079 44.232C221.015 44.04 220.983 43.88 220.983 43.752C220.983 43.6453 221.005 43.544 221.047 43.448C221.09 43.352 221.159 43.2347 221.255 43.096C221.191 42.968 221.159 42.776 221.159 42.52C221.159 42.1787 221.229 41.8693 221.367 41.592C221.325 41.4427 221.303 41.3253 221.303 41.24C221.303 41.112 221.335 41 221.399 40.904C221.399 40.648 221.479 40.4453 221.639 40.296C221.799 40.1467 221.981 40.072 222.183 40.072C222.354 40.072 222.498 40.136 222.615 40.264C222.743 40.3813 222.802 40.552 222.791 40.776C222.866 40.9253 222.903 41.1067 222.903 41.32C222.903 41.704 222.813 42.04 222.631 42.328C222.674 42.4667 222.695 42.616 222.695 42.776C222.695 43.0427 222.599 43.2987 222.407 43.544C222.418 43.6293 222.439 43.7307 222.471 43.848C222.503 43.9653 222.519 44.0613 222.519 44.136C222.519 44.296 222.466 44.4347 222.359 44.552C222.413 44.7013 222.301 45.016 222.023 45.496C222.066 45.624 222.087 45.7253 222.087 45.8C222.087 45.8853 222.071 45.9707 222.039 46.056Z M194.48 193.098C194.488 191.41 194.707 190.195 195.137 189.453C195.566 188.703 196.219 188.305 197.094 188.258C197.477 188.258 197.816 188.363 198.113 188.574C198.41 188.785 198.645 189.055 198.816 189.383C198.996 189.703 199.145 190.09 199.262 190.543C199.379 190.988 199.457 191.414 199.496 191.82C199.543 192.219 199.574 192.645 199.59 193.098C199.59 193.715 199.496 194.348 199.309 194.996C199.129 195.637 198.848 196.199 198.465 196.684C198.09 197.16 197.668 197.398 197.199 197.398C195.387 197.398 194.48 195.965 194.48 193.098ZM196.93 189.16C196.742 189.199 196.574 189.262 196.426 189.348C196.277 189.434 196.152 189.531 196.051 189.641C195.957 189.75 195.875 189.895 195.805 190.074C195.734 190.254 195.68 190.422 195.641 190.578C195.609 190.727 195.578 190.922 195.547 191.164C195.523 191.406 195.508 191.617 195.5 191.797C195.492 191.969 195.48 192.199 195.465 192.488C195.457 192.77 195.445 193 195.43 193.18C195.43 193.539 195.449 193.883 195.488 194.211C195.527 194.531 195.598 194.867 195.699 195.219C195.809 195.57 195.977 195.855 196.203 196.074C196.43 196.293 196.703 196.418 197.023 196.449C197.508 196.449 197.906 196.113 198.219 195.441C198.539 194.77 198.699 194.09 198.699 193.402C198.699 190.605 198.109 189.191 196.93 189.16ZM200.117 195.535C200.328 195.535 200.504 195.629 200.645 195.816C200.793 195.996 200.867 196.203 200.867 196.438C200.867 196.609 200.824 196.75 200.738 196.859C200.66 196.961 200.551 197.012 200.41 197.012C200.191 197.012 200.016 196.922 199.883 196.742C199.758 196.562 199.695 196.352 199.695 196.109C199.695 195.938 199.73 195.801 199.801 195.699C199.879 195.59 199.984 195.535 200.117 195.535ZM205.754 188.68L205.883 189.207C205.5 189.277 205.062 189.312 204.57 189.312C203.836 189.312 203.367 189.324 203.164 189.348C203.047 190.246 202.895 191.199 202.707 192.207C202.934 192.16 203.152 192.137 203.363 192.137C204.051 192.137 204.66 192.41 205.191 192.957C205.723 193.496 205.988 194.121 205.988 194.832C205.988 195.504 205.727 196.078 205.203 196.555C204.68 197.031 204.035 197.27 203.27 197.27C202.527 197.27 201.805 197.023 201.102 196.531C201.109 196.523 201.168 196.398 201.277 196.156C201.395 195.914 201.508 195.793 201.617 195.793C201.672 195.793 201.723 195.812 201.77 195.852C202.309 196.258 202.816 196.461 203.293 196.461C203.777 196.461 204.176 196.27 204.488 195.887C204.801 195.504 204.957 195.074 204.957 194.598C204.957 194.152 204.809 193.773 204.512 193.461C204.223 193.148 203.797 192.992 203.234 192.992C203.031 192.992 202.84 193.008 202.66 193.039C202.504 192.953 202.332 192.867 202.145 192.781C201.957 192.695 201.801 192.621 201.676 192.559C201.855 191.855 202.004 191.152 202.121 190.449C202.238 189.746 202.395 189.117 202.59 188.562C202.863 188.586 203.367 188.598 204.102 188.598C204.836 188.598 205.387 188.625 205.754 188.68ZM211.684 194.645C211.684 195.496 211.477 196.129 211.062 196.543C210.648 196.949 210.016 197.152 209.164 197.152C207.523 197.152 206.703 196.301 206.703 194.598C206.703 193.988 206.828 193.453 207.078 192.992C207.328 192.531 207.672 192.266 208.109 192.195C207.664 192.188 207.328 192.023 207.102 191.703C206.875 191.383 206.762 190.984 206.762 190.508C206.762 189.773 206.961 189.195 207.359 188.773C207.766 188.352 208.34 188.141 209.082 188.141C209.863 188.141 210.477 188.336 210.922 188.727C211.367 189.117 211.59 189.719 211.59 190.531C211.59 191.008 211.477 191.406 211.25 191.727C211.023 192.047 210.688 192.211 210.242 192.219C210.695 192.289 211.047 192.559 211.297 193.027C211.555 193.496 211.684 194.035 211.684 194.645ZM209.293 196.309C209.73 196.309 210.094 196.141 210.383 195.805C210.672 195.461 210.816 195.055 210.816 194.586C210.816 194.117 210.656 193.715 210.336 193.379C210.016 193.035 209.586 192.859 209.047 192.852C208.578 192.992 208.227 193.215 207.992 193.52C207.758 193.816 207.641 194.152 207.641 194.527C207.641 194.996 207.797 195.41 208.109 195.77C208.422 196.129 208.816 196.309 209.293 196.309ZM209.293 188.785C208.77 188.824 208.371 188.996 208.098 189.301C207.824 189.605 207.688 189.957 207.688 190.355C207.688 190.762 207.816 191.113 208.074 191.41C208.34 191.707 208.691 191.855 209.129 191.855C209.637 191.848 210.023 191.711 210.289 191.445C210.555 191.172 210.688 190.844 210.688 190.461C210.688 190.078 210.559 189.723 210.301 189.395C210.051 189.066 209.715 188.863 209.293 188.785Z M195.48 271.098C195.488 269.41 195.707 268.195 196.137 267.453C196.566 266.703 197.219 266.305 198.094 266.258C198.477 266.258 198.816 266.363 199.113 266.574C199.41 266.785 199.645 267.055 199.816 267.383C199.996 267.703 200.145 268.09 200.262 268.543C200.379 268.988 200.457 269.414 200.496 269.82C200.543 270.219 200.574 270.645 200.59 271.098C200.59 271.715 200.496 272.348 200.309 272.996C200.129 273.637 199.848 274.199 199.465 274.684C199.09 275.16 198.668 275.398 198.199 275.398C196.387 275.398 195.48 273.965 195.48 271.098ZM197.93 267.16C197.742 267.199 197.574 267.262 197.426 267.348C197.277 267.434 197.152 267.531 197.051 267.641C196.957 267.75 196.875 267.895 196.805 268.074C196.734 268.254 196.68 268.422 196.641 268.578C196.609 268.727 196.578 268.922 196.547 269.164C196.523 269.406 196.508 269.617 196.5 269.797C196.492 269.969 196.48 270.199 196.465 270.488C196.457 270.77 196.445 271 196.43 271.18C196.43 271.539 196.449 271.883 196.488 272.211C196.527 272.531 196.598 272.867 196.699 273.219C196.809 273.57 196.977 273.855 197.203 274.074C197.43 274.293 197.703 274.418 198.023 274.449C198.508 274.449 198.906 274.113 199.219 273.441C199.539 272.77 199.699 272.09 199.699 271.402C199.699 268.605 199.109 267.191 197.93 267.16ZM201.117 273.535C201.328 273.535 201.504 273.629 201.645 273.816C201.793 273.996 201.867 274.203 201.867 274.438C201.867 274.609 201.824 274.75 201.738 274.859C201.66 274.961 201.551 275.012 201.41 275.012C201.191 275.012 201.016 274.922 200.883 274.742C200.758 274.562 200.695 274.352 200.695 274.109C200.695 273.938 200.73 273.801 200.801 273.699C200.879 273.59 200.984 273.535 201.117 273.535ZM203.555 275.094L202.641 274.824L205.805 267.066C203.984 267.012 202.75 266.957 202.102 266.902L201.984 266.375C202.531 266.312 203.359 266.281 204.469 266.281C205.578 266.273 206.344 266.254 206.766 266.223L206.707 267.242L203.555 275.094ZM206.754 271.098C206.762 269.41 206.98 268.195 207.41 267.453C207.84 266.703 208.492 266.305 209.367 266.258C209.75 266.258 210.09 266.363 210.387 266.574C210.684 266.785 210.918 267.055 211.09 267.383C211.27 267.703 211.418 268.09 211.535 268.543C211.652 268.988 211.73 269.414 211.77 269.82C211.816 270.219 211.848 270.645 211.863 271.098C211.863 271.715 211.77 272.348 211.582 272.996C211.402 273.637 211.121 274.199 210.738 274.684C210.363 275.16 209.941 275.398 209.473 275.398C207.66 275.398 206.754 273.965 206.754 271.098ZM209.203 267.16C209.016 267.199 208.848 267.262 208.699 267.348C208.551 267.434 208.426 267.531 208.324 267.641C208.23 267.75 208.148 267.895 208.078 268.074C208.008 268.254 207.953 268.422 207.914 268.578C207.883 268.727 207.852 268.922 207.82 269.164C207.797 269.406 207.781 269.617 207.773 269.797C207.766 269.969 207.754 270.199 207.738 270.488C207.73 270.77 207.719 271 207.703 271.18C207.703 271.539 207.723 271.883 207.762 272.211C207.801 272.531 207.871 272.867 207.973 273.219C208.082 273.57 208.25 273.855 208.477 274.074C208.703 274.293 208.977 274.418 209.297 274.449C209.781 274.449 210.18 274.113 210.492 273.441C210.812 272.77 210.973 272.09 210.973 271.402C210.973 268.605 210.383 267.191 209.203 267.16Z M197.48 89.0977C197.488 87.4102 197.707 86.1953 198.137 85.4531C198.566 84.7031 199.219 84.3047 200.094 84.2578C200.477 84.2578 200.816 84.3633 201.113 84.5742C201.41 84.7852 201.645 85.0547 201.816 85.3828C201.996 85.7031 202.145 86.0898 202.262 86.543C202.379 86.9883 202.457 87.4141 202.496 87.8203C202.543 88.2188 202.574 88.6445 202.59 89.0977C202.59 89.7148 202.496 90.3477 202.309 90.9961C202.129 91.6367 201.848 92.1992 201.465 92.6836C201.09 93.1602 200.668 93.3984 200.199 93.3984C198.387 93.3984 197.48 91.9648 197.48 89.0977ZM199.93 85.1602C199.742 85.1992 199.574 85.2617 199.426 85.3477C199.277 85.4336 199.152 85.5312 199.051 85.6406C198.957 85.75 198.875 85.8945 198.805 86.0742C198.734 86.2539 198.68 86.4219 198.641 86.5781C198.609 86.7266 198.578 86.9219 198.547 87.1641C198.523 87.4062 198.508 87.6172 198.5 87.7969C198.492 87.9688 198.48 88.1992 198.465 88.4883C198.457 88.7695 198.445 89 198.43 89.1797C198.43 89.5391 198.449 89.8828 198.488 90.2109C198.527 90.5312 198.598 90.8672 198.699 91.2188C198.809 91.5703 198.977 91.8555 199.203 92.0742C199.43 92.293 199.703 92.418 200.023 92.4492C200.508 92.4492 200.906 92.1133 201.219 91.4414C201.539 90.7695 201.699 90.0898 201.699 89.4023C201.699 86.6055 201.109 85.1914 199.93 85.1602ZM203.117 91.5352C203.328 91.5352 203.504 91.6289 203.645 91.8164C203.793 91.9961 203.867 92.2031 203.867 92.4375C203.867 92.6094 203.824 92.75 203.738 92.8594C203.66 92.9609 203.551 93.0117 203.41 93.0117C203.191 93.0117 203.016 92.9219 202.883 92.7422C202.758 92.5625 202.695 92.3516 202.695 92.1094C202.695 91.9375 202.73 91.8008 202.801 91.6992C202.879 91.5898 202.984 91.5352 203.117 91.5352ZM205.555 93.0938L204.641 92.8242L207.805 85.0664C205.984 85.0117 204.75 84.957 204.102 84.9023L203.984 84.375C204.531 84.3125 205.359 84.2812 206.469 84.2812C207.578 84.2734 208.344 84.2539 208.766 84.2227L208.707 85.2422L205.555 93.0938ZM209.305 92.9648V92.3438C209.492 92.3203 209.723 92.2812 209.996 92.2266C210.277 92.1719 210.496 92.1328 210.652 92.1094C210.676 91.5469 210.688 90.9805 210.688 90.4102C210.688 90.0508 210.684 89.5117 210.676 88.793C210.668 88.0664 210.664 87.5195 210.664 87.1523C210.664 86.2852 210.676 85.6289 210.699 85.1836C209.988 85.5898 209.469 85.918 209.141 86.168L208.766 85.7812C208.891 85.6797 209.105 85.5039 209.41 85.2539C209.715 84.9961 209.988 84.7656 210.23 84.5625C210.473 84.3516 210.66 84.1797 210.793 84.0469C210.918 84.0625 211.047 84.0742 211.18 84.082C211.312 84.082 211.441 84.0898 211.566 84.1055C211.613 85.0117 211.637 86.6719 211.637 89.0859C211.637 90.5234 211.648 91.5547 211.672 92.1797C211.742 92.1875 211.91 92.2188 212.176 92.2734C212.449 92.3203 212.66 92.3516 212.809 92.3672L212.996 92.9883C212.605 92.9883 212.266 92.9883 211.977 92.9883C211.688 92.9883 211.301 92.9883 210.816 92.9883C210.34 92.9883 209.965 92.9883 209.691 92.9883C209.426 92.9805 209.297 92.9727 209.305 92.9648Z M194.48 297.098C194.488 295.41 194.707 294.195 195.137 293.453C195.566 292.703 196.219 292.305 197.094 292.258C197.477 292.258 197.816 292.363 198.113 292.574C198.41 292.785 198.645 293.055 198.816 293.383C198.996 293.703 199.145 294.09 199.262 294.543C199.379 294.988 199.457 295.414 199.496 295.82C199.543 296.219 199.574 296.645 199.59 297.098C199.59 297.715 199.496 298.348 199.309 298.996C199.129 299.637 198.848 300.199 198.465 300.684C198.09 301.16 197.668 301.398 197.199 301.398C195.387 301.398 194.48 299.965 194.48 297.098ZM196.93 293.16C196.742 293.199 196.574 293.262 196.426 293.348C196.277 293.434 196.152 293.531 196.051 293.641C195.957 293.75 195.875 293.895 195.805 294.074C195.734 294.254 195.68 294.422 195.641 294.578C195.609 294.727 195.578 294.922 195.547 295.164C195.523 295.406 195.508 295.617 195.5 295.797C195.492 295.969 195.48 296.199 195.465 296.488C195.457 296.77 195.445 297 195.43 297.18C195.43 297.539 195.449 297.883 195.488 298.211C195.527 298.531 195.598 298.867 195.699 299.219C195.809 299.57 195.977 299.855 196.203 300.074C196.43 300.293 196.703 300.418 197.023 300.449C197.508 300.449 197.906 300.113 198.219 299.441C198.539 298.77 198.699 298.09 198.699 297.402C198.699 294.605 198.109 293.191 196.93 293.16ZM200.117 299.535C200.328 299.535 200.504 299.629 200.645 299.816C200.793 299.996 200.867 300.203 200.867 300.438C200.867 300.609 200.824 300.75 200.738 300.859C200.66 300.961 200.551 301.012 200.41 301.012C200.191 301.012 200.016 300.922 199.883 300.742C199.758 300.562 199.695 300.352 199.695 300.109C199.695 299.938 199.73 299.801 199.801 299.699C199.879 299.59 199.984 299.535 200.117 299.535ZM206.562 298.645C206.562 299.496 206.355 300.129 205.941 300.543C205.527 300.949 204.895 301.152 204.043 301.152C202.402 301.152 201.582 300.301 201.582 298.598C201.582 297.988 201.707 297.453 201.957 296.992C202.207 296.531 202.551 296.266 202.988 296.195C202.543 296.188 202.207 296.023 201.98 295.703C201.754 295.383 201.641 294.984 201.641 294.508C201.641 293.773 201.84 293.195 202.238 292.773C202.645 292.352 203.219 292.141 203.961 292.141C204.742 292.141 205.355 292.336 205.801 292.727C206.246 293.117 206.469 293.719 206.469 294.531C206.469 295.008 206.355 295.406 206.129 295.727C205.902 296.047 205.566 296.211 205.121 296.219C205.574 296.289 205.926 296.559 206.176 297.027C206.434 297.496 206.562 298.035 206.562 298.645ZM204.172 300.309C204.609 300.309 204.973 300.141 205.262 299.805C205.551 299.461 205.695 299.055 205.695 298.586C205.695 298.117 205.535 297.715 205.215 297.379C204.895 297.035 204.465 296.859 203.926 296.852C203.457 296.992 203.105 297.215 202.871 297.52C202.637 297.816 202.52 298.152 202.52 298.527C202.52 298.996 202.676 299.41 202.988 299.77C203.301 300.129 203.695 300.309 204.172 300.309ZM204.172 292.785C203.648 292.824 203.25 292.996 202.977 293.301C202.703 293.605 202.566 293.957 202.566 294.355C202.566 294.762 202.695 295.113 202.953 295.41C203.219 295.707 203.57 295.855 204.008 295.855C204.516 295.848 204.902 295.711 205.168 295.445C205.434 295.172 205.566 294.844 205.566 294.461C205.566 294.078 205.438 293.723 205.18 293.395C204.93 293.066 204.594 292.863 204.172 292.785ZM211.672 292.516L211.871 293.043C210.043 293.824 208.957 294.871 208.613 296.184C208.926 295.98 209.242 295.879 209.562 295.879C210.234 295.879 210.797 296.184 211.25 296.793C211.703 297.395 211.93 298.164 211.93 299.102C211.93 299.773 211.723 300.309 211.309 300.707C210.902 301.105 210.383 301.305 209.75 301.305C209.156 301.305 208.633 301.09 208.18 300.66C207.734 300.223 207.512 299.645 207.512 298.926C207.512 298.473 207.52 298.078 207.535 297.742C207.559 297.406 207.602 297.039 207.664 296.641C207.734 296.234 207.828 295.883 207.945 295.586C208.062 295.289 208.223 294.98 208.426 294.66C208.637 294.332 208.887 294.047 209.176 293.805C209.465 293.555 209.816 293.32 210.23 293.102C210.652 292.875 211.133 292.68 211.672 292.516ZM208.355 298.586C208.355 299.234 208.477 299.723 208.719 300.051C208.961 300.371 209.262 300.531 209.621 300.531C210.004 300.531 210.336 300.402 210.617 300.145C210.898 299.887 211.039 299.531 211.039 299.078C211.039 298.391 210.883 297.816 210.57 297.355C210.258 296.895 209.879 296.664 209.434 296.664C209.23 296.664 209.059 296.703 208.918 296.781C208.777 296.852 208.672 296.934 208.602 297.027C208.531 297.121 208.477 297.27 208.438 297.473C208.398 297.668 208.375 297.836 208.367 297.977C208.359 298.109 208.355 298.312 208.355 298.586Z M195.48 141.098C195.488 139.41 195.707 138.195 196.137 137.453C196.566 136.703 197.219 136.305 198.094 136.258C198.477 136.258 198.816 136.363 199.113 136.574C199.41 136.785 199.645 137.055 199.816 137.383C199.996 137.703 200.145 138.09 200.262 138.543C200.379 138.988 200.457 139.414 200.496 139.82C200.543 140.219 200.574 140.645 200.59 141.098C200.59 141.715 200.496 142.348 200.309 142.996C200.129 143.637 199.848 144.199 199.465 144.684C199.09 145.16 198.668 145.398 198.199 145.398C196.387 145.398 195.48 143.965 195.48 141.098ZM197.93 137.16C197.742 137.199 197.574 137.262 197.426 137.348C197.277 137.434 197.152 137.531 197.051 137.641C196.957 137.75 196.875 137.895 196.805 138.074C196.734 138.254 196.68 138.422 196.641 138.578C196.609 138.727 196.578 138.922 196.547 139.164C196.523 139.406 196.508 139.617 196.5 139.797C196.492 139.969 196.48 140.199 196.465 140.488C196.457 140.77 196.445 141 196.43 141.18C196.43 141.539 196.449 141.883 196.488 142.211C196.527 142.531 196.598 142.867 196.699 143.219C196.809 143.57 196.977 143.855 197.203 144.074C197.43 144.293 197.703 144.418 198.023 144.449C198.508 144.449 198.906 144.113 199.219 143.441C199.539 142.77 199.699 142.09 199.699 141.402C199.699 138.605 199.109 137.191 197.93 137.16ZM201.117 143.535C201.328 143.535 201.504 143.629 201.645 143.816C201.793 143.996 201.867 144.203 201.867 144.438C201.867 144.609 201.824 144.75 201.738 144.859C201.66 144.961 201.551 145.012 201.41 145.012C201.191 145.012 201.016 144.922 200.883 144.742C200.758 144.562 200.695 144.352 200.695 144.109C200.695 143.938 200.73 143.801 200.801 143.699C200.879 143.59 200.984 143.535 201.117 143.535ZM206.496 144.191L206.859 144.965C206.273 144.98 205.355 144.992 204.105 145C202.855 145 202.191 145 202.113 145C202.113 144.938 202.109 144.828 202.102 144.672C202.102 144.516 202.102 144.391 202.102 144.297C202.25 144.039 202.496 143.73 202.84 143.371C203.184 143.004 203.527 142.648 203.871 142.305C204.215 141.953 204.551 141.57 204.879 141.156C205.215 140.742 205.488 140.281 205.699 139.773C205.91 139.258 206.016 138.73 206.016 138.191C206.016 137.848 205.895 137.57 205.652 137.359C205.41 137.141 205.117 137.031 204.773 137.031C204.375 137.031 204.004 137.195 203.66 137.523C203.324 137.844 203.09 138.336 202.957 139L202.43 138.812C202.461 138.055 202.707 137.465 203.168 137.043C203.637 136.621 204.176 136.41 204.785 136.41C205.332 136.41 205.801 136.582 206.191 136.926C206.582 137.27 206.777 137.75 206.777 138.367C206.777 138.875 206.699 139.371 206.543 139.855C206.387 140.332 206.16 140.781 205.863 141.203C205.566 141.625 205.289 141.988 205.031 142.293C204.773 142.59 204.449 142.938 204.059 143.336C203.676 143.727 203.406 144.008 203.25 144.18C203.516 144.195 203.742 144.203 203.93 144.203C204.125 144.203 204.43 144.199 204.844 144.191C205.258 144.176 205.566 144.168 205.77 144.168C205.957 144.168 206.199 144.176 206.496 144.191ZM212.309 142.645C212.309 143.496 212.102 144.129 211.688 144.543C211.273 144.949 210.641 145.152 209.789 145.152C208.148 145.152 207.328 144.301 207.328 142.598C207.328 141.988 207.453 141.453 207.703 140.992C207.953 140.531 208.297 140.266 208.734 140.195C208.289 140.188 207.953 140.023 207.727 139.703C207.5 139.383 207.387 138.984 207.387 138.508C207.387 137.773 207.586 137.195 207.984 136.773C208.391 136.352 208.965 136.141 209.707 136.141C210.488 136.141 211.102 136.336 211.547 136.727C211.992 137.117 212.215 137.719 212.215 138.531C212.215 139.008 212.102 139.406 211.875 139.727C211.648 140.047 211.312 140.211 210.867 140.219C211.32 140.289 211.672 140.559 211.922 141.027C212.18 141.496 212.309 142.035 212.309 142.645ZM209.918 144.309C210.355 144.309 210.719 144.141 211.008 143.805C211.297 143.461 211.441 143.055 211.441 142.586C211.441 142.117 211.281 141.715 210.961 141.379C210.641 141.035 210.211 140.859 209.672 140.852C209.203 140.992 208.852 141.215 208.617 141.52C208.383 141.816 208.266 142.152 208.266 142.527C208.266 142.996 208.422 143.41 208.734 143.77C209.047 144.129 209.441 144.309 209.918 144.309ZM209.918 136.785C209.395 136.824 208.996 136.996 208.723 137.301C208.449 137.605 208.312 137.957 208.312 138.355C208.312 138.762 208.441 139.113 208.699 139.41C208.965 139.707 209.316 139.855 209.754 139.855C210.262 139.848 210.648 139.711 210.914 139.445C211.18 139.172 211.312 138.844 211.312 138.461C211.312 138.078 211.184 137.723 210.926 137.395C210.676 137.066 210.34 136.863 209.918 136.785Z M194.48 115.098C194.488 113.41 194.707 112.195 195.137 111.453C195.566 110.703 196.219 110.305 197.094 110.258C197.477 110.258 197.816 110.363 198.113 110.574C198.41 110.785 198.645 111.055 198.816 111.383C198.996 111.703 199.145 112.09 199.262 112.543C199.379 112.988 199.457 113.414 199.496 113.82C199.543 114.219 199.574 114.645 199.59 115.098C199.59 115.715 199.496 116.348 199.309 116.996C199.129 117.637 198.848 118.199 198.465 118.684C198.09 119.16 197.668 119.398 197.199 119.398C195.387 119.398 194.48 117.965 194.48 115.098ZM196.93 111.16C196.742 111.199 196.574 111.262 196.426 111.348C196.277 111.434 196.152 111.531 196.051 111.641C195.957 111.75 195.875 111.895 195.805 112.074C195.734 112.254 195.68 112.422 195.641 112.578C195.609 112.727 195.578 112.922 195.547 113.164C195.523 113.406 195.508 113.617 195.5 113.797C195.492 113.969 195.48 114.199 195.465 114.488C195.457 114.77 195.445 115 195.43 115.18C195.43 115.539 195.449 115.883 195.488 116.211C195.527 116.531 195.598 116.867 195.699 117.219C195.809 117.57 195.977 117.855 196.203 118.074C196.43 118.293 196.703 118.418 197.023 118.449C197.508 118.449 197.906 118.113 198.219 117.441C198.539 116.77 198.699 116.09 198.699 115.402C198.699 112.605 198.109 111.191 196.93 111.16ZM200.117 117.535C200.328 117.535 200.504 117.629 200.645 117.816C200.793 117.996 200.867 118.203 200.867 118.438C200.867 118.609 200.824 118.75 200.738 118.859C200.66 118.961 200.551 119.012 200.41 119.012C200.191 119.012 200.016 118.922 199.883 118.742C199.758 118.562 199.695 118.352 199.695 118.109C199.695 117.938 199.73 117.801 199.801 117.699C199.879 117.59 199.984 117.535 200.117 117.535ZM206.562 116.645C206.562 117.496 206.355 118.129 205.941 118.543C205.527 118.949 204.895 119.152 204.043 119.152C202.402 119.152 201.582 118.301 201.582 116.598C201.582 115.988 201.707 115.453 201.957 114.992C202.207 114.531 202.551 114.266 202.988 114.195C202.543 114.188 202.207 114.023 201.98 113.703C201.754 113.383 201.641 112.984 201.641 112.508C201.641 111.773 201.84 111.195 202.238 110.773C202.645 110.352 203.219 110.141 203.961 110.141C204.742 110.141 205.355 110.336 205.801 110.727C206.246 111.117 206.469 111.719 206.469 112.531C206.469 113.008 206.355 113.406 206.129 113.727C205.902 114.047 205.566 114.211 205.121 114.219C205.574 114.289 205.926 114.559 206.176 115.027C206.434 115.496 206.562 116.035 206.562 116.645ZM204.172 118.309C204.609 118.309 204.973 118.141 205.262 117.805C205.551 117.461 205.695 117.055 205.695 116.586C205.695 116.117 205.535 115.715 205.215 115.379C204.895 115.035 204.465 114.859 203.926 114.852C203.457 114.992 203.105 115.215 202.871 115.52C202.637 115.816 202.52 116.152 202.52 116.527C202.52 116.996 202.676 117.41 202.988 117.77C203.301 118.129 203.695 118.309 204.172 118.309ZM204.172 110.785C203.648 110.824 203.25 110.996 202.977 111.301C202.703 111.605 202.566 111.957 202.566 112.355C202.566 112.762 202.695 113.113 202.953 113.41C203.219 113.707 203.57 113.855 204.008 113.855C204.516 113.848 204.902 113.711 205.168 113.445C205.434 113.172 205.566 112.844 205.566 112.461C205.566 112.078 205.438 111.723 205.18 111.395C204.93 111.066 204.594 110.863 204.172 110.785ZM212.492 116.645C212.492 117.496 212.285 118.129 211.871 118.543C211.457 118.949 210.824 119.152 209.973 119.152C208.332 119.152 207.512 118.301 207.512 116.598C207.512 115.988 207.637 115.453 207.887 114.992C208.137 114.531 208.48 114.266 208.918 114.195C208.473 114.188 208.137 114.023 207.91 113.703C207.684 113.383 207.57 112.984 207.57 112.508C207.57 111.773 207.77 111.195 208.168 110.773C208.574 110.352 209.148 110.141 209.891 110.141C210.672 110.141 211.285 110.336 211.73 110.727C212.176 111.117 212.398 111.719 212.398 112.531C212.398 113.008 212.285 113.406 212.059 113.727C211.832 114.047 211.496 114.211 211.051 114.219C211.504 114.289 211.855 114.559 212.105 115.027C212.363 115.496 212.492 116.035 212.492 116.645ZM210.102 118.309C210.539 118.309 210.902 118.141 211.191 117.805C211.48 117.461 211.625 117.055 211.625 116.586C211.625 116.117 211.465 115.715 211.145 115.379C210.824 115.035 210.395 114.859 209.855 114.852C209.387 114.992 209.035 115.215 208.801 115.52C208.566 115.816 208.449 116.152 208.449 116.527C208.449 116.996 208.605 117.41 208.918 117.77C209.23 118.129 209.625 118.309 210.102 118.309ZM210.102 110.785C209.578 110.824 209.18 110.996 208.906 111.301C208.633 111.605 208.496 111.957 208.496 112.355C208.496 112.762 208.625 113.113 208.883 113.41C209.148 113.707 209.5 113.855 209.938 113.855C210.445 113.848 210.832 113.711 211.098 113.445C211.363 113.172 211.496 112.844 211.496 112.461C211.496 112.078 211.367 111.723 211.109 111.395C210.859 111.066 210.523 110.863 210.102 110.785Z M195.48 323.098C195.488 321.41 195.707 320.195 196.137 319.453C196.566 318.703 197.219 318.305 198.094 318.258C198.477 318.258 198.816 318.363 199.113 318.574C199.41 318.785 199.645 319.055 199.816 319.383C199.996 319.703 200.145 320.09 200.262 320.543C200.379 320.988 200.457 321.414 200.496 321.82C200.543 322.219 200.574 322.645 200.59 323.098C200.59 323.715 200.496 324.348 200.309 324.996C200.129 325.637 199.848 326.199 199.465 326.684C199.09 327.16 198.668 327.398 198.199 327.398C196.387 327.398 195.48 325.965 195.48 323.098ZM197.93 319.16C197.742 319.199 197.574 319.262 197.426 319.348C197.277 319.434 197.152 319.531 197.051 319.641C196.957 319.75 196.875 319.895 196.805 320.074C196.734 320.254 196.68 320.422 196.641 320.578C196.609 320.727 196.578 320.922 196.547 321.164C196.523 321.406 196.508 321.617 196.5 321.797C196.492 321.969 196.48 322.199 196.465 322.488C196.457 322.77 196.445 323 196.43 323.18C196.43 323.539 196.449 323.883 196.488 324.211C196.527 324.531 196.598 324.867 196.699 325.219C196.809 325.57 196.977 325.855 197.203 326.074C197.43 326.293 197.703 326.418 198.023 326.449C198.508 326.449 198.906 326.113 199.219 325.441C199.539 324.77 199.699 324.09 199.699 323.402C199.699 320.605 199.109 319.191 197.93 319.16ZM201.117 325.535C201.328 325.535 201.504 325.629 201.645 325.816C201.793 325.996 201.867 326.203 201.867 326.438C201.867 326.609 201.824 326.75 201.738 326.859C201.66 326.961 201.551 327.012 201.41 327.012C201.191 327.012 201.016 326.922 200.883 326.742C200.758 326.562 200.695 326.352 200.695 326.109C200.695 325.938 200.73 325.801 200.801 325.699C200.879 325.59 200.984 325.535 201.117 325.535ZM206.742 318.516L206.941 319.043C205.113 319.824 204.027 320.871 203.684 322.184C203.996 321.98 204.312 321.879 204.633 321.879C205.305 321.879 205.867 322.184 206.32 322.793C206.773 323.395 207 324.164 207 325.102C207 325.773 206.793 326.309 206.379 326.707C205.973 327.105 205.453 327.305 204.82 327.305C204.227 327.305 203.703 327.09 203.25 326.66C202.805 326.223 202.582 325.645 202.582 324.926C202.582 324.473 202.59 324.078 202.605 323.742C202.629 323.406 202.672 323.039 202.734 322.641C202.805 322.234 202.898 321.883 203.016 321.586C203.133 321.289 203.293 320.98 203.496 320.66C203.707 320.332 203.957 320.047 204.246 319.805C204.535 319.555 204.887 319.32 205.301 319.102C205.723 318.875 206.203 318.68 206.742 318.516ZM203.426 324.586C203.426 325.234 203.547 325.723 203.789 326.051C204.031 326.371 204.332 326.531 204.691 326.531C205.074 326.531 205.406 326.402 205.688 326.145C205.969 325.887 206.109 325.531 206.109 325.078C206.109 324.391 205.953 323.816 205.641 323.355C205.328 322.895 204.949 322.664 204.504 322.664C204.301 322.664 204.129 322.703 203.988 322.781C203.848 322.852 203.742 322.934 203.672 323.027C203.602 323.121 203.547 323.27 203.508 323.473C203.469 323.668 203.445 323.836 203.438 323.977C203.43 324.109 203.426 324.312 203.426 324.586ZM212.273 323.59L212.391 324.117C211.984 324.164 211.695 324.195 211.523 324.211C211.539 324.57 211.559 325.023 211.582 325.57C211.613 326.117 211.633 326.566 211.641 326.918C211.57 327.16 211.438 327.281 211.242 327.281C211.102 327.281 210.965 327.223 210.832 327.105C210.699 326.988 210.617 326.848 210.586 326.684C210.594 326.441 210.621 325.645 210.668 324.293C210.418 324.309 210.219 324.316 210.07 324.316C209.836 324.316 209.473 324.305 208.98 324.281C208.496 324.25 208.141 324.234 207.914 324.234C207.805 324.234 207.656 324.242 207.469 324.258C207.484 324.07 207.492 323.941 207.492 323.871C207.492 323.824 207.488 323.75 207.48 323.648C207.48 323.539 207.48 323.457 207.48 323.402C208.785 321.207 209.84 319.578 210.645 318.516C210.887 318.516 211.219 318.566 211.641 318.668C211.625 319.035 211.602 319.832 211.57 321.059C211.547 322.277 211.523 323.102 211.5 323.531C211.844 323.547 212.102 323.566 212.273 323.59ZM208.336 323.438L210.691 323.508C210.715 323.062 210.738 322.402 210.762 321.527C210.785 320.652 210.805 319.992 210.82 319.547C210.5 319.875 210.035 320.562 209.426 321.609C208.824 322.648 208.461 323.258 208.336 323.438Z M196.48 245.098C196.488 243.41 196.707 242.195 197.137 241.453C197.566 240.703 198.219 240.305 199.094 240.258C199.477 240.258 199.816 240.363 200.113 240.574C200.41 240.785 200.645 241.055 200.816 241.383C200.996 241.703 201.145 242.09 201.262 242.543C201.379 242.988 201.457 243.414 201.496 243.82C201.543 244.219 201.574 244.645 201.59 245.098C201.59 245.715 201.496 246.348 201.309 246.996C201.129 247.637 200.848 248.199 200.465 248.684C200.09 249.16 199.668 249.398 199.199 249.398C197.387 249.398 196.48 247.965 196.48 245.098ZM198.93 241.16C198.742 241.199 198.574 241.262 198.426 241.348C198.277 241.434 198.152 241.531 198.051 241.641C197.957 241.75 197.875 241.895 197.805 242.074C197.734 242.254 197.68 242.422 197.641 242.578C197.609 242.727 197.578 242.922 197.547 243.164C197.523 243.406 197.508 243.617 197.5 243.797C197.492 243.969 197.48 244.199 197.465 244.488C197.457 244.77 197.445 245 197.43 245.18C197.43 245.539 197.449 245.883 197.488 246.211C197.527 246.531 197.598 246.867 197.699 247.219C197.809 247.57 197.977 247.855 198.203 248.074C198.43 248.293 198.703 248.418 199.023 248.449C199.508 248.449 199.906 248.113 200.219 247.441C200.539 246.77 200.699 246.09 200.699 245.402C200.699 242.605 200.109 241.191 198.93 241.16ZM202.117 247.535C202.328 247.535 202.504 247.629 202.645 247.816C202.793 247.996 202.867 248.203 202.867 248.438C202.867 248.609 202.824 248.75 202.738 248.859C202.66 248.961 202.551 249.012 202.41 249.012C202.191 249.012 202.016 248.922 201.883 248.742C201.758 248.562 201.695 248.352 201.695 248.109C201.695 247.938 201.73 247.801 201.801 247.699C201.879 247.59 201.984 247.535 202.117 247.535ZM204.555 249.094L203.641 248.824L206.805 241.066C204.984 241.012 203.75 240.957 203.102 240.902L202.984 240.375C203.531 240.312 204.359 240.281 205.469 240.281C206.578 240.273 207.344 240.254 207.766 240.223L207.707 241.242L204.555 249.094ZM209.219 249.094L208.305 248.824L211.469 241.066C209.648 241.012 208.414 240.957 207.766 240.902L207.648 240.375C208.195 240.312 209.023 240.281 210.133 240.281C211.242 240.273 212.008 240.254 212.43 240.223L212.371 241.242L209.219 249.094Z M195.48 167.098C195.488 165.41 195.707 164.195 196.137 163.453C196.566 162.703 197.219 162.305 198.094 162.258C198.477 162.258 198.816 162.363 199.113 162.574C199.41 162.785 199.645 163.055 199.816 163.383C199.996 163.703 200.145 164.09 200.262 164.543C200.379 164.988 200.457 165.414 200.496 165.82C200.543 166.219 200.574 166.645 200.59 167.098C200.59 167.715 200.496 168.348 200.309 168.996C200.129 169.637 199.848 170.199 199.465 170.684C199.09 171.16 198.668 171.398 198.199 171.398C196.387 171.398 195.48 169.965 195.48 167.098ZM197.93 163.16C197.742 163.199 197.574 163.262 197.426 163.348C197.277 163.434 197.152 163.531 197.051 163.641C196.957 163.75 196.875 163.895 196.805 164.074C196.734 164.254 196.68 164.422 196.641 164.578C196.609 164.727 196.578 164.922 196.547 165.164C196.523 165.406 196.508 165.617 196.5 165.797C196.492 165.969 196.48 166.199 196.465 166.488C196.457 166.77 196.445 167 196.43 167.18C196.43 167.539 196.449 167.883 196.488 168.211C196.527 168.531 196.598 168.867 196.699 169.219C196.809 169.57 196.977 169.855 197.203 170.074C197.43 170.293 197.703 170.418 198.023 170.449C198.508 170.449 198.906 170.113 199.219 169.441C199.539 168.77 199.699 168.09 199.699 167.402C199.699 164.605 199.109 163.191 197.93 163.16ZM201.117 169.535C201.328 169.535 201.504 169.629 201.645 169.816C201.793 169.996 201.867 170.203 201.867 170.438C201.867 170.609 201.824 170.75 201.738 170.859C201.66 170.961 201.551 171.012 201.41 171.012C201.191 171.012 201.016 170.922 200.883 170.742C200.758 170.562 200.695 170.352 200.695 170.109C200.695 169.938 200.73 169.801 200.801 169.699C200.879 169.59 200.984 169.535 201.117 169.535ZM206.742 162.516L206.941 163.043C205.113 163.824 204.027 164.871 203.684 166.184C203.996 165.98 204.312 165.879 204.633 165.879C205.305 165.879 205.867 166.184 206.32 166.793C206.773 167.395 207 168.164 207 169.102C207 169.773 206.793 170.309 206.379 170.707C205.973 171.105 205.453 171.305 204.82 171.305C204.227 171.305 203.703 171.09 203.25 170.66C202.805 170.223 202.582 169.645 202.582 168.926C202.582 168.473 202.59 168.078 202.605 167.742C202.629 167.406 202.672 167.039 202.734 166.641C202.805 166.234 202.898 165.883 203.016 165.586C203.133 165.289 203.293 164.98 203.496 164.66C203.707 164.332 203.957 164.047 204.246 163.805C204.535 163.555 204.887 163.32 205.301 163.102C205.723 162.875 206.203 162.68 206.742 162.516ZM203.426 168.586C203.426 169.234 203.547 169.723 203.789 170.051C204.031 170.371 204.332 170.531 204.691 170.531C205.074 170.531 205.406 170.402 205.688 170.145C205.969 169.887 206.109 169.531 206.109 169.078C206.109 168.391 205.953 167.816 205.641 167.355C205.328 166.895 204.949 166.664 204.504 166.664C204.301 166.664 204.129 166.703 203.988 166.781C203.848 166.852 203.742 166.934 203.672 167.027C203.602 167.121 203.547 167.27 203.508 167.473C203.469 167.668 203.445 167.836 203.438 167.977C203.43 168.109 203.426 168.312 203.426 168.586ZM212.109 162.516L212.309 163.043C210.48 163.824 209.395 164.871 209.051 166.184C209.363 165.98 209.68 165.879 210 165.879C210.672 165.879 211.234 166.184 211.688 166.793C212.141 167.395 212.367 168.164 212.367 169.102C212.367 169.773 212.16 170.309 211.746 170.707C211.34 171.105 210.82 171.305 210.188 171.305C209.594 171.305 209.07 171.09 208.617 170.66C208.172 170.223 207.949 169.645 207.949 168.926C207.949 168.473 207.957 168.078 207.973 167.742C207.996 167.406 208.039 167.039 208.102 166.641C208.172 166.234 208.266 165.883 208.383 165.586C208.5 165.289 208.66 164.98 208.863 164.66C209.074 164.332 209.324 164.047 209.613 163.805C209.902 163.555 210.254 163.32 210.668 163.102C211.09 162.875 211.57 162.68 212.109 162.516ZM208.793 168.586C208.793 169.234 208.914 169.723 209.156 170.051C209.398 170.371 209.699 170.531 210.059 170.531C210.441 170.531 210.773 170.402 211.055 170.145C211.336 169.887 211.477 169.531 211.477 169.078C211.477 168.391 211.32 167.816 211.008 167.355C210.695 166.895 210.316 166.664 209.871 166.664C209.668 166.664 209.496 166.703 209.355 166.781C209.215 166.852 209.109 166.934 209.039 167.027C208.969 167.121 208.914 167.27 208.875 167.473C208.836 167.668 208.812 167.836 208.805 167.977C208.797 168.109 208.793 168.312 208.793 168.586Z M196.48 219.098C196.488 217.41 196.707 216.195 197.137 215.453C197.566 214.703 198.219 214.305 199.094 214.258C199.477 214.258 199.816 214.363 200.113 214.574C200.41 214.785 200.645 215.055 200.816 215.383C200.996 215.703 201.145 216.09 201.262 216.543C201.379 216.988 201.457 217.414 201.496 217.82C201.543 218.219 201.574 218.645 201.59 219.098C201.59 219.715 201.496 220.348 201.309 220.996C201.129 221.637 200.848 222.199 200.465 222.684C200.09 223.16 199.668 223.398 199.199 223.398C197.387 223.398 196.48 221.965 196.48 219.098ZM198.93 215.16C198.742 215.199 198.574 215.262 198.426 215.348C198.277 215.434 198.152 215.531 198.051 215.641C197.957 215.75 197.875 215.895 197.805 216.074C197.734 216.254 197.68 216.422 197.641 216.578C197.609 216.727 197.578 216.922 197.547 217.164C197.523 217.406 197.508 217.617 197.5 217.797C197.492 217.969 197.48 218.199 197.465 218.488C197.457 218.77 197.445 219 197.43 219.18C197.43 219.539 197.449 219.883 197.488 220.211C197.527 220.531 197.598 220.867 197.699 221.219C197.809 221.57 197.977 221.855 198.203 222.074C198.43 222.293 198.703 222.418 199.023 222.449C199.508 222.449 199.906 222.113 200.219 221.441C200.539 220.77 200.699 220.09 200.699 219.402C200.699 216.605 200.109 215.191 198.93 215.16ZM202.117 221.535C202.328 221.535 202.504 221.629 202.645 221.816C202.793 221.996 202.867 222.203 202.867 222.438C202.867 222.609 202.824 222.75 202.738 222.859C202.66 222.961 202.551 223.012 202.41 223.012C202.191 223.012 202.016 222.922 201.883 222.742C201.758 222.562 201.695 222.352 201.695 222.109C201.695 221.938 201.73 221.801 201.801 221.699C201.879 221.59 201.984 221.535 202.117 221.535ZM207.496 222.191L207.859 222.965C207.273 222.98 206.355 222.992 205.105 223C203.855 223 203.191 223 203.113 223C203.113 222.938 203.109 222.828 203.102 222.672C203.102 222.516 203.102 222.391 203.102 222.297C203.25 222.039 203.496 221.73 203.84 221.371C204.184 221.004 204.527 220.648 204.871 220.305C205.215 219.953 205.551 219.57 205.879 219.156C206.215 218.742 206.488 218.281 206.699 217.773C206.91 217.258 207.016 216.73 207.016 216.191C207.016 215.848 206.895 215.57 206.652 215.359C206.41 215.141 206.117 215.031 205.773 215.031C205.375 215.031 205.004 215.195 204.66 215.523C204.324 215.844 204.09 216.336 203.957 217L203.43 216.812C203.461 216.055 203.707 215.465 204.168 215.043C204.637 214.621 205.176 214.41 205.785 214.41C206.332 214.41 206.801 214.582 207.191 214.926C207.582 215.27 207.777 215.75 207.777 216.367C207.777 216.875 207.699 217.371 207.543 217.855C207.387 218.332 207.16 218.781 206.863 219.203C206.566 219.625 206.289 219.988 206.031 220.293C205.773 220.59 205.449 220.938 205.059 221.336C204.676 221.727 204.406 222.008 204.25 222.18C204.516 222.195 204.742 222.203 204.93 222.203C205.125 222.203 205.43 222.199 205.844 222.191C206.258 222.176 206.566 222.168 206.77 222.168C206.957 222.168 207.199 222.176 207.496 222.191ZM207.848 222.625L207.941 222.086C208.004 222.094 208.18 222.129 208.469 222.191C208.766 222.254 209.027 222.301 209.254 222.332C209.488 222.363 209.695 222.379 209.875 222.379C210.32 222.379 210.668 222.211 210.918 221.875C211.176 221.539 211.305 221.148 211.305 220.703C211.305 220.094 211.094 219.57 210.672 219.133C210.258 218.688 209.656 218.465 208.867 218.465C208.742 218.465 208.648 218.469 208.586 218.477V217.902C208.656 217.91 208.766 217.914 208.914 217.914C209.625 217.914 210.203 217.789 210.648 217.539C211.102 217.289 211.328 216.891 211.328 216.344C211.328 215.93 211.211 215.598 210.977 215.348C210.742 215.098 210.438 214.973 210.062 214.973C209.891 214.973 209.703 214.984 209.5 215.008C209.305 215.023 209.09 215.047 208.855 215.078C208.621 215.109 208.473 215.129 208.41 215.137L208.223 214.609C208.316 214.586 208.469 214.543 208.68 214.48C208.891 214.418 209.055 214.371 209.172 214.34C209.297 214.309 209.453 214.281 209.641 214.258C209.828 214.227 210.004 214.211 210.168 214.211C210.77 214.211 211.246 214.422 211.598 214.844C211.949 215.258 212.125 215.828 212.125 216.555C212.125 217.016 212.012 217.395 211.785 217.691C211.566 217.988 211.23 218.172 210.777 218.242C211.246 218.43 211.602 218.738 211.844 219.168C212.094 219.59 212.219 220.09 212.219 220.668C212.219 221.332 212.062 221.902 211.75 222.379C211.438 222.848 210.965 223.082 210.332 223.082C209.418 223.082 208.59 222.93 207.848 222.625Z M203.312 347.07C203.734 347.07 204.086 347.258 204.367 347.633C204.664 347.992 204.812 348.406 204.812 348.875C204.812 349.219 204.727 349.5 204.555 349.719C204.398 349.922 204.18 350.023 203.898 350.023C203.461 350.023 203.109 349.844 202.844 349.484C202.594 349.125 202.469 348.703 202.469 348.219C202.469 347.875 202.539 347.602 202.68 347.398C202.836 347.18 203.047 347.07 203.312 347.07Z M203.312 357.07C203.734 357.07 204.086 357.258 204.367 357.633C204.664 357.992 204.812 358.406 204.812 358.875C204.812 359.219 204.727 359.5 204.555 359.719C204.398 359.922 204.18 360.023 203.898 360.023C203.461 360.023 203.109 359.844 202.844 359.484C202.594 359.125 202.469 358.703 202.469 358.219C202.469 357.875 202.539 357.602 202.68 357.398C202.836 357.18 203.047 357.07 203.312 357.07Z M203.312 367.07C203.734 367.07 204.086 367.258 204.367 367.633C204.664 367.992 204.812 368.406 204.812 368.875C204.812 369.219 204.727 369.5 204.555 369.719C204.398 369.922 204.18 370.023 203.898 370.023C203.461 370.023 203.109 369.844 202.844 369.484C202.594 369.125 202.469 368.703 202.469 368.219C202.469 367.875 202.539 367.602 202.68 367.398C202.836 367.18 203.047 367.07 203.312 367.07Z';

  var dataset05Citric = 'M255.013 28.648C254.917 28.7653 254.789 28.856 254.629 28.92C254.469 28.9733 254.304 29 254.133 29C253.92 29 253.771 28.9627 253.685 28.888C253.611 28.92 253.531 28.936 253.445 28.936C253.243 28.936 253.072 28.8667 252.933 28.728C252.805 28.7813 252.693 28.808 252.597 28.808C252.427 28.808 252.256 28.7653 252.085 28.68C251.925 28.584 251.813 28.472 251.749 28.344C251.547 28.3653 251.344 28.3067 251.141 28.168C250.949 28.0187 250.837 27.848 250.805 27.656C250.485 27.5173 250.267 27.144 250.149 26.536C250.085 26.4827 250.037 26.4027 250.005 26.296C249.973 26.1893 249.957 26.0827 249.957 25.976C249.957 25.9013 249.963 25.848 249.973 25.816C249.792 25.4533 249.701 25.08 249.701 24.696C249.701 24.344 249.776 24.056 249.925 23.832C249.904 23.7253 249.893 23.6453 249.893 23.592C249.893 23.4107 249.936 23.24 250.021 23.08C250.107 22.9093 250.213 22.7867 250.341 22.712C250.32 22.6587 250.309 22.584 250.309 22.488C250.309 22.3173 250.363 22.1627 250.469 22.024C250.587 21.8747 250.699 21.784 250.805 21.752C250.848 21.6027 250.949 21.464 251.109 21.336C251.28 21.1973 251.456 21.1333 251.637 21.144C251.851 20.824 252.064 20.68 252.277 20.712C252.373 20.584 252.501 20.4933 252.661 20.44C252.832 20.3867 252.987 20.3653 253.125 20.376C253.232 20.3013 253.349 20.264 253.477 20.264C253.605 20.264 253.733 20.296 253.861 20.36C253.947 20.296 254.064 20.264 254.213 20.264C254.32 20.264 254.421 20.28 254.517 20.312C254.613 20.344 254.677 20.3813 254.709 20.424C254.795 20.4027 254.885 20.424 254.981 20.488C255.077 20.5413 255.136 20.6107 255.157 20.696C255.339 20.696 255.493 20.7547 255.621 20.872C255.76 20.9787 255.861 21.1067 255.925 21.256C256 21.3947 256.032 21.5013 256.021 21.576C256.203 21.6613 256.331 21.8 256.405 21.992C256.48 22.1627 256.517 22.312 256.517 22.44C256.517 22.6533 256.437 22.8187 256.277 22.936C256.171 23.0107 256.059 23.048 255.941 23.048C255.749 23.048 255.563 22.968 255.381 22.808C255.211 22.648 255.099 22.4507 255.045 22.216C254.907 22.1947 254.773 22.1467 254.645 22.072C254.517 21.9867 254.416 21.896 254.341 21.8C254.309 21.8107 254.229 21.816 254.101 21.816C253.984 21.816 253.904 21.8107 253.861 21.8C253.765 21.896 253.659 21.944 253.541 21.944C253.424 21.944 253.312 21.9067 253.205 21.832C253.067 22.0453 252.864 22.152 252.597 22.152C252.459 22.344 252.336 22.4933 252.229 22.6C252.123 22.696 251.979 22.7333 251.797 22.712C251.808 22.744 251.813 22.792 251.813 22.856C251.813 22.984 251.781 23.096 251.717 23.192C251.653 23.288 251.579 23.3787 251.493 23.464C251.419 23.5387 251.36 23.5973 251.317 23.64C251.371 23.8 251.397 23.9493 251.397 24.088C251.397 24.3333 251.323 24.6267 251.173 24.968C251.227 25.0427 251.269 25.1493 251.301 25.288C251.344 25.416 251.365 25.544 251.365 25.672C251.365 25.7467 251.36 25.8 251.349 25.832C251.424 25.8853 251.488 25.976 251.541 26.104C251.605 26.232 251.637 26.3547 251.637 26.472C251.904 26.5573 252.123 26.68 252.293 26.84C252.475 27 252.565 27.1493 252.565 27.288C252.683 27.192 252.811 27.144 252.949 27.144C253.077 27.144 253.2 27.176 253.317 27.24C253.445 27.304 253.541 27.3893 253.605 27.496C253.659 27.4853 253.723 27.48 253.797 27.48C253.957 27.48 254.096 27.5333 254.213 27.64C254.256 27.5547 254.363 27.464 254.533 27.368C254.704 27.272 254.843 27.2293 254.949 27.24C255.013 27.1333 255.099 27.0533 255.205 27C255.323 26.9467 255.445 26.92 255.573 26.92C255.659 26.92 255.717 26.9253 255.749 26.936C255.888 26.7653 256.075 26.68 256.309 26.68C256.512 26.68 256.688 26.7493 256.837 26.888C256.987 27.0267 257.061 27.1973 257.061 27.4C257.061 27.6347 256.96 27.832 256.757 27.992C256.565 28.1413 256.347 28.216 256.101 28.216C256.005 28.216 255.936 28.2107 255.893 28.2C255.979 28.2213 255.968 28.2693 255.861 28.344C255.765 28.4187 255.627 28.4933 255.445 28.568C255.264 28.632 255.12 28.6587 255.013 28.648ZM258.562 17.592C258.424 17.656 258.312 17.7467 258.226 17.864C258.141 17.9813 258.098 18.104 258.098 18.232C258.098 18.4027 258.168 18.5733 258.306 18.744C258.285 18.8827 258.36 19.016 258.53 19.144C258.701 19.272 258.888 19.336 259.09 19.336C259.229 19.336 259.352 19.2987 259.458 19.224C259.757 19.064 259.906 18.8613 259.906 18.616C259.906 18.456 259.842 18.2747 259.714 18.072C259.725 17.8587 259.661 17.6933 259.522 17.576C259.394 17.448 259.24 17.384 259.058 17.384C258.856 17.384 258.69 17.4533 258.562 17.592ZM259.602 24.664C259.688 24.696 259.752 24.7973 259.794 24.968C259.848 25.1387 259.874 25.3253 259.874 25.528C259.874 25.7627 259.837 25.9173 259.762 25.992C259.826 26.152 259.858 26.3067 259.858 26.456C259.858 26.648 259.81 26.808 259.714 26.936C259.789 27.1173 259.826 27.3307 259.826 27.576C259.826 27.7787 259.794 27.944 259.73 28.072C259.762 28.168 259.778 28.2587 259.778 28.344C259.778 28.536 259.709 28.6907 259.57 28.808C259.432 28.9147 259.266 28.968 259.074 28.968C258.893 28.968 258.738 28.9147 258.61 28.808C258.482 28.6907 258.424 28.536 258.434 28.344C258.381 28.28 258.338 28.1787 258.306 28.04C258.274 27.9013 258.258 27.7573 258.258 27.608C258.258 27.3307 258.317 27.1493 258.434 27.064C258.349 26.9253 258.306 26.7173 258.306 26.44C258.306 26.1627 258.344 25.96 258.418 25.832C258.376 25.7893 258.344 25.688 258.322 25.528C258.301 25.368 258.29 25.192 258.29 25C258.29 24.8187 258.301 24.6587 258.322 24.52C258.344 24.3707 258.376 24.2747 258.418 24.232C258.354 24.168 258.322 23.992 258.322 23.704C258.322 23.3733 258.36 23.1333 258.434 22.984C258.381 22.8987 258.333 22.7867 258.29 22.648C258.248 22.5093 258.226 22.3813 258.226 22.264C258.226 22.1573 258.237 22.0827 258.258 22.04C258.173 21.7627 258.13 21.5387 258.13 21.368C258.13 21.1867 258.173 21 258.258 20.808C258.237 20.648 258.274 20.5253 258.37 20.44C258.466 20.3547 258.605 20.312 258.786 20.312C259.277 20.312 259.522 20.6107 259.522 21.208C259.618 21.272 259.688 21.3627 259.73 21.48C259.784 21.5867 259.81 21.7093 259.81 21.848C259.81 22.072 259.757 22.264 259.65 22.424C259.693 22.488 259.725 22.584 259.746 22.712C259.778 22.84 259.794 22.968 259.794 23.096C259.794 23.2667 259.768 23.384 259.714 23.448C259.757 23.5013 259.778 23.6133 259.778 23.784C259.778 23.944 259.757 24.1147 259.714 24.296C259.682 24.4773 259.645 24.6 259.602 24.664ZM265.854 27.624C265.865 27.5707 265.891 27.5333 265.934 27.512C265.987 27.4907 266.046 27.4747 266.11 27.464C266.153 27.4533 266.206 27.448 266.27 27.448C266.451 27.448 266.595 27.5173 266.702 27.656C266.819 27.784 266.878 27.9387 266.878 28.12C266.878 28.2587 266.841 28.3813 266.766 28.488C266.691 28.584 266.579 28.6533 266.43 28.696C266.206 28.888 265.939 28.968 265.63 28.936C265.545 29.0107 265.433 29.048 265.294 29.048C265.102 29.048 264.926 28.9787 264.766 28.84C264.659 28.8187 264.531 28.7653 264.382 28.68C264.233 28.584 264.158 28.4987 264.158 28.424C264.009 28.4027 263.854 28.3173 263.694 28.168C263.545 28.0187 263.491 27.8373 263.534 27.624C263.417 27.496 263.347 27.3627 263.326 27.224C263.198 27.16 263.102 27.064 263.038 26.936C262.985 26.808 262.969 26.6747 262.99 26.536C262.851 26.408 262.782 26.216 262.782 25.96C262.782 25.864 262.793 25.7413 262.814 25.592C262.665 25.4747 262.59 25.3147 262.59 25.112C262.59 24.9307 262.649 24.7813 262.766 24.664C262.638 24.536 262.574 24.3707 262.574 24.168C262.574 24.0933 262.595 24.0027 262.638 23.896C262.574 23.768 262.542 23.64 262.542 23.512C262.542 23.3413 262.59 23.208 262.686 23.112C262.622 22.984 262.59 22.8453 262.59 22.696C262.59 22.568 262.606 22.456 262.638 22.36C262.681 22.2533 262.729 22.1733 262.782 22.12C262.665 21.9813 262.606 21.832 262.606 21.672C262.606 21.5867 262.622 21.496 262.654 21.4C262.558 21.432 262.451 21.448 262.334 21.448C262.153 21.448 262.019 21.4107 261.934 21.336C261.806 21.368 261.694 21.384 261.598 21.384C261.406 21.384 261.209 21.3253 261.006 21.208C260.899 21.272 260.787 21.304 260.67 21.304C260.499 21.304 260.361 21.2347 260.254 21.096C260.137 20.9467 260.078 20.7813 260.078 20.6C260.078 20.44 260.131 20.3067 260.238 20.2C260.334 20.0827 260.478 20.0187 260.67 20.008C260.798 19.9547 260.915 19.928 261.022 19.928C261.235 19.928 261.422 19.9813 261.582 20.088C261.721 20.0347 261.875 20.008 262.046 20.008C262.195 20.008 262.313 20.0347 262.398 20.088C262.409 20.0453 262.451 20.008 262.526 19.976C262.611 19.9333 262.681 19.9173 262.734 19.928C262.691 19.832 262.67 19.704 262.67 19.544C262.67 19.352 262.713 19.2507 262.798 19.24C262.723 19.1333 262.686 18.9787 262.686 18.776C262.686 18.4987 262.755 18.3067 262.894 18.2C262.883 17.9867 262.926 17.8267 263.022 17.72C263.118 17.6133 263.241 17.56 263.39 17.56C263.539 17.56 263.678 17.6133 263.806 17.72C263.934 17.816 263.998 17.944 263.998 18.104C263.998 18.2107 263.955 18.3333 263.87 18.472C263.977 18.568 264.03 18.728 264.03 18.952C264.03 19.048 264.014 19.1493 263.982 19.256C263.961 19.352 263.929 19.4267 263.886 19.48C263.95 19.5227 263.982 19.608 263.982 19.736C263.982 19.8427 263.955 19.9867 263.902 20.168C263.998 20.136 264.099 20.12 264.206 20.12C264.366 20.12 264.489 20.1573 264.574 20.232C264.681 20.1787 264.766 20.152 264.83 20.152C264.937 20.152 265.022 20.1947 265.086 20.28C265.161 20.2267 265.251 20.2 265.358 20.2C265.507 20.2 265.625 20.2587 265.71 20.376C265.913 20.376 266.062 20.424 266.158 20.52C266.265 20.6053 266.318 20.7173 266.318 20.856C266.318 21.0267 266.249 21.192 266.11 21.352C265.982 21.5013 265.833 21.576 265.662 21.576C265.566 21.576 265.47 21.544 265.374 21.48C265.267 21.5653 265.129 21.608 264.958 21.608C264.798 21.608 264.665 21.5707 264.558 21.496C264.419 21.5493 264.318 21.576 264.254 21.576C264.169 21.576 264.067 21.5387 263.95 21.464C264.046 21.592 264.094 21.7307 264.094 21.88C264.094 22.04 264.03 22.184 263.902 22.312C263.998 22.44 264.046 22.6 264.046 22.792C264.046 22.9627 263.998 23.1227 263.902 23.272C264.03 23.3573 264.094 23.496 264.094 23.688C264.094 23.848 264.046 23.9867 263.95 24.104C264.057 24.2213 264.11 24.4293 264.11 24.728C264.11 24.856 264.094 24.9627 264.062 25.048C264.137 25.1547 264.174 25.2667 264.174 25.384C264.174 25.448 264.158 25.5333 264.126 25.64C264.105 25.736 264.089 25.816 264.078 25.88C264.206 26.0293 264.27 26.1733 264.27 26.312C264.451 26.4507 264.542 26.616 264.542 26.808C264.755 26.9253 264.862 27.1227 264.862 27.4C264.883 27.432 264.905 27.4533 264.926 27.464C264.947 27.4747 264.963 27.4853 264.974 27.496L265.086 27.48C265.246 27.48 265.374 27.528 265.47 27.624C265.555 27.6027 265.625 27.592 265.678 27.592C265.71 27.592 265.769 27.6027 265.854 27.624ZM269.027 28.248C269.07 28.4827 269.022 28.6693 268.883 28.808C268.755 28.936 268.595 29 268.403 29C268.233 29 268.083 28.9467 267.955 28.84C267.827 28.7227 267.763 28.5627 267.763 28.36C267.763 28.232 267.795 28.088 267.859 27.928C267.795 27.7787 267.763 27.624 267.763 27.464C267.763 27.336 267.79 27.2293 267.843 27.144C267.779 27.1013 267.731 27.0373 267.699 26.952C267.667 26.8667 267.651 26.7707 267.651 26.664C267.651 26.5573 267.673 26.44 267.715 26.312C267.619 26.1947 267.571 26.056 267.571 25.896C267.571 25.6933 267.646 25.528 267.795 25.4C267.785 25.368 267.779 25.3147 267.779 25.24C267.779 25.1333 267.79 25.0587 267.811 25.016C267.694 24.8667 267.635 24.6533 267.635 24.376C267.635 24.184 267.673 24.0347 267.747 23.928C267.673 23.864 267.609 23.7787 267.555 23.672C267.502 23.5547 267.475 23.4373 267.475 23.32C267.475 23.192 267.513 23.0693 267.587 22.952C267.534 22.824 267.507 22.712 267.507 22.616C267.507 22.456 267.555 22.3067 267.651 22.168C267.523 22.04 267.459 21.9067 267.459 21.768C267.459 21.6613 267.497 21.5173 267.571 21.336C267.497 21.1867 267.459 21.0267 267.459 20.856C267.459 20.632 267.539 20.4933 267.699 20.44C267.71 20.2907 267.763 20.168 267.859 20.072C267.955 19.976 268.073 19.928 268.211 19.928C268.371 19.928 268.51 20.008 268.627 20.168C268.755 20.3173 268.819 20.536 268.819 20.824C268.819 20.9413 268.814 21.0373 268.803 21.112C268.846 21.0907 268.889 21.0587 268.931 21.016C268.974 20.9627 269.027 20.9253 269.091 20.904C269.155 20.8827 269.251 20.872 269.379 20.872C269.401 20.8187 269.47 20.7653 269.587 20.712C269.715 20.6587 269.838 20.632 269.955 20.632C270.041 20.632 270.099 20.6427 270.131 20.664C270.217 20.6213 270.302 20.6 270.387 20.6C270.515 20.6 270.654 20.6907 270.803 20.872C271.059 20.8507 271.246 20.9093 271.363 21.048C271.534 21.0373 271.683 21.0587 271.811 21.112C271.939 21.1653 272.041 21.2773 272.115 21.448C272.318 21.576 272.419 21.7467 272.419 21.96C272.419 22.1413 272.339 22.312 272.179 22.472C272.03 22.6213 271.865 22.696 271.683 22.696C271.481 22.696 271.31 22.5893 271.171 22.376C271.054 22.376 270.963 22.3653 270.899 22.344C270.835 22.3227 270.771 22.2747 270.707 22.2C270.643 22.2213 270.59 22.232 270.547 22.232C270.451 22.232 270.35 22.2053 270.243 22.152C270.094 22.248 269.934 22.2907 269.763 22.28C269.699 22.4293 269.534 22.504 269.267 22.504C269.278 22.536 269.283 22.5893 269.283 22.664C269.283 22.8027 269.251 22.9413 269.187 23.08C269.134 23.208 269.065 23.304 268.979 23.368C269.065 23.5707 269.107 23.7733 269.107 23.976C269.107 24.1573 269.065 24.296 268.979 24.392C269.011 24.4347 269.043 24.488 269.075 24.552C269.118 24.616 269.15 24.6747 269.171 24.728C269.193 24.8133 269.203 24.8773 269.203 24.92C269.203 24.9947 269.177 25.096 269.123 25.224C269.177 25.352 269.203 25.448 269.203 25.512C269.203 25.5973 269.166 25.7147 269.091 25.864C269.155 25.9707 269.187 26.088 269.187 26.216C269.187 26.3653 269.15 26.4933 269.075 26.6C269.15 26.7707 269.187 26.9467 269.187 27.128C269.187 27.2667 269.155 27.3947 269.091 27.512C269.145 27.6187 269.171 27.7253 269.171 27.832C269.171 27.9813 269.123 28.12 269.027 28.248ZM273.578 17.592C273.439 17.656 273.327 17.7467 273.242 17.864C273.157 17.9813 273.114 18.104 273.114 18.232C273.114 18.4027 273.183 18.5733 273.322 18.744C273.301 18.8827 273.375 19.016 273.546 19.144C273.717 19.272 273.903 19.336 274.106 19.336C274.245 19.336 274.367 19.2987 274.474 19.224C274.773 19.064 274.922 18.8613 274.922 18.616C274.922 18.456 274.858 18.2747 274.73 18.072C274.741 17.8587 274.677 17.6933 274.538 17.576C274.41 17.448 274.255 17.384 274.074 17.384C273.871 17.384 273.706 17.4533 273.578 17.592ZM274.618 24.664C274.703 24.696 274.767 24.7973 274.81 24.968C274.863 25.1387 274.89 25.3253 274.89 25.528C274.89 25.7627 274.853 25.9173 274.778 25.992C274.842 26.152 274.874 26.3067 274.874 26.456C274.874 26.648 274.826 26.808 274.73 26.936C274.805 27.1173 274.842 27.3307 274.842 27.576C274.842 27.7787 274.81 27.944 274.746 28.072C274.778 28.168 274.794 28.2587 274.794 28.344C274.794 28.536 274.725 28.6907 274.586 28.808C274.447 28.9147 274.282 28.968 274.09 28.968C273.909 28.968 273.754 28.9147 273.626 28.808C273.498 28.6907 273.439 28.536 273.45 28.344C273.397 28.28 273.354 28.1787 273.322 28.04C273.29 27.9013 273.274 27.7573 273.274 27.608C273.274 27.3307 273.333 27.1493 273.45 27.064C273.365 26.9253 273.322 26.7173 273.322 26.44C273.322 26.1627 273.359 25.96 273.434 25.832C273.391 25.7893 273.359 25.688 273.338 25.528C273.317 25.368 273.306 25.192 273.306 25C273.306 24.8187 273.317 24.6587 273.338 24.52C273.359 24.3707 273.391 24.2747 273.434 24.232C273.37 24.168 273.338 23.992 273.338 23.704C273.338 23.3733 273.375 23.1333 273.45 22.984C273.397 22.8987 273.349 22.7867 273.306 22.648C273.263 22.5093 273.242 22.3813 273.242 22.264C273.242 22.1573 273.253 22.0827 273.274 22.04C273.189 21.7627 273.146 21.5387 273.146 21.368C273.146 21.1867 273.189 21 273.274 20.808C273.253 20.648 273.29 20.5253 273.386 20.44C273.482 20.3547 273.621 20.312 273.802 20.312C274.293 20.312 274.538 20.6107 274.538 21.208C274.634 21.272 274.703 21.3627 274.746 21.48C274.799 21.5867 274.826 21.7093 274.826 21.848C274.826 22.072 274.773 22.264 274.666 22.424C274.709 22.488 274.741 22.584 274.762 22.712C274.794 22.84 274.81 22.968 274.81 23.096C274.81 23.2667 274.783 23.384 274.73 23.448C274.773 23.5013 274.794 23.6133 274.794 23.784C274.794 23.944 274.773 24.1147 274.73 24.296C274.698 24.4773 274.661 24.6 274.618 24.664ZM280.998 28.648C280.902 28.7653 280.774 28.856 280.614 28.92C280.454 28.9733 280.288 29 280.118 29C279.904 29 279.755 28.9627 279.67 28.888C279.595 28.92 279.515 28.936 279.43 28.936C279.227 28.936 279.056 28.8667 278.918 28.728C278.79 28.7813 278.678 28.808 278.582 28.808C278.411 28.808 278.24 28.7653 278.07 28.68C277.91 28.584 277.798 28.472 277.734 28.344C277.531 28.3653 277.328 28.3067 277.126 28.168C276.934 28.0187 276.822 27.848 276.79 27.656C276.47 27.5173 276.251 27.144 276.134 26.536C276.07 26.4827 276.022 26.4027 275.99 26.296C275.958 26.1893 275.942 26.0827 275.942 25.976C275.942 25.9013 275.947 25.848 275.958 25.816C275.776 25.4533 275.686 25.08 275.686 24.696C275.686 24.344 275.76 24.056 275.91 23.832C275.888 23.7253 275.878 23.6453 275.878 23.592C275.878 23.4107 275.92 23.24 276.006 23.08C276.091 22.9093 276.198 22.7867 276.326 22.712C276.304 22.6587 276.294 22.584 276.294 22.488C276.294 22.3173 276.347 22.1627 276.454 22.024C276.571 21.8747 276.683 21.784 276.79 21.752C276.832 21.6027 276.934 21.464 277.094 21.336C277.264 21.1973 277.44 21.1333 277.622 21.144C277.835 20.824 278.048 20.68 278.262 20.712C278.358 20.584 278.486 20.4933 278.646 20.44C278.816 20.3867 278.971 20.3653 279.11 20.376C279.216 20.3013 279.334 20.264 279.462 20.264C279.59 20.264 279.718 20.296 279.846 20.36C279.931 20.296 280.048 20.264 280.198 20.264C280.304 20.264 280.406 20.28 280.502 20.312C280.598 20.344 280.662 20.3813 280.694 20.424C280.779 20.4027 280.87 20.424 280.966 20.488C281.062 20.5413 281.12 20.6107 281.142 20.696C281.323 20.696 281.478 20.7547 281.606 20.872C281.744 20.9787 281.846 21.1067 281.91 21.256C281.984 21.3947 282.016 21.5013 282.006 21.576C282.187 21.6613 282.315 21.8 282.39 21.992C282.464 22.1627 282.502 22.312 282.502 22.44C282.502 22.6533 282.422 22.8187 282.262 22.936C282.155 23.0107 282.043 23.048 281.926 23.048C281.734 23.048 281.547 22.968 281.366 22.808C281.195 22.648 281.083 22.4507 281.03 22.216C280.891 22.1947 280.758 22.1467 280.63 22.072C280.502 21.9867 280.4 21.896 280.326 21.8C280.294 21.8107 280.214 21.816 280.086 21.816C279.968 21.816 279.888 21.8107 279.846 21.8C279.75 21.896 279.643 21.944 279.526 21.944C279.408 21.944 279.296 21.9067 279.19 21.832C279.051 22.0453 278.848 22.152 278.582 22.152C278.443 22.344 278.32 22.4933 278.214 22.6C278.107 22.696 277.963 22.7333 277.782 22.712C277.792 22.744 277.798 22.792 277.798 22.856C277.798 22.984 277.766 23.096 277.702 23.192C277.638 23.288 277.563 23.3787 277.478 23.464C277.403 23.5387 277.344 23.5973 277.302 23.64C277.355 23.8 277.382 23.9493 277.382 24.088C277.382 24.3333 277.307 24.6267 277.158 24.968C277.211 25.0427 277.254 25.1493 277.286 25.288C277.328 25.416 277.35 25.544 277.35 25.672C277.35 25.7467 277.344 25.8 277.334 25.832C277.408 25.8853 277.472 25.976 277.526 26.104C277.59 26.232 277.622 26.3547 277.622 26.472C277.888 26.5573 278.107 26.68 278.278 26.84C278.459 27 278.55 27.1493 278.55 27.288C278.667 27.192 278.795 27.144 278.934 27.144C279.062 27.144 279.184 27.176 279.302 27.24C279.43 27.304 279.526 27.3893 279.59 27.496C279.643 27.4853 279.707 27.48 279.782 27.48C279.942 27.48 280.08 27.5333 280.198 27.64C280.24 27.5547 280.347 27.464 280.518 27.368C280.688 27.272 280.827 27.2293 280.934 27.24C280.998 27.1333 281.083 27.0533 281.19 27C281.307 26.9467 281.43 26.92 281.558 26.92C281.643 26.92 281.702 26.9253 281.734 26.936C281.872 26.7653 282.059 26.68 282.294 26.68C282.496 26.68 282.672 26.7493 282.822 26.888C282.971 27.0267 283.046 27.1973 283.046 27.4C283.046 27.6347 282.944 27.832 282.742 27.992C282.55 28.1413 282.331 28.216 282.086 28.216C281.99 28.216 281.92 28.2107 281.878 28.2C281.963 28.2213 281.952 28.2693 281.846 28.344C281.75 28.4187 281.611 28.4933 281.43 28.568C281.248 28.632 281.104 28.6587 280.998 28.648ZM254.255 42.792C254.17 42.6533 254.127 42.52 254.127 42.392C254.127 42.2 254.191 42.04 254.319 41.912C254.351 41.752 254.426 41.6027 254.543 41.464C254.66 41.3147 254.788 41.2027 254.927 41.128C255.076 41.0427 255.194 41.0107 255.279 41.032C255.354 40.9147 255.503 40.808 255.727 40.712C255.951 40.6053 256.159 40.552 256.351 40.552C256.394 40.552 256.458 40.5627 256.543 40.584C256.66 40.456 256.815 40.392 257.007 40.392C257.156 40.392 257.263 40.4347 257.327 40.52C257.466 40.424 257.647 40.376 257.871 40.376C258.138 40.376 258.372 40.44 258.575 40.568C258.788 40.696 258.911 40.8667 258.943 41.08C259.135 41.144 259.279 41.2453 259.375 41.384C259.482 41.512 259.546 41.6933 259.567 41.928C259.706 42.0667 259.807 42.232 259.871 42.424C259.935 42.6053 259.967 42.792 259.967 42.984C259.967 43.2293 259.924 43.4267 259.839 43.576C259.914 43.6827 259.978 43.8427 260.031 44.056C260.084 44.2693 260.111 44.4773 260.111 44.68C260.111 44.7653 260.1 44.872 260.079 45C260.154 45.16 260.191 45.2667 260.191 45.32C260.191 45.352 260.175 45.4267 260.143 45.544C260.154 45.5867 260.164 45.64 260.175 45.704C260.186 45.7573 260.191 45.8267 260.191 45.912C260.191 46.072 260.132 46.216 260.015 46.344C260.058 46.4613 260.079 46.6053 260.079 46.776C260.079 47 260.026 47.1813 259.919 47.32C259.94 47.3627 259.951 47.432 259.951 47.528C259.951 47.752 259.86 47.9387 259.679 48.088C259.636 48.2373 259.556 48.3547 259.439 48.44C259.322 48.5147 259.194 48.552 259.055 48.552C258.916 48.552 258.804 48.5093 258.719 48.424C258.442 48.5413 258.218 48.6 258.047 48.6C257.962 48.6 257.898 48.5947 257.855 48.584C257.578 48.6693 257.343 48.712 257.151 48.712C257.012 48.712 256.82 48.6853 256.575 48.632C256.426 48.7173 256.282 48.76 256.143 48.76C256.015 48.76 255.898 48.7227 255.791 48.648C255.738 48.6587 255.658 48.664 255.551 48.664C255.135 48.664 254.815 48.4773 254.591 48.104C254.186 47.8693 253.983 47.5173 253.983 47.048C253.983 46.9307 253.988 46.84 253.999 46.776C253.903 46.712 253.855 46.5787 253.855 46.376C253.855 46.2373 253.882 46.1147 253.935 46.008C253.892 45.816 253.871 45.6933 253.871 45.64C253.871 45.3307 254.02 45.0533 254.319 44.808C254.436 44.5627 254.57 44.3973 254.719 44.312C254.879 44.2267 255.076 44.1627 255.311 44.12C255.375 43.9387 255.524 43.816 255.759 43.752C255.994 43.688 256.223 43.6667 256.447 43.688C256.511 43.6453 256.602 43.608 256.719 43.576C256.836 43.5333 256.954 43.512 257.071 43.512C257.199 43.512 257.311 43.5333 257.407 43.576C257.428 43.5547 257.482 43.544 257.567 43.544C257.631 43.544 257.695 43.5493 257.759 43.56C257.823 43.5707 257.866 43.5867 257.887 43.608C258.036 43.416 258.212 43.32 258.415 43.32C258.479 43.32 258.543 43.336 258.607 43.368V43.32C258.607 43.1387 258.644 43.0107 258.719 42.936C258.612 42.904 258.495 42.8133 258.367 42.664C258.25 42.504 258.18 42.36 258.159 42.232C257.988 42.1573 257.871 42.0347 257.807 41.864C257.679 41.96 257.53 42.008 257.359 42.008C257.242 42.008 257.13 41.976 257.023 41.912C256.842 41.9653 256.724 41.9867 256.671 41.976C256.522 42.0827 256.356 42.136 256.175 42.136C256.015 42.3493 255.828 42.4453 255.615 42.424C255.519 42.5947 255.386 42.744 255.215 42.872C255.055 43 254.89 43.064 254.719 43.064C254.527 43.064 254.372 42.9733 254.255 42.792ZM255.135 46.36C255.263 46.488 255.327 46.6107 255.327 46.728C255.327 46.8133 255.306 46.92 255.263 47.048C255.306 47.048 255.364 47.0747 255.439 47.128C255.524 47.1707 255.572 47.2187 255.583 47.272C255.668 47.24 255.775 47.224 255.903 47.224C256.138 47.224 256.292 47.2773 256.367 47.384C256.484 47.3413 256.607 47.32 256.735 47.32C256.938 47.32 257.098 47.3787 257.215 47.496C257.3 47.4107 257.439 47.3413 257.631 47.288C257.834 47.2347 258.015 47.208 258.175 47.208C258.271 47.016 258.442 46.904 258.687 46.872C258.708 46.7973 258.767 46.7013 258.863 46.584C258.82 46.52 258.783 46.4347 258.751 46.328C258.719 46.2213 258.703 46.1147 258.703 46.008C258.703 45.784 258.756 45.6187 258.863 45.512C258.746 45.3627 258.687 45.1867 258.687 44.984C258.687 44.8453 258.708 44.728 258.751 44.632C258.666 44.6853 258.57 44.712 258.463 44.712C258.367 44.712 258.287 44.6747 258.223 44.6C258.127 44.696 257.994 44.744 257.823 44.744C257.716 44.744 257.61 44.7173 257.503 44.664C257.386 44.7813 257.242 44.84 257.071 44.84C257.018 44.84 256.938 44.8187 256.831 44.776C256.671 44.936 256.527 44.984 256.399 44.92C256.335 45.0693 256.25 45.1707 256.143 45.224C256.047 45.2773 255.908 45.304 255.727 45.304C255.684 45.4213 255.61 45.5173 255.503 45.592C255.407 45.6667 255.306 45.6933 255.199 45.672C255.252 45.7467 255.279 45.832 255.279 45.928C255.279 46.088 255.231 46.232 255.135 46.36ZM266.381 48.648C266.285 48.7653 266.157 48.856 265.997 48.92C265.837 48.9733 265.671 49 265.501 49C265.287 49 265.138 48.9627 265.053 48.888C264.978 48.92 264.898 48.936 264.812 48.936C264.61 48.936 264.439 48.8667 264.301 48.728C264.173 48.7813 264.061 48.808 263.965 48.808C263.794 48.808 263.623 48.7653 263.453 48.68C263.293 48.584 263.181 48.472 263.117 48.344C262.914 48.3653 262.711 48.3067 262.509 48.168C262.317 48.0187 262.205 47.848 262.173 47.656C261.853 47.5173 261.634 47.144 261.517 46.536C261.453 46.4827 261.405 46.4027 261.373 46.296C261.341 46.1893 261.325 46.0827 261.325 45.976C261.325 45.9013 261.33 45.848 261.34 45.816C261.159 45.4533 261.069 45.08 261.069 44.696C261.069 44.344 261.143 44.056 261.293 43.832C261.271 43.7253 261.261 43.6453 261.261 43.592C261.261 43.4107 261.303 43.24 261.389 43.08C261.474 42.9093 261.581 42.7867 261.709 42.712C261.687 42.6587 261.677 42.584 261.677 42.488C261.677 42.3173 261.73 42.1627 261.837 42.024C261.954 41.8747 262.066 41.784 262.173 41.752C262.215 41.6027 262.317 41.464 262.477 41.336C262.647 41.1973 262.823 41.1333 263.005 41.144C263.218 40.824 263.431 40.68 263.645 40.712C263.741 40.584 263.869 40.4933 264.029 40.44C264.199 40.3867 264.354 40.3653 264.493 40.376C264.599 40.3013 264.717 40.264 264.845 40.264C264.973 40.264 265.101 40.296 265.229 40.36C265.314 40.296 265.431 40.264 265.581 40.264C265.687 40.264 265.789 40.28 265.885 40.312C265.981 40.344 266.045 40.3813 266.077 40.424C266.162 40.4027 266.253 40.424 266.349 40.488C266.445 40.5413 266.503 40.6107 266.525 40.696C266.706 40.696 266.861 40.7547 266.989 40.872C267.127 40.9787 267.229 41.1067 267.293 41.256C267.367 41.3947 267.399 41.5013 267.389 41.576C267.57 41.6613 267.698 41.8 267.773 41.992C267.847 42.1627 267.885 42.312 267.885 42.44C267.885 42.6533 267.805 42.8187 267.645 42.936C267.538 43.0107 267.426 43.048 267.309 43.048C267.117 43.048 266.93 42.968 266.749 42.808C266.578 42.648 266.466 42.4507 266.413 42.216C266.274 42.1947 266.141 42.1467 266.013 42.072C265.885 41.9867 265.783 41.896 265.709 41.8C265.677 41.8107 265.597 41.816 265.469 41.816C265.351 41.816 265.271 41.8107 265.229 41.8C265.133 41.896 265.026 41.944 264.909 41.944C264.791 41.944 264.679 41.9067 264.573 41.832C264.434 42.0453 264.231 42.152 263.965 42.152C263.826 42.344 263.703 42.4933 263.597 42.6C263.49 42.696 263.346 42.7333 263.164 42.712C263.175 42.744 263.181 42.792 263.181 42.856C263.181 42.984 263.149 43.096 263.085 43.192C263.021 43.288 262.946 43.3787 262.861 43.464C262.786 43.5387 262.727 43.5973 262.685 43.64C262.738 43.8 262.765 43.9493 262.765 44.088C262.765 44.3333 262.69 44.6267 262.541 44.968C262.594 45.0427 262.637 45.1493 262.669 45.288C262.711 45.416 262.733 45.544 262.733 45.672C262.733 45.7467 262.727 45.8 262.717 45.832C262.791 45.8853 262.855 45.976 262.909 46.104C262.973 46.232 263.005 46.3547 263.005 46.472C263.271 46.5573 263.49 46.68 263.661 46.84C263.842 47 263.933 47.1493 263.933 47.288C264.05 47.192 264.178 47.144 264.317 47.144C264.445 47.144 264.567 47.176 264.685 47.24C264.813 47.304 264.909 47.3893 264.973 47.496C265.026 47.4853 265.09 47.48 265.165 47.48C265.325 47.48 265.463 47.5333 265.581 47.64C265.623 47.5547 265.73 47.464 265.901 47.368C266.071 47.272 266.21 47.2293 266.317 47.24C266.381 47.1333 266.466 47.0533 266.573 47C266.69 46.9467 266.813 46.92 266.941 46.92C267.026 46.92 267.085 46.9253 267.117 46.936C267.255 46.7653 267.442 46.68 267.677 46.68C267.879 46.68 268.055 46.7493 268.205 46.888C268.354 47.0267 268.429 47.1973 268.429 47.4C268.429 47.6347 268.327 47.832 268.125 47.992C267.933 48.1413 267.714 48.216 267.469 48.216C267.373 48.216 267.303 48.2107 267.261 48.2C267.346 48.2213 267.335 48.2693 267.229 48.344C267.133 48.4187 266.994 48.4933 266.813 48.568C266.631 48.632 266.487 48.6587 266.381 48.648ZM269.93 37.592C269.791 37.656 269.679 37.7467 269.594 37.864C269.508 37.9813 269.465 38.104 269.465 38.232C269.465 38.4027 269.535 38.5733 269.674 38.744C269.652 38.8827 269.727 39.016 269.898 39.144C270.068 39.272 270.255 39.336 270.458 39.336C270.596 39.336 270.719 39.2987 270.826 39.224C271.124 39.064 271.274 38.8613 271.274 38.616C271.274 38.456 271.21 38.2747 271.082 38.072C271.092 37.8587 271.028 37.6933 270.89 37.576C270.762 37.448 270.607 37.384 270.426 37.384C270.223 37.384 270.058 37.4533 269.93 37.592ZM270.97 44.664C271.055 44.696 271.119 44.7973 271.162 44.968C271.215 45.1387 271.242 45.3253 271.242 45.528C271.242 45.7627 271.204 45.9173 271.13 45.992C271.194 46.152 271.226 46.3067 271.226 46.456C271.226 46.648 271.178 46.808 271.082 46.936C271.156 47.1173 271.194 47.3307 271.194 47.576C271.194 47.7787 271.162 47.944 271.098 48.072C271.13 48.168 271.146 48.2587 271.146 48.344C271.146 48.536 271.076 48.6907 270.938 48.808C270.799 48.9147 270.634 48.968 270.442 48.968C270.26 48.968 270.106 48.9147 269.978 48.808C269.85 48.6907 269.791 48.536 269.802 48.344C269.748 48.28 269.706 48.1787 269.674 48.04C269.642 47.9013 269.626 47.7573 269.626 47.608C269.626 47.3307 269.684 47.1493 269.802 47.064C269.716 46.9253 269.674 46.7173 269.674 46.44C269.674 46.1627 269.711 45.96 269.786 45.832C269.743 45.7893 269.711 45.688 269.69 45.528C269.668 45.368 269.658 45.192 269.658 45C269.658 44.8187 269.668 44.6587 269.69 44.52C269.711 44.3707 269.743 44.2747 269.786 44.232C269.722 44.168 269.69 43.992 269.69 43.704C269.69 43.3733 269.727 43.1333 269.802 42.984C269.748 42.8987 269.7 42.7867 269.658 42.648C269.615 42.5093 269.594 42.3813 269.594 42.264C269.594 42.1573 269.604 42.0827 269.626 42.04C269.54 41.7627 269.498 41.5387 269.498 41.368C269.498 41.1867 269.54 41 269.626 40.808C269.604 40.648 269.642 40.5253 269.738 40.44C269.834 40.3547 269.972 40.312 270.154 40.312C270.644 40.312 270.89 40.6107 270.89 41.208C270.986 41.272 271.055 41.3627 271.098 41.48C271.151 41.5867 271.178 41.7093 271.178 41.848C271.178 42.072 271.124 42.264 271.018 42.424C271.06 42.488 271.092 42.584 271.114 42.712C271.146 42.84 271.162 42.968 271.162 43.096C271.162 43.2667 271.135 43.384 271.082 43.448C271.124 43.5013 271.146 43.6133 271.146 43.784C271.146 43.944 271.124 44.1147 271.082 44.296C271.05 44.4773 271.012 44.6 270.97 44.664ZM277.237 48.056C277.216 48.152 277.136 48.232 276.997 48.296C276.859 48.36 276.709 48.392 276.549 48.392C276.475 48.392 276.421 48.3867 276.389 48.376C276.336 48.4613 276.224 48.5467 276.053 48.632C275.883 48.7173 275.733 48.76 275.605 48.76C275.541 48.76 275.483 48.744 275.429 48.712C275.323 48.7333 275.232 48.744 275.157 48.744C275.008 48.744 274.859 48.7173 274.709 48.664C274.571 48.6107 274.464 48.5413 274.389 48.456C274.208 48.4773 274.037 48.456 273.877 48.392C273.728 48.3173 273.643 48.2213 273.621 48.104C273.504 48.1253 273.371 48.0773 273.221 47.96C273.083 47.8427 273.008 47.6827 272.997 47.48C272.837 47.3947 272.72 47.2667 272.645 47.096C272.571 46.9253 272.533 46.744 272.533 46.552C272.533 46.4133 272.549 46.3067 272.581 46.232C272.496 46.1573 272.427 46.0027 272.373 45.768C272.32 45.5227 272.293 45.2667 272.293 45C272.293 44.68 272.331 44.4453 272.405 44.296C272.352 44.1893 272.325 44.0667 272.325 43.928C272.325 43.8107 272.341 43.6987 272.373 43.592C272.416 43.4853 272.475 43.4 272.549 43.336C272.517 43.2827 272.501 43.2347 272.501 43.192C272.501 43.1173 272.528 43.0373 272.581 42.952C272.635 42.8667 272.693 42.8027 272.757 42.76C272.747 42.5893 272.789 42.4347 272.885 42.296C272.992 42.1467 273.099 42.056 273.205 42.024C273.195 41.9173 273.232 41.7893 273.317 41.64C273.403 41.4907 273.515 41.368 273.653 41.272C273.803 41.176 273.952 41.1333 274.101 41.144C274.315 40.8453 274.608 40.696 274.981 40.696C275.141 40.696 275.264 40.7173 275.349 40.76C275.467 40.7067 275.611 40.68 275.781 40.68C275.952 40.68 276.139 40.7227 276.341 40.808C276.405 40.776 276.485 40.76 276.581 40.76C276.688 40.76 276.789 40.7813 276.885 40.824C276.992 40.856 277.061 40.904 277.093 40.968C277.083 40.9253 277.077 40.8613 277.077 40.776C277.077 40.6053 277.12 40.456 277.205 40.328C277.131 40.2 277.093 40.072 277.093 39.944C277.093 39.88 277.099 39.832 277.109 39.8C277.099 39.7467 277.077 39.6773 277.045 39.592C277.013 39.496 276.997 39.416 276.997 39.352C276.997 39.2667 277.019 39.1813 277.061 39.096C277.008 38.9893 276.981 38.8827 276.981 38.776C276.981 38.6587 277.013 38.5467 277.077 38.44C277.003 38.2907 276.965 38.136 276.965 37.976C276.965 37.7627 277.024 37.5707 277.141 37.4C277.269 37.2293 277.44 37.144 277.653 37.144C277.835 37.144 277.989 37.2133 278.117 37.352C278.256 37.48 278.325 37.6293 278.325 37.8C278.325 37.864 278.32 37.912 278.309 37.944C278.469 38.072 278.549 38.248 278.549 38.472C278.549 38.5893 278.512 38.712 278.437 38.84C278.469 38.9147 278.485 38.9947 278.485 39.08C278.485 39.1973 278.459 39.3093 278.405 39.416C278.459 39.5227 278.485 39.6347 278.485 39.752C278.485 39.9013 278.448 40.0293 278.373 40.136C278.48 40.264 278.533 40.3867 278.533 40.504C278.533 40.5893 278.501 40.68 278.437 40.776C278.469 40.84 278.485 40.92 278.485 41.016C278.485 41.0907 278.469 41.1707 278.437 41.256C278.523 41.3733 278.565 41.5013 278.565 41.64C278.565 41.7467 278.539 41.8533 278.485 41.96C278.549 42.0667 278.581 42.1947 278.581 42.344C278.581 42.5893 278.523 42.76 278.405 42.856C278.512 42.984 278.565 43.176 278.565 43.432C278.565 43.5813 278.544 43.7307 278.501 43.88C278.469 44.0293 278.437 44.136 278.405 44.2C278.512 44.36 278.565 44.5627 278.565 44.808C278.565 44.9253 278.539 45.0373 278.485 45.144C278.603 45.2613 278.661 45.4373 278.661 45.672C278.661 45.928 278.608 46.136 278.501 46.296C278.608 46.4347 278.661 46.632 278.661 46.888C278.661 47.0587 278.635 47.2133 278.581 47.352C278.539 47.48 278.48 47.5653 278.405 47.608C278.416 47.6827 278.443 47.7947 278.485 47.944C278.539 48.1787 278.565 48.328 278.565 48.392C278.565 48.5627 278.512 48.7013 278.405 48.808C278.277 48.936 278.128 49 277.957 49C277.819 49 277.691 48.952 277.573 48.856C277.467 48.7493 277.403 48.6107 277.381 48.44C277.328 48.3867 277.291 48.3173 277.269 48.232C277.248 48.136 277.237 48.0773 277.237 48.056ZM275.237 47.432C275.269 47.3573 275.365 47.32 275.525 47.32C275.6 47.32 275.664 47.3253 275.717 47.336C275.771 47.3467 275.813 47.352 275.845 47.352C275.856 47.2773 275.92 47.2133 276.037 47.16C276.165 47.096 276.288 47.064 276.405 47.064C276.48 47.064 276.544 47.08 276.597 47.112C276.587 47.0053 276.608 46.92 276.661 46.856C276.715 46.792 276.784 46.7333 276.869 46.68C276.965 46.616 277.035 46.568 277.077 46.536C277.056 46.4933 277.045 46.3973 277.045 46.248C277.045 45.928 277.083 45.7307 277.157 45.656C277.083 45.5813 277.045 45.432 277.045 45.208C277.045 44.952 277.083 44.728 277.157 44.536C277.093 44.3973 277.061 44.1627 277.061 43.832C277.061 43.512 277.083 43.2987 277.125 43.192C277.029 43 276.981 42.7813 276.981 42.536C276.981 42.344 277.003 42.2053 277.045 42.12C276.981 42.1627 276.885 42.168 276.757 42.136C276.64 42.0933 276.544 42.0347 276.469 41.96C276.427 42.024 276.341 42.056 276.213 42.056C276.128 42.056 276.043 42.0453 275.957 42.024C275.872 41.992 275.813 41.96 275.781 41.928C275.611 42.0027 275.445 42.04 275.285 42.04C275.243 42.04 275.179 42.0293 275.093 42.008C274.955 42.1573 274.848 42.264 274.773 42.328C274.699 42.392 274.597 42.4293 274.469 42.44C274.437 42.5147 274.405 42.6053 274.373 42.712C274.341 42.808 274.304 42.888 274.261 42.952C274.219 43.016 274.144 43.0693 274.037 43.112C274.016 43.2507 273.963 43.3627 273.877 43.448C273.888 43.4907 273.893 43.5493 273.893 43.624C273.893 43.7307 273.867 43.848 273.813 43.976C273.845 44.0507 273.861 44.216 273.861 44.472C273.861 44.9627 273.819 45.256 273.733 45.352C273.744 45.3947 273.781 45.496 273.845 45.656C273.909 45.816 273.941 45.9707 273.941 46.12C273.941 46.2373 273.92 46.344 273.877 46.44C274.091 46.5253 274.224 46.6747 274.277 46.888C274.384 46.92 274.485 46.9893 274.581 47.096C274.837 47.0853 275.056 47.1973 275.237 47.432Z M259.48 193.098C259.488 191.41 259.707 190.195 260.137 189.453C260.566 188.703 261.219 188.305 262.094 188.258C262.477 188.258 262.816 188.363 263.113 188.574C263.41 188.785 263.645 189.055 263.816 189.383C263.996 189.703 264.145 190.09 264.262 190.543C264.379 190.988 264.457 191.414 264.496 191.82C264.543 192.219 264.574 192.645 264.59 193.098C264.59 193.715 264.496 194.348 264.309 194.996C264.129 195.637 263.848 196.199 263.465 196.684C263.09 197.16 262.668 197.398 262.199 197.398C260.387 197.398 259.48 195.965 259.48 193.098ZM261.93 189.16C261.742 189.199 261.574 189.262 261.426 189.348C261.277 189.434 261.152 189.531 261.051 189.641C260.957 189.75 260.875 189.895 260.805 190.074C260.734 190.254 260.68 190.422 260.641 190.578C260.609 190.727 260.578 190.922 260.547 191.164C260.523 191.406 260.508 191.617 260.5 191.797C260.492 191.969 260.48 192.199 260.465 192.488C260.457 192.77 260.445 193 260.43 193.18C260.43 193.539 260.449 193.883 260.488 194.211C260.527 194.531 260.598 194.867 260.699 195.219C260.809 195.57 260.977 195.855 261.203 196.074C261.43 196.293 261.703 196.418 262.023 196.449C262.508 196.449 262.906 196.113 263.219 195.441C263.539 194.77 263.699 194.09 263.699 193.402C263.699 190.605 263.109 189.191 261.93 189.16ZM265.117 195.535C265.328 195.535 265.504 195.629 265.645 195.816C265.793 195.996 265.867 196.203 265.867 196.438C265.867 196.609 265.824 196.75 265.738 196.859C265.66 196.961 265.551 197.012 265.41 197.012C265.191 197.012 265.016 196.922 264.883 196.742C264.758 196.562 264.695 196.352 264.695 196.109C264.695 195.938 264.73 195.801 264.801 195.699C264.879 195.59 264.984 195.535 265.117 195.535ZM266.582 193.098C266.59 191.41 266.809 190.195 267.238 189.453C267.668 188.703 268.32 188.305 269.195 188.258C269.578 188.258 269.918 188.363 270.215 188.574C270.512 188.785 270.746 189.055 270.918 189.383C271.098 189.703 271.246 190.09 271.363 190.543C271.48 190.988 271.559 191.414 271.598 191.82C271.645 192.219 271.676 192.645 271.691 193.098C271.691 193.715 271.598 194.348 271.41 194.996C271.23 195.637 270.949 196.199 270.566 196.684C270.191 197.16 269.77 197.398 269.301 197.398C267.488 197.398 266.582 195.965 266.582 193.098ZM269.031 189.16C268.844 189.199 268.676 189.262 268.527 189.348C268.379 189.434 268.254 189.531 268.152 189.641C268.059 189.75 267.977 189.895 267.906 190.074C267.836 190.254 267.781 190.422 267.742 190.578C267.711 190.727 267.68 190.922 267.648 191.164C267.625 191.406 267.609 191.617 267.602 191.797C267.594 191.969 267.582 192.199 267.566 192.488C267.559 192.77 267.547 193 267.531 193.18C267.531 193.539 267.551 193.883 267.59 194.211C267.629 194.531 267.699 194.867 267.801 195.219C267.91 195.57 268.078 195.855 268.305 196.074C268.531 196.293 268.805 196.418 269.125 196.449C269.609 196.449 270.008 196.113 270.32 195.441C270.641 194.77 270.801 194.09 270.801 193.402C270.801 190.605 270.211 189.191 269.031 189.16ZM276.812 188.516L277.012 189.043C275.184 189.824 274.098 190.871 273.754 192.184C274.066 191.98 274.383 191.879 274.703 191.879C275.375 191.879 275.938 192.184 276.391 192.793C276.844 193.395 277.07 194.164 277.07 195.102C277.07 195.773 276.863 196.309 276.449 196.707C276.043 197.105 275.523 197.305 274.891 197.305C274.297 197.305 273.773 197.09 273.32 196.66C272.875 196.223 272.652 195.645 272.652 194.926C272.652 194.473 272.66 194.078 272.676 193.742C272.699 193.406 272.742 193.039 272.805 192.641C272.875 192.234 272.969 191.883 273.086 191.586C273.203 191.289 273.363 190.98 273.566 190.66C273.777 190.332 274.027 190.047 274.316 189.805C274.605 189.555 274.957 189.32 275.371 189.102C275.793 188.875 276.273 188.68 276.812 188.516ZM273.496 194.586C273.496 195.234 273.617 195.723 273.859 196.051C274.102 196.371 274.402 196.531 274.762 196.531C275.145 196.531 275.477 196.402 275.758 196.145C276.039 195.887 276.18 195.531 276.18 195.078C276.18 194.391 276.023 193.816 275.711 193.355C275.398 192.895 275.02 192.664 274.574 192.664C274.371 192.664 274.199 192.703 274.059 192.781C273.918 192.852 273.812 192.934 273.742 193.027C273.672 193.121 273.617 193.27 273.578 193.473C273.539 193.668 273.516 193.836 273.508 193.977C273.5 194.109 273.496 194.312 273.496 194.586Z M260.48 271.098C260.488 269.41 260.707 268.195 261.137 267.453C261.566 266.703 262.219 266.305 263.094 266.258C263.477 266.258 263.816 266.363 264.113 266.574C264.41 266.785 264.645 267.055 264.816 267.383C264.996 267.703 265.145 268.09 265.262 268.543C265.379 268.988 265.457 269.414 265.496 269.82C265.543 270.219 265.574 270.645 265.59 271.098C265.59 271.715 265.496 272.348 265.309 272.996C265.129 273.637 264.848 274.199 264.465 274.684C264.09 275.16 263.668 275.398 263.199 275.398C261.387 275.398 260.48 273.965 260.48 271.098ZM262.93 267.16C262.742 267.199 262.574 267.262 262.426 267.348C262.277 267.434 262.152 267.531 262.051 267.641C261.957 267.75 261.875 267.895 261.805 268.074C261.734 268.254 261.68 268.422 261.641 268.578C261.609 268.727 261.578 268.922 261.547 269.164C261.523 269.406 261.508 269.617 261.5 269.797C261.492 269.969 261.48 270.199 261.465 270.488C261.457 270.77 261.445 271 261.43 271.18C261.43 271.539 261.449 271.883 261.488 272.211C261.527 272.531 261.598 272.867 261.699 273.219C261.809 273.57 261.977 273.855 262.203 274.074C262.43 274.293 262.703 274.418 263.023 274.449C263.508 274.449 263.906 274.113 264.219 273.441C264.539 272.77 264.699 272.09 264.699 271.402C264.699 268.605 264.109 267.191 262.93 267.16ZM266.117 273.535C266.328 273.535 266.504 273.629 266.645 273.816C266.793 273.996 266.867 274.203 266.867 274.438C266.867 274.609 266.824 274.75 266.738 274.859C266.66 274.961 266.551 275.012 266.41 275.012C266.191 275.012 266.016 274.922 265.883 274.742C265.758 274.562 265.695 274.352 265.695 274.109C265.695 273.938 265.73 273.801 265.801 273.699C265.879 273.59 265.984 273.535 266.117 273.535ZM271.906 271.59L272.023 272.117C271.617 272.164 271.328 272.195 271.156 272.211C271.172 272.57 271.191 273.023 271.215 273.57C271.246 274.117 271.266 274.566 271.273 274.918C271.203 275.16 271.07 275.281 270.875 275.281C270.734 275.281 270.598 275.223 270.465 275.105C270.332 274.988 270.25 274.848 270.219 274.684C270.227 274.441 270.254 273.645 270.301 272.293C270.051 272.309 269.852 272.316 269.703 272.316C269.469 272.316 269.105 272.305 268.613 272.281C268.129 272.25 267.773 272.234 267.547 272.234C267.438 272.234 267.289 272.242 267.102 272.258C267.117 272.07 267.125 271.941 267.125 271.871C267.125 271.824 267.121 271.75 267.113 271.648C267.113 271.539 267.113 271.457 267.113 271.402C268.418 269.207 269.473 267.578 270.277 266.516C270.52 266.516 270.852 266.566 271.273 266.668C271.258 267.035 271.234 267.832 271.203 269.059C271.18 270.277 271.156 271.102 271.133 271.531C271.477 271.547 271.734 271.566 271.906 271.59ZM267.969 271.438L270.324 271.508C270.348 271.062 270.371 270.402 270.395 269.527C270.418 268.652 270.438 267.992 270.453 267.547C270.133 267.875 269.668 268.562 269.059 269.609C268.457 270.648 268.094 271.258 267.969 271.438ZM276.652 274.191L277.016 274.965C276.43 274.98 275.512 274.992 274.262 275C273.012 275 272.348 275 272.27 275C272.27 274.938 272.266 274.828 272.258 274.672C272.258 274.516 272.258 274.391 272.258 274.297C272.406 274.039 272.652 273.73 272.996 273.371C273.34 273.004 273.684 272.648 274.027 272.305C274.371 271.953 274.707 271.57 275.035 271.156C275.371 270.742 275.645 270.281 275.855 269.773C276.066 269.258 276.172 268.73 276.172 268.191C276.172 267.848 276.051 267.57 275.809 267.359C275.566 267.141 275.273 267.031 274.93 267.031C274.531 267.031 274.16 267.195 273.816 267.523C273.48 267.844 273.246 268.336 273.113 269L272.586 268.812C272.617 268.055 272.863 267.465 273.324 267.043C273.793 266.621 274.332 266.41 274.941 266.41C275.488 266.41 275.957 266.582 276.348 266.926C276.738 267.27 276.934 267.75 276.934 268.367C276.934 268.875 276.855 269.371 276.699 269.855C276.543 270.332 276.316 270.781 276.02 271.203C275.723 271.625 275.445 271.988 275.188 272.293C274.93 272.59 274.605 272.938 274.215 273.336C273.832 273.727 273.562 274.008 273.406 274.18C273.672 274.195 273.898 274.203 274.086 274.203C274.281 274.203 274.586 274.199 275 274.191C275.414 274.176 275.723 274.168 275.926 274.168C276.113 274.168 276.355 274.176 276.652 274.191Z M258.48 89.0977C258.488 87.4102 258.707 86.1953 259.137 85.4531C259.566 84.7031 260.219 84.3047 261.094 84.2578C261.477 84.2578 261.816 84.3633 262.113 84.5742C262.41 84.7852 262.645 85.0547 262.816 85.3828C262.996 85.7031 263.145 86.0898 263.262 86.543C263.379 86.9883 263.457 87.4141 263.496 87.8203C263.543 88.2188 263.574 88.6445 263.59 89.0977C263.59 89.7148 263.496 90.3477 263.309 90.9961C263.129 91.6367 262.848 92.1992 262.465 92.6836C262.09 93.1602 261.668 93.3984 261.199 93.3984C259.387 93.3984 258.48 91.9648 258.48 89.0977ZM260.93 85.1602C260.742 85.1992 260.574 85.2617 260.426 85.3477C260.277 85.4336 260.152 85.5312 260.051 85.6406C259.957 85.75 259.875 85.8945 259.805 86.0742C259.734 86.2539 259.68 86.4219 259.641 86.5781C259.609 86.7266 259.578 86.9219 259.547 87.1641C259.523 87.4062 259.508 87.6172 259.5 87.7969C259.492 87.9688 259.48 88.1992 259.465 88.4883C259.457 88.7695 259.445 89 259.43 89.1797C259.43 89.5391 259.449 89.8828 259.488 90.2109C259.527 90.5312 259.598 90.8672 259.699 91.2188C259.809 91.5703 259.977 91.8555 260.203 92.0742C260.43 92.293 260.703 92.418 261.023 92.4492C261.508 92.4492 261.906 92.1133 262.219 91.4414C262.539 90.7695 262.699 90.0898 262.699 89.4023C262.699 86.6055 262.109 85.1914 260.93 85.1602ZM264.117 91.5352C264.328 91.5352 264.504 91.6289 264.645 91.8164C264.793 91.9961 264.867 92.2031 264.867 92.4375C264.867 92.6094 264.824 92.75 264.738 92.8594C264.66 92.9609 264.551 93.0117 264.41 93.0117C264.191 93.0117 264.016 92.9219 263.883 92.7422C263.758 92.5625 263.695 92.3516 263.695 92.1094C263.695 91.9375 263.73 91.8008 263.801 91.6992C263.879 91.5898 263.984 91.5352 264.117 91.5352ZM265.582 89.0977C265.59 87.4102 265.809 86.1953 266.238 85.4531C266.668 84.7031 267.32 84.3047 268.195 84.2578C268.578 84.2578 268.918 84.3633 269.215 84.5742C269.512 84.7852 269.746 85.0547 269.918 85.3828C270.098 85.7031 270.246 86.0898 270.363 86.543C270.48 86.9883 270.559 87.4141 270.598 87.8203C270.645 88.2188 270.676 88.6445 270.691 89.0977C270.691 89.7148 270.598 90.3477 270.41 90.9961C270.23 91.6367 269.949 92.1992 269.566 92.6836C269.191 93.1602 268.77 93.3984 268.301 93.3984C266.488 93.3984 265.582 91.9648 265.582 89.0977ZM268.031 85.1602C267.844 85.1992 267.676 85.2617 267.527 85.3477C267.379 85.4336 267.254 85.5312 267.152 85.6406C267.059 85.75 266.977 85.8945 266.906 86.0742C266.836 86.2539 266.781 86.4219 266.742 86.5781C266.711 86.7266 266.68 86.9219 266.648 87.1641C266.625 87.4062 266.609 87.6172 266.602 87.7969C266.594 87.9688 266.582 88.1992 266.566 88.4883C266.559 88.7695 266.547 89 266.531 89.1797C266.531 89.5391 266.551 89.8828 266.59 90.2109C266.629 90.5312 266.699 90.8672 266.801 91.2188C266.91 91.5703 267.078 91.8555 267.305 92.0742C267.531 92.293 267.805 92.418 268.125 92.4492C268.609 92.4492 269.008 92.1133 269.32 91.4414C269.641 90.7695 269.801 90.0898 269.801 89.4023C269.801 86.6055 269.211 85.1914 268.031 85.1602ZM271.652 89.0977C271.66 87.4102 271.879 86.1953 272.309 85.4531C272.738 84.7031 273.391 84.3047 274.266 84.2578C274.648 84.2578 274.988 84.3633 275.285 84.5742C275.582 84.7852 275.816 85.0547 275.988 85.3828C276.168 85.7031 276.316 86.0898 276.434 86.543C276.551 86.9883 276.629 87.4141 276.668 87.8203C276.715 88.2188 276.746 88.6445 276.762 89.0977C276.762 89.7148 276.668 90.3477 276.48 90.9961C276.301 91.6367 276.02 92.1992 275.637 92.6836C275.262 93.1602 274.84 93.3984 274.371 93.3984C272.559 93.3984 271.652 91.9648 271.652 89.0977ZM274.102 85.1602C273.914 85.1992 273.746 85.2617 273.598 85.3477C273.449 85.4336 273.324 85.5312 273.223 85.6406C273.129 85.75 273.047 85.8945 272.977 86.0742C272.906 86.2539 272.852 86.4219 272.812 86.5781C272.781 86.7266 272.75 86.9219 272.719 87.1641C272.695 87.4062 272.68 87.6172 272.672 87.7969C272.664 87.9688 272.652 88.1992 272.637 88.4883C272.629 88.7695 272.617 89 272.602 89.1797C272.602 89.5391 272.621 89.8828 272.66 90.2109C272.699 90.5312 272.77 90.8672 272.871 91.2188C272.98 91.5703 273.148 91.8555 273.375 92.0742C273.602 92.293 273.875 92.418 274.195 92.4492C274.68 92.4492 275.078 92.1133 275.391 91.4414C275.711 90.7695 275.871 90.0898 275.871 89.4023C275.871 86.6055 275.281 85.1914 274.102 85.1602Z M262.48 297.098C262.488 295.41 262.707 294.195 263.137 293.453C263.566 292.703 264.219 292.305 265.094 292.258C265.477 292.258 265.816 292.363 266.113 292.574C266.41 292.785 266.645 293.055 266.816 293.383C266.996 293.703 267.145 294.09 267.262 294.543C267.379 294.988 267.457 295.414 267.496 295.82C267.543 296.219 267.574 296.645 267.59 297.098C267.59 297.715 267.496 298.348 267.309 298.996C267.129 299.637 266.848 300.199 266.465 300.684C266.09 301.16 265.668 301.398 265.199 301.398C263.387 301.398 262.48 299.965 262.48 297.098ZM264.93 293.16C264.742 293.199 264.574 293.262 264.426 293.348C264.277 293.434 264.152 293.531 264.051 293.641C263.957 293.75 263.875 293.895 263.805 294.074C263.734 294.254 263.68 294.422 263.641 294.578C263.609 294.727 263.578 294.922 263.547 295.164C263.523 295.406 263.508 295.617 263.5 295.797C263.492 295.969 263.48 296.199 263.465 296.488C263.457 296.77 263.445 297 263.43 297.18C263.43 297.539 263.449 297.883 263.488 298.211C263.527 298.531 263.598 298.867 263.699 299.219C263.809 299.57 263.977 299.855 264.203 300.074C264.43 300.293 264.703 300.418 265.023 300.449C265.508 300.449 265.906 300.113 266.219 299.441C266.539 298.77 266.699 298.09 266.699 297.402C266.699 294.605 266.109 293.191 264.93 293.16ZM268.117 299.535C268.328 299.535 268.504 299.629 268.645 299.816C268.793 299.996 268.867 300.203 268.867 300.438C268.867 300.609 268.824 300.75 268.738 300.859C268.66 300.961 268.551 301.012 268.41 301.012C268.191 301.012 268.016 300.922 267.883 300.742C267.758 300.562 267.695 300.352 267.695 300.109C267.695 299.938 267.73 299.801 267.801 299.699C267.879 299.59 267.984 299.535 268.117 299.535ZM269.641 300.965V300.344C269.828 300.32 270.059 300.281 270.332 300.227C270.613 300.172 270.832 300.133 270.988 300.109C271.012 299.547 271.023 298.98 271.023 298.41C271.023 298.051 271.02 297.512 271.012 296.793C271.004 296.066 271 295.52 271 295.152C271 294.285 271.012 293.629 271.035 293.184C270.324 293.59 269.805 293.918 269.477 294.168L269.102 293.781C269.227 293.68 269.441 293.504 269.746 293.254C270.051 292.996 270.324 292.766 270.566 292.562C270.809 292.352 270.996 292.18 271.129 292.047C271.254 292.062 271.383 292.074 271.516 292.082C271.648 292.082 271.777 292.09 271.902 292.105C271.949 293.012 271.973 294.672 271.973 297.086C271.973 298.523 271.984 299.555 272.008 300.18C272.078 300.188 272.246 300.219 272.512 300.273C272.785 300.32 272.996 300.352 273.145 300.367L273.332 300.988C272.941 300.988 272.602 300.988 272.312 300.988C272.023 300.988 271.637 300.988 271.152 300.988C270.676 300.988 270.301 300.988 270.027 300.988C269.762 300.98 269.633 300.973 269.641 300.965ZM273.871 300.965V300.344C274.059 300.32 274.289 300.281 274.562 300.227C274.844 300.172 275.062 300.133 275.219 300.109C275.242 299.547 275.254 298.98 275.254 298.41C275.254 298.051 275.25 297.512 275.242 296.793C275.234 296.066 275.23 295.52 275.23 295.152C275.23 294.285 275.242 293.629 275.266 293.184C274.555 293.59 274.035 293.918 273.707 294.168L273.332 293.781C273.457 293.68 273.672 293.504 273.977 293.254C274.281 292.996 274.555 292.766 274.797 292.562C275.039 292.352 275.227 292.18 275.359 292.047C275.484 292.062 275.613 292.074 275.746 292.082C275.879 292.082 276.008 292.09 276.133 292.105C276.18 293.012 276.203 294.672 276.203 297.086C276.203 298.523 276.215 299.555 276.238 300.18C276.309 300.188 276.477 300.219 276.742 300.273C277.016 300.32 277.227 300.352 277.375 300.367L277.562 300.988C277.172 300.988 276.832 300.988 276.543 300.988C276.254 300.988 275.867 300.988 275.383 300.988C274.906 300.988 274.531 300.988 274.258 300.988C273.992 300.98 273.863 300.973 273.871 300.965Z M260.48 141.098C260.488 139.41 260.707 138.195 261.137 137.453C261.566 136.703 262.219 136.305 263.094 136.258C263.477 136.258 263.816 136.363 264.113 136.574C264.41 136.785 264.645 137.055 264.816 137.383C264.996 137.703 265.145 138.09 265.262 138.543C265.379 138.988 265.457 139.414 265.496 139.82C265.543 140.219 265.574 140.645 265.59 141.098C265.59 141.715 265.496 142.348 265.309 142.996C265.129 143.637 264.848 144.199 264.465 144.684C264.09 145.16 263.668 145.398 263.199 145.398C261.387 145.398 260.48 143.965 260.48 141.098ZM262.93 137.16C262.742 137.199 262.574 137.262 262.426 137.348C262.277 137.434 262.152 137.531 262.051 137.641C261.957 137.75 261.875 137.895 261.805 138.074C261.734 138.254 261.68 138.422 261.641 138.578C261.609 138.727 261.578 138.922 261.547 139.164C261.523 139.406 261.508 139.617 261.5 139.797C261.492 139.969 261.48 140.199 261.465 140.488C261.457 140.77 261.445 141 261.43 141.18C261.43 141.539 261.449 141.883 261.488 142.211C261.527 142.531 261.598 142.867 261.699 143.219C261.809 143.57 261.977 143.855 262.203 144.074C262.43 144.293 262.703 144.418 263.023 144.449C263.508 144.449 263.906 144.113 264.219 143.441C264.539 142.77 264.699 142.09 264.699 141.402C264.699 138.605 264.109 137.191 262.93 137.16ZM266.117 143.535C266.328 143.535 266.504 143.629 266.645 143.816C266.793 143.996 266.867 144.203 266.867 144.438C266.867 144.609 266.824 144.75 266.738 144.859C266.66 144.961 266.551 145.012 266.41 145.012C266.191 145.012 266.016 144.922 265.883 144.742C265.758 144.562 265.695 144.352 265.695 144.109C265.695 143.938 265.73 143.801 265.801 143.699C265.879 143.59 265.984 143.535 266.117 143.535ZM271.754 136.68L271.883 137.207C271.5 137.277 271.062 137.312 270.57 137.312C269.836 137.312 269.367 137.324 269.164 137.348C269.047 138.246 268.895 139.199 268.707 140.207C268.934 140.16 269.152 140.137 269.363 140.137C270.051 140.137 270.66 140.41 271.191 140.957C271.723 141.496 271.988 142.121 271.988 142.832C271.988 143.504 271.727 144.078 271.203 144.555C270.68 145.031 270.035 145.27 269.27 145.27C268.527 145.27 267.805 145.023 267.102 144.531C267.109 144.523 267.168 144.398 267.277 144.156C267.395 143.914 267.508 143.793 267.617 143.793C267.672 143.793 267.723 143.812 267.77 143.852C268.309 144.258 268.816 144.461 269.293 144.461C269.777 144.461 270.176 144.27 270.488 143.887C270.801 143.504 270.957 143.074 270.957 142.598C270.957 142.152 270.809 141.773 270.512 141.461C270.223 141.148 269.797 140.992 269.234 140.992C269.031 140.992 268.84 141.008 268.66 141.039C268.504 140.953 268.332 140.867 268.145 140.781C267.957 140.695 267.801 140.621 267.676 140.559C267.855 139.855 268.004 139.152 268.121 138.449C268.238 137.746 268.395 137.117 268.59 136.562C268.863 136.586 269.367 136.598 270.102 136.598C270.836 136.598 271.387 136.625 271.754 136.68ZM276.863 136.516L277.062 137.043C275.234 137.824 274.148 138.871 273.805 140.184C274.117 139.98 274.434 139.879 274.754 139.879C275.426 139.879 275.988 140.184 276.441 140.793C276.895 141.395 277.121 142.164 277.121 143.102C277.121 143.773 276.914 144.309 276.5 144.707C276.094 145.105 275.574 145.305 274.941 145.305C274.348 145.305 273.824 145.09 273.371 144.66C272.926 144.223 272.703 143.645 272.703 142.926C272.703 142.473 272.711 142.078 272.727 141.742C272.75 141.406 272.793 141.039 272.855 140.641C272.926 140.234 273.02 139.883 273.137 139.586C273.254 139.289 273.414 138.98 273.617 138.66C273.828 138.332 274.078 138.047 274.367 137.805C274.656 137.555 275.008 137.32 275.422 137.102C275.844 136.875 276.324 136.68 276.863 136.516ZM273.547 142.586C273.547 143.234 273.668 143.723 273.91 144.051C274.152 144.371 274.453 144.531 274.812 144.531C275.195 144.531 275.527 144.402 275.809 144.145C276.09 143.887 276.23 143.531 276.23 143.078C276.23 142.391 276.074 141.816 275.762 141.355C275.449 140.895 275.07 140.664 274.625 140.664C274.422 140.664 274.25 140.703 274.109 140.781C273.969 140.852 273.863 140.934 273.793 141.027C273.723 141.121 273.668 141.27 273.629 141.473C273.59 141.668 273.566 141.836 273.559 141.977C273.551 142.109 273.547 142.312 273.547 142.586Z M259.48 115.098C259.488 113.41 259.707 112.195 260.137 111.453C260.566 110.703 261.219 110.305 262.094 110.258C262.477 110.258 262.816 110.363 263.113 110.574C263.41 110.785 263.645 111.055 263.816 111.383C263.996 111.703 264.145 112.09 264.262 112.543C264.379 112.988 264.457 113.414 264.496 113.82C264.543 114.219 264.574 114.645 264.59 115.098C264.59 115.715 264.496 116.348 264.309 116.996C264.129 117.637 263.848 118.199 263.465 118.684C263.09 119.16 262.668 119.398 262.199 119.398C260.387 119.398 259.48 117.965 259.48 115.098ZM261.93 111.16C261.742 111.199 261.574 111.262 261.426 111.348C261.277 111.434 261.152 111.531 261.051 111.641C260.957 111.75 260.875 111.895 260.805 112.074C260.734 112.254 260.68 112.422 260.641 112.578C260.609 112.727 260.578 112.922 260.547 113.164C260.523 113.406 260.508 113.617 260.5 113.797C260.492 113.969 260.48 114.199 260.465 114.488C260.457 114.77 260.445 115 260.43 115.18C260.43 115.539 260.449 115.883 260.488 116.211C260.527 116.531 260.598 116.867 260.699 117.219C260.809 117.57 260.977 117.855 261.203 118.074C261.43 118.293 261.703 118.418 262.023 118.449C262.508 118.449 262.906 118.113 263.219 117.441C263.539 116.77 263.699 116.09 263.699 115.402C263.699 112.605 263.109 111.191 261.93 111.16ZM265.117 117.535C265.328 117.535 265.504 117.629 265.645 117.816C265.793 117.996 265.867 118.203 265.867 118.438C265.867 118.609 265.824 118.75 265.738 118.859C265.66 118.961 265.551 119.012 265.41 119.012C265.191 119.012 265.016 118.922 264.883 118.742C264.758 118.562 264.695 118.352 264.695 118.109C264.695 117.938 264.73 117.801 264.801 117.699C264.879 117.59 264.984 117.535 265.117 117.535ZM266.582 115.098C266.59 113.41 266.809 112.195 267.238 111.453C267.668 110.703 268.32 110.305 269.195 110.258C269.578 110.258 269.918 110.363 270.215 110.574C270.512 110.785 270.746 111.055 270.918 111.383C271.098 111.703 271.246 112.09 271.363 112.543C271.48 112.988 271.559 113.414 271.598 113.82C271.645 114.219 271.676 114.645 271.691 115.098C271.691 115.715 271.598 116.348 271.41 116.996C271.23 117.637 270.949 118.199 270.566 118.684C270.191 119.16 269.77 119.398 269.301 119.398C267.488 119.398 266.582 117.965 266.582 115.098ZM269.031 111.16C268.844 111.199 268.676 111.262 268.527 111.348C268.379 111.434 268.254 111.531 268.152 111.641C268.059 111.75 267.977 111.895 267.906 112.074C267.836 112.254 267.781 112.422 267.742 112.578C267.711 112.727 267.68 112.922 267.648 113.164C267.625 113.406 267.609 113.617 267.602 113.797C267.594 113.969 267.582 114.199 267.566 114.488C267.559 114.77 267.547 115 267.531 115.18C267.531 115.539 267.551 115.883 267.59 116.211C267.629 116.531 267.699 116.867 267.801 117.219C267.91 117.57 268.078 117.855 268.305 118.074C268.531 118.293 268.805 118.418 269.125 118.449C269.609 118.449 270.008 118.113 270.32 117.441C270.641 116.77 270.801 116.09 270.801 115.402C270.801 112.605 270.211 111.191 269.031 111.16ZM276.977 115.59L277.094 116.117C276.688 116.164 276.398 116.195 276.227 116.211C276.242 116.57 276.262 117.023 276.285 117.57C276.316 118.117 276.336 118.566 276.344 118.918C276.273 119.16 276.141 119.281 275.945 119.281C275.805 119.281 275.668 119.223 275.535 119.105C275.402 118.988 275.32 118.848 275.289 118.684C275.297 118.441 275.324 117.645 275.371 116.293C275.121 116.309 274.922 116.316 274.773 116.316C274.539 116.316 274.176 116.305 273.684 116.281C273.199 116.25 272.844 116.234 272.617 116.234C272.508 116.234 272.359 116.242 272.172 116.258C272.188 116.07 272.195 115.941 272.195 115.871C272.195 115.824 272.191 115.75 272.184 115.648C272.184 115.539 272.184 115.457 272.184 115.402C273.488 113.207 274.543 111.578 275.348 110.516C275.59 110.516 275.922 110.566 276.344 110.668C276.328 111.035 276.305 111.832 276.273 113.059C276.25 114.277 276.227 115.102 276.203 115.531C276.547 115.547 276.805 115.566 276.977 115.59ZM273.039 115.438L275.395 115.508C275.418 115.062 275.441 114.402 275.465 113.527C275.488 112.652 275.508 111.992 275.523 111.547C275.203 111.875 274.738 112.562 274.129 113.609C273.527 114.648 273.164 115.258 273.039 115.438Z M260.48 323.098C260.488 321.41 260.707 320.195 261.137 319.453C261.566 318.703 262.219 318.305 263.094 318.258C263.477 318.258 263.816 318.363 264.113 318.574C264.41 318.785 264.645 319.055 264.816 319.383C264.996 319.703 265.145 320.09 265.262 320.543C265.379 320.988 265.457 321.414 265.496 321.82C265.543 322.219 265.574 322.645 265.59 323.098C265.59 323.715 265.496 324.348 265.309 324.996C265.129 325.637 264.848 326.199 264.465 326.684C264.09 327.16 263.668 327.398 263.199 327.398C261.387 327.398 260.48 325.965 260.48 323.098ZM262.93 319.16C262.742 319.199 262.574 319.262 262.426 319.348C262.277 319.434 262.152 319.531 262.051 319.641C261.957 319.75 261.875 319.895 261.805 320.074C261.734 320.254 261.68 320.422 261.641 320.578C261.609 320.727 261.578 320.922 261.547 321.164C261.523 321.406 261.508 321.617 261.5 321.797C261.492 321.969 261.48 322.199 261.465 322.488C261.457 322.77 261.445 323 261.43 323.18C261.43 323.539 261.449 323.883 261.488 324.211C261.527 324.531 261.598 324.867 261.699 325.219C261.809 325.57 261.977 325.855 262.203 326.074C262.43 326.293 262.703 326.418 263.023 326.449C263.508 326.449 263.906 326.113 264.219 325.441C264.539 324.77 264.699 324.09 264.699 323.402C264.699 320.605 264.109 319.191 262.93 319.16ZM266.117 325.535C266.328 325.535 266.504 325.629 266.645 325.816C266.793 325.996 266.867 326.203 266.867 326.438C266.867 326.609 266.824 326.75 266.738 326.859C266.66 326.961 266.551 327.012 266.41 327.012C266.191 327.012 266.016 326.922 265.883 326.742C265.758 326.562 265.695 326.352 265.695 326.109C265.695 325.938 265.73 325.801 265.801 325.699C265.879 325.59 265.984 325.535 266.117 325.535ZM267.582 323.098C267.59 321.41 267.809 320.195 268.238 319.453C268.668 318.703 269.32 318.305 270.195 318.258C270.578 318.258 270.918 318.363 271.215 318.574C271.512 318.785 271.746 319.055 271.918 319.383C272.098 319.703 272.246 320.09 272.363 320.543C272.48 320.988 272.559 321.414 272.598 321.82C272.645 322.219 272.676 322.645 272.691 323.098C272.691 323.715 272.598 324.348 272.41 324.996C272.23 325.637 271.949 326.199 271.566 326.684C271.191 327.16 270.77 327.398 270.301 327.398C268.488 327.398 267.582 325.965 267.582 323.098ZM270.031 319.16C269.844 319.199 269.676 319.262 269.527 319.348C269.379 319.434 269.254 319.531 269.152 319.641C269.059 319.75 268.977 319.895 268.906 320.074C268.836 320.254 268.781 320.422 268.742 320.578C268.711 320.727 268.68 320.922 268.648 321.164C268.625 321.406 268.609 321.617 268.602 321.797C268.594 321.969 268.582 322.199 268.566 322.488C268.559 322.77 268.547 323 268.531 323.18C268.531 323.539 268.551 323.883 268.59 324.211C268.629 324.531 268.699 324.867 268.801 325.219C268.91 325.57 269.078 325.855 269.305 326.074C269.531 326.293 269.805 326.418 270.125 326.449C270.609 326.449 271.008 326.113 271.32 325.441C271.641 324.77 271.801 324.09 271.801 323.402C271.801 320.605 271.211 319.191 270.031 319.16ZM277.566 326.191L277.93 326.965C277.344 326.98 276.426 326.992 275.176 327C273.926 327 273.262 327 273.184 327C273.184 326.938 273.18 326.828 273.172 326.672C273.172 326.516 273.172 326.391 273.172 326.297C273.32 326.039 273.566 325.73 273.91 325.371C274.254 325.004 274.598 324.648 274.941 324.305C275.285 323.953 275.621 323.57 275.949 323.156C276.285 322.742 276.559 322.281 276.77 321.773C276.98 321.258 277.086 320.73 277.086 320.191C277.086 319.848 276.965 319.57 276.723 319.359C276.48 319.141 276.188 319.031 275.844 319.031C275.445 319.031 275.074 319.195 274.73 319.523C274.395 319.844 274.16 320.336 274.027 321L273.5 320.812C273.531 320.055 273.777 319.465 274.238 319.043C274.707 318.621 275.246 318.41 275.855 318.41C276.402 318.41 276.871 318.582 277.262 318.926C277.652 319.27 277.848 319.75 277.848 320.367C277.848 320.875 277.77 321.371 277.613 321.855C277.457 322.332 277.23 322.781 276.934 323.203C276.637 323.625 276.359 323.988 276.102 324.293C275.844 324.59 275.52 324.938 275.129 325.336C274.746 325.727 274.477 326.008 274.32 326.18C274.586 326.195 274.812 326.203 275 326.203C275.195 326.203 275.5 326.199 275.914 326.191C276.328 326.176 276.637 326.168 276.84 326.168C277.027 326.168 277.27 326.176 277.566 326.191Z M260.48 245.098C260.488 243.41 260.707 242.195 261.137 241.453C261.566 240.703 262.219 240.305 263.094 240.258C263.477 240.258 263.816 240.363 264.113 240.574C264.41 240.785 264.645 241.055 264.816 241.383C264.996 241.703 265.145 242.09 265.262 242.543C265.379 242.988 265.457 243.414 265.496 243.82C265.543 244.219 265.574 244.645 265.59 245.098C265.59 245.715 265.496 246.348 265.309 246.996C265.129 247.637 264.848 248.199 264.465 248.684C264.09 249.16 263.668 249.398 263.199 249.398C261.387 249.398 260.48 247.965 260.48 245.098ZM262.93 241.16C262.742 241.199 262.574 241.262 262.426 241.348C262.277 241.434 262.152 241.531 262.051 241.641C261.957 241.75 261.875 241.895 261.805 242.074C261.734 242.254 261.68 242.422 261.641 242.578C261.609 242.727 261.578 242.922 261.547 243.164C261.523 243.406 261.508 243.617 261.5 243.797C261.492 243.969 261.48 244.199 261.465 244.488C261.457 244.77 261.445 245 261.43 245.18C261.43 245.539 261.449 245.883 261.488 246.211C261.527 246.531 261.598 246.867 261.699 247.219C261.809 247.57 261.977 247.855 262.203 248.074C262.43 248.293 262.703 248.418 263.023 248.449C263.508 248.449 263.906 248.113 264.219 247.441C264.539 246.77 264.699 246.09 264.699 245.402C264.699 242.605 264.109 241.191 262.93 241.16ZM266.117 247.535C266.328 247.535 266.504 247.629 266.645 247.816C266.793 247.996 266.867 248.203 266.867 248.438C266.867 248.609 266.824 248.75 266.738 248.859C266.66 248.961 266.551 249.012 266.41 249.012C266.191 249.012 266.016 248.922 265.883 248.742C265.758 248.562 265.695 248.352 265.695 248.109C265.695 247.938 265.73 247.801 265.801 247.699C265.879 247.59 265.984 247.535 266.117 247.535ZM267.582 245.098C267.59 243.41 267.809 242.195 268.238 241.453C268.668 240.703 269.32 240.305 270.195 240.258C270.578 240.258 270.918 240.363 271.215 240.574C271.512 240.785 271.746 241.055 271.918 241.383C272.098 241.703 272.246 242.09 272.363 242.543C272.48 242.988 272.559 243.414 272.598 243.82C272.645 244.219 272.676 244.645 272.691 245.098C272.691 245.715 272.598 246.348 272.41 246.996C272.23 247.637 271.949 248.199 271.566 248.684C271.191 249.16 270.77 249.398 270.301 249.398C268.488 249.398 267.582 247.965 267.582 245.098ZM270.031 241.16C269.844 241.199 269.676 241.262 269.527 241.348C269.379 241.434 269.254 241.531 269.152 241.641C269.059 241.75 268.977 241.895 268.906 242.074C268.836 242.254 268.781 242.422 268.742 242.578C268.711 242.727 268.68 242.922 268.648 243.164C268.625 243.406 268.609 243.617 268.602 243.797C268.594 243.969 268.582 244.199 268.566 244.488C268.559 244.77 268.547 245 268.531 245.18C268.531 245.539 268.551 245.883 268.59 246.211C268.629 246.531 268.699 246.867 268.801 247.219C268.91 247.57 269.078 247.855 269.305 248.074C269.531 248.293 269.805 248.418 270.125 248.449C270.609 248.449 271.008 248.113 271.32 247.441C271.641 246.77 271.801 246.09 271.801 245.402C271.801 242.605 271.211 241.191 270.031 241.16ZM273.711 248.965V248.344C273.898 248.32 274.129 248.281 274.402 248.227C274.684 248.172 274.902 248.133 275.059 248.109C275.082 247.547 275.094 246.98 275.094 246.41C275.094 246.051 275.09 245.512 275.082 244.793C275.074 244.066 275.07 243.52 275.07 243.152C275.07 242.285 275.082 241.629 275.105 241.184C274.395 241.59 273.875 241.918 273.547 242.168L273.172 241.781C273.297 241.68 273.512 241.504 273.816 241.254C274.121 240.996 274.395 240.766 274.637 240.562C274.879 240.352 275.066 240.18 275.199 240.047C275.324 240.062 275.453 240.074 275.586 240.082C275.719 240.082 275.848 240.09 275.973 240.105C276.02 241.012 276.043 242.672 276.043 245.086C276.043 246.523 276.055 247.555 276.078 248.18C276.148 248.188 276.316 248.219 276.582 248.273C276.855 248.32 277.066 248.352 277.215 248.367L277.402 248.988C277.012 248.988 276.672 248.988 276.383 248.988C276.094 248.988 275.707 248.988 275.223 248.988C274.746 248.988 274.371 248.988 274.098 248.988C273.832 248.98 273.703 248.973 273.711 248.965Z M258.48 167.098C258.488 165.41 258.707 164.195 259.137 163.453C259.566 162.703 260.219 162.305 261.094 162.258C261.477 162.258 261.816 162.363 262.113 162.574C262.41 162.785 262.645 163.055 262.816 163.383C262.996 163.703 263.145 164.09 263.262 164.543C263.379 164.988 263.457 165.414 263.496 165.82C263.543 166.219 263.574 166.645 263.59 167.098C263.59 167.715 263.496 168.348 263.309 168.996C263.129 169.637 262.848 170.199 262.465 170.684C262.09 171.16 261.668 171.398 261.199 171.398C259.387 171.398 258.48 169.965 258.48 167.098ZM260.93 163.16C260.742 163.199 260.574 163.262 260.426 163.348C260.277 163.434 260.152 163.531 260.051 163.641C259.957 163.75 259.875 163.895 259.805 164.074C259.734 164.254 259.68 164.422 259.641 164.578C259.609 164.727 259.578 164.922 259.547 165.164C259.523 165.406 259.508 165.617 259.5 165.797C259.492 165.969 259.48 166.199 259.465 166.488C259.457 166.77 259.445 167 259.43 167.18C259.43 167.539 259.449 167.883 259.488 168.211C259.527 168.531 259.598 168.867 259.699 169.219C259.809 169.57 259.977 169.855 260.203 170.074C260.43 170.293 260.703 170.418 261.023 170.449C261.508 170.449 261.906 170.113 262.219 169.441C262.539 168.77 262.699 168.09 262.699 167.402C262.699 164.605 262.109 163.191 260.93 163.16ZM264.117 169.535C264.328 169.535 264.504 169.629 264.645 169.816C264.793 169.996 264.867 170.203 264.867 170.438C264.867 170.609 264.824 170.75 264.738 170.859C264.66 170.961 264.551 171.012 264.41 171.012C264.191 171.012 264.016 170.922 263.883 170.742C263.758 170.562 263.695 170.352 263.695 170.109C263.695 169.938 263.73 169.801 263.801 169.699C263.879 169.59 263.984 169.535 264.117 169.535ZM265.582 167.098C265.59 165.41 265.809 164.195 266.238 163.453C266.668 162.703 267.32 162.305 268.195 162.258C268.578 162.258 268.918 162.363 269.215 162.574C269.512 162.785 269.746 163.055 269.918 163.383C270.098 163.703 270.246 164.09 270.363 164.543C270.48 164.988 270.559 165.414 270.598 165.82C270.645 166.219 270.676 166.645 270.691 167.098C270.691 167.715 270.598 168.348 270.41 168.996C270.23 169.637 269.949 170.199 269.566 170.684C269.191 171.16 268.77 171.398 268.301 171.398C266.488 171.398 265.582 169.965 265.582 167.098ZM268.031 163.16C267.844 163.199 267.676 163.262 267.527 163.348C267.379 163.434 267.254 163.531 267.152 163.641C267.059 163.75 266.977 163.895 266.906 164.074C266.836 164.254 266.781 164.422 266.742 164.578C266.711 164.727 266.68 164.922 266.648 165.164C266.625 165.406 266.609 165.617 266.602 165.797C266.594 165.969 266.582 166.199 266.566 166.488C266.559 166.77 266.547 167 266.531 167.18C266.531 167.539 266.551 167.883 266.59 168.211C266.629 168.531 266.699 168.867 266.801 169.219C266.91 169.57 267.078 169.855 267.305 170.074C267.531 170.293 267.805 170.418 268.125 170.449C268.609 170.449 269.008 170.113 269.32 169.441C269.641 168.77 269.801 168.09 269.801 167.402C269.801 164.605 269.211 163.191 268.031 163.16ZM271.652 167.098C271.66 165.41 271.879 164.195 272.309 163.453C272.738 162.703 273.391 162.305 274.266 162.258C274.648 162.258 274.988 162.363 275.285 162.574C275.582 162.785 275.816 163.055 275.988 163.383C276.168 163.703 276.316 164.09 276.434 164.543C276.551 164.988 276.629 165.414 276.668 165.82C276.715 166.219 276.746 166.645 276.762 167.098C276.762 167.715 276.668 168.348 276.48 168.996C276.301 169.637 276.02 170.199 275.637 170.684C275.262 171.16 274.84 171.398 274.371 171.398C272.559 171.398 271.652 169.965 271.652 167.098ZM274.102 163.16C273.914 163.199 273.746 163.262 273.598 163.348C273.449 163.434 273.324 163.531 273.223 163.641C273.129 163.75 273.047 163.895 272.977 164.074C272.906 164.254 272.852 164.422 272.812 164.578C272.781 164.727 272.75 164.922 272.719 165.164C272.695 165.406 272.68 165.617 272.672 165.797C272.664 165.969 272.652 166.199 272.637 166.488C272.629 166.77 272.617 167 272.602 167.18C272.602 167.539 272.621 167.883 272.66 168.211C272.699 168.531 272.77 168.867 272.871 169.219C272.98 169.57 273.148 169.855 273.375 170.074C273.602 170.293 273.875 170.418 274.195 170.449C274.68 170.449 275.078 170.113 275.391 169.441C275.711 168.77 275.871 168.09 275.871 167.402C275.871 164.605 275.281 163.191 274.102 163.16Z M260.48 219.098C260.488 217.41 260.707 216.195 261.137 215.453C261.566 214.703 262.219 214.305 263.094 214.258C263.477 214.258 263.816 214.363 264.113 214.574C264.41 214.785 264.645 215.055 264.816 215.383C264.996 215.703 265.145 216.09 265.262 216.543C265.379 216.988 265.457 217.414 265.496 217.82C265.543 218.219 265.574 218.645 265.59 219.098C265.59 219.715 265.496 220.348 265.309 220.996C265.129 221.637 264.848 222.199 264.465 222.684C264.09 223.16 263.668 223.398 263.199 223.398C261.387 223.398 260.48 221.965 260.48 219.098ZM262.93 215.16C262.742 215.199 262.574 215.262 262.426 215.348C262.277 215.434 262.152 215.531 262.051 215.641C261.957 215.75 261.875 215.895 261.805 216.074C261.734 216.254 261.68 216.422 261.641 216.578C261.609 216.727 261.578 216.922 261.547 217.164C261.523 217.406 261.508 217.617 261.5 217.797C261.492 217.969 261.48 218.199 261.465 218.488C261.457 218.77 261.445 219 261.43 219.18C261.43 219.539 261.449 219.883 261.488 220.211C261.527 220.531 261.598 220.867 261.699 221.219C261.809 221.57 261.977 221.855 262.203 222.074C262.43 222.293 262.703 222.418 263.023 222.449C263.508 222.449 263.906 222.113 264.219 221.441C264.539 220.77 264.699 220.09 264.699 219.402C264.699 216.605 264.109 215.191 262.93 215.16ZM266.117 221.535C266.328 221.535 266.504 221.629 266.645 221.816C266.793 221.996 266.867 222.203 266.867 222.438C266.867 222.609 266.824 222.75 266.738 222.859C266.66 222.961 266.551 223.012 266.41 223.012C266.191 223.012 266.016 222.922 265.883 222.742C265.758 222.562 265.695 222.352 265.695 222.109C265.695 221.938 265.73 221.801 265.801 221.699C265.879 221.59 265.984 221.535 266.117 221.535ZM267.582 219.098C267.59 217.41 267.809 216.195 268.238 215.453C268.668 214.703 269.32 214.305 270.195 214.258C270.578 214.258 270.918 214.363 271.215 214.574C271.512 214.785 271.746 215.055 271.918 215.383C272.098 215.703 272.246 216.09 272.363 216.543C272.48 216.988 272.559 217.414 272.598 217.82C272.645 218.219 272.676 218.645 272.691 219.098C272.691 219.715 272.598 220.348 272.41 220.996C272.23 221.637 271.949 222.199 271.566 222.684C271.191 223.16 270.77 223.398 270.301 223.398C268.488 223.398 267.582 221.965 267.582 219.098ZM270.031 215.16C269.844 215.199 269.676 215.262 269.527 215.348C269.379 215.434 269.254 215.531 269.152 215.641C269.059 215.75 268.977 215.895 268.906 216.074C268.836 216.254 268.781 216.422 268.742 216.578C268.711 216.727 268.68 216.922 268.648 217.164C268.625 217.406 268.609 217.617 268.602 217.797C268.594 217.969 268.582 218.199 268.566 218.488C268.559 218.77 268.547 219 268.531 219.18C268.531 219.539 268.551 219.883 268.59 220.211C268.629 220.531 268.699 220.867 268.801 221.219C268.91 221.57 269.078 221.855 269.305 222.074C269.531 222.293 269.805 222.418 270.125 222.449C270.609 222.449 271.008 222.113 271.32 221.441C271.641 220.77 271.801 220.09 271.801 219.402C271.801 216.605 271.211 215.191 270.031 215.16ZM277.566 222.191L277.93 222.965C277.344 222.98 276.426 222.992 275.176 223C273.926 223 273.262 223 273.184 223C273.184 222.938 273.18 222.828 273.172 222.672C273.172 222.516 273.172 222.391 273.172 222.297C273.32 222.039 273.566 221.73 273.91 221.371C274.254 221.004 274.598 220.648 274.941 220.305C275.285 219.953 275.621 219.57 275.949 219.156C276.285 218.742 276.559 218.281 276.77 217.773C276.98 217.258 277.086 216.73 277.086 216.191C277.086 215.848 276.965 215.57 276.723 215.359C276.48 215.141 276.188 215.031 275.844 215.031C275.445 215.031 275.074 215.195 274.73 215.523C274.395 215.844 274.16 216.336 274.027 217L273.5 216.812C273.531 216.055 273.777 215.465 274.238 215.043C274.707 214.621 275.246 214.41 275.855 214.41C276.402 214.41 276.871 214.582 277.262 214.926C277.652 215.27 277.848 215.75 277.848 216.367C277.848 216.875 277.77 217.371 277.613 217.855C277.457 218.332 277.23 218.781 276.934 219.203C276.637 219.625 276.359 219.988 276.102 220.293C275.844 220.59 275.52 220.938 275.129 221.336C274.746 221.727 274.477 222.008 274.32 222.18C274.586 222.195 274.812 222.203 275 222.203C275.195 222.203 275.5 222.199 275.914 222.191C276.328 222.176 276.637 222.168 276.84 222.168C277.027 222.168 277.27 222.176 277.566 222.191Z M268.312 347.07C268.734 347.07 269.086 347.258 269.367 347.633C269.664 347.992 269.812 348.406 269.812 348.875C269.812 349.219 269.727 349.5 269.555 349.719C269.398 349.922 269.18 350.023 268.898 350.023C268.461 350.023 268.109 349.844 267.844 349.484C267.594 349.125 267.469 348.703 267.469 348.219C267.469 347.875 267.539 347.602 267.68 347.398C267.836 347.18 268.047 347.07 268.312 347.07Z M268.312 357.07C268.734 357.07 269.086 357.258 269.367 357.633C269.664 357.992 269.812 358.406 269.812 358.875C269.812 359.219 269.727 359.5 269.555 359.719C269.398 359.922 269.18 360.023 268.898 360.023C268.461 360.023 268.109 359.844 267.844 359.484C267.594 359.125 267.469 358.703 267.469 358.219C267.469 357.875 267.539 357.602 267.68 357.398C267.836 357.18 268.047 357.07 268.312 357.07Z M268.312 367.07C268.734 367.07 269.086 367.258 269.367 367.633C269.664 367.992 269.812 368.406 269.812 368.875C269.812 369.219 269.727 369.5 269.555 369.719C269.398 369.922 269.18 370.023 268.898 370.023C268.461 370.023 268.109 369.844 267.844 369.484C267.594 369.125 267.469 368.703 267.469 368.219C267.469 367.875 267.539 367.602 267.68 367.398C267.836 367.18 268.047 367.07 268.312 367.07Z';

  var dataset06Sugar = 'M309.441 28.248C309.484 28.4827 309.436 28.6693 309.297 28.808C309.169 28.936 309.009 29 308.817 29C308.647 29 308.497 28.9467 308.369 28.84C308.241 28.7227 308.177 28.5627 308.177 28.36C308.177 28.232 308.209 28.088 308.273 27.928C308.209 27.7787 308.177 27.624 308.177 27.464C308.177 27.336 308.204 27.2293 308.257 27.144C308.193 27.1013 308.145 27.0373 308.113 26.952C308.081 26.8667 308.065 26.7707 308.065 26.664C308.065 26.5573 308.087 26.44 308.129 26.312C308.033 26.1947 307.985 26.056 307.985 25.896C307.985 25.6933 308.06 25.528 308.209 25.4C308.199 25.368 308.193 25.3147 308.193 25.24C308.193 25.1333 308.204 25.0587 308.225 25.016C308.108 24.8667 308.049 24.6533 308.049 24.376C308.049 24.184 308.087 24.0347 308.161 23.928C308.087 23.864 308.023 23.7787 307.969 23.672C307.916 23.5547 307.889 23.4373 307.889 23.32C307.889 23.192 307.927 23.0693 308.001 22.952C307.948 22.824 307.921 22.712 307.921 22.616C307.921 22.456 307.969 22.3067 308.065 22.168C307.937 22.04 307.873 21.9067 307.873 21.768C307.873 21.6613 307.911 21.5173 307.985 21.336C307.911 21.1867 307.873 21.0267 307.873 20.856C307.873 20.632 307.953 20.4933 308.113 20.44C308.124 20.2907 308.177 20.168 308.273 20.072C308.369 19.976 308.487 19.928 308.625 19.928C308.785 19.928 308.924 20.008 309.041 20.168C309.169 20.3173 309.233 20.536 309.233 20.824C309.233 20.9413 309.228 21.0373 309.217 21.112C309.26 21.0907 309.303 21.0587 309.345 21.016C309.388 20.9627 309.441 20.9253 309.505 20.904C309.569 20.8827 309.665 20.872 309.793 20.872C309.815 20.8187 309.884 20.7653 310.001 20.712C310.129 20.6587 310.252 20.632 310.369 20.632C310.455 20.632 310.513 20.6427 310.545 20.664C310.631 20.6213 310.716 20.6 310.801 20.6C310.929 20.6 311.068 20.6907 311.217 20.872C311.473 20.8507 311.66 20.9093 311.777 21.048C311.948 21.0373 312.097 21.0587 312.225 21.112C312.353 21.1653 312.455 21.2773 312.529 21.448C312.732 21.576 312.833 21.7467 312.833 21.96C312.833 22.1413 312.753 22.312 312.593 22.472C312.444 22.6213 312.279 22.696 312.097 22.696C311.895 22.696 311.724 22.5893 311.585 22.376C311.468 22.376 311.377 22.3653 311.313 22.344C311.249 22.3227 311.185 22.2747 311.121 22.2C311.057 22.2213 311.004 22.232 310.961 22.232C310.865 22.232 310.764 22.2053 310.657 22.152C310.508 22.248 310.348 22.2907 310.177 22.28C310.113 22.4293 309.948 22.504 309.681 22.504C309.692 22.536 309.697 22.5893 309.697 22.664C309.697 22.8027 309.665 22.9413 309.601 23.08C309.548 23.208 309.479 23.304 309.393 23.368C309.479 23.5707 309.521 23.7733 309.521 23.976C309.521 24.1573 309.479 24.296 309.393 24.392C309.425 24.4347 309.457 24.488 309.489 24.552C309.532 24.616 309.564 24.6747 309.585 24.728C309.607 24.8133 309.617 24.8773 309.617 24.92C309.617 24.9947 309.591 25.096 309.537 25.224C309.591 25.352 309.617 25.448 309.617 25.512C309.617 25.5973 309.58 25.7147 309.505 25.864C309.569 25.9707 309.601 26.088 309.601 26.216C309.601 26.3653 309.564 26.4933 309.489 26.6C309.564 26.7707 309.601 26.9467 309.601 27.128C309.601 27.2667 309.569 27.3947 309.505 27.512C309.559 27.6187 309.585 27.7253 309.585 27.832C309.585 27.9813 309.537 28.12 309.441 28.248ZM319.968 22.744C320.085 22.7973 320.192 22.9253 320.288 23.128C320.394 23.3307 320.448 23.5387 320.448 23.752C320.448 24.1147 320.288 24.36 319.968 24.488C319.882 24.6373 319.765 24.7547 319.616 24.84C319.477 24.9253 319.322 24.968 319.152 24.968C319.013 24.968 318.869 24.936 318.72 24.872C318.634 24.9253 318.517 24.9733 318.368 25.016C318.218 25.0587 318.069 25.08 317.92 25.08C317.664 25.08 317.488 25.0267 317.391 24.92C317.285 25.0053 317.114 25.048 316.88 25.048C316.709 25.048 316.554 25.016 316.416 24.952C316.266 25.0267 316.096 25.064 315.904 25.064C315.722 25.064 315.573 25.0373 315.456 24.984C315.349 25.08 315.13 25.128 314.799 25.128C314.618 25.128 314.496 25.112 314.432 25.08C314.464 25.3893 314.421 25.6187 314.304 25.768C314.506 25.9707 314.586 26.1893 314.544 26.424C314.554 26.4347 314.613 26.4773 314.72 26.552C314.826 26.6267 314.901 26.7493 314.944 26.92C315.061 26.92 315.168 26.968 315.264 27.064C315.37 27.16 315.434 27.256 315.456 27.352C315.498 27.3093 315.584 27.288 315.712 27.288C315.808 27.288 315.893 27.304 315.968 27.336C316.042 27.368 316.085 27.4053 316.096 27.448C316.17 27.4053 316.256 27.384 316.352 27.384C316.49 27.384 316.618 27.432 316.736 27.528C316.842 27.5067 316.922 27.496 316.976 27.496C317.082 27.496 317.173 27.512 317.248 27.544C317.28 27.4587 317.365 27.3787 317.504 27.304C317.642 27.2187 317.786 27.1813 317.936 27.192C318.021 27.0853 318.138 27 318.288 26.936C318.437 26.872 318.586 26.84 318.736 26.84C319.024 26.84 319.232 26.9573 319.36 27.192C319.402 27.2773 319.424 27.3787 319.424 27.496C319.424 27.752 319.306 27.9547 319.072 28.104C319.018 28.136 318.928 28.1947 318.8 28.28C318.672 28.3547 318.554 28.4133 318.448 28.456C318.341 28.4987 318.245 28.52 318.16 28.52C318 28.712 317.781 28.808 317.504 28.808C317.376 28.808 317.28 28.7973 317.216 28.776C317.088 28.8827 316.901 28.936 316.656 28.936C316.432 28.936 316.277 28.8933 316.192 28.808C316.117 28.84 316.042 28.856 315.968 28.856C315.818 28.856 315.68 28.8027 315.552 28.696C315.008 28.728 314.64 28.5573 314.448 28.184C314.298 28.184 314.128 28.0933 313.936 27.912C313.754 27.72 313.653 27.5547 313.632 27.416C313.386 27.32 313.232 27.144 313.168 26.888C313.157 26.8027 313.157 26.7227 313.168 26.648C313.125 26.6373 313.088 26.5947 313.056 26.52C313.034 26.4347 313.024 26.3493 313.024 26.264C313.024 26.2 313.029 26.1573 313.04 26.136C312.954 25.88 312.912 25.6453 312.912 25.432C312.912 25.2187 312.954 25.0267 313.04 24.856C312.976 24.7387 312.944 24.6107 312.944 24.472C312.944 24.3013 312.981 24.1307 313.056 23.96C313.13 23.7893 313.2 23.6773 313.264 23.624C313.242 23.5707 313.258 23.48 313.312 23.352C313.365 23.2133 313.434 23.0907 313.52 22.984C313.616 22.8667 313.712 22.7973 313.808 22.776L313.792 22.6C313.792 22.184 314.016 21.9227 314.464 21.816C314.464 21.6347 314.57 21.4587 314.784 21.288C314.997 21.1173 315.184 21.0427 315.344 21.064C315.365 20.9467 315.466 20.856 315.648 20.792C315.84 20.7173 315.984 20.696 316.08 20.728C316.165 20.5893 316.336 20.4933 316.592 20.44C316.688 20.3333 316.826 20.28 317.008 20.28C317.061 20.28 317.13 20.2907 317.216 20.312L317.36 20.296C317.488 20.296 317.594 20.3227 317.68 20.376C317.776 20.4187 317.818 20.472 317.808 20.536C318.042 20.5573 318.24 20.6107 318.4 20.696C318.56 20.7813 318.656 20.936 318.688 21.16C318.826 21.128 319.002 21.1653 319.216 21.272C319.429 21.368 319.61 21.5227 319.76 21.736C319.92 21.9387 320 22.1787 320 22.456C320 22.52 319.989 22.616 319.968 22.744ZM317.616 23.784C317.722 23.6347 317.984 23.56 318.4 23.56C318.634 23.56 318.816 23.5813 318.944 23.624C318.858 23.5813 318.778 23.4907 318.704 23.352C318.64 23.2027 318.608 23.064 318.608 22.936C318.608 22.8507 318.624 22.7867 318.656 22.744C318.506 22.7547 318.378 22.7173 318.272 22.632C318.176 22.536 318.085 22.4293 318 22.312C317.925 22.1947 317.866 22.1093 317.824 22.056C317.77 22.088 317.658 22.0613 317.488 21.976C317.328 21.88 317.242 21.784 317.232 21.688C317.189 21.7413 317.098 21.7893 316.96 21.832C316.821 21.864 316.714 21.8747 316.64 21.864C316.608 21.9173 316.533 21.9707 316.416 22.024C316.298 22.0773 316.176 22.0933 316.048 22.072C315.941 22.2747 315.829 22.44 315.712 22.568C315.594 22.696 315.445 22.792 315.264 22.856C315.242 23.0053 315.173 23.1707 315.056 23.352C314.949 23.5333 314.837 23.672 314.72 23.768L314.784 23.784C314.933 23.6773 315.136 23.624 315.392 23.624C315.541 23.624 315.68 23.64 315.808 23.672C315.946 23.704 316.042 23.7413 316.096 23.784C316.352 23.624 316.634 23.544 316.944 23.544C317.2 23.544 317.424 23.624 317.616 23.784ZM327.106 27.112C327.138 27.2187 327.154 27.3253 327.154 27.432C327.154 27.6453 327.069 27.7893 326.898 27.864C326.919 28.024 326.855 28.184 326.706 28.344C326.557 28.504 326.418 28.584 326.29 28.584C326.237 28.68 326.077 28.7707 325.81 28.856C325.543 28.9413 325.298 28.984 325.074 28.984C324.914 28.984 324.791 28.952 324.706 28.888C324.557 28.9627 324.343 29 324.066 29C323.821 29 323.597 28.9627 323.394 28.888C323.202 28.8133 323.085 28.7013 323.042 28.552C322.829 28.584 322.589 28.52 322.322 28.36C322.066 28.2 321.901 28.0347 321.826 27.864C321.634 27.8107 321.474 27.7093 321.346 27.56C321.229 27.4107 321.165 27.2347 321.154 27.032C321.09 26.936 321.058 26.84 321.058 26.744C321.058 26.5947 321.106 26.4613 321.202 26.344C321.309 26.2267 321.431 26.168 321.57 26.168C321.709 26.168 321.842 26.2533 321.97 26.424C322.162 26.4027 322.333 26.4667 322.482 26.616C322.642 26.7653 322.722 26.9147 322.722 27.064C322.754 27.064 322.834 27.0747 322.962 27.096C323.101 27.1067 323.223 27.144 323.33 27.208C323.437 27.272 323.511 27.3627 323.554 27.48C323.746 27.48 323.933 27.5067 324.114 27.56C324.306 27.6027 324.418 27.656 324.45 27.72C324.535 27.6667 324.658 27.624 324.818 27.592C324.989 27.5493 325.133 27.528 325.25 27.528C325.282 27.4853 325.362 27.4427 325.49 27.4C325.618 27.3573 325.725 27.3307 325.81 27.32C325.757 27.2453 325.73 27.1333 325.73 26.984C325.73 26.76 325.799 26.6 325.938 26.504C325.81 26.4613 325.709 26.3973 325.634 26.312C325.559 26.216 325.527 26.1093 325.538 25.992C325.453 26.0133 325.389 26.024 325.346 26.024C325.143 26.024 324.978 25.944 324.85 25.784C324.637 25.8053 324.423 25.7573 324.21 25.64C324.007 25.5227 323.858 25.368 323.762 25.176C323.687 25.208 323.607 25.224 323.522 25.224C323.341 25.224 323.149 25.1707 322.946 25.064C322.754 24.9467 322.631 24.8347 322.578 24.728C322.429 24.7707 322.253 24.7227 322.05 24.584C321.847 24.4453 321.746 24.2907 321.746 24.12C321.618 24.056 321.517 23.9493 321.442 23.8C321.367 23.64 321.33 23.496 321.33 23.368C321.33 23.272 321.351 23.208 321.394 23.176C321.341 23.0693 321.314 22.9627 321.314 22.856C321.314 22.664 321.378 22.4987 321.506 22.36C321.474 22.2427 321.458 22.136 321.458 22.04C321.458 21.8587 321.495 21.7093 321.57 21.592C321.655 21.464 321.757 21.4107 321.874 21.432C321.853 21.2613 321.89 21.112 321.986 20.984C322.093 20.856 322.221 20.7653 322.37 20.712C322.53 20.648 322.669 20.6267 322.786 20.648C322.85 20.552 322.935 20.4773 323.042 20.424C323.149 20.3707 323.255 20.344 323.362 20.344C323.543 20.344 323.671 20.3973 323.746 20.504C323.757 20.4507 323.794 20.408 323.858 20.376C323.933 20.344 324.018 20.328 324.114 20.328C324.199 20.328 324.285 20.344 324.37 20.376C324.455 20.408 324.519 20.4453 324.562 20.488C324.626 20.424 324.738 20.392 324.898 20.392C325.026 20.392 325.154 20.4187 325.282 20.472C325.41 20.5147 325.495 20.5787 325.538 20.664C325.602 20.632 325.671 20.616 325.746 20.616C325.874 20.616 325.991 20.664 326.098 20.76C326.215 20.8453 326.295 20.9573 326.338 21.096C326.498 21.0747 326.663 21.128 326.834 21.256C327.005 21.384 327.069 21.512 327.026 21.64C327.314 21.8 327.458 22.0187 327.458 22.296C327.458 22.4667 327.399 22.616 327.282 22.744C327.165 22.872 327.015 22.936 326.834 22.936C326.674 22.9253 326.541 22.8827 326.434 22.808C326.327 22.7333 326.263 22.6427 326.242 22.536C326.103 22.5147 325.97 22.4613 325.842 22.376C325.725 22.28 325.661 22.1573 325.65 22.008C325.447 22.0293 325.293 22.008 325.186 21.944C325.09 21.88 325.005 21.7787 324.93 21.64C324.855 21.6933 324.759 21.72 324.642 21.72C324.525 21.72 324.397 21.688 324.258 21.624C324.183 21.688 324.087 21.7413 323.97 21.784C323.863 21.8267 323.757 21.848 323.65 21.848C323.533 21.848 323.431 21.8213 323.346 21.768C323.367 21.896 323.335 21.9973 323.25 22.072C323.165 22.1467 323.047 22.1733 322.898 22.152C322.93 22.2267 322.946 22.3067 322.946 22.392C322.946 22.584 322.861 22.744 322.69 22.872C322.807 22.9253 322.893 23.016 322.946 23.144C322.999 23.2613 323.021 23.3787 323.01 23.496L323.138 23.48C323.458 23.48 323.661 23.5813 323.746 23.784L323.874 23.768C324.045 23.768 324.205 23.8107 324.354 23.896C324.514 23.9813 324.631 24.1253 324.706 24.328C324.877 24.3173 325.042 24.3387 325.202 24.392C325.362 24.4347 325.474 24.52 325.538 24.648C325.623 24.616 325.703 24.6 325.778 24.6C325.959 24.6 326.119 24.6533 326.258 24.76C326.407 24.8667 326.487 24.9893 326.498 25.128C326.594 25.128 326.679 25.1813 326.754 25.288C326.839 25.3947 326.871 25.5173 326.85 25.656C326.925 25.6453 326.994 25.688 327.058 25.784C327.122 25.8693 327.154 25.9707 327.154 26.088C327.154 26.152 327.138 26.2107 327.106 26.264C327.255 26.3707 327.33 26.5147 327.33 26.696C327.33 26.792 327.309 26.8773 327.266 26.952C327.234 27.0267 327.181 27.08 327.106 27.112ZM328.726 17.592C328.588 17.656 328.476 17.7467 328.39 17.864C328.305 17.9813 328.262 18.104 328.262 18.232C328.262 18.4027 328.332 18.5733 328.47 18.744C328.449 18.8827 328.524 19.016 328.694 19.144C328.865 19.272 329.052 19.336 329.254 19.336C329.393 19.336 329.516 19.2987 329.622 19.224C329.921 19.064 330.07 18.8613 330.07 18.616C330.07 18.456 330.006 18.2747 329.878 18.072C329.889 17.8587 329.825 17.6933 329.686 17.576C329.558 17.448 329.404 17.384 329.222 17.384C329.02 17.384 328.854 17.4533 328.726 17.592ZM329.766 24.664C329.852 24.696 329.916 24.7973 329.958 24.968C330.012 25.1387 330.038 25.3253 330.038 25.528C330.038 25.7627 330.001 25.9173 329.926 25.992C329.99 26.152 330.022 26.3067 330.022 26.456C330.022 26.648 329.974 26.808 329.878 26.936C329.953 27.1173 329.99 27.3307 329.99 27.576C329.99 27.7787 329.958 27.944 329.894 28.072C329.926 28.168 329.942 28.2587 329.942 28.344C329.942 28.536 329.873 28.6907 329.734 28.808C329.596 28.9147 329.43 28.968 329.238 28.968C329.057 28.968 328.902 28.9147 328.774 28.808C328.646 28.6907 328.588 28.536 328.598 28.344C328.545 28.28 328.502 28.1787 328.47 28.04C328.438 27.9013 328.422 27.7573 328.422 27.608C328.422 27.3307 328.481 27.1493 328.598 27.064C328.513 26.9253 328.47 26.7173 328.47 26.44C328.47 26.1627 328.508 25.96 328.582 25.832C328.54 25.7893 328.508 25.688 328.486 25.528C328.465 25.368 328.454 25.192 328.454 25C328.454 24.8187 328.465 24.6587 328.486 24.52C328.508 24.3707 328.54 24.2747 328.582 24.232C328.518 24.168 328.486 23.992 328.486 23.704C328.486 23.3733 328.524 23.1333 328.598 22.984C328.545 22.8987 328.497 22.7867 328.454 22.648C328.412 22.5093 328.39 22.3813 328.39 22.264C328.39 22.1573 328.401 22.0827 328.422 22.04C328.337 21.7627 328.294 21.5387 328.294 21.368C328.294 21.1867 328.337 21 328.422 20.808C328.401 20.648 328.438 20.5253 328.534 20.44C328.63 20.3547 328.769 20.312 328.95 20.312C329.441 20.312 329.686 20.6107 329.686 21.208C329.782 21.272 329.852 21.3627 329.894 21.48C329.948 21.5867 329.974 21.7093 329.974 21.848C329.974 22.072 329.921 22.264 329.814 22.424C329.857 22.488 329.889 22.584 329.91 22.712C329.942 22.84 329.958 22.968 329.958 23.096C329.958 23.2667 329.932 23.384 329.878 23.448C329.921 23.5013 329.942 23.6133 329.942 23.784C329.942 23.944 329.921 24.1147 329.878 24.296C329.846 24.4773 329.809 24.6 329.766 24.664ZM336.034 28.056C336.013 28.152 335.933 28.232 335.794 28.296C335.655 28.36 335.506 28.392 335.346 28.392C335.271 28.392 335.218 28.3867 335.186 28.376C335.133 28.4613 335.021 28.5467 334.85 28.632C334.679 28.7173 334.53 28.76 334.402 28.76C334.338 28.76 334.279 28.744 334.226 28.712C334.119 28.7333 334.029 28.744 333.954 28.744C333.805 28.744 333.655 28.7173 333.506 28.664C333.367 28.6107 333.261 28.5413 333.186 28.456C333.005 28.4773 332.834 28.456 332.674 28.392C332.525 28.3173 332.439 28.2213 332.418 28.104C332.301 28.1253 332.167 28.0773 332.018 27.96C331.879 27.8427 331.805 27.6827 331.794 27.48C331.634 27.3947 331.517 27.2667 331.442 27.096C331.367 26.9253 331.33 26.744 331.33 26.552C331.33 26.4133 331.346 26.3067 331.378 26.232C331.293 26.1573 331.223 26.0027 331.17 25.768C331.117 25.5227 331.09 25.2667 331.09 25C331.09 24.68 331.127 24.4453 331.202 24.296C331.149 24.1893 331.122 24.0667 331.122 23.928C331.122 23.8107 331.138 23.6987 331.17 23.592C331.213 23.4853 331.271 23.4 331.346 23.336C331.314 23.2827 331.298 23.2347 331.298 23.192C331.298 23.1173 331.325 23.0373 331.378 22.952C331.431 22.8667 331.49 22.8027 331.554 22.76C331.543 22.5893 331.586 22.4347 331.682 22.296C331.789 22.1467 331.895 22.056 332.002 22.024C331.991 21.9173 332.029 21.7893 332.114 21.64C332.199 21.4907 332.311 21.368 332.45 21.272C332.599 21.176 332.749 21.1333 332.898 21.144C333.111 20.8453 333.405 20.696 333.778 20.696C333.938 20.696 334.061 20.7173 334.146 20.76C334.263 20.7067 334.407 20.68 334.578 20.68C334.749 20.68 334.935 20.7227 335.138 20.808C335.202 20.776 335.282 20.76 335.378 20.76C335.485 20.76 335.586 20.7813 335.682 20.824C335.789 20.856 335.858 20.904 335.89 20.968C335.879 20.9253 335.874 20.8613 335.874 20.776C335.874 20.6053 335.917 20.456 336.002 20.328C335.927 20.2 335.89 20.072 335.89 19.944C335.89 19.88 335.895 19.832 335.906 19.8C335.895 19.7467 335.874 19.6773 335.842 19.592C335.81 19.496 335.794 19.416 335.794 19.352C335.794 19.2667 335.815 19.1813 335.858 19.096C335.805 18.9893 335.778 18.8827 335.778 18.776C335.778 18.6587 335.81 18.5467 335.874 18.44C335.799 18.2907 335.762 18.136 335.762 17.976C335.762 17.7627 335.821 17.5707 335.938 17.4C336.066 17.2293 336.237 17.144 336.45 17.144C336.631 17.144 336.786 17.2133 336.914 17.352C337.053 17.48 337.122 17.6293 337.122 17.8C337.122 17.864 337.117 17.912 337.106 17.944C337.266 18.072 337.346 18.248 337.346 18.472C337.346 18.5893 337.309 18.712 337.234 18.84C337.266 18.9147 337.282 18.9947 337.282 19.08C337.282 19.1973 337.255 19.3093 337.202 19.416C337.255 19.5227 337.282 19.6347 337.282 19.752C337.282 19.9013 337.245 20.0293 337.17 20.136C337.277 20.264 337.33 20.3867 337.33 20.504C337.33 20.5893 337.298 20.68 337.234 20.776C337.266 20.84 337.282 20.92 337.282 21.016C337.282 21.0907 337.266 21.1707 337.234 21.256C337.319 21.3733 337.362 21.5013 337.362 21.64C337.362 21.7467 337.335 21.8533 337.282 21.96C337.346 22.0667 337.378 22.1947 337.378 22.344C337.378 22.5893 337.319 22.76 337.202 22.856C337.309 22.984 337.362 23.176 337.362 23.432C337.362 23.5813 337.341 23.7307 337.298 23.88C337.266 24.0293 337.234 24.136 337.202 24.2C337.309 24.36 337.362 24.5627 337.362 24.808C337.362 24.9253 337.335 25.0373 337.282 25.144C337.399 25.2613 337.458 25.4373 337.458 25.672C337.458 25.928 337.405 26.136 337.298 26.296C337.405 26.4347 337.458 26.632 337.458 26.888C337.458 27.0587 337.431 27.2133 337.378 27.352C337.335 27.48 337.277 27.5653 337.202 27.608C337.213 27.6827 337.239 27.7947 337.282 27.944C337.335 28.1787 337.362 28.328 337.362 28.392C337.362 28.5627 337.309 28.7013 337.202 28.808C337.074 28.936 336.925 29 336.754 29C336.615 29 336.487 28.952 336.37 28.856C336.263 28.7493 336.199 28.6107 336.178 28.44C336.125 28.3867 336.087 28.3173 336.066 28.232C336.045 28.136 336.034 28.0773 336.034 28.056ZM334.034 27.432C334.066 27.3573 334.162 27.32 334.322 27.32C334.397 27.32 334.461 27.3253 334.514 27.336C334.567 27.3467 334.61 27.352 334.642 27.352C334.653 27.2773 334.717 27.2133 334.834 27.16C334.962 27.096 335.085 27.064 335.202 27.064C335.277 27.064 335.341 27.08 335.394 27.112C335.383 27.0053 335.405 26.92 335.458 26.856C335.511 26.792 335.581 26.7333 335.666 26.68C335.762 26.616 335.831 26.568 335.874 26.536C335.853 26.4933 335.842 26.3973 335.842 26.248C335.842 25.928 335.879 25.7307 335.954 25.656C335.879 25.5813 335.842 25.432 335.842 25.208C335.842 24.952 335.879 24.728 335.954 24.536C335.89 24.3973 335.858 24.1627 335.858 23.832C335.858 23.512 335.879 23.2987 335.922 23.192C335.826 23 335.778 22.7813 335.778 22.536C335.778 22.344 335.799 22.2053 335.842 22.12C335.778 22.1627 335.682 22.168 335.554 22.136C335.437 22.0933 335.341 22.0347 335.266 21.96C335.223 22.024 335.138 22.056 335.01 22.056C334.925 22.056 334.839 22.0453 334.754 22.024C334.669 21.992 334.61 21.96 334.578 21.928C334.407 22.0027 334.242 22.04 334.082 22.04C334.039 22.04 333.975 22.0293 333.89 22.008C333.751 22.1573 333.645 22.264 333.57 22.328C333.495 22.392 333.394 22.4293 333.266 22.44C333.234 22.5147 333.202 22.6053 333.17 22.712C333.138 22.808 333.101 22.888 333.058 22.952C333.015 23.016 332.941 23.0693 332.834 23.112C332.813 23.2507 332.759 23.3627 332.674 23.448C332.685 23.4907 332.69 23.5493 332.69 23.624C332.69 23.7307 332.663 23.848 332.61 23.976C332.642 24.0507 332.658 24.216 332.658 24.472C332.658 24.9627 332.615 25.256 332.53 25.352C332.541 25.3947 332.578 25.496 332.642 25.656C332.706 25.816 332.738 25.9707 332.738 26.12C332.738 26.2373 332.717 26.344 332.674 26.44C332.887 26.5253 333.021 26.6747 333.074 26.888C333.181 26.92 333.282 26.9893 333.378 27.096C333.634 27.0853 333.853 27.1973 334.034 27.432ZM342.134 28.728C342.017 28.7707 341.905 28.792 341.798 28.792C341.649 28.792 341.526 28.7387 341.43 28.632C341.313 28.6427 341.179 28.5947 341.03 28.488C340.891 28.3707 340.806 28.2587 340.774 28.152C340.646 28.12 340.529 28.0507 340.422 27.944C340.326 27.8267 340.262 27.6827 340.23 27.512C340.102 27.48 339.995 27.3947 339.91 27.256C339.835 27.1067 339.798 26.936 339.798 26.744C339.798 26.6267 339.814 26.5147 339.846 26.408C339.771 26.2907 339.745 26.1413 339.766 25.96C339.617 25.832 339.542 25.6827 339.542 25.512C339.542 25.4267 339.558 25.3467 339.59 25.272C339.526 25.176 339.494 25.064 339.494 24.936C339.494 24.776 339.542 24.632 339.638 24.504C339.489 24.376 339.414 24.216 339.414 24.024C339.414 23.9067 339.446 23.8053 339.51 23.72C339.414 23.5813 339.366 23.416 339.366 23.224C339.366 23.0747 339.398 22.9627 339.462 22.888C339.355 22.8027 339.302 22.6747 339.302 22.504C339.302 22.3973 339.334 22.28 339.398 22.152C339.345 22.0667 339.318 21.944 339.318 21.784C339.318 21.5493 339.382 21.368 339.51 21.24C339.478 21.144 339.462 21.0533 339.462 20.968C339.462 20.776 339.526 20.6267 339.654 20.52C339.793 20.4027 339.953 20.344 340.134 20.344C340.315 20.344 340.47 20.4027 340.598 20.52C340.737 20.6373 340.806 20.808 340.806 21.032C340.806 21.2027 340.769 21.384 340.694 21.576C340.843 21.704 340.918 21.8693 340.918 22.072C340.918 22.2213 340.87 22.3547 340.774 22.472C340.838 22.5893 340.87 22.744 340.87 22.936C340.87 23.1387 340.838 23.304 340.774 23.432C340.87 23.56 340.918 23.7573 340.918 24.024C340.918 24.2053 340.907 24.328 340.886 24.392C340.971 24.488 341.014 24.6107 341.014 24.76C341.014 24.8453 340.993 24.9413 340.95 25.048C341.057 25.1653 341.11 25.3253 341.11 25.528C341.11 25.592 341.099 25.656 341.078 25.72C341.121 25.752 341.158 25.8107 341.19 25.896C341.222 25.9707 341.238 26.0507 341.238 26.136C341.238 26.2427 341.211 26.3333 341.158 26.408C341.243 26.4187 341.302 26.4773 341.334 26.584C341.366 26.68 341.371 26.776 341.35 26.872H341.366C341.441 26.872 341.505 26.9147 341.558 27C341.622 27.0747 341.643 27.144 341.622 27.208C341.654 27.1867 341.702 27.176 341.766 27.176C341.851 27.176 341.926 27.1973 341.99 27.24C342.065 27.272 342.118 27.3147 342.15 27.368C342.363 27.2507 342.566 27.192 342.758 27.192C342.854 27.192 342.939 27.208 343.014 27.24C343.11 27.1653 343.233 27.1013 343.382 27.048C343.542 26.984 343.681 26.952 343.798 26.952C343.851 26.952 343.899 26.9627 343.942 26.984C343.867 26.8667 343.83 26.7173 343.83 26.536C343.83 26.3333 343.894 26.2053 344.022 26.152C343.947 26.0667 343.91 25.8853 343.91 25.608C343.91 25.2773 343.979 25.0427 344.118 24.904C344.022 24.744 343.974 24.568 343.974 24.376C343.974 24.2053 344.006 24.088 344.07 24.024C344.006 23.9387 343.974 23.832 343.974 23.704C343.974 23.576 343.995 23.4427 344.038 23.304C344.091 23.1547 344.155 23.0373 344.23 22.952C344.091 22.856 344.022 22.648 344.022 22.328C344.022 22.1253 344.038 21.96 344.07 21.832C343.974 21.6187 343.926 21.4373 343.926 21.288C343.926 21.096 343.99 20.9413 344.118 20.824C344.246 20.7067 344.395 20.648 344.566 20.648C344.769 20.648 344.939 20.728 345.078 20.888C345.227 21.048 345.297 21.2773 345.286 21.576C345.339 21.6293 345.382 21.7147 345.414 21.832C345.457 21.9387 345.478 22.0507 345.478 22.168C345.478 22.4027 345.419 22.568 345.302 22.664C345.494 22.8987 345.59 23.128 345.59 23.352C345.59 23.5013 345.547 23.624 345.462 23.72C345.547 23.8373 345.59 23.9653 345.59 24.104C345.59 24.2427 345.553 24.3867 345.478 24.536C345.542 24.632 345.574 24.7387 345.574 24.856C345.574 25.048 345.494 25.2133 345.334 25.352C345.441 25.4693 345.494 25.608 345.494 25.768C345.494 25.9387 345.425 26.1307 345.286 26.344C345.393 26.408 345.446 26.5413 345.446 26.744C345.446 26.9467 345.403 27.1547 345.318 27.368C345.403 27.4853 345.446 27.64 345.446 27.832C345.446 27.9493 345.425 28.0453 345.382 28.12C345.403 28.2267 345.414 28.3067 345.414 28.36C345.414 28.5627 345.35 28.7227 345.222 28.84C345.105 28.9467 344.961 29 344.79 29C344.641 29 344.507 28.952 344.39 28.856C344.273 28.7493 344.203 28.6 344.182 28.408C344.171 28.3973 344.155 28.3813 344.134 28.36C344.123 28.328 344.113 28.3013 344.102 28.28C343.921 28.3867 343.755 28.44 343.606 28.44C343.553 28.44 343.51 28.4347 343.478 28.424C343.339 28.52 343.206 28.568 343.078 28.568C342.971 28.568 342.87 28.5467 342.774 28.504C342.731 28.5787 342.662 28.6373 342.566 28.68C342.481 28.7227 342.385 28.744 342.278 28.744C342.214 28.744 342.166 28.7387 342.134 28.728ZM347.349 22.792C347.263 22.6533 347.221 22.52 347.221 22.392C347.221 22.2 347.285 22.04 347.413 21.912C347.445 21.752 347.519 21.6027 347.637 21.464C347.754 21.3147 347.882 21.2027 348.021 21.128C348.17 21.0427 348.287 21.0107 348.373 21.032C348.447 20.9147 348.597 20.808 348.821 20.712C349.045 20.6053 349.253 20.552 349.445 20.552C349.487 20.552 349.551 20.5627 349.637 20.584C349.754 20.456 349.909 20.392 350.101 20.392C350.25 20.392 350.357 20.4347 350.421 20.52C350.559 20.424 350.741 20.376 350.965 20.376C351.231 20.376 351.466 20.44 351.669 20.568C351.882 20.696 352.005 20.8667 352.037 21.08C352.229 21.144 352.373 21.2453 352.469 21.384C352.575 21.512 352.639 21.6933 352.661 21.928C352.799 22.0667 352.901 22.232 352.965 22.424C353.029 22.6053 353.061 22.792 353.061 22.984C353.061 23.2293 353.018 23.4267 352.933 23.576C353.007 23.6827 353.071 23.8427 353.125 24.056C353.178 24.2693 353.205 24.4773 353.205 24.68C353.205 24.7653 353.194 24.872 353.173 25C353.247 25.16 353.285 25.2667 353.285 25.32C353.285 25.352 353.269 25.4267 353.237 25.544C353.247 25.5867 353.258 25.64 353.269 25.704C353.279 25.7573 353.285 25.8267 353.285 25.912C353.285 26.072 353.226 26.216 353.109 26.344C353.151 26.4613 353.173 26.6053 353.173 26.776C353.173 27 353.119 27.1813 353.013 27.32C353.034 27.3627 353.045 27.432 353.045 27.528C353.045 27.752 352.954 27.9387 352.773 28.088C352.73 28.2373 352.65 28.3547 352.533 28.44C352.415 28.5147 352.287 28.552 352.149 28.552C352.01 28.552 351.898 28.5093 351.813 28.424C351.535 28.5413 351.311 28.6 351.141 28.6C351.055 28.6 350.991 28.5947 350.949 28.584C350.671 28.6693 350.437 28.712 350.245 28.712C350.106 28.712 349.914 28.6853 349.669 28.632C349.519 28.7173 349.375 28.76 349.237 28.76C349.109 28.76 348.991 28.7227 348.885 28.648C348.831 28.6587 348.751 28.664 348.645 28.664C348.229 28.664 347.909 28.4773 347.685 28.104C347.279 27.8693 347.077 27.5173 347.077 27.048C347.077 26.9307 347.082 26.84 347.093 26.776C346.997 26.712 346.949 26.5787 346.949 26.376C346.949 26.2373 346.975 26.1147 347.029 26.008C346.986 25.816 346.965 25.6933 346.965 25.64C346.965 25.3307 347.114 25.0533 347.413 24.808C347.53 24.5627 347.663 24.3973 347.813 24.312C347.973 24.2267 348.17 24.1627 348.405 24.12C348.469 23.9387 348.618 23.816 348.853 23.752C349.087 23.688 349.317 23.6667 349.541 23.688C349.605 23.6453 349.695 23.608 349.813 23.576C349.93 23.5333 350.047 23.512 350.165 23.512C350.293 23.512 350.405 23.5333 350.501 23.576C350.522 23.5547 350.575 23.544 350.661 23.544C350.725 23.544 350.789 23.5493 350.853 23.56C350.917 23.5707 350.959 23.5867 350.981 23.608C351.13 23.416 351.306 23.32 351.509 23.32C351.573 23.32 351.637 23.336 351.701 23.368V23.32C351.701 23.1387 351.738 23.0107 351.813 22.936C351.706 22.904 351.589 22.8133 351.461 22.664C351.343 22.504 351.274 22.36 351.253 22.232C351.082 22.1573 350.965 22.0347 350.901 21.864C350.773 21.96 350.623 22.008 350.453 22.008C350.335 22.008 350.223 21.976 350.117 21.912C349.935 21.9653 349.818 21.9867 349.765 21.976C349.615 22.0827 349.45 22.136 349.269 22.136C349.109 22.3493 348.922 22.4453 348.709 22.424C348.613 22.5947 348.479 22.744 348.309 22.872C348.149 23 347.983 23.064 347.813 23.064C347.621 23.064 347.466 22.9733 347.349 22.792ZM348.229 26.36C348.357 26.488 348.421 26.6107 348.421 26.728C348.421 26.8133 348.399 26.92 348.357 27.048C348.399 27.048 348.458 27.0747 348.533 27.128C348.618 27.1707 348.666 27.2187 348.677 27.272C348.762 27.24 348.869 27.224 348.997 27.224C349.231 27.224 349.386 27.2773 349.461 27.384C349.578 27.3413 349.701 27.32 349.829 27.32C350.031 27.32 350.191 27.3787 350.309 27.496C350.394 27.4107 350.533 27.3413 350.725 27.288C350.927 27.2347 351.109 27.208 351.269 27.208C351.365 27.016 351.535 26.904 351.781 26.872C351.802 26.7973 351.861 26.7013 351.957 26.584C351.914 26.52 351.877 26.4347 351.845 26.328C351.813 26.2213 351.797 26.1147 351.797 26.008C351.797 25.784 351.85 25.6187 351.957 25.512C351.839 25.3627 351.781 25.1867 351.781 24.984C351.781 24.8453 351.802 24.728 351.845 24.632C351.759 24.6853 351.663 24.712 351.557 24.712C351.461 24.712 351.381 24.6747 351.317 24.6C351.221 24.696 351.087 24.744 350.917 24.744C350.81 24.744 350.703 24.7173 350.597 24.664C350.479 24.7813 350.335 24.84 350.165 24.84C350.111 24.84 350.031 24.8187 349.925 24.776C349.765 24.936 349.621 24.984 349.493 24.92C349.429 25.0693 349.343 25.1707 349.237 25.224C349.141 25.2773 349.002 25.304 348.821 25.304C348.778 25.4213 348.703 25.5173 348.597 25.592C348.501 25.6667 348.399 25.6933 348.293 25.672C348.346 25.7467 348.373 25.832 348.373 25.928C348.373 26.088 348.325 26.232 348.229 26.36ZM356.53 27C356.637 27.1173 356.69 27.2987 356.69 27.544C356.69 27.704 356.664 27.8587 356.61 28.008C356.568 28.1467 356.509 28.248 356.434 28.312C356.466 28.5147 356.413 28.68 356.274 28.808C356.136 28.936 355.97 29 355.778 29C355.65 29 355.528 28.968 355.41 28.904C355.293 28.84 355.208 28.7333 355.154 28.584C355.101 28.4347 355.074 28.2747 355.074 28.104C355.074 27.8693 355.112 27.6827 355.186 27.544C355.133 27.448 355.106 27.3093 355.106 27.128C355.106 26.9253 355.138 26.7173 355.202 26.504C355.128 26.4187 355.09 26.264 355.09 26.04C355.09 25.752 355.133 25.5387 355.218 25.4C355.154 25.2507 355.122 25.1067 355.122 24.968C355.122 24.776 355.17 24.584 355.266 24.392C355.181 24.168 355.138 23.9653 355.138 23.784C355.138 23.6347 355.17 23.464 355.234 23.272C355.128 23.1547 355.074 23.0053 355.074 22.824C355.074 22.7493 355.08 22.696 355.09 22.664C354.973 22.5253 354.914 22.3653 354.914 22.184C354.914 22.0667 354.946 21.9547 355.01 21.848C354.936 21.6773 354.898 21.512 354.898 21.352C354.898 21.096 354.962 20.904 355.09 20.776C355.026 20.6267 354.994 20.4453 354.994 20.232C354.994 20.0613 355.021 19.9387 355.074 19.864C355.021 19.832 354.978 19.7733 354.946 19.688C354.914 19.6027 354.898 19.5067 354.898 19.4C354.898 19.2187 354.941 19.0693 355.026 18.952C354.994 18.8667 354.978 18.7547 354.978 18.616C354.978 18.5093 354.989 18.4133 355.01 18.328C354.882 18.2 354.818 18.0507 354.818 17.88C354.818 17.6987 354.893 17.544 355.042 17.416C355.202 17.2773 355.378 17.208 355.57 17.208C355.698 17.208 355.816 17.2507 355.922 17.336C356.029 17.4107 356.104 17.528 356.146 17.688C356.306 17.7947 356.386 17.96 356.386 18.184C356.386 18.2267 356.376 18.2907 356.354 18.376C356.482 18.504 356.546 18.6693 356.546 18.872C356.546 19.0427 356.493 19.176 356.386 19.272C356.44 19.3147 356.488 19.3893 356.53 19.496C356.573 19.592 356.594 19.6987 356.594 19.816C356.594 20.008 356.525 20.168 356.386 20.296C356.472 20.4133 356.514 20.5573 356.514 20.728C356.514 20.8987 356.482 21.0373 356.418 21.144C356.461 21.1867 356.482 21.2933 356.482 21.464C356.482 21.56 356.472 21.6613 356.45 21.768C356.429 21.8747 356.397 21.9493 356.354 21.992C356.514 22.1307 356.594 22.3067 356.594 22.52C356.594 22.6373 356.573 22.7387 356.53 22.824C356.594 22.92 356.626 23.064 356.626 23.256C356.626 23.5013 356.584 23.6987 356.498 23.848C356.573 23.9973 356.61 24.1947 356.61 24.44C356.61 24.7387 356.562 24.952 356.466 25.08C356.541 25.1867 356.578 25.32 356.578 25.48C356.578 25.6187 356.546 25.784 356.482 25.976C356.578 26.0827 356.626 26.248 356.626 26.472C356.626 26.664 356.594 26.84 356.53 27ZM320.981 47.112C321.013 47.2187 321.029 47.3253 321.029 47.432C321.029 47.6453 320.944 47.7893 320.773 47.864C320.794 48.024 320.73 48.184 320.581 48.344C320.432 48.504 320.293 48.584 320.165 48.584C320.112 48.68 319.952 48.7707 319.685 48.856C319.418 48.9413 319.173 48.984 318.949 48.984C318.789 48.984 318.666 48.952 318.581 48.888C318.432 48.9627 318.218 49 317.941 49C317.696 49 317.472 48.9627 317.269 48.888C317.077 48.8133 316.96 48.7013 316.917 48.552C316.704 48.584 316.464 48.52 316.197 48.36C315.941 48.2 315.776 48.0347 315.701 47.864C315.509 47.8107 315.349 47.7093 315.221 47.56C315.104 47.4107 315.04 47.2347 315.029 47.032C314.965 46.936 314.933 46.84 314.933 46.744C314.933 46.5947 314.981 46.4613 315.077 46.344C315.184 46.2267 315.306 46.168 315.445 46.168C315.584 46.168 315.717 46.2533 315.845 46.424C316.037 46.4027 316.208 46.4667 316.357 46.616C316.517 46.7653 316.597 46.9147 316.597 47.064C316.629 47.064 316.709 47.0747 316.837 47.096C316.976 47.1067 317.098 47.144 317.205 47.208C317.312 47.272 317.386 47.3627 317.429 47.48C317.621 47.48 317.808 47.5067 317.989 47.56C318.181 47.6027 318.293 47.656 318.325 47.72C318.41 47.6667 318.533 47.624 318.693 47.592C318.864 47.5493 319.008 47.528 319.125 47.528C319.157 47.4853 319.237 47.4427 319.365 47.4C319.493 47.3573 319.6 47.3307 319.685 47.32C319.632 47.2453 319.605 47.1333 319.605 46.984C319.605 46.76 319.674 46.6 319.813 46.504C319.685 46.4613 319.584 46.3973 319.509 46.312C319.434 46.216 319.402 46.1093 319.413 45.992C319.328 46.0133 319.264 46.024 319.221 46.024C319.018 46.024 318.853 45.944 318.725 45.784C318.512 45.8053 318.298 45.7573 318.085 45.64C317.882 45.5227 317.733 45.368 317.637 45.176C317.562 45.208 317.482 45.224 317.397 45.224C317.216 45.224 317.024 45.1707 316.821 45.064C316.629 44.9467 316.506 44.8347 316.453 44.728C316.304 44.7707 316.128 44.7227 315.925 44.584C315.722 44.4453 315.621 44.2907 315.621 44.12C315.493 44.056 315.392 43.9493 315.317 43.8C315.242 43.64 315.205 43.496 315.205 43.368C315.205 43.272 315.226 43.208 315.269 43.176C315.216 43.0693 315.189 42.9627 315.189 42.856C315.189 42.664 315.253 42.4987 315.381 42.36C315.349 42.2427 315.333 42.136 315.333 42.04C315.333 41.8587 315.37 41.7093 315.445 41.592C315.53 41.464 315.632 41.4107 315.749 41.432C315.728 41.2613 315.765 41.112 315.861 40.984C315.968 40.856 316.096 40.7653 316.245 40.712C316.405 40.648 316.544 40.6267 316.661 40.648C316.725 40.552 316.81 40.4773 316.917 40.424C317.024 40.3707 317.13 40.344 317.237 40.344C317.418 40.344 317.546 40.3973 317.621 40.504C317.632 40.4507 317.669 40.408 317.733 40.376C317.808 40.344 317.893 40.328 317.989 40.328C318.074 40.328 318.16 40.344 318.245 40.376C318.33 40.408 318.394 40.4453 318.437 40.488C318.501 40.424 318.613 40.392 318.773 40.392C318.901 40.392 319.029 40.4187 319.157 40.472C319.285 40.5147 319.37 40.5787 319.413 40.664C319.477 40.632 319.546 40.616 319.621 40.616C319.749 40.616 319.866 40.664 319.973 40.76C320.09 40.8453 320.17 40.9573 320.213 41.096C320.373 41.0747 320.538 41.128 320.709 41.256C320.88 41.384 320.944 41.512 320.901 41.64C321.189 41.8 321.333 42.0187 321.333 42.296C321.333 42.4667 321.274 42.616 321.157 42.744C321.04 42.872 320.89 42.936 320.709 42.936C320.549 42.9253 320.416 42.8827 320.309 42.808C320.202 42.7333 320.138 42.6427 320.117 42.536C319.978 42.5147 319.845 42.4613 319.717 42.376C319.6 42.28 319.536 42.1573 319.525 42.008C319.322 42.0293 319.168 42.008 319.061 41.944C318.965 41.88 318.88 41.7787 318.805 41.64C318.73 41.6933 318.634 41.72 318.517 41.72C318.4 41.72 318.272 41.688 318.133 41.624C318.058 41.688 317.962 41.7413 317.845 41.784C317.738 41.8267 317.632 41.848 317.525 41.848C317.408 41.848 317.306 41.8213 317.221 41.768C317.242 41.896 317.21 41.9973 317.125 42.072C317.04 42.1467 316.922 42.1733 316.773 42.152C316.805 42.2267 316.821 42.3067 316.821 42.392C316.821 42.584 316.736 42.744 316.565 42.872C316.682 42.9253 316.768 43.016 316.821 43.144C316.874 43.2613 316.896 43.3787 316.885 43.496L317.013 43.48C317.333 43.48 317.536 43.5813 317.621 43.784L317.749 43.768C317.92 43.768 318.08 43.8107 318.229 43.896C318.389 43.9813 318.506 44.1253 318.581 44.328C318.752 44.3173 318.917 44.3387 319.077 44.392C319.237 44.4347 319.349 44.52 319.413 44.648C319.498 44.616 319.578 44.6 319.653 44.6C319.834 44.6 319.994 44.6533 320.133 44.76C320.282 44.8667 320.362 44.9893 320.373 45.128C320.469 45.128 320.554 45.1813 320.629 45.288C320.714 45.3947 320.746 45.5173 320.725 45.656C320.8 45.6453 320.869 45.688 320.933 45.784C320.997 45.8693 321.029 45.9707 321.029 46.088C321.029 46.152 321.013 46.2107 320.981 46.264C321.13 46.3707 321.205 46.5147 321.205 46.696C321.205 46.792 321.184 46.8773 321.141 46.952C321.109 47.0267 321.056 47.08 320.981 47.112ZM325.009 48.728C324.892 48.7707 324.78 48.792 324.673 48.792C324.524 48.792 324.401 48.7387 324.305 48.632C324.188 48.6427 324.054 48.5947 323.905 48.488C323.766 48.3707 323.681 48.2587 323.649 48.152C323.521 48.12 323.404 48.0507 323.297 47.944C323.201 47.8267 323.137 47.6827 323.105 47.512C322.977 47.48 322.87 47.3947 322.785 47.256C322.71 47.1067 322.673 46.936 322.673 46.744C322.673 46.6267 322.689 46.5147 322.721 46.408C322.646 46.2907 322.62 46.1413 322.641 45.96C322.492 45.832 322.417 45.6827 322.417 45.512C322.417 45.4267 322.433 45.3467 322.465 45.272C322.401 45.176 322.369 45.064 322.369 44.936C322.369 44.776 322.417 44.632 322.513 44.504C322.364 44.376 322.289 44.216 322.289 44.024C322.289 43.9067 322.321 43.8053 322.385 43.72C322.289 43.5813 322.241 43.416 322.241 43.224C322.241 43.0747 322.273 42.9627 322.337 42.888C322.23 42.8027 322.177 42.6747 322.177 42.504C322.177 42.3973 322.209 42.28 322.273 42.152C322.22 42.0667 322.193 41.944 322.193 41.784C322.193 41.5493 322.257 41.368 322.385 41.24C322.353 41.144 322.337 41.0533 322.337 40.968C322.337 40.776 322.401 40.6267 322.529 40.52C322.668 40.4027 322.828 40.344 323.009 40.344C323.19 40.344 323.345 40.4027 323.473 40.52C323.612 40.6373 323.681 40.808 323.681 41.032C323.681 41.2027 323.644 41.384 323.569 41.576C323.718 41.704 323.793 41.8693 323.793 42.072C323.793 42.2213 323.745 42.3547 323.649 42.472C323.713 42.5893 323.745 42.744 323.745 42.936C323.745 43.1387 323.713 43.304 323.649 43.432C323.745 43.56 323.793 43.7573 323.793 44.024C323.793 44.2053 323.782 44.328 323.761 44.392C323.846 44.488 323.889 44.6107 323.889 44.76C323.889 44.8453 323.868 44.9413 323.825 45.048C323.932 45.1653 323.985 45.3253 323.985 45.528C323.985 45.592 323.974 45.656 323.953 45.72C323.996 45.752 324.033 45.8107 324.065 45.896C324.097 45.9707 324.113 46.0507 324.113 46.136C324.113 46.2427 324.086 46.3333 324.033 46.408C324.118 46.4187 324.177 46.4773 324.209 46.584C324.241 46.68 324.246 46.776 324.225 46.872H324.241C324.316 46.872 324.38 46.9147 324.433 47C324.497 47.0747 324.518 47.144 324.497 47.208C324.529 47.1867 324.577 47.176 324.641 47.176C324.726 47.176 324.801 47.1973 324.865 47.24C324.94 47.272 324.993 47.3147 325.025 47.368C325.238 47.2507 325.441 47.192 325.633 47.192C325.729 47.192 325.814 47.208 325.889 47.24C325.985 47.1653 326.108 47.1013 326.257 47.048C326.417 46.984 326.556 46.952 326.673 46.952C326.726 46.952 326.774 46.9627 326.817 46.984C326.742 46.8667 326.705 46.7173 326.705 46.536C326.705 46.3333 326.769 46.2053 326.897 46.152C326.822 46.0667 326.785 45.8853 326.785 45.608C326.785 45.2773 326.854 45.0427 326.993 44.904C326.897 44.744 326.849 44.568 326.849 44.376C326.849 44.2053 326.881 44.088 326.945 44.024C326.881 43.9387 326.849 43.832 326.849 43.704C326.849 43.576 326.87 43.4427 326.913 43.304C326.966 43.1547 327.03 43.0373 327.105 42.952C326.966 42.856 326.897 42.648 326.897 42.328C326.897 42.1253 326.913 41.96 326.945 41.832C326.849 41.6187 326.801 41.4373 326.801 41.288C326.801 41.096 326.865 40.9413 326.993 40.824C327.121 40.7067 327.27 40.648 327.441 40.648C327.644 40.648 327.814 40.728 327.953 40.888C328.102 41.048 328.172 41.2773 328.161 41.576C328.214 41.6293 328.257 41.7147 328.289 41.832C328.332 41.9387 328.353 42.0507 328.353 42.168C328.353 42.4027 328.294 42.568 328.177 42.664C328.369 42.8987 328.465 43.128 328.465 43.352C328.465 43.5013 328.422 43.624 328.337 43.72C328.422 43.8373 328.465 43.9653 328.465 44.104C328.465 44.2427 328.428 44.3867 328.353 44.536C328.417 44.632 328.449 44.7387 328.449 44.856C328.449 45.048 328.369 45.2133 328.209 45.352C328.316 45.4693 328.369 45.608 328.369 45.768C328.369 45.9387 328.3 46.1307 328.161 46.344C328.268 46.408 328.321 46.5413 328.321 46.744C328.321 46.9467 328.278 47.1547 328.193 47.368C328.278 47.4853 328.321 47.64 328.321 47.832C328.321 47.9493 328.3 48.0453 328.257 48.12C328.278 48.2267 328.289 48.3067 328.289 48.36C328.289 48.5627 328.225 48.7227 328.097 48.84C327.98 48.9467 327.836 49 327.665 49C327.516 49 327.382 48.952 327.265 48.856C327.148 48.7493 327.078 48.6 327.057 48.408C327.046 48.3973 327.03 48.3813 327.009 48.36C326.998 48.328 326.988 48.3013 326.977 48.28C326.796 48.3867 326.63 48.44 326.481 48.44C326.428 48.44 326.385 48.4347 326.353 48.424C326.214 48.52 326.081 48.568 325.953 48.568C325.846 48.568 325.745 48.5467 325.649 48.504C325.606 48.5787 325.537 48.6373 325.441 48.68C325.356 48.7227 325.26 48.744 325.153 48.744C325.089 48.744 325.041 48.7387 325.009 48.728ZM334.608 50.536C334.586 50.4507 334.613 50.3493 334.688 50.232C334.762 50.1147 334.837 50.0507 334.912 50.04C334.89 49.9547 334.88 49.8747 334.88 49.8C334.88 49.6613 334.901 49.528 334.944 49.4C334.997 49.2827 335.066 49.192 335.152 49.128C335.141 49.0853 335.136 49.0267 335.136 48.952C335.136 48.8133 335.162 48.6853 335.216 48.568C335.269 48.44 335.328 48.3547 335.392 48.312C334.752 48.632 334.352 48.7547 334.192 48.68C333.914 48.744 333.69 48.776 333.52 48.776C333.296 48.776 333.141 48.7387 333.056 48.664C332.96 48.7173 332.832 48.744 332.672 48.744C332.458 48.744 332.25 48.696 332.048 48.6C331.856 48.4933 331.722 48.36 331.648 48.2C331.36 48.1787 331.093 48.0293 330.848 47.752C330.602 47.464 330.469 47.1333 330.448 46.76C330.256 46.696 330.106 46.552 330 46.328C329.904 46.0933 329.856 45.8373 329.856 45.56C329.856 45.2507 329.914 45.0213 330.032 44.872C329.957 44.8187 329.893 44.696 329.84 44.504C329.797 44.3013 329.776 44.088 329.776 43.864C329.776 43.3733 329.898 43.0427 330.144 42.872C330.112 42.8187 330.117 42.712 330.16 42.552C330.202 42.3813 330.272 42.216 330.368 42.056C330.464 41.896 330.56 41.7947 330.656 41.752C330.645 41.656 330.682 41.5493 330.768 41.432C330.853 41.3147 330.954 41.224 331.072 41.16C331.189 41.096 331.28 41.0747 331.344 41.096C331.386 40.9147 331.477 40.7867 331.616 40.712C331.765 40.6373 331.941 40.5787 332.144 40.536C332.197 40.376 332.314 40.2587 332.496 40.184C332.688 40.0987 332.906 40.056 333.152 40.056C333.397 40.056 333.626 40.0933 333.84 40.168C334.064 40.232 334.229 40.3173 334.336 40.424C334.442 40.3387 334.602 40.296 334.816 40.296C335.146 40.296 335.349 40.4293 335.424 40.696C335.509 40.664 335.594 40.648 335.68 40.648C335.861 40.648 336.021 40.7173 336.16 40.856C336.298 40.984 336.368 41.1387 336.368 41.32C336.368 41.416 336.357 41.4853 336.336 41.528C336.442 41.6773 336.522 41.816 336.576 41.944C336.64 42.072 336.661 42.2 336.64 42.328C336.672 42.424 336.688 42.5093 336.688 42.584C336.688 42.7547 336.645 42.8827 336.56 42.968C336.57 43 336.576 43.0427 336.576 43.096C336.576 43.2133 336.533 43.3413 336.448 43.48C336.522 43.5867 336.56 43.704 336.56 43.832C336.56 43.96 336.522 44.0773 336.448 44.184C336.469 44.376 336.48 44.504 336.48 44.568C336.512 44.8347 336.528 45.016 336.528 45.112C336.528 45.1653 336.517 45.2347 336.496 45.32C336.581 45.4373 336.624 45.608 336.624 45.832C336.624 46.056 336.586 46.2267 336.512 46.344C336.672 46.6427 336.752 46.872 336.752 47.032C336.752 47.16 336.714 47.2773 336.64 47.384C336.682 47.4587 336.704 47.544 336.704 47.64C336.704 47.7467 336.672 47.864 336.608 47.992C336.672 48.088 336.704 48.2373 336.704 48.44C336.704 48.664 336.65 48.8613 336.544 49.032C336.597 49.0427 336.608 49.1067 336.576 49.224C336.544 49.352 336.49 49.4747 336.416 49.592C336.469 49.6987 336.496 49.7947 336.496 49.88C336.496 50.008 336.458 50.1307 336.384 50.248C336.309 50.376 336.213 50.4667 336.096 50.52C335.957 50.9147 335.76 51.144 335.504 51.208C335.514 51.336 335.466 51.4587 335.36 51.576C335.253 51.704 335.141 51.7787 335.024 51.8C334.97 52.0347 334.768 52.152 334.416 52.152C334.341 52.248 334.218 52.3227 334.048 52.376C333.888 52.4293 333.706 52.456 333.504 52.456C333.109 52.456 332.81 52.3547 332.608 52.152C332.469 52.1413 332.336 52.088 332.208 51.992C332.08 51.9067 331.984 51.8 331.92 51.672C331.76 51.6613 331.621 51.5973 331.504 51.48C331.397 51.3627 331.338 51.224 331.328 51.064C331.242 50.9253 331.2 50.8027 331.2 50.696C331.2 50.5147 331.274 50.36 331.424 50.232C331.573 50.1147 331.744 50.056 331.936 50.056C332.064 50.056 332.176 50.088 332.272 50.152C332.378 50.2267 332.458 50.3333 332.512 50.472C332.736 50.5253 332.885 50.648 332.96 50.84C333.141 50.8613 333.285 50.9253 333.392 51.032C333.424 50.9787 333.493 50.936 333.6 50.904C333.706 50.8827 333.818 50.872 333.936 50.872C334.053 50.872 334.144 50.888 334.208 50.92C334.208 50.8347 334.25 50.7493 334.336 50.664C334.421 50.5893 334.512 50.5467 334.608 50.536ZM333.872 47.448C333.968 47.3307 334.112 47.272 334.304 47.272C334.464 47.272 334.576 47.2933 334.64 47.336C334.672 47.2933 334.752 47.2293 334.88 47.144C335.018 47.048 335.157 46.9787 335.296 46.936C335.168 46.808 335.104 46.568 335.104 46.216C335.104 45.9813 335.136 45.768 335.2 45.576C335.114 45.4053 335.072 45.2453 335.072 45.096C335.072 44.9573 335.098 44.8453 335.152 44.76C335.109 44.6853 335.088 44.584 335.088 44.456C335.088 44.2747 335.125 44.1147 335.2 43.976C335.136 43.8587 335.104 43.7147 335.104 43.544C335.104 43.4693 335.114 43.3893 335.136 43.304C335.04 43.176 334.992 42.9947 334.992 42.76C334.992 42.6 335.018 42.456 335.072 42.328C335.008 42.2853 334.954 42.2107 334.912 42.104C334.869 41.9867 334.842 41.88 334.832 41.784C334.704 41.7947 334.576 41.7787 334.448 41.736C334.32 41.6827 334.234 41.6133 334.192 41.528C334.053 41.6027 333.914 41.64 333.776 41.64C333.573 41.64 333.365 41.5653 333.152 41.416C333.109 41.5013 332.997 41.5973 332.816 41.704C332.634 41.8107 332.48 41.8747 332.352 41.896C332.341 42.0027 332.288 42.0987 332.192 42.184C332.106 42.2693 331.994 42.3333 331.856 42.376C331.856 42.472 331.813 42.6 331.728 42.76C331.653 42.92 331.573 43.032 331.488 43.096L331.504 43.336C331.504 43.5387 331.477 43.7253 331.424 43.896C331.381 44.0667 331.306 44.168 331.2 44.2C331.274 44.264 331.333 44.3653 331.376 44.504C331.418 44.632 331.44 44.7707 331.44 44.92C331.44 45.1547 331.402 45.3413 331.328 45.48C331.413 45.5227 331.498 45.608 331.584 45.736C331.669 45.8533 331.712 45.9867 331.712 46.136C331.712 46.2107 331.696 46.296 331.664 46.392C331.717 46.424 331.786 46.5253 331.872 46.696C331.957 46.8667 332.005 46.9787 332.016 47.032C332.176 47.0427 332.33 47.0747 332.48 47.128C332.64 47.1813 332.752 47.2613 332.816 47.368C332.976 47.272 333.13 47.224 333.28 47.224C333.482 47.224 333.68 47.2987 333.872 47.448ZM338.271 42.792C338.185 42.6533 338.143 42.52 338.143 42.392C338.143 42.2 338.207 42.04 338.335 41.912C338.367 41.752 338.441 41.6027 338.559 41.464C338.676 41.3147 338.804 41.2027 338.943 41.128C339.092 41.0427 339.209 41.0107 339.295 41.032C339.369 40.9147 339.519 40.808 339.743 40.712C339.967 40.6053 340.175 40.552 340.367 40.552C340.409 40.552 340.473 40.5627 340.559 40.584C340.676 40.456 340.831 40.392 341.023 40.392C341.172 40.392 341.279 40.4347 341.343 40.52C341.481 40.424 341.663 40.376 341.887 40.376C342.153 40.376 342.388 40.44 342.591 40.568C342.804 40.696 342.927 40.8667 342.959 41.08C343.151 41.144 343.295 41.2453 343.391 41.384C343.497 41.512 343.561 41.6933 343.583 41.928C343.721 42.0667 343.823 42.232 343.887 42.424C343.951 42.6053 343.983 42.792 343.983 42.984C343.983 43.2293 343.94 43.4267 343.855 43.576C343.929 43.6827 343.993 43.8427 344.047 44.056C344.1 44.2693 344.127 44.4773 344.127 44.68C344.127 44.7653 344.116 44.872 344.095 45C344.169 45.16 344.207 45.2667 344.207 45.32C344.207 45.352 344.191 45.4267 344.159 45.544C344.169 45.5867 344.18 45.64 344.191 45.704C344.201 45.7573 344.207 45.8267 344.207 45.912C344.207 46.072 344.148 46.216 344.031 46.344C344.073 46.4613 344.095 46.6053 344.095 46.776C344.095 47 344.041 47.1813 343.935 47.32C343.956 47.3627 343.967 47.432 343.967 47.528C343.967 47.752 343.876 47.9387 343.695 48.088C343.652 48.2373 343.572 48.3547 343.455 48.44C343.337 48.5147 343.209 48.552 343.071 48.552C342.932 48.552 342.82 48.5093 342.735 48.424C342.457 48.5413 342.233 48.6 342.063 48.6C341.977 48.6 341.913 48.5947 341.871 48.584C341.593 48.6693 341.359 48.712 341.167 48.712C341.028 48.712 340.836 48.6853 340.591 48.632C340.441 48.7173 340.297 48.76 340.159 48.76C340.031 48.76 339.913 48.7227 339.807 48.648C339.753 48.6587 339.673 48.664 339.567 48.664C339.151 48.664 338.831 48.4773 338.607 48.104C338.201 47.8693 337.999 47.5173 337.999 47.048C337.999 46.9307 338.004 46.84 338.015 46.776C337.919 46.712 337.871 46.5787 337.871 46.376C337.871 46.2373 337.897 46.1147 337.951 46.008C337.908 45.816 337.887 45.6933 337.887 45.64C337.887 45.3307 338.036 45.0533 338.335 44.808C338.452 44.5627 338.585 44.3973 338.735 44.312C338.895 44.2267 339.092 44.1627 339.327 44.12C339.391 43.9387 339.54 43.816 339.775 43.752C340.009 43.688 340.239 43.6667 340.463 43.688C340.527 43.6453 340.617 43.608 340.735 43.576C340.852 43.5333 340.969 43.512 341.087 43.512C341.215 43.512 341.327 43.5333 341.423 43.576C341.444 43.5547 341.497 43.544 341.583 43.544C341.647 43.544 341.711 43.5493 341.775 43.56C341.839 43.5707 341.881 43.5867 341.903 43.608C342.052 43.416 342.228 43.32 342.431 43.32C342.495 43.32 342.559 43.336 342.623 43.368V43.32C342.623 43.1387 342.66 43.0107 342.735 42.936C342.628 42.904 342.511 42.8133 342.383 42.664C342.265 42.504 342.196 42.36 342.175 42.232C342.004 42.1573 341.887 42.0347 341.823 41.864C341.695 41.96 341.545 42.008 341.375 42.008C341.257 42.008 341.145 41.976 341.039 41.912C340.857 41.9653 340.74 41.9867 340.687 41.976C340.537 42.0827 340.372 42.136 340.191 42.136C340.031 42.3493 339.844 42.4453 339.631 42.424C339.535 42.5947 339.401 42.744 339.231 42.872C339.071 43 338.905 43.064 338.735 43.064C338.543 43.064 338.388 42.9733 338.271 42.792ZM339.151 46.36C339.279 46.488 339.343 46.6107 339.343 46.728C339.343 46.8133 339.321 46.92 339.279 47.048C339.321 47.048 339.38 47.0747 339.455 47.128C339.54 47.1707 339.588 47.2187 339.599 47.272C339.684 47.24 339.791 47.224 339.919 47.224C340.153 47.224 340.308 47.2773 340.383 47.384C340.5 47.3413 340.623 47.32 340.751 47.32C340.953 47.32 341.113 47.3787 341.231 47.496C341.316 47.4107 341.455 47.3413 341.647 47.288C341.849 47.2347 342.031 47.208 342.191 47.208C342.287 47.016 342.457 46.904 342.703 46.872C342.724 46.7973 342.783 46.7013 342.879 46.584C342.836 46.52 342.799 46.4347 342.767 46.328C342.735 46.2213 342.719 46.1147 342.719 46.008C342.719 45.784 342.772 45.6187 342.879 45.512C342.761 45.3627 342.703 45.1867 342.703 44.984C342.703 44.8453 342.724 44.728 342.767 44.632C342.681 44.6853 342.585 44.712 342.479 44.712C342.383 44.712 342.303 44.6747 342.239 44.6C342.143 44.696 342.009 44.744 341.839 44.744C341.732 44.744 341.625 44.7173 341.519 44.664C341.401 44.7813 341.257 44.84 341.087 44.84C341.033 44.84 340.953 44.8187 340.847 44.776C340.687 44.936 340.543 44.984 340.415 44.92C340.351 45.0693 340.265 45.1707 340.159 45.224C340.063 45.2773 339.924 45.304 339.743 45.304C339.7 45.4213 339.625 45.5173 339.519 45.592C339.423 45.6667 339.321 45.6933 339.215 45.672C339.268 45.7467 339.295 45.832 339.295 45.928C339.295 46.088 339.247 46.232 339.151 46.36ZM346.988 48.248C347.031 48.4827 346.983 48.6693 346.844 48.808C346.716 48.936 346.556 49 346.364 49C346.193 49 346.044 48.9467 345.916 48.84C345.788 48.7227 345.724 48.5627 345.724 48.36C345.724 48.232 345.756 48.088 345.82 47.928C345.756 47.7787 345.724 47.624 345.724 47.464C345.724 47.336 345.751 47.2293 345.804 47.144C345.74 47.1013 345.692 47.0373 345.66 46.952C345.628 46.8667 345.612 46.7707 345.612 46.664C345.612 46.5573 345.633 46.44 345.676 46.312C345.58 46.1947 345.532 46.056 345.532 45.896C345.532 45.6933 345.607 45.528 345.756 45.4C345.745 45.368 345.74 45.3147 345.74 45.24C345.74 45.1333 345.751 45.0587 345.772 45.016C345.655 44.8667 345.596 44.6533 345.596 44.376C345.596 44.184 345.633 44.0347 345.708 43.928C345.633 43.864 345.569 43.7787 345.516 43.672C345.463 43.5547 345.436 43.4373 345.436 43.32C345.436 43.192 345.473 43.0693 345.548 42.952C345.495 42.824 345.468 42.712 345.468 42.616C345.468 42.456 345.516 42.3067 345.612 42.168C345.484 42.04 345.42 41.9067 345.42 41.768C345.42 41.6613 345.457 41.5173 345.532 41.336C345.457 41.1867 345.42 41.0267 345.42 40.856C345.42 40.632 345.5 40.4933 345.66 40.44C345.671 40.2907 345.724 40.168 345.82 40.072C345.916 39.976 346.033 39.928 346.172 39.928C346.332 39.928 346.471 40.008 346.588 40.168C346.716 40.3173 346.78 40.536 346.78 40.824C346.78 40.9413 346.775 41.0373 346.764 41.112C346.807 41.0907 346.849 41.0587 346.892 41.016C346.935 40.9627 346.988 40.9253 347.052 40.904C347.116 40.8827 347.212 40.872 347.34 40.872C347.361 40.8187 347.431 40.7653 347.548 40.712C347.676 40.6587 347.799 40.632 347.916 40.632C348.001 40.632 348.06 40.6427 348.092 40.664C348.177 40.6213 348.263 40.6 348.348 40.6C348.476 40.6 348.615 40.6907 348.764 40.872C349.02 40.8507 349.207 40.9093 349.324 41.048C349.495 41.0373 349.644 41.0587 349.772 41.112C349.9 41.1653 350.001 41.2773 350.076 41.448C350.279 41.576 350.38 41.7467 350.38 41.96C350.38 42.1413 350.3 42.312 350.14 42.472C349.991 42.6213 349.825 42.696 349.644 42.696C349.441 42.696 349.271 42.5893 349.132 42.376C349.015 42.376 348.924 42.3653 348.86 42.344C348.796 42.3227 348.732 42.2747 348.668 42.2C348.604 42.2213 348.551 42.232 348.508 42.232C348.412 42.232 348.311 42.2053 348.204 42.152C348.055 42.248 347.895 42.2907 347.724 42.28C347.66 42.4293 347.495 42.504 347.228 42.504C347.239 42.536 347.244 42.5893 347.244 42.664C347.244 42.8027 347.212 42.9413 347.148 43.08C347.095 43.208 347.025 43.304 346.94 43.368C347.025 43.5707 347.068 43.7733 347.068 43.976C347.068 44.1573 347.025 44.296 346.94 44.392C346.972 44.4347 347.004 44.488 347.036 44.552C347.079 44.616 347.111 44.6747 347.132 44.728C347.153 44.8133 347.164 44.8773 347.164 44.92C347.164 44.9947 347.137 45.096 347.084 45.224C347.137 45.352 347.164 45.448 347.164 45.512C347.164 45.5973 347.127 45.7147 347.052 45.864C347.116 45.9707 347.148 46.088 347.148 46.216C347.148 46.3653 347.111 46.4933 347.036 46.6C347.111 46.7707 347.148 46.9467 347.148 47.128C347.148 47.2667 347.116 47.3947 347.052 47.512C347.105 47.6187 347.132 47.7253 347.132 47.832C347.132 47.9813 347.084 48.12 346.988 48.248Z M326.539 196.965V196.344C326.727 196.32 326.957 196.281 327.23 196.227C327.512 196.172 327.73 196.133 327.887 196.109C327.91 195.547 327.922 194.98 327.922 194.41C327.922 194.051 327.918 193.512 327.91 192.793C327.902 192.066 327.898 191.52 327.898 191.152C327.898 190.285 327.91 189.629 327.934 189.184C327.223 189.59 326.703 189.918 326.375 190.168L326 189.781C326.125 189.68 326.34 189.504 326.645 189.254C326.949 188.996 327.223 188.766 327.465 188.562C327.707 188.352 327.895 188.18 328.027 188.047C328.152 188.062 328.281 188.074 328.414 188.082C328.547 188.082 328.676 188.09 328.801 188.105C328.848 189.012 328.871 190.672 328.871 193.086C328.871 194.523 328.883 195.555 328.906 196.18C328.977 196.188 329.145 196.219 329.41 196.273C329.684 196.32 329.895 196.352 330.043 196.367L330.23 196.988C329.84 196.988 329.5 196.988 329.211 196.988C328.922 196.988 328.535 196.988 328.051 196.988C327.574 196.988 327.199 196.988 326.926 196.988C326.66 196.98 326.531 196.973 326.539 196.965ZM330.887 195.535C331.098 195.535 331.273 195.629 331.414 195.816C331.562 195.996 331.637 196.203 331.637 196.438C331.637 196.609 331.594 196.75 331.508 196.859C331.43 196.961 331.32 197.012 331.18 197.012C330.961 197.012 330.785 196.922 330.652 196.742C330.527 196.562 330.465 196.352 330.465 196.109C330.465 195.938 330.5 195.801 330.57 195.699C330.648 195.59 330.754 195.535 330.887 195.535ZM336.523 188.68L336.652 189.207C336.27 189.277 335.832 189.312 335.34 189.312C334.605 189.312 334.137 189.324 333.934 189.348C333.816 190.246 333.664 191.199 333.477 192.207C333.703 192.16 333.922 192.137 334.133 192.137C334.82 192.137 335.43 192.41 335.961 192.957C336.492 193.496 336.758 194.121 336.758 194.832C336.758 195.504 336.496 196.078 335.973 196.555C335.449 197.031 334.805 197.27 334.039 197.27C333.297 197.27 332.574 197.023 331.871 196.531C331.879 196.523 331.938 196.398 332.047 196.156C332.164 195.914 332.277 195.793 332.387 195.793C332.441 195.793 332.492 195.812 332.539 195.852C333.078 196.258 333.586 196.461 334.062 196.461C334.547 196.461 334.945 196.27 335.258 195.887C335.57 195.504 335.727 195.074 335.727 194.598C335.727 194.152 335.578 193.773 335.281 193.461C334.992 193.148 334.566 192.992 334.004 192.992C333.801 192.992 333.609 193.008 333.43 193.039C333.273 192.953 333.102 192.867 332.914 192.781C332.727 192.695 332.57 192.621 332.445 192.559C332.625 191.855 332.773 191.152 332.891 190.449C333.008 189.746 333.164 189.117 333.359 188.562C333.633 188.586 334.137 188.598 334.871 188.598C335.605 188.598 336.156 188.625 336.523 188.68Z M326.539 274.965V274.344C326.727 274.32 326.957 274.281 327.23 274.227C327.512 274.172 327.73 274.133 327.887 274.109C327.91 273.547 327.922 272.98 327.922 272.41C327.922 272.051 327.918 271.512 327.91 270.793C327.902 270.066 327.898 269.52 327.898 269.152C327.898 268.285 327.91 267.629 327.934 267.184C327.223 267.59 326.703 267.918 326.375 268.168L326 267.781C326.125 267.68 326.34 267.504 326.645 267.254C326.949 266.996 327.223 266.766 327.465 266.562C327.707 266.352 327.895 266.18 328.027 266.047C328.152 266.062 328.281 266.074 328.414 266.082C328.547 266.082 328.676 266.09 328.801 266.105C328.848 267.012 328.871 268.672 328.871 271.086C328.871 272.523 328.883 273.555 328.906 274.18C328.977 274.188 329.145 274.219 329.41 274.273C329.684 274.32 329.895 274.352 330.043 274.367L330.23 274.988C329.84 274.988 329.5 274.988 329.211 274.988C328.922 274.988 328.535 274.988 328.051 274.988C327.574 274.988 327.199 274.988 326.926 274.988C326.66 274.98 326.531 274.973 326.539 274.965ZM330.887 273.535C331.098 273.535 331.273 273.629 331.414 273.816C331.562 273.996 331.637 274.203 331.637 274.438C331.637 274.609 331.594 274.75 331.508 274.859C331.43 274.961 331.32 275.012 331.18 275.012C330.961 275.012 330.785 274.922 330.652 274.742C330.527 274.562 330.465 274.352 330.465 274.109C330.465 273.938 330.5 273.801 330.57 273.699C330.648 273.59 330.754 273.535 330.887 273.535ZM332.48 275.223L332.293 274.695C334.113 273.922 335.195 272.875 335.539 271.555C335.211 271.766 334.895 271.871 334.59 271.871C333.918 271.871 333.355 271.57 332.902 270.969C332.457 270.359 332.234 269.582 332.234 268.637C332.234 267.965 332.438 267.434 332.844 267.043C333.25 266.645 333.77 266.445 334.402 266.445C335.004 266.445 335.527 266.664 335.973 267.102C336.426 267.531 336.652 268.105 336.652 268.824C336.652 269.277 336.641 269.672 336.617 270.008C336.602 270.344 336.559 270.711 336.488 271.109C336.426 271.508 336.336 271.859 336.219 272.164C336.102 272.461 335.938 272.773 335.727 273.102C335.523 273.422 335.277 273.703 334.988 273.945C334.699 274.188 334.344 274.422 333.922 274.648C333.5 274.867 333.02 275.059 332.48 275.223ZM335.809 269.152C335.809 268.504 335.684 268.02 335.434 267.699C335.191 267.371 334.891 267.207 334.531 267.207C334.148 267.207 333.816 267.336 333.535 267.594C333.254 267.852 333.113 268.207 333.113 268.66C333.113 269.348 333.27 269.922 333.582 270.383C333.895 270.844 334.277 271.074 334.73 271.074C334.934 271.074 335.105 271.039 335.246 270.969C335.387 270.891 335.492 270.805 335.562 270.711C335.633 270.617 335.688 270.473 335.727 270.277C335.766 270.074 335.789 269.906 335.797 269.773C335.805 269.633 335.809 269.426 335.809 269.152Z M326.539 92.9648V92.3438C326.727 92.3203 326.957 92.2812 327.23 92.2266C327.512 92.1719 327.73 92.1328 327.887 92.1094C327.91 91.5469 327.922 90.9805 327.922 90.4102C327.922 90.0508 327.918 89.5117 327.91 88.793C327.902 88.0664 327.898 87.5195 327.898 87.1523C327.898 86.2852 327.91 85.6289 327.934 85.1836C327.223 85.5898 326.703 85.918 326.375 86.168L326 85.7812C326.125 85.6797 326.34 85.5039 326.645 85.2539C326.949 84.9961 327.223 84.7656 327.465 84.5625C327.707 84.3516 327.895 84.1797 328.027 84.0469C328.152 84.0625 328.281 84.0742 328.414 84.082C328.547 84.082 328.676 84.0898 328.801 84.1055C328.848 85.0117 328.871 86.6719 328.871 89.0859C328.871 90.5234 328.883 91.5547 328.906 92.1797C328.977 92.1875 329.145 92.2188 329.41 92.2734C329.684 92.3203 329.895 92.3516 330.043 92.3672L330.23 92.9883C329.84 92.9883 329.5 92.9883 329.211 92.9883C328.922 92.9883 328.535 92.9883 328.051 92.9883C327.574 92.9883 327.199 92.9883 326.926 92.9883C326.66 92.9805 326.531 92.9727 326.539 92.9648ZM330.887 91.5352C331.098 91.5352 331.273 91.6289 331.414 91.8164C331.562 91.9961 331.637 92.2031 331.637 92.4375C331.637 92.6094 331.594 92.75 331.508 92.8594C331.43 92.9609 331.32 93.0117 331.18 93.0117C330.961 93.0117 330.785 92.9219 330.652 92.7422C330.527 92.5625 330.465 92.3516 330.465 92.1094C330.465 91.9375 330.5 91.8008 330.57 91.6992C330.648 91.5898 330.754 91.5352 330.887 91.5352ZM337.332 90.6445C337.332 91.4961 337.125 92.1289 336.711 92.543C336.297 92.9492 335.664 93.1523 334.812 93.1523C333.172 93.1523 332.352 92.3008 332.352 90.5977C332.352 89.9883 332.477 89.4531 332.727 88.9922C332.977 88.5312 333.32 88.2656 333.758 88.1953C333.312 88.1875 332.977 88.0234 332.75 87.7031C332.523 87.3828 332.41 86.9844 332.41 86.5078C332.41 85.7734 332.609 85.1953 333.008 84.7734C333.414 84.3516 333.988 84.1406 334.73 84.1406C335.512 84.1406 336.125 84.3359 336.57 84.7266C337.016 85.1172 337.238 85.7188 337.238 86.5312C337.238 87.0078 337.125 87.4062 336.898 87.7266C336.672 88.0469 336.336 88.2109 335.891 88.2188C336.344 88.2891 336.695 88.5586 336.945 89.0273C337.203 89.4961 337.332 90.0352 337.332 90.6445ZM334.941 92.3086C335.379 92.3086 335.742 92.1406 336.031 91.8047C336.32 91.4609 336.465 91.0547 336.465 90.5859C336.465 90.1172 336.305 89.7148 335.984 89.3789C335.664 89.0352 335.234 88.8594 334.695 88.8516C334.227 88.9922 333.875 89.2148 333.641 89.5195C333.406 89.8164 333.289 90.1523 333.289 90.5273C333.289 90.9961 333.445 91.4102 333.758 91.7695C334.07 92.1289 334.465 92.3086 334.941 92.3086ZM334.941 84.7852C334.418 84.8242 334.02 84.9961 333.746 85.3008C333.473 85.6055 333.336 85.957 333.336 86.3555C333.336 86.7617 333.465 87.1133 333.723 87.4102C333.988 87.707 334.34 87.8555 334.777 87.8555C335.285 87.8477 335.672 87.7109 335.938 87.4453C336.203 87.1719 336.336 86.8438 336.336 86.4609C336.336 86.0781 336.207 85.7227 335.949 85.3945C335.699 85.0664 335.363 84.8633 334.941 84.7852Z M325.48 297.098C325.488 295.41 325.707 294.195 326.137 293.453C326.566 292.703 327.219 292.305 328.094 292.258C328.477 292.258 328.816 292.363 329.113 292.574C329.41 292.785 329.645 293.055 329.816 293.383C329.996 293.703 330.145 294.09 330.262 294.543C330.379 294.988 330.457 295.414 330.496 295.82C330.543 296.219 330.574 296.645 330.59 297.098C330.59 297.715 330.496 298.348 330.309 298.996C330.129 299.637 329.848 300.199 329.465 300.684C329.09 301.16 328.668 301.398 328.199 301.398C326.387 301.398 325.48 299.965 325.48 297.098ZM327.93 293.16C327.742 293.199 327.574 293.262 327.426 293.348C327.277 293.434 327.152 293.531 327.051 293.641C326.957 293.75 326.875 293.895 326.805 294.074C326.734 294.254 326.68 294.422 326.641 294.578C326.609 294.727 326.578 294.922 326.547 295.164C326.523 295.406 326.508 295.617 326.5 295.797C326.492 295.969 326.48 296.199 326.465 296.488C326.457 296.77 326.445 297 326.43 297.18C326.43 297.539 326.449 297.883 326.488 298.211C326.527 298.531 326.598 298.867 326.699 299.219C326.809 299.57 326.977 299.855 327.203 300.074C327.43 300.293 327.703 300.418 328.023 300.449C328.508 300.449 328.906 300.113 329.219 299.441C329.539 298.77 329.699 298.09 329.699 297.402C329.699 294.605 329.109 293.191 327.93 293.16ZM331.117 299.535C331.328 299.535 331.504 299.629 331.645 299.816C331.793 299.996 331.867 300.203 331.867 300.438C331.867 300.609 331.824 300.75 331.738 300.859C331.66 300.961 331.551 301.012 331.41 301.012C331.191 301.012 331.016 300.922 330.883 300.742C330.758 300.562 330.695 300.352 330.695 300.109C330.695 299.938 330.73 299.801 330.801 299.699C330.879 299.59 330.984 299.535 331.117 299.535ZM332.711 301.223L332.523 300.695C334.344 299.922 335.426 298.875 335.77 297.555C335.441 297.766 335.125 297.871 334.82 297.871C334.148 297.871 333.586 297.57 333.133 296.969C332.688 296.359 332.465 295.582 332.465 294.637C332.465 293.965 332.668 293.434 333.074 293.043C333.48 292.645 334 292.445 334.633 292.445C335.234 292.445 335.758 292.664 336.203 293.102C336.656 293.531 336.883 294.105 336.883 294.824C336.883 295.277 336.871 295.672 336.848 296.008C336.832 296.344 336.789 296.711 336.719 297.109C336.656 297.508 336.566 297.859 336.449 298.164C336.332 298.461 336.168 298.773 335.957 299.102C335.754 299.422 335.508 299.703 335.219 299.945C334.93 300.188 334.574 300.422 334.152 300.648C333.73 300.867 333.25 301.059 332.711 301.223ZM336.039 295.152C336.039 294.504 335.914 294.02 335.664 293.699C335.422 293.371 335.121 293.207 334.762 293.207C334.379 293.207 334.047 293.336 333.766 293.594C333.484 293.852 333.344 294.207 333.344 294.66C333.344 295.348 333.5 295.922 333.812 296.383C334.125 296.844 334.508 297.074 334.961 297.074C335.164 297.074 335.336 297.039 335.477 296.969C335.617 296.891 335.723 296.805 335.793 296.711C335.863 296.617 335.918 296.473 335.957 296.277C335.996 296.074 336.02 295.906 336.027 295.773C336.035 295.633 336.039 295.426 336.039 295.152Z M330.395 144.191L330.758 144.965C330.172 144.98 329.254 144.992 328.004 145C326.754 145 326.09 145 326.012 145C326.012 144.938 326.008 144.828 326 144.672C326 144.516 326 144.391 326 144.297C326.148 144.039 326.395 143.73 326.738 143.371C327.082 143.004 327.426 142.648 327.77 142.305C328.113 141.953 328.449 141.57 328.777 141.156C329.113 140.742 329.387 140.281 329.598 139.773C329.809 139.258 329.914 138.73 329.914 138.191C329.914 137.848 329.793 137.57 329.551 137.359C329.309 137.141 329.016 137.031 328.672 137.031C328.273 137.031 327.902 137.195 327.559 137.523C327.223 137.844 326.988 138.336 326.855 139L326.328 138.812C326.359 138.055 326.605 137.465 327.066 137.043C327.535 136.621 328.074 136.41 328.684 136.41C329.23 136.41 329.699 136.582 330.09 136.926C330.48 137.27 330.676 137.75 330.676 138.367C330.676 138.875 330.598 139.371 330.441 139.855C330.285 140.332 330.059 140.781 329.762 141.203C329.465 141.625 329.188 141.988 328.93 142.293C328.672 142.59 328.348 142.938 327.957 143.336C327.574 143.727 327.305 144.008 327.148 144.18C327.414 144.195 327.641 144.203 327.828 144.203C328.023 144.203 328.328 144.199 328.742 144.191C329.156 144.176 329.465 144.168 329.668 144.168C329.855 144.168 330.098 144.176 330.395 144.191ZM331.402 143.535C331.613 143.535 331.789 143.629 331.93 143.816C332.078 143.996 332.152 144.203 332.152 144.438C332.152 144.609 332.109 144.75 332.023 144.859C331.945 144.961 331.836 145.012 331.695 145.012C331.477 145.012 331.301 144.922 331.168 144.742C331.043 144.562 330.98 144.352 330.98 144.109C330.98 143.938 331.016 143.801 331.086 143.699C331.164 143.59 331.27 143.535 331.402 143.535ZM337.027 136.516L337.227 137.043C335.398 137.824 334.312 138.871 333.969 140.184C334.281 139.98 334.598 139.879 334.918 139.879C335.59 139.879 336.152 140.184 336.605 140.793C337.059 141.395 337.285 142.164 337.285 143.102C337.285 143.773 337.078 144.309 336.664 144.707C336.258 145.105 335.738 145.305 335.105 145.305C334.512 145.305 333.988 145.09 333.535 144.66C333.09 144.223 332.867 143.645 332.867 142.926C332.867 142.473 332.875 142.078 332.891 141.742C332.914 141.406 332.957 141.039 333.02 140.641C333.09 140.234 333.184 139.883 333.301 139.586C333.418 139.289 333.578 138.98 333.781 138.66C333.992 138.332 334.242 138.047 334.531 137.805C334.82 137.555 335.172 137.32 335.586 137.102C336.008 136.875 336.488 136.68 337.027 136.516ZM333.711 142.586C333.711 143.234 333.832 143.723 334.074 144.051C334.316 144.371 334.617 144.531 334.977 144.531C335.359 144.531 335.691 144.402 335.973 144.145C336.254 143.887 336.395 143.531 336.395 143.078C336.395 142.391 336.238 141.816 335.926 141.355C335.613 140.895 335.234 140.664 334.789 140.664C334.586 140.664 334.414 140.703 334.273 140.781C334.133 140.852 334.027 140.934 333.957 141.027C333.887 141.121 333.832 141.27 333.793 141.473C333.754 141.668 333.73 141.836 333.723 141.977C333.715 142.109 333.711 142.312 333.711 142.586Z M330.395 118.191L330.758 118.965C330.172 118.98 329.254 118.992 328.004 119C326.754 119 326.09 119 326.012 119C326.012 118.938 326.008 118.828 326 118.672C326 118.516 326 118.391 326 118.297C326.148 118.039 326.395 117.73 326.738 117.371C327.082 117.004 327.426 116.648 327.77 116.305C328.113 115.953 328.449 115.57 328.777 115.156C329.113 114.742 329.387 114.281 329.598 113.773C329.809 113.258 329.914 112.73 329.914 112.191C329.914 111.848 329.793 111.57 329.551 111.359C329.309 111.141 329.016 111.031 328.672 111.031C328.273 111.031 327.902 111.195 327.559 111.523C327.223 111.844 326.988 112.336 326.855 113L326.328 112.812C326.359 112.055 326.605 111.465 327.066 111.043C327.535 110.621 328.074 110.41 328.684 110.41C329.23 110.41 329.699 110.582 330.09 110.926C330.48 111.27 330.676 111.75 330.676 112.367C330.676 112.875 330.598 113.371 330.441 113.855C330.285 114.332 330.059 114.781 329.762 115.203C329.465 115.625 329.188 115.988 328.93 116.293C328.672 116.59 328.348 116.938 327.957 117.336C327.574 117.727 327.305 118.008 327.148 118.18C327.414 118.195 327.641 118.203 327.828 118.203C328.023 118.203 328.328 118.199 328.742 118.191C329.156 118.176 329.465 118.168 329.668 118.168C329.855 118.168 330.098 118.176 330.395 118.191ZM331.402 117.535C331.613 117.535 331.789 117.629 331.93 117.816C332.078 117.996 332.152 118.203 332.152 118.438C332.152 118.609 332.109 118.75 332.023 118.859C331.945 118.961 331.836 119.012 331.695 119.012C331.477 119.012 331.301 118.922 331.168 118.742C331.043 118.562 330.98 118.352 330.98 118.109C330.98 117.938 331.016 117.801 331.086 117.699C331.164 117.59 331.27 117.535 331.402 117.535ZM332.926 118.965V118.344C333.113 118.32 333.344 118.281 333.617 118.227C333.898 118.172 334.117 118.133 334.273 118.109C334.297 117.547 334.309 116.98 334.309 116.41C334.309 116.051 334.305 115.512 334.297 114.793C334.289 114.066 334.285 113.52 334.285 113.152C334.285 112.285 334.297 111.629 334.32 111.184C333.609 111.59 333.09 111.918 332.762 112.168L332.387 111.781C332.512 111.68 332.727 111.504 333.031 111.254C333.336 110.996 333.609 110.766 333.852 110.562C334.094 110.352 334.281 110.18 334.414 110.047C334.539 110.062 334.668 110.074 334.801 110.082C334.934 110.082 335.062 110.09 335.188 110.105C335.234 111.012 335.258 112.672 335.258 115.086C335.258 116.523 335.27 117.555 335.293 118.18C335.363 118.188 335.531 118.219 335.797 118.273C336.07 118.32 336.281 118.352 336.43 118.367L336.617 118.988C336.227 118.988 335.887 118.988 335.598 118.988C335.309 118.988 334.922 118.988 334.438 118.988C333.961 118.988 333.586 118.988 333.312 118.988C333.047 118.98 332.918 118.973 332.926 118.965Z M326.539 326.965V326.344C326.727 326.32 326.957 326.281 327.23 326.227C327.512 326.172 327.73 326.133 327.887 326.109C327.91 325.547 327.922 324.98 327.922 324.41C327.922 324.051 327.918 323.512 327.91 322.793C327.902 322.066 327.898 321.52 327.898 321.152C327.898 320.285 327.91 319.629 327.934 319.184C327.223 319.59 326.703 319.918 326.375 320.168L326 319.781C326.125 319.68 326.34 319.504 326.645 319.254C326.949 318.996 327.223 318.766 327.465 318.562C327.707 318.352 327.895 318.18 328.027 318.047C328.152 318.062 328.281 318.074 328.414 318.082C328.547 318.082 328.676 318.09 328.801 318.105C328.848 319.012 328.871 320.672 328.871 323.086C328.871 324.523 328.883 325.555 328.906 326.18C328.977 326.188 329.145 326.219 329.41 326.273C329.684 326.32 329.895 326.352 330.043 326.367L330.23 326.988C329.84 326.988 329.5 326.988 329.211 326.988C328.922 326.988 328.535 326.988 328.051 326.988C327.574 326.988 327.199 326.988 326.926 326.988C326.66 326.98 326.531 326.973 326.539 326.965ZM330.887 325.535C331.098 325.535 331.273 325.629 331.414 325.816C331.562 325.996 331.637 326.203 331.637 326.438C331.637 326.609 331.594 326.75 331.508 326.859C331.43 326.961 331.32 327.012 331.18 327.012C330.961 327.012 330.785 326.922 330.652 326.742C330.527 326.562 330.465 326.352 330.465 326.109C330.465 325.938 330.5 325.801 330.57 325.699C330.648 325.59 330.754 325.535 330.887 325.535ZM337.332 324.645C337.332 325.496 337.125 326.129 336.711 326.543C336.297 326.949 335.664 327.152 334.812 327.152C333.172 327.152 332.352 326.301 332.352 324.598C332.352 323.988 332.477 323.453 332.727 322.992C332.977 322.531 333.32 322.266 333.758 322.195C333.312 322.188 332.977 322.023 332.75 321.703C332.523 321.383 332.41 320.984 332.41 320.508C332.41 319.773 332.609 319.195 333.008 318.773C333.414 318.352 333.988 318.141 334.73 318.141C335.512 318.141 336.125 318.336 336.57 318.727C337.016 319.117 337.238 319.719 337.238 320.531C337.238 321.008 337.125 321.406 336.898 321.727C336.672 322.047 336.336 322.211 335.891 322.219C336.344 322.289 336.695 322.559 336.945 323.027C337.203 323.496 337.332 324.035 337.332 324.645ZM334.941 326.309C335.379 326.309 335.742 326.141 336.031 325.805C336.32 325.461 336.465 325.055 336.465 324.586C336.465 324.117 336.305 323.715 335.984 323.379C335.664 323.035 335.234 322.859 334.695 322.852C334.227 322.992 333.875 323.215 333.641 323.52C333.406 323.816 333.289 324.152 333.289 324.527C333.289 324.996 333.445 325.41 333.758 325.77C334.07 326.129 334.465 326.309 334.941 326.309ZM334.941 318.785C334.418 318.824 334.02 318.996 333.746 319.301C333.473 319.605 333.336 319.957 333.336 320.355C333.336 320.762 333.465 321.113 333.723 321.41C333.988 321.707 334.34 321.855 334.777 321.855C335.285 321.848 335.672 321.711 335.938 321.445C336.203 321.172 336.336 320.844 336.336 320.461C336.336 320.078 336.207 319.723 335.949 319.395C335.699 319.066 335.363 318.863 334.941 318.785Z M329.395 248.191L329.758 248.965C329.172 248.98 328.254 248.992 327.004 249C325.754 249 325.09 249 325.012 249C325.012 248.938 325.008 248.828 325 248.672C325 248.516 325 248.391 325 248.297C325.148 248.039 325.395 247.73 325.738 247.371C326.082 247.004 326.426 246.648 326.77 246.305C327.113 245.953 327.449 245.57 327.777 245.156C328.113 244.742 328.387 244.281 328.598 243.773C328.809 243.258 328.914 242.73 328.914 242.191C328.914 241.848 328.793 241.57 328.551 241.359C328.309 241.141 328.016 241.031 327.672 241.031C327.273 241.031 326.902 241.195 326.559 241.523C326.223 241.844 325.988 242.336 325.855 243L325.328 242.812C325.359 242.055 325.605 241.465 326.066 241.043C326.535 240.621 327.074 240.41 327.684 240.41C328.23 240.41 328.699 240.582 329.09 240.926C329.48 241.27 329.676 241.75 329.676 242.367C329.676 242.875 329.598 243.371 329.441 243.855C329.285 244.332 329.059 244.781 328.762 245.203C328.465 245.625 328.188 245.988 327.93 246.293C327.672 246.59 327.348 246.938 326.957 247.336C326.574 247.727 326.305 248.008 326.148 248.18C326.414 248.195 326.641 248.203 326.828 248.203C327.023 248.203 327.328 248.199 327.742 248.191C328.156 248.176 328.465 248.168 328.668 248.168C328.855 248.168 329.098 248.176 329.395 248.191ZM330.402 247.535C330.613 247.535 330.789 247.629 330.93 247.816C331.078 247.996 331.152 248.203 331.152 248.438C331.152 248.609 331.109 248.75 331.023 248.859C330.945 248.961 330.836 249.012 330.695 249.012C330.477 249.012 330.301 248.922 330.168 248.742C330.043 248.562 329.98 248.352 329.98 248.109C329.98 247.938 330.016 247.801 330.086 247.699C330.164 247.59 330.27 247.535 330.402 247.535ZM331.867 245.098C331.875 243.41 332.094 242.195 332.523 241.453C332.953 240.703 333.605 240.305 334.48 240.258C334.863 240.258 335.203 240.363 335.5 240.574C335.797 240.785 336.031 241.055 336.203 241.383C336.383 241.703 336.531 242.09 336.648 242.543C336.766 242.988 336.844 243.414 336.883 243.82C336.93 244.219 336.961 244.645 336.977 245.098C336.977 245.715 336.883 246.348 336.695 246.996C336.516 247.637 336.234 248.199 335.852 248.684C335.477 249.16 335.055 249.398 334.586 249.398C332.773 249.398 331.867 247.965 331.867 245.098ZM334.316 241.16C334.129 241.199 333.961 241.262 333.812 241.348C333.664 241.434 333.539 241.531 333.438 241.641C333.344 241.75 333.262 241.895 333.191 242.074C333.121 242.254 333.066 242.422 333.027 242.578C332.996 242.727 332.965 242.922 332.934 243.164C332.91 243.406 332.895 243.617 332.887 243.797C332.879 243.969 332.867 244.199 332.852 244.488C332.844 244.77 332.832 245 332.816 245.18C332.816 245.539 332.836 245.883 332.875 246.211C332.914 246.531 332.984 246.867 333.086 247.219C333.195 247.57 333.363 247.855 333.59 248.074C333.816 248.293 334.09 248.418 334.41 248.449C334.895 248.449 335.293 248.113 335.605 247.441C335.926 246.77 336.086 246.09 336.086 245.402C336.086 242.605 335.496 241.191 334.316 241.16Z M326.539 170.965V170.344C326.727 170.32 326.957 170.281 327.23 170.227C327.512 170.172 327.73 170.133 327.887 170.109C327.91 169.547 327.922 168.98 327.922 168.41C327.922 168.051 327.918 167.512 327.91 166.793C327.902 166.066 327.898 165.52 327.898 165.152C327.898 164.285 327.91 163.629 327.934 163.184C327.223 163.59 326.703 163.918 326.375 164.168L326 163.781C326.125 163.68 326.34 163.504 326.645 163.254C326.949 162.996 327.223 162.766 327.465 162.562C327.707 162.352 327.895 162.18 328.027 162.047C328.152 162.062 328.281 162.074 328.414 162.082C328.547 162.082 328.676 162.09 328.801 162.105C328.848 163.012 328.871 164.672 328.871 167.086C328.871 168.523 328.883 169.555 328.906 170.18C328.977 170.188 329.145 170.219 329.41 170.273C329.684 170.32 329.895 170.352 330.043 170.367L330.23 170.988C329.84 170.988 329.5 170.988 329.211 170.988C328.922 170.988 328.535 170.988 328.051 170.988C327.574 170.988 327.199 170.988 326.926 170.988C326.66 170.98 326.531 170.973 326.539 170.965ZM330.887 169.535C331.098 169.535 331.273 169.629 331.414 169.816C331.562 169.996 331.637 170.203 331.637 170.438C331.637 170.609 331.594 170.75 331.508 170.859C331.43 170.961 331.32 171.012 331.18 171.012C330.961 171.012 330.785 170.922 330.652 170.742C330.527 170.562 330.465 170.352 330.465 170.109C330.465 169.938 330.5 169.801 330.57 169.699C330.648 169.59 330.754 169.535 330.887 169.535ZM333.324 171.094L332.41 170.824L335.574 163.066C333.754 163.012 332.52 162.957 331.871 162.902L331.754 162.375C332.301 162.312 333.129 162.281 334.238 162.281C335.348 162.273 336.113 162.254 336.535 162.223L336.477 163.242L333.324 171.094Z M326.539 222.965V222.344C326.727 222.32 326.957 222.281 327.23 222.227C327.512 222.172 327.73 222.133 327.887 222.109C327.91 221.547 327.922 220.98 327.922 220.41C327.922 220.051 327.918 219.512 327.91 218.793C327.902 218.066 327.898 217.52 327.898 217.152C327.898 216.285 327.91 215.629 327.934 215.184C327.223 215.59 326.703 215.918 326.375 216.168L326 215.781C326.125 215.68 326.34 215.504 326.645 215.254C326.949 214.996 327.223 214.766 327.465 214.562C327.707 214.352 327.895 214.18 328.027 214.047C328.152 214.062 328.281 214.074 328.414 214.082C328.547 214.082 328.676 214.09 328.801 214.105C328.848 215.012 328.871 216.672 328.871 219.086C328.871 220.523 328.883 221.555 328.906 222.18C328.977 222.188 329.145 222.219 329.41 222.273C329.684 222.32 329.895 222.352 330.043 222.367L330.23 222.988C329.84 222.988 329.5 222.988 329.211 222.988C328.922 222.988 328.535 222.988 328.051 222.988C327.574 222.988 327.199 222.988 326.926 222.988C326.66 222.98 326.531 222.973 326.539 222.965ZM330.887 221.535C331.098 221.535 331.273 221.629 331.414 221.816C331.562 221.996 331.637 222.203 331.637 222.438C331.637 222.609 331.594 222.75 331.508 222.859C331.43 222.961 331.32 223.012 331.18 223.012C330.961 223.012 330.785 222.922 330.652 222.742C330.527 222.562 330.465 222.352 330.465 222.109C330.465 221.938 330.5 221.801 330.57 221.699C330.648 221.59 330.754 221.535 330.887 221.535ZM336.266 222.191L336.629 222.965C336.043 222.98 335.125 222.992 333.875 223C332.625 223 331.961 223 331.883 223C331.883 222.938 331.879 222.828 331.871 222.672C331.871 222.516 331.871 222.391 331.871 222.297C332.02 222.039 332.266 221.73 332.609 221.371C332.953 221.004 333.297 220.648 333.641 220.305C333.984 219.953 334.32 219.57 334.648 219.156C334.984 218.742 335.258 218.281 335.469 217.773C335.68 217.258 335.785 216.73 335.785 216.191C335.785 215.848 335.664 215.57 335.422 215.359C335.18 215.141 334.887 215.031 334.543 215.031C334.145 215.031 333.773 215.195 333.43 215.523C333.094 215.844 332.859 216.336 332.727 217L332.199 216.812C332.23 216.055 332.477 215.465 332.938 215.043C333.406 214.621 333.945 214.41 334.555 214.41C335.102 214.41 335.57 214.582 335.961 214.926C336.352 215.27 336.547 215.75 336.547 216.367C336.547 216.875 336.469 217.371 336.312 217.855C336.156 218.332 335.93 218.781 335.633 219.203C335.336 219.625 335.059 219.988 334.801 220.293C334.543 220.59 334.219 220.938 333.828 221.336C333.445 221.727 333.176 222.008 333.02 222.18C333.285 222.195 333.512 222.203 333.699 222.203C333.895 222.203 334.199 222.199 334.613 222.191C335.027 222.176 335.336 222.168 335.539 222.168C335.727 222.168 335.969 222.176 336.266 222.191Z M331.312 347.07C331.734 347.07 332.086 347.258 332.367 347.633C332.664 347.992 332.812 348.406 332.812 348.875C332.812 349.219 332.727 349.5 332.555 349.719C332.398 349.922 332.18 350.023 331.898 350.023C331.461 350.023 331.109 349.844 330.844 349.484C330.594 349.125 330.469 348.703 330.469 348.219C330.469 347.875 330.539 347.602 330.68 347.398C330.836 347.18 331.047 347.07 331.312 347.07Z M331.312 357.07C331.734 357.07 332.086 357.258 332.367 357.633C332.664 357.992 332.812 358.406 332.812 358.875C332.812 359.219 332.727 359.5 332.555 359.719C332.398 359.922 332.18 360.023 331.898 360.023C331.461 360.023 331.109 359.844 330.844 359.484C330.594 359.125 330.469 358.703 330.469 358.219C330.469 357.875 330.539 357.602 330.68 357.398C330.836 357.18 331.047 357.07 331.312 357.07Z M331.312 367.07C331.734 367.07 332.086 367.258 332.367 367.633C332.664 367.992 332.812 368.406 332.812 368.875C332.812 369.219 332.727 369.5 332.555 369.719C332.398 369.922 332.18 370.023 331.898 370.023C331.461 370.023 331.109 369.844 330.844 369.484C330.594 369.125 330.469 368.703 330.469 368.219C330.469 367.875 330.539 367.602 330.68 367.398C330.836 367.18 331.047 367.07 331.312 367.07Z';

  var dataset07Chlorides = 'M386.748 28.648C386.652 28.7653 386.524 28.856 386.364 28.92C386.204 28.9733 386.038 29 385.868 29C385.654 29 385.505 28.9627 385.42 28.888C385.345 28.92 385.265 28.936 385.18 28.936C384.977 28.936 384.806 28.8667 384.668 28.728C384.54 28.7813 384.428 28.808 384.332 28.808C384.161 28.808 383.99 28.7653 383.82 28.68C383.66 28.584 383.548 28.472 383.484 28.344C383.281 28.3653 383.078 28.3067 382.876 28.168C382.684 28.0187 382.572 27.848 382.54 27.656C382.22 27.5173 382.001 27.144 381.884 26.536C381.82 26.4827 381.772 26.4027 381.74 26.296C381.708 26.1893 381.692 26.0827 381.692 25.976C381.692 25.9013 381.697 25.848 381.708 25.816C381.526 25.4533 381.436 25.08 381.436 24.696C381.436 24.344 381.51 24.056 381.66 23.832C381.638 23.7253 381.628 23.6453 381.628 23.592C381.628 23.4107 381.67 23.24 381.756 23.08C381.841 22.9093 381.948 22.7867 382.076 22.712C382.054 22.6587 382.044 22.584 382.044 22.488C382.044 22.3173 382.097 22.1627 382.204 22.024C382.321 21.8747 382.433 21.784 382.54 21.752C382.582 21.6027 382.684 21.464 382.844 21.336C383.014 21.1973 383.19 21.1333 383.372 21.144C383.585 20.824 383.798 20.68 384.012 20.712C384.108 20.584 384.236 20.4933 384.396 20.44C384.566 20.3867 384.721 20.3653 384.86 20.376C384.966 20.3013 385.084 20.264 385.212 20.264C385.34 20.264 385.468 20.296 385.596 20.36C385.681 20.296 385.798 20.264 385.948 20.264C386.054 20.264 386.156 20.28 386.252 20.312C386.348 20.344 386.412 20.3813 386.444 20.424C386.529 20.4027 386.62 20.424 386.716 20.488C386.812 20.5413 386.87 20.6107 386.892 20.696C387.073 20.696 387.228 20.7547 387.356 20.872C387.494 20.9787 387.596 21.1067 387.66 21.256C387.734 21.3947 387.766 21.5013 387.756 21.576C387.937 21.6613 388.065 21.8 388.14 21.992C388.214 22.1627 388.252 22.312 388.252 22.44C388.252 22.6533 388.172 22.8187 388.012 22.936C387.905 23.0107 387.793 23.048 387.676 23.048C387.484 23.048 387.297 22.968 387.116 22.808C386.945 22.648 386.833 22.4507 386.78 22.216C386.641 22.1947 386.508 22.1467 386.38 22.072C386.252 21.9867 386.15 21.896 386.076 21.8C386.044 21.8107 385.964 21.816 385.836 21.816C385.718 21.816 385.638 21.8107 385.596 21.8C385.5 21.896 385.393 21.944 385.276 21.944C385.158 21.944 385.046 21.9067 384.94 21.832C384.801 22.0453 384.598 22.152 384.332 22.152C384.193 22.344 384.07 22.4933 383.964 22.6C383.857 22.696 383.713 22.7333 383.532 22.712C383.542 22.744 383.548 22.792 383.548 22.856C383.548 22.984 383.516 23.096 383.452 23.192C383.388 23.288 383.313 23.3787 383.228 23.464C383.153 23.5387 383.094 23.5973 383.052 23.64C383.105 23.8 383.132 23.9493 383.132 24.088C383.132 24.3333 383.057 24.6267 382.908 24.968C382.961 25.0427 383.004 25.1493 383.036 25.288C383.078 25.416 383.1 25.544 383.1 25.672C383.1 25.7467 383.094 25.8 383.084 25.832C383.158 25.8853 383.222 25.976 383.276 26.104C383.34 26.232 383.372 26.3547 383.372 26.472C383.638 26.5573 383.857 26.68 384.028 26.84C384.209 27 384.3 27.1493 384.3 27.288C384.417 27.192 384.545 27.144 384.684 27.144C384.812 27.144 384.934 27.176 385.052 27.24C385.18 27.304 385.276 27.3893 385.34 27.496C385.393 27.4853 385.457 27.48 385.532 27.48C385.692 27.48 385.83 27.5333 385.948 27.64C385.99 27.5547 386.097 27.464 386.268 27.368C386.438 27.272 386.577 27.2293 386.684 27.24C386.748 27.1333 386.833 27.0533 386.94 27C387.057 26.9467 387.18 26.92 387.308 26.92C387.393 26.92 387.452 26.9253 387.484 26.936C387.622 26.7653 387.809 26.68 388.044 26.68C388.246 26.68 388.422 26.7493 388.572 26.888C388.721 27.0267 388.796 27.1973 388.796 27.4C388.796 27.6347 388.694 27.832 388.492 27.992C388.3 28.1413 388.081 28.216 387.836 28.216C387.74 28.216 387.67 28.2107 387.628 28.2C387.713 28.2213 387.702 28.2693 387.596 28.344C387.5 28.4187 387.361 28.4933 387.18 28.568C386.998 28.632 386.854 28.6587 386.748 28.648ZM391.401 28.104C391.454 28.264 391.481 28.3867 391.481 28.472C391.481 28.6533 391.411 28.7867 391.273 28.872C391.145 28.9573 390.969 29 390.745 29C390.51 29 390.329 28.9253 390.201 28.776C390.083 28.616 390.025 28.4293 390.025 28.216C390.025 28.0347 390.067 27.8907 390.153 27.784C390.025 27.656 389.961 27.464 389.961 27.208C389.961 26.9307 390.046 26.712 390.217 26.552C390.078 26.4133 390.009 26.232 390.009 26.008C390.009 25.784 390.073 25.5707 390.201 25.368C390.169 25.272 390.153 25.16 390.153 25.032C390.153 24.872 390.169 24.7387 390.201 24.632C390.105 24.5147 390.057 24.3867 390.057 24.248C390.057 24.12 390.089 24.008 390.153 23.912C390.11 23.8373 390.089 23.752 390.089 23.656C390.089 23.5707 390.105 23.4907 390.137 23.416C390.019 23.2667 389.961 23.0907 389.961 22.888C389.961 22.728 390.003 22.5787 390.089 22.44C390.057 22.3547 390.041 22.2693 390.041 22.184C390.041 22.1307 390.051 22.0613 390.073 21.976C389.998 21.8693 389.961 21.7147 389.961 21.512C389.961 21.32 389.998 21.1707 390.073 21.064C390.009 20.936 389.977 20.792 389.977 20.632C389.977 20.4827 390.014 20.3493 390.089 20.232C390.003 20.0613 389.961 19.9013 389.961 19.752C389.961 19.5707 390.003 19.4107 390.089 19.272C390.014 19.1867 389.977 19.0587 389.977 18.888C389.977 18.76 389.998 18.6213 390.041 18.472C389.998 18.3227 389.977 18.2 389.977 18.104C389.977 17.976 390.009 17.8747 390.073 17.8C390.062 17.6187 390.115 17.4693 390.233 17.352C390.35 17.2347 390.494 17.176 390.665 17.176C390.75 17.176 390.857 17.2027 390.985 17.256C391.102 17.32 391.193 17.4373 391.257 17.608C391.331 17.7787 391.369 17.96 391.369 18.152C391.369 18.344 391.331 18.5147 391.257 18.664C391.331 18.8027 391.369 18.952 391.369 19.112C391.369 19.2933 391.315 19.5013 391.209 19.736C391.305 19.9067 391.353 20.088 391.353 20.28C391.353 20.3973 391.331 20.4933 391.289 20.568C391.406 20.6533 391.465 20.7813 391.465 20.952C391.465 21.048 391.433 21.1547 391.369 21.272C391.433 21.2933 391.47 21.3733 391.481 21.512C391.502 21.6507 391.513 21.7307 391.513 21.752C391.566 21.6133 391.662 21.5067 391.801 21.432C391.939 21.3467 392.062 21.3147 392.169 21.336C392.211 21.208 392.291 21.112 392.409 21.048C392.526 20.9733 392.649 20.936 392.777 20.936C392.83 20.936 392.899 20.9467 392.985 20.968C393.07 20.8827 393.198 20.84 393.369 20.84C393.486 20.84 393.582 20.8613 393.657 20.904C393.71 20.872 393.779 20.856 393.865 20.856C393.971 20.856 394.078 20.8827 394.185 20.936C394.27 20.904 394.35 20.888 394.425 20.888C394.563 20.888 394.681 20.936 394.777 21.032C394.873 21.0107 395.001 21.0533 395.161 21.16C395.321 21.2667 395.406 21.3893 395.417 21.528C395.609 21.688 395.705 21.8587 395.705 22.04C395.705 22.104 395.689 22.1627 395.657 22.216C395.721 22.2587 395.774 22.328 395.817 22.424C395.859 22.52 395.881 22.6213 395.881 22.728C395.881 22.8027 395.875 22.8613 395.865 22.904C395.993 23 396.057 23.1493 396.057 23.352C396.057 23.5013 396.019 23.64 395.945 23.768C396.041 23.9173 396.089 24.056 396.089 24.184C396.089 24.2587 396.073 24.3387 396.041 24.424C396.094 24.5627 396.121 24.7227 396.121 24.904C396.121 25.1173 396.083 25.2933 396.009 25.432C396.041 25.5067 396.057 25.6667 396.057 25.912C396.057 26.2213 396.035 26.424 395.993 26.52C396.067 26.6267 396.105 26.792 396.105 27.016C396.105 27.272 396.057 27.4587 395.961 27.576C396.025 27.672 396.057 27.8107 396.057 27.992C396.057 28.2053 396.019 28.3867 395.945 28.536C395.955 28.6533 395.886 28.7547 395.737 28.84C395.598 28.9253 395.443 28.968 395.273 28.968C395.123 28.968 395.001 28.9307 394.905 28.856C394.819 28.7813 394.782 28.6747 394.793 28.536C394.675 28.3547 394.617 28.152 394.617 27.928C394.617 27.736 394.649 27.5547 394.713 27.384C394.659 27.224 394.633 27.032 394.633 26.808C394.633 26.5733 394.659 26.4027 394.713 26.296C394.67 26.232 394.649 26.1307 394.649 25.992C394.649 25.832 394.675 25.7093 394.729 25.624C394.654 25.5067 394.617 25.368 394.617 25.208C394.617 25.0907 394.643 25.0053 394.697 24.952C394.601 24.8027 394.553 24.6427 394.553 24.472C394.553 24.3547 394.574 24.2693 394.617 24.216C394.499 24.1307 394.441 23.9813 394.441 23.768C394.441 23.5973 394.478 23.4747 394.553 23.4C394.361 23.24 394.265 23.064 394.265 22.872C394.265 22.7653 394.286 22.6693 394.329 22.584C394.254 22.6053 394.169 22.584 394.073 22.52C393.977 22.4453 393.913 22.3653 393.881 22.28C393.774 22.3333 393.641 22.36 393.481 22.36C393.417 22.36 393.374 22.3547 393.353 22.344C393.31 22.408 393.225 22.4667 393.097 22.52C392.979 22.5627 392.889 22.5733 392.825 22.552C392.739 22.6373 392.633 22.7227 392.505 22.808C392.377 22.8933 392.286 22.9307 392.233 22.92C392.211 23.016 392.142 23.1333 392.025 23.272C391.907 23.4 391.795 23.464 391.689 23.464C391.71 23.5493 391.721 23.6187 391.721 23.672C391.721 23.8107 391.673 24.0133 391.577 24.28C391.662 24.3973 391.705 24.52 391.705 24.648C391.705 24.7653 391.667 24.888 391.593 25.016C391.614 25.0587 391.625 25.128 391.625 25.224C391.625 25.32 391.603 25.432 391.561 25.56C391.582 25.6347 391.593 25.72 391.593 25.816C391.593 25.9227 391.55 26.0453 391.465 26.184C391.582 26.2373 391.641 26.392 391.641 26.648C391.641 26.776 391.625 26.9093 391.593 27.048C391.561 27.1867 391.518 27.2987 391.465 27.384C391.529 27.4907 391.561 27.6133 391.561 27.752C391.561 27.8907 391.507 28.008 391.401 28.104ZM399.429 27C399.535 27.1173 399.589 27.2987 399.589 27.544C399.589 27.704 399.562 27.8587 399.509 28.008C399.466 28.1467 399.407 28.248 399.333 28.312C399.365 28.5147 399.311 28.68 399.173 28.808C399.034 28.936 398.869 29 398.677 29C398.549 29 398.426 28.968 398.309 28.904C398.191 28.84 398.106 28.7333 398.053 28.584C397.999 28.4347 397.973 28.2747 397.973 28.104C397.973 27.8693 398.01 27.6827 398.085 27.544C398.031 27.448 398.005 27.3093 398.005 27.128C398.005 26.9253 398.037 26.7173 398.101 26.504C398.026 26.4187 397.989 26.264 397.989 26.04C397.989 25.752 398.031 25.5387 398.117 25.4C398.053 25.2507 398.021 25.1067 398.021 24.968C398.021 24.776 398.069 24.584 398.165 24.392C398.079 24.168 398.037 23.9653 398.037 23.784C398.037 23.6347 398.069 23.464 398.133 23.272C398.026 23.1547 397.973 23.0053 397.973 22.824C397.973 22.7493 397.978 22.696 397.989 22.664C397.871 22.5253 397.813 22.3653 397.813 22.184C397.813 22.0667 397.845 21.9547 397.909 21.848C397.834 21.6773 397.797 21.512 397.797 21.352C397.797 21.096 397.861 20.904 397.989 20.776C397.925 20.6267 397.893 20.4453 397.893 20.232C397.893 20.0613 397.919 19.9387 397.973 19.864C397.919 19.832 397.877 19.7733 397.845 19.688C397.813 19.6027 397.797 19.5067 397.797 19.4C397.797 19.2187 397.839 19.0693 397.925 18.952C397.893 18.8667 397.877 18.7547 397.877 18.616C397.877 18.5093 397.887 18.4133 397.909 18.328C397.781 18.2 397.717 18.0507 397.717 17.88C397.717 17.6987 397.791 17.544 397.941 17.416C398.101 17.2773 398.277 17.208 398.469 17.208C398.597 17.208 398.714 17.2507 398.821 17.336C398.927 17.4107 399.002 17.528 399.045 17.688C399.205 17.7947 399.285 17.96 399.285 18.184C399.285 18.2267 399.274 18.2907 399.253 18.376C399.381 18.504 399.445 18.6693 399.445 18.872C399.445 19.0427 399.391 19.176 399.285 19.272C399.338 19.3147 399.386 19.3893 399.429 19.496C399.471 19.592 399.493 19.6987 399.493 19.816C399.493 20.008 399.423 20.168 399.285 20.296C399.37 20.4133 399.413 20.5573 399.413 20.728C399.413 20.8987 399.381 21.0373 399.317 21.144C399.359 21.1867 399.381 21.2933 399.381 21.464C399.381 21.56 399.37 21.6613 399.349 21.768C399.327 21.8747 399.295 21.9493 399.253 21.992C399.413 22.1307 399.493 22.3067 399.493 22.52C399.493 22.6373 399.471 22.7387 399.429 22.824C399.493 22.92 399.525 23.064 399.525 23.256C399.525 23.5013 399.482 23.6987 399.397 23.848C399.471 23.9973 399.509 24.1947 399.509 24.44C399.509 24.7387 399.461 24.952 399.365 25.08C399.439 25.1867 399.477 25.32 399.477 25.48C399.477 25.6187 399.445 25.784 399.381 25.976C399.477 26.0827 399.525 26.248 399.525 26.472C399.525 26.664 399.493 26.84 399.429 27ZM405.737 28.808C405.609 28.936 405.412 29 405.145 29C404.943 29 404.777 28.968 404.649 28.904C404.457 28.9467 404.287 28.968 404.137 28.968C403.721 28.968 403.423 28.8613 403.241 28.648C403.199 28.6587 403.14 28.664 403.065 28.664C402.82 28.664 402.633 28.552 402.505 28.328C402.399 28.3387 402.26 28.2853 402.089 28.168C401.929 28.04 401.86 27.9173 401.881 27.8C401.711 27.7573 401.567 27.656 401.449 27.496C401.343 27.3253 401.295 27.1333 401.305 26.92C401.188 26.8773 401.097 26.792 401.033 26.664C400.969 26.536 400.937 26.392 400.937 26.232C400.937 26.0613 400.964 25.9387 401.017 25.864C400.9 25.6827 400.841 25.4747 400.841 25.24C400.841 24.9947 400.916 24.7973 401.065 24.648C400.948 24.5627 400.889 24.4347 400.889 24.264C400.889 24.1573 400.916 24.0507 400.969 23.944C401.023 23.8373 401.092 23.7627 401.177 23.72C401.156 23.5707 401.172 23.432 401.225 23.304C401.289 23.1653 401.375 23.064 401.481 23C401.46 22.968 401.449 22.92 401.449 22.856C401.449 22.76 401.481 22.664 401.545 22.568C401.62 22.472 401.7 22.4133 401.785 22.392C401.775 22.36 401.769 22.3173 401.769 22.264C401.769 22.04 401.855 21.848 402.025 21.688C402.196 21.5173 402.361 21.4427 402.521 21.464C402.521 21.3147 402.585 21.192 402.713 21.096C402.852 20.9893 403.028 20.936 403.241 20.936C403.337 20.936 403.412 20.9413 403.465 20.952C403.54 20.792 403.668 20.664 403.849 20.568C404.031 20.4613 404.217 20.408 404.409 20.408C404.537 20.408 404.644 20.4347 404.729 20.488C404.879 20.36 405.065 20.296 405.289 20.296C405.471 20.296 405.631 20.3387 405.769 20.424C405.919 20.5093 406.009 20.6267 406.041 20.776C406.212 20.776 406.393 20.84 406.585 20.968C406.777 21.0853 406.889 21.208 406.921 21.336C407.177 21.4107 407.423 21.576 407.657 21.832C407.903 22.0773 408.025 22.328 408.025 22.584C408.025 22.6267 408.015 22.6907 407.993 22.776C408.452 22.872 408.66 23.336 408.617 24.168C408.713 24.328 408.761 24.4987 408.761 24.68C408.761 24.8933 408.692 25.1067 408.553 25.32C408.585 25.416 408.601 25.5067 408.601 25.592C408.601 25.72 408.575 25.8427 408.521 25.96C408.468 26.0773 408.399 26.168 408.313 26.232C408.324 26.4027 408.292 26.5413 408.217 26.648C408.153 26.7547 408.031 26.8987 407.849 27.08C407.86 27.1227 407.865 27.1867 407.865 27.272C407.865 27.592 407.684 27.8 407.321 27.896C407.289 28.0667 407.199 28.2053 407.049 28.312C406.911 28.4187 406.74 28.472 406.537 28.472C406.367 28.7067 406.159 28.824 405.913 28.824C405.839 28.824 405.78 28.8187 405.737 28.808ZM404.233 27.688C404.319 27.6133 404.463 27.576 404.665 27.576C404.815 27.576 404.895 27.5973 404.905 27.64C404.991 27.544 405.097 27.4693 405.225 27.416C405.353 27.3627 405.471 27.3413 405.577 27.352C405.759 27.1707 405.956 27.08 406.169 27.08C406.244 27.08 406.297 27.0853 406.329 27.096C406.319 27 406.345 26.9093 406.409 26.824C406.473 26.728 406.548 26.664 406.633 26.632C406.633 26.4933 406.665 26.376 406.729 26.28C406.804 26.1733 406.895 26.0933 407.001 26.04C407.001 25.8267 407.044 25.656 407.129 25.528C407.097 25.4427 407.081 25.3573 407.081 25.272C407.081 25.1547 407.108 25.0427 407.161 24.936C407.215 24.8187 407.289 24.7227 407.385 24.648C407.279 24.552 407.225 24.4347 407.225 24.296C407.225 24.168 407.263 24.04 407.337 23.912C407.124 23.784 406.98 23.6613 406.905 23.544C406.841 23.416 406.809 23.1867 406.809 22.856C406.713 22.8667 406.612 22.8133 406.505 22.696C406.409 22.5787 406.351 22.4453 406.329 22.296C406.212 22.328 406.068 22.296 405.897 22.2C405.737 22.0933 405.657 21.96 405.657 21.8C405.572 21.8427 405.471 21.864 405.353 21.864C405.129 21.864 404.948 21.784 404.809 21.624C404.692 21.7413 404.537 21.8373 404.345 21.912C404.164 21.976 404.004 21.9973 403.865 21.976C403.855 22.0827 403.759 22.2107 403.577 22.36C403.407 22.4987 403.252 22.5893 403.113 22.632C403.145 22.696 403.161 22.7707 403.161 22.856C403.161 22.9627 403.135 23.0693 403.081 23.176C403.028 23.2827 402.953 23.3733 402.857 23.448C402.868 23.5973 402.831 23.7413 402.745 23.88C402.671 24.0187 402.564 24.1147 402.425 24.168C402.447 24.2533 402.457 24.3227 402.457 24.376C402.457 24.5253 402.42 24.6427 402.345 24.728C402.377 24.8027 402.393 24.8773 402.393 24.952C402.393 25.0693 402.335 25.1973 402.217 25.336C402.484 25.5173 402.617 25.7787 402.617 26.12C402.617 26.3013 402.585 26.456 402.521 26.584C402.628 26.5947 402.703 26.6267 402.745 26.68C402.788 26.7333 402.825 26.8187 402.857 26.936C403.124 26.968 403.321 27.096 403.449 27.32C403.567 27.32 403.711 27.3573 403.881 27.432C404.063 27.5067 404.18 27.592 404.233 27.688ZM411.371 28.248C411.414 28.4827 411.366 28.6693 411.227 28.808C411.099 28.936 410.939 29 410.747 29C410.576 29 410.427 28.9467 410.299 28.84C410.171 28.7227 410.107 28.5627 410.107 28.36C410.107 28.232 410.139 28.088 410.203 27.928C410.139 27.7787 410.107 27.624 410.107 27.464C410.107 27.336 410.134 27.2293 410.187 27.144C410.123 27.1013 410.075 27.0373 410.043 26.952C410.011 26.8667 409.995 26.7707 409.995 26.664C409.995 26.5573 410.016 26.44 410.059 26.312C409.963 26.1947 409.915 26.056 409.915 25.896C409.915 25.6933 409.99 25.528 410.139 25.4C410.128 25.368 410.123 25.3147 410.123 25.24C410.123 25.1333 410.134 25.0587 410.155 25.016C410.038 24.8667 409.979 24.6533 409.979 24.376C409.979 24.184 410.016 24.0347 410.091 23.928C410.016 23.864 409.952 23.7787 409.899 23.672C409.846 23.5547 409.819 23.4373 409.819 23.32C409.819 23.192 409.856 23.0693 409.931 22.952C409.878 22.824 409.851 22.712 409.851 22.616C409.851 22.456 409.899 22.3067 409.995 22.168C409.867 22.04 409.803 21.9067 409.803 21.768C409.803 21.6613 409.84 21.5173 409.915 21.336C409.84 21.1867 409.803 21.0267 409.803 20.856C409.803 20.632 409.883 20.4933 410.043 20.44C410.054 20.2907 410.107 20.168 410.203 20.072C410.299 19.976 410.416 19.928 410.555 19.928C410.715 19.928 410.854 20.008 410.971 20.168C411.099 20.3173 411.163 20.536 411.163 20.824C411.163 20.9413 411.158 21.0373 411.147 21.112C411.19 21.0907 411.232 21.0587 411.275 21.016C411.318 20.9627 411.371 20.9253 411.435 20.904C411.499 20.8827 411.595 20.872 411.723 20.872C411.744 20.8187 411.814 20.7653 411.931 20.712C412.059 20.6587 412.182 20.632 412.299 20.632C412.384 20.632 412.443 20.6427 412.475 20.664C412.56 20.6213 412.646 20.6 412.731 20.6C412.859 20.6 412.998 20.6907 413.147 20.872C413.403 20.8507 413.59 20.9093 413.707 21.048C413.878 21.0373 414.027 21.0587 414.155 21.112C414.283 21.1653 414.384 21.2773 414.459 21.448C414.662 21.576 414.763 21.7467 414.763 21.96C414.763 22.1413 414.683 22.312 414.523 22.472C414.374 22.6213 414.208 22.696 414.027 22.696C413.824 22.696 413.654 22.5893 413.515 22.376C413.398 22.376 413.307 22.3653 413.243 22.344C413.179 22.3227 413.115 22.2747 413.051 22.2C412.987 22.2213 412.934 22.232 412.891 22.232C412.795 22.232 412.694 22.2053 412.587 22.152C412.438 22.248 412.278 22.2907 412.107 22.28C412.043 22.4293 411.878 22.504 411.611 22.504C411.622 22.536 411.627 22.5893 411.627 22.664C411.627 22.8027 411.595 22.9413 411.531 23.08C411.478 23.208 411.408 23.304 411.323 23.368C411.408 23.5707 411.451 23.7733 411.451 23.976C411.451 24.1573 411.408 24.296 411.323 24.392C411.355 24.4347 411.387 24.488 411.419 24.552C411.462 24.616 411.494 24.6747 411.515 24.728C411.536 24.8133 411.547 24.8773 411.547 24.92C411.547 24.9947 411.52 25.096 411.467 25.224C411.52 25.352 411.547 25.448 411.547 25.512C411.547 25.5973 411.51 25.7147 411.435 25.864C411.499 25.9707 411.531 26.088 411.531 26.216C411.531 26.3653 411.494 26.4933 411.419 26.6C411.494 26.7707 411.531 26.9467 411.531 27.128C411.531 27.2667 411.499 27.3947 411.435 27.512C411.488 27.6187 411.515 27.7253 411.515 27.832C411.515 27.9813 411.467 28.12 411.371 28.248ZM415.922 17.592C415.783 17.656 415.671 17.7467 415.586 17.864C415.5 17.9813 415.458 18.104 415.458 18.232C415.458 18.4027 415.527 18.5733 415.666 18.744C415.644 18.8827 415.719 19.016 415.89 19.144C416.06 19.272 416.247 19.336 416.45 19.336C416.588 19.336 416.711 19.2987 416.818 19.224C417.116 19.064 417.266 18.8613 417.266 18.616C417.266 18.456 417.202 18.2747 417.074 18.072C417.084 17.8587 417.02 17.6933 416.882 17.576C416.754 17.448 416.599 17.384 416.418 17.384C416.215 17.384 416.05 17.4533 415.922 17.592ZM416.962 24.664C417.047 24.696 417.111 24.7973 417.154 24.968C417.207 25.1387 417.234 25.3253 417.234 25.528C417.234 25.7627 417.196 25.9173 417.122 25.992C417.186 26.152 417.218 26.3067 417.218 26.456C417.218 26.648 417.17 26.808 417.074 26.936C417.148 27.1173 417.186 27.3307 417.186 27.576C417.186 27.7787 417.154 27.944 417.09 28.072C417.122 28.168 417.138 28.2587 417.138 28.344C417.138 28.536 417.068 28.6907 416.93 28.808C416.791 28.9147 416.626 28.968 416.434 28.968C416.252 28.968 416.098 28.9147 415.97 28.808C415.842 28.6907 415.783 28.536 415.794 28.344C415.74 28.28 415.698 28.1787 415.666 28.04C415.634 27.9013 415.618 27.7573 415.618 27.608C415.618 27.3307 415.676 27.1493 415.794 27.064C415.708 26.9253 415.666 26.7173 415.666 26.44C415.666 26.1627 415.703 25.96 415.778 25.832C415.735 25.7893 415.703 25.688 415.682 25.528C415.66 25.368 415.65 25.192 415.65 25C415.65 24.8187 415.66 24.6587 415.682 24.52C415.703 24.3707 415.735 24.2747 415.778 24.232C415.714 24.168 415.682 23.992 415.682 23.704C415.682 23.3733 415.719 23.1333 415.794 22.984C415.74 22.8987 415.692 22.7867 415.65 22.648C415.607 22.5093 415.586 22.3813 415.586 22.264C415.586 22.1573 415.596 22.0827 415.618 22.04C415.532 21.7627 415.49 21.5387 415.49 21.368C415.49 21.1867 415.532 21 415.618 20.808C415.596 20.648 415.634 20.5253 415.73 20.44C415.826 20.3547 415.964 20.312 416.146 20.312C416.636 20.312 416.882 20.6107 416.882 21.208C416.978 21.272 417.047 21.3627 417.09 21.48C417.143 21.5867 417.17 21.7093 417.17 21.848C417.17 22.072 417.116 22.264 417.01 22.424C417.052 22.488 417.084 22.584 417.106 22.712C417.138 22.84 417.154 22.968 417.154 23.096C417.154 23.2667 417.127 23.384 417.074 23.448C417.116 23.5013 417.138 23.6133 417.138 23.784C417.138 23.944 417.116 24.1147 417.074 24.296C417.042 24.4773 417.004 24.6 416.962 24.664ZM423.229 28.056C423.208 28.152 423.128 28.232 422.989 28.296C422.851 28.36 422.701 28.392 422.541 28.392C422.467 28.392 422.413 28.3867 422.381 28.376C422.328 28.4613 422.216 28.5467 422.045 28.632C421.875 28.7173 421.725 28.76 421.597 28.76C421.533 28.76 421.475 28.744 421.421 28.712C421.315 28.7333 421.224 28.744 421.149 28.744C421 28.744 420.851 28.7173 420.701 28.664C420.563 28.6107 420.456 28.5413 420.381 28.456C420.2 28.4773 420.029 28.456 419.869 28.392C419.72 28.3173 419.635 28.2213 419.613 28.104C419.496 28.1253 419.363 28.0773 419.213 27.96C419.075 27.8427 419 27.6827 418.989 27.48C418.829 27.3947 418.712 27.2667 418.637 27.096C418.563 26.9253 418.525 26.744 418.525 26.552C418.525 26.4133 418.541 26.3067 418.573 26.232C418.488 26.1573 418.419 26.0027 418.365 25.768C418.312 25.5227 418.285 25.2667 418.285 25C418.285 24.68 418.323 24.4453 418.397 24.296C418.344 24.1893 418.317 24.0667 418.317 23.928C418.317 23.8107 418.333 23.6987 418.365 23.592C418.408 23.4853 418.467 23.4 418.541 23.336C418.509 23.2827 418.493 23.2347 418.493 23.192C418.493 23.1173 418.52 23.0373 418.573 22.952C418.627 22.8667 418.685 22.8027 418.749 22.76C418.739 22.5893 418.781 22.4347 418.877 22.296C418.984 22.1467 419.091 22.056 419.197 22.024C419.187 21.9173 419.224 21.7893 419.309 21.64C419.395 21.4907 419.507 21.368 419.645 21.272C419.795 21.176 419.944 21.1333 420.093 21.144C420.307 20.8453 420.6 20.696 420.973 20.696C421.133 20.696 421.256 20.7173 421.341 20.76C421.459 20.7067 421.603 20.68 421.773 20.68C421.944 20.68 422.131 20.7227 422.333 20.808C422.397 20.776 422.477 20.76 422.573 20.76C422.68 20.76 422.781 20.7813 422.877 20.824C422.984 20.856 423.053 20.904 423.085 20.968C423.075 20.9253 423.069 20.8613 423.069 20.776C423.069 20.6053 423.112 20.456 423.197 20.328C423.123 20.2 423.085 20.072 423.085 19.944C423.085 19.88 423.091 19.832 423.101 19.8C423.091 19.7467 423.069 19.6773 423.037 19.592C423.005 19.496 422.989 19.416 422.989 19.352C422.989 19.2667 423.011 19.1813 423.053 19.096C423 18.9893 422.973 18.8827 422.973 18.776C422.973 18.6587 423.005 18.5467 423.069 18.44C422.995 18.2907 422.957 18.136 422.957 17.976C422.957 17.7627 423.016 17.5707 423.133 17.4C423.261 17.2293 423.432 17.144 423.645 17.144C423.827 17.144 423.981 17.2133 424.109 17.352C424.248 17.48 424.317 17.6293 424.317 17.8C424.317 17.864 424.312 17.912 424.301 17.944C424.461 18.072 424.541 18.248 424.541 18.472C424.541 18.5893 424.504 18.712 424.429 18.84C424.461 18.9147 424.477 18.9947 424.477 19.08C424.477 19.1973 424.451 19.3093 424.397 19.416C424.451 19.5227 424.477 19.6347 424.477 19.752C424.477 19.9013 424.44 20.0293 424.365 20.136C424.472 20.264 424.525 20.3867 424.525 20.504C424.525 20.5893 424.493 20.68 424.429 20.776C424.461 20.84 424.477 20.92 424.477 21.016C424.477 21.0907 424.461 21.1707 424.429 21.256C424.515 21.3733 424.557 21.5013 424.557 21.64C424.557 21.7467 424.531 21.8533 424.477 21.96C424.541 22.0667 424.573 22.1947 424.573 22.344C424.573 22.5893 424.515 22.76 424.397 22.856C424.504 22.984 424.557 23.176 424.557 23.432C424.557 23.5813 424.536 23.7307 424.493 23.88C424.461 24.0293 424.429 24.136 424.397 24.2C424.504 24.36 424.557 24.5627 424.557 24.808C424.557 24.9253 424.531 25.0373 424.477 25.144C424.595 25.2613 424.653 25.4373 424.653 25.672C424.653 25.928 424.6 26.136 424.493 26.296C424.6 26.4347 424.653 26.632 424.653 26.888C424.653 27.0587 424.627 27.2133 424.573 27.352C424.531 27.48 424.472 27.5653 424.397 27.608C424.408 27.6827 424.435 27.7947 424.477 27.944C424.531 28.1787 424.557 28.328 424.557 28.392C424.557 28.5627 424.504 28.7013 424.397 28.808C424.269 28.936 424.12 29 423.949 29C423.811 29 423.683 28.952 423.565 28.856C423.459 28.7493 423.395 28.6107 423.373 28.44C423.32 28.3867 423.283 28.3173 423.261 28.232C423.24 28.136 423.229 28.0773 423.229 28.056ZM421.229 27.432C421.261 27.3573 421.357 27.32 421.517 27.32C421.592 27.32 421.656 27.3253 421.709 27.336C421.763 27.3467 421.805 27.352 421.837 27.352C421.848 27.2773 421.912 27.2133 422.029 27.16C422.157 27.096 422.28 27.064 422.397 27.064C422.472 27.064 422.536 27.08 422.589 27.112C422.579 27.0053 422.6 26.92 422.653 26.856C422.707 26.792 422.776 26.7333 422.861 26.68C422.957 26.616 423.027 26.568 423.069 26.536C423.048 26.4933 423.037 26.3973 423.037 26.248C423.037 25.928 423.075 25.7307 423.149 25.656C423.075 25.5813 423.037 25.432 423.037 25.208C423.037 24.952 423.075 24.728 423.149 24.536C423.085 24.3973 423.053 24.1627 423.053 23.832C423.053 23.512 423.075 23.2987 423.117 23.192C423.021 23 422.973 22.7813 422.973 22.536C422.973 22.344 422.995 22.2053 423.037 22.12C422.973 22.1627 422.877 22.168 422.749 22.136C422.632 22.0933 422.536 22.0347 422.461 21.96C422.419 22.024 422.333 22.056 422.205 22.056C422.12 22.056 422.035 22.0453 421.949 22.024C421.864 21.992 421.805 21.96 421.773 21.928C421.603 22.0027 421.437 22.04 421.277 22.04C421.235 22.04 421.171 22.0293 421.085 22.008C420.947 22.1573 420.84 22.264 420.765 22.328C420.691 22.392 420.589 22.4293 420.461 22.44C420.429 22.5147 420.397 22.6053 420.365 22.712C420.333 22.808 420.296 22.888 420.253 22.952C420.211 23.016 420.136 23.0693 420.029 23.112C420.008 23.2507 419.955 23.3627 419.869 23.448C419.88 23.4907 419.885 23.5493 419.885 23.624C419.885 23.7307 419.859 23.848 419.805 23.976C419.837 24.0507 419.853 24.216 419.853 24.472C419.853 24.9627 419.811 25.256 419.725 25.352C419.736 25.3947 419.773 25.496 419.837 25.656C419.901 25.816 419.933 25.9707 419.933 26.12C419.933 26.2373 419.912 26.344 419.869 26.44C420.083 26.5253 420.216 26.6747 420.269 26.888C420.376 26.92 420.477 26.9893 420.573 27.096C420.829 27.0853 421.048 27.1973 421.229 27.432ZM433.053 22.744C433.171 22.7973 433.277 22.9253 433.373 23.128C433.48 23.3307 433.533 23.5387 433.533 23.752C433.533 24.1147 433.373 24.36 433.053 24.488C432.968 24.6373 432.851 24.7547 432.701 24.84C432.563 24.9253 432.408 24.968 432.237 24.968C432.099 24.968 431.955 24.936 431.805 24.872C431.72 24.9253 431.603 24.9733 431.453 25.016C431.304 25.0587 431.155 25.08 431.005 25.08C430.749 25.08 430.573 25.0267 430.477 24.92C430.371 25.0053 430.2 25.048 429.965 25.048C429.795 25.048 429.64 25.016 429.501 24.952C429.352 25.0267 429.181 25.064 428.989 25.064C428.808 25.064 428.659 25.0373 428.541 24.984C428.435 25.08 428.216 25.128 427.885 25.128C427.704 25.128 427.581 25.112 427.517 25.08C427.549 25.3893 427.507 25.6187 427.389 25.768C427.592 25.9707 427.672 26.1893 427.629 26.424C427.64 26.4347 427.699 26.4773 427.805 26.552C427.912 26.6267 427.987 26.7493 428.029 26.92C428.147 26.92 428.253 26.968 428.349 27.064C428.456 27.16 428.52 27.256 428.541 27.352C428.584 27.3093 428.669 27.288 428.797 27.288C428.893 27.288 428.979 27.304 429.053 27.336C429.128 27.368 429.171 27.4053 429.181 27.448C429.256 27.4053 429.341 27.384 429.437 27.384C429.576 27.384 429.704 27.432 429.821 27.528C429.928 27.5067 430.008 27.496 430.061 27.496C430.168 27.496 430.259 27.512 430.333 27.544C430.365 27.4587 430.451 27.3787 430.589 27.304C430.728 27.2187 430.872 27.1813 431.021 27.192C431.107 27.0853 431.224 27 431.373 26.936C431.523 26.872 431.672 26.84 431.821 26.84C432.109 26.84 432.317 26.9573 432.445 27.192C432.488 27.2773 432.509 27.3787 432.509 27.496C432.509 27.752 432.392 27.9547 432.157 28.104C432.104 28.136 432.013 28.1947 431.885 28.28C431.757 28.3547 431.64 28.4133 431.533 28.456C431.427 28.4987 431.331 28.52 431.245 28.52C431.085 28.712 430.867 28.808 430.589 28.808C430.461 28.808 430.365 28.7973 430.301 28.776C430.173 28.8827 429.987 28.936 429.741 28.936C429.517 28.936 429.363 28.8933 429.277 28.808C429.203 28.84 429.128 28.856 429.053 28.856C428.904 28.856 428.765 28.8027 428.637 28.696C428.093 28.728 427.725 28.5573 427.533 28.184C427.384 28.184 427.213 28.0933 427.021 27.912C426.84 27.72 426.739 27.5547 426.717 27.416C426.472 27.32 426.317 27.144 426.253 26.888C426.243 26.8027 426.243 26.7227 426.253 26.648C426.211 26.6373 426.173 26.5947 426.141 26.52C426.12 26.4347 426.109 26.3493 426.109 26.264C426.109 26.2 426.115 26.1573 426.125 26.136C426.04 25.88 425.997 25.6453 425.997 25.432C425.997 25.2187 426.04 25.0267 426.125 24.856C426.061 24.7387 426.029 24.6107 426.029 24.472C426.029 24.3013 426.067 24.1307 426.141 23.96C426.216 23.7893 426.285 23.6773 426.349 23.624C426.328 23.5707 426.344 23.48 426.397 23.352C426.451 23.2133 426.52 23.0907 426.605 22.984C426.701 22.8667 426.797 22.7973 426.893 22.776L426.877 22.6C426.877 22.184 427.101 21.9227 427.549 21.816C427.549 21.6347 427.656 21.4587 427.869 21.288C428.083 21.1173 428.269 21.0427 428.429 21.064C428.451 20.9467 428.552 20.856 428.733 20.792C428.925 20.7173 429.069 20.696 429.165 20.728C429.251 20.5893 429.421 20.4933 429.677 20.44C429.773 20.3333 429.912 20.28 430.093 20.28C430.147 20.28 430.216 20.2907 430.301 20.312L430.445 20.296C430.573 20.296 430.68 20.3227 430.765 20.376C430.861 20.4187 430.904 20.472 430.893 20.536C431.128 20.5573 431.325 20.6107 431.485 20.696C431.645 20.7813 431.741 20.936 431.773 21.16C431.912 21.128 432.088 21.1653 432.301 21.272C432.515 21.368 432.696 21.5227 432.845 21.736C433.005 21.9387 433.085 22.1787 433.085 22.456C433.085 22.52 433.075 22.616 433.053 22.744ZM430.701 23.784C430.808 23.6347 431.069 23.56 431.485 23.56C431.72 23.56 431.901 23.5813 432.029 23.624C431.944 23.5813 431.864 23.4907 431.789 23.352C431.725 23.2027 431.693 23.064 431.693 22.936C431.693 22.8507 431.709 22.7867 431.741 22.744C431.592 22.7547 431.464 22.7173 431.357 22.632C431.261 22.536 431.171 22.4293 431.085 22.312C431.011 22.1947 430.952 22.1093 430.909 22.056C430.856 22.088 430.744 22.0613 430.573 21.976C430.413 21.88 430.328 21.784 430.317 21.688C430.275 21.7413 430.184 21.7893 430.045 21.832C429.907 21.864 429.8 21.8747 429.725 21.864C429.693 21.9173 429.619 21.9707 429.501 22.024C429.384 22.0773 429.261 22.0933 429.133 22.072C429.027 22.2747 428.915 22.44 428.797 22.568C428.68 22.696 428.531 22.792 428.349 22.856C428.328 23.0053 428.259 23.1707 428.141 23.352C428.035 23.5333 427.923 23.672 427.805 23.768L427.869 23.784C428.019 23.6773 428.221 23.624 428.477 23.624C428.627 23.624 428.765 23.64 428.893 23.672C429.032 23.704 429.128 23.7413 429.181 23.784C429.437 23.624 429.72 23.544 430.029 23.544C430.285 23.544 430.509 23.624 430.701 23.784ZM440.192 27.112C440.224 27.2187 440.24 27.3253 440.24 27.432C440.24 27.6453 440.155 27.7893 439.984 27.864C440.005 28.024 439.941 28.184 439.792 28.344C439.643 28.504 439.504 28.584 439.376 28.584C439.323 28.68 439.163 28.7707 438.896 28.856C438.629 28.9413 438.384 28.984 438.16 28.984C438 28.984 437.877 28.952 437.792 28.888C437.643 28.9627 437.429 29 437.152 29C436.907 29 436.683 28.9627 436.48 28.888C436.288 28.8133 436.171 28.7013 436.128 28.552C435.915 28.584 435.675 28.52 435.408 28.36C435.152 28.2 434.987 28.0347 434.912 27.864C434.72 27.8107 434.56 27.7093 434.432 27.56C434.315 27.4107 434.251 27.2347 434.24 27.032C434.176 26.936 434.144 26.84 434.144 26.744C434.144 26.5947 434.192 26.4613 434.288 26.344C434.395 26.2267 434.517 26.168 434.656 26.168C434.795 26.168 434.928 26.2533 435.056 26.424C435.248 26.4027 435.419 26.4667 435.568 26.616C435.728 26.7653 435.808 26.9147 435.808 27.064C435.84 27.064 435.92 27.0747 436.048 27.096C436.187 27.1067 436.309 27.144 436.416 27.208C436.523 27.272 436.597 27.3627 436.64 27.48C436.832 27.48 437.019 27.5067 437.2 27.56C437.392 27.6027 437.504 27.656 437.536 27.72C437.621 27.6667 437.744 27.624 437.904 27.592C438.075 27.5493 438.219 27.528 438.336 27.528C438.368 27.4853 438.448 27.4427 438.576 27.4C438.704 27.3573 438.811 27.3307 438.896 27.32C438.843 27.2453 438.816 27.1333 438.816 26.984C438.816 26.76 438.885 26.6 439.024 26.504C438.896 26.4613 438.795 26.3973 438.72 26.312C438.645 26.216 438.613 26.1093 438.624 25.992C438.539 26.0133 438.475 26.024 438.432 26.024C438.229 26.024 438.064 25.944 437.936 25.784C437.723 25.8053 437.509 25.7573 437.296 25.64C437.093 25.5227 436.944 25.368 436.848 25.176C436.773 25.208 436.693 25.224 436.608 25.224C436.427 25.224 436.235 25.1707 436.032 25.064C435.84 24.9467 435.717 24.8347 435.664 24.728C435.515 24.7707 435.339 24.7227 435.136 24.584C434.933 24.4453 434.832 24.2907 434.832 24.12C434.704 24.056 434.603 23.9493 434.528 23.8C434.453 23.64 434.416 23.496 434.416 23.368C434.416 23.272 434.437 23.208 434.48 23.176C434.427 23.0693 434.4 22.9627 434.4 22.856C434.4 22.664 434.464 22.4987 434.592 22.36C434.56 22.2427 434.544 22.136 434.544 22.04C434.544 21.8587 434.581 21.7093 434.656 21.592C434.741 21.464 434.843 21.4107 434.96 21.432C434.939 21.2613 434.976 21.112 435.072 20.984C435.179 20.856 435.307 20.7653 435.456 20.712C435.616 20.648 435.755 20.6267 435.872 20.648C435.936 20.552 436.021 20.4773 436.128 20.424C436.235 20.3707 436.341 20.344 436.448 20.344C436.629 20.344 436.757 20.3973 436.832 20.504C436.843 20.4507 436.88 20.408 436.944 20.376C437.019 20.344 437.104 20.328 437.2 20.328C437.285 20.328 437.371 20.344 437.456 20.376C437.541 20.408 437.605 20.4453 437.648 20.488C437.712 20.424 437.824 20.392 437.984 20.392C438.112 20.392 438.24 20.4187 438.368 20.472C438.496 20.5147 438.581 20.5787 438.624 20.664C438.688 20.632 438.757 20.616 438.832 20.616C438.96 20.616 439.077 20.664 439.184 20.76C439.301 20.8453 439.381 20.9573 439.424 21.096C439.584 21.0747 439.749 21.128 439.92 21.256C440.091 21.384 440.155 21.512 440.112 21.64C440.4 21.8 440.544 22.0187 440.544 22.296C440.544 22.4667 440.485 22.616 440.368 22.744C440.251 22.872 440.101 22.936 439.92 22.936C439.76 22.9253 439.627 22.8827 439.52 22.808C439.413 22.7333 439.349 22.6427 439.328 22.536C439.189 22.5147 439.056 22.4613 438.928 22.376C438.811 22.28 438.747 22.1573 438.736 22.008C438.533 22.0293 438.379 22.008 438.272 21.944C438.176 21.88 438.091 21.7787 438.016 21.64C437.941 21.6933 437.845 21.72 437.728 21.72C437.611 21.72 437.483 21.688 437.344 21.624C437.269 21.688 437.173 21.7413 437.056 21.784C436.949 21.8267 436.843 21.848 436.736 21.848C436.619 21.848 436.517 21.8213 436.432 21.768C436.453 21.896 436.421 21.9973 436.336 22.072C436.251 22.1467 436.133 22.1733 435.984 22.152C436.016 22.2267 436.032 22.3067 436.032 22.392C436.032 22.584 435.947 22.744 435.776 22.872C435.893 22.9253 435.979 23.016 436.032 23.144C436.085 23.2613 436.107 23.3787 436.096 23.496L436.224 23.48C436.544 23.48 436.747 23.5813 436.832 23.784L436.96 23.768C437.131 23.768 437.291 23.8107 437.44 23.896C437.6 23.9813 437.717 24.1253 437.792 24.328C437.963 24.3173 438.128 24.3387 438.288 24.392C438.448 24.4347 438.56 24.52 438.624 24.648C438.709 24.616 438.789 24.6 438.864 24.6C439.045 24.6 439.205 24.6533 439.344 24.76C439.493 24.8667 439.573 24.9893 439.584 25.128C439.68 25.128 439.765 25.1813 439.84 25.288C439.925 25.3947 439.957 25.5173 439.936 25.656C440.011 25.6453 440.08 25.688 440.144 25.784C440.208 25.8693 440.24 25.9707 440.24 26.088C440.24 26.152 440.224 26.2107 440.192 26.264C440.341 26.3707 440.416 26.5147 440.416 26.696C440.416 26.792 440.395 26.8773 440.352 26.952C440.32 27.0267 440.267 27.08 440.192 27.112Z M398.48 193.098C398.488 191.41 398.707 190.195 399.137 189.453C399.566 188.703 400.219 188.305 401.094 188.258C401.477 188.258 401.816 188.363 402.113 188.574C402.41 188.785 402.645 189.055 402.816 189.383C402.996 189.703 403.145 190.09 403.262 190.543C403.379 190.988 403.457 191.414 403.496 191.82C403.543 192.219 403.574 192.645 403.59 193.098C403.59 193.715 403.496 194.348 403.309 194.996C403.129 195.637 402.848 196.199 402.465 196.684C402.09 197.16 401.668 197.398 401.199 197.398C399.387 197.398 398.48 195.965 398.48 193.098ZM400.93 189.16C400.742 189.199 400.574 189.262 400.426 189.348C400.277 189.434 400.152 189.531 400.051 189.641C399.957 189.75 399.875 189.895 399.805 190.074C399.734 190.254 399.68 190.422 399.641 190.578C399.609 190.727 399.578 190.922 399.547 191.164C399.523 191.406 399.508 191.617 399.5 191.797C399.492 191.969 399.48 192.199 399.465 192.488C399.457 192.77 399.445 193 399.43 193.18C399.43 193.539 399.449 193.883 399.488 194.211C399.527 194.531 399.598 194.867 399.699 195.219C399.809 195.57 399.977 195.855 400.203 196.074C400.43 196.293 400.703 196.418 401.023 196.449C401.508 196.449 401.906 196.113 402.219 195.441C402.539 194.77 402.699 194.09 402.699 193.402C402.699 190.605 402.109 189.191 400.93 189.16ZM404.117 195.535C404.328 195.535 404.504 195.629 404.645 195.816C404.793 195.996 404.867 196.203 404.867 196.438C404.867 196.609 404.824 196.75 404.738 196.859C404.66 196.961 404.551 197.012 404.41 197.012C404.191 197.012 404.016 196.922 403.883 196.742C403.758 196.562 403.695 196.352 403.695 196.109C403.695 195.938 403.73 195.801 403.801 195.699C403.879 195.59 403.984 195.535 404.117 195.535ZM405.582 193.098C405.59 191.41 405.809 190.195 406.238 189.453C406.668 188.703 407.32 188.305 408.195 188.258C408.578 188.258 408.918 188.363 409.215 188.574C409.512 188.785 409.746 189.055 409.918 189.383C410.098 189.703 410.246 190.09 410.363 190.543C410.48 190.988 410.559 191.414 410.598 191.82C410.645 192.219 410.676 192.645 410.691 193.098C410.691 193.715 410.598 194.348 410.41 194.996C410.23 195.637 409.949 196.199 409.566 196.684C409.191 197.16 408.77 197.398 408.301 197.398C406.488 197.398 405.582 195.965 405.582 193.098ZM408.031 189.16C407.844 189.199 407.676 189.262 407.527 189.348C407.379 189.434 407.254 189.531 407.152 189.641C407.059 189.75 406.977 189.895 406.906 190.074C406.836 190.254 406.781 190.422 406.742 190.578C406.711 190.727 406.68 190.922 406.648 191.164C406.625 191.406 406.609 191.617 406.602 191.797C406.594 191.969 406.582 192.199 406.566 192.488C406.559 192.77 406.547 193 406.531 193.18C406.531 193.539 406.551 193.883 406.59 194.211C406.629 194.531 406.699 194.867 406.801 195.219C406.91 195.57 407.078 195.855 407.305 196.074C407.531 196.293 407.805 196.418 408.125 196.449C408.609 196.449 409.008 196.113 409.32 195.441C409.641 194.77 409.801 194.09 409.801 193.402C409.801 190.605 409.211 189.191 408.031 189.16ZM415.812 188.516L416.012 189.043C414.184 189.824 413.098 190.871 412.754 192.184C413.066 191.98 413.383 191.879 413.703 191.879C414.375 191.879 414.938 192.184 415.391 192.793C415.844 193.395 416.07 194.164 416.07 195.102C416.07 195.773 415.863 196.309 415.449 196.707C415.043 197.105 414.523 197.305 413.891 197.305C413.297 197.305 412.773 197.09 412.32 196.66C411.875 196.223 411.652 195.645 411.652 194.926C411.652 194.473 411.66 194.078 411.676 193.742C411.699 193.406 411.742 193.039 411.805 192.641C411.875 192.234 411.969 191.883 412.086 191.586C412.203 191.289 412.363 190.98 412.566 190.66C412.777 190.332 413.027 190.047 413.316 189.805C413.605 189.555 413.957 189.32 414.371 189.102C414.793 188.875 415.273 188.68 415.812 188.516ZM412.496 194.586C412.496 195.234 412.617 195.723 412.859 196.051C413.102 196.371 413.402 196.531 413.762 196.531C414.145 196.531 414.477 196.402 414.758 196.145C415.039 195.887 415.18 195.531 415.18 195.078C415.18 194.391 415.023 193.816 414.711 193.355C414.398 192.895 414.02 192.664 413.574 192.664C413.371 192.664 413.199 192.703 413.059 192.781C412.918 192.852 412.812 192.934 412.742 193.027C412.672 193.121 412.617 193.27 412.578 193.473C412.539 193.668 412.516 193.836 412.508 193.977C412.5 194.109 412.496 194.312 412.496 194.586ZM417.148 197.223L416.961 196.695C418.781 195.922 419.863 194.875 420.207 193.555C419.879 193.766 419.562 193.871 419.258 193.871C418.586 193.871 418.023 193.57 417.57 192.969C417.125 192.359 416.902 191.582 416.902 190.637C416.902 189.965 417.105 189.434 417.512 189.043C417.918 188.645 418.438 188.445 419.07 188.445C419.672 188.445 420.195 188.664 420.641 189.102C421.094 189.531 421.32 190.105 421.32 190.824C421.32 191.277 421.309 191.672 421.285 192.008C421.27 192.344 421.227 192.711 421.156 193.109C421.094 193.508 421.004 193.859 420.887 194.164C420.77 194.461 420.605 194.773 420.395 195.102C420.191 195.422 419.945 195.703 419.656 195.945C419.367 196.188 419.012 196.422 418.59 196.648C418.168 196.867 417.688 197.059 417.148 197.223ZM420.477 191.152C420.477 190.504 420.352 190.02 420.102 189.699C419.859 189.371 419.559 189.207 419.199 189.207C418.816 189.207 418.484 189.336 418.203 189.594C417.922 189.852 417.781 190.207 417.781 190.66C417.781 191.348 417.938 191.922 418.25 192.383C418.562 192.844 418.945 193.074 419.398 193.074C419.602 193.074 419.773 193.039 419.914 192.969C420.055 192.891 420.16 192.805 420.23 192.711C420.301 192.617 420.355 192.473 420.395 192.277C420.434 192.074 420.457 191.906 420.465 191.773C420.473 191.633 420.477 191.426 420.477 191.152Z M398.48 271.098C398.488 269.41 398.707 268.195 399.137 267.453C399.566 266.703 400.219 266.305 401.094 266.258C401.477 266.258 401.816 266.363 402.113 266.574C402.41 266.785 402.645 267.055 402.816 267.383C402.996 267.703 403.145 268.09 403.262 268.543C403.379 268.988 403.457 269.414 403.496 269.82C403.543 270.219 403.574 270.645 403.59 271.098C403.59 271.715 403.496 272.348 403.309 272.996C403.129 273.637 402.848 274.199 402.465 274.684C402.09 275.16 401.668 275.398 401.199 275.398C399.387 275.398 398.48 273.965 398.48 271.098ZM400.93 267.16C400.742 267.199 400.574 267.262 400.426 267.348C400.277 267.434 400.152 267.531 400.051 267.641C399.957 267.75 399.875 267.895 399.805 268.074C399.734 268.254 399.68 268.422 399.641 268.578C399.609 268.727 399.578 268.922 399.547 269.164C399.523 269.406 399.508 269.617 399.5 269.797C399.492 269.969 399.48 270.199 399.465 270.488C399.457 270.77 399.445 271 399.43 271.18C399.43 271.539 399.449 271.883 399.488 272.211C399.527 272.531 399.598 272.867 399.699 273.219C399.809 273.57 399.977 273.855 400.203 274.074C400.43 274.293 400.703 274.418 401.023 274.449C401.508 274.449 401.906 274.113 402.219 273.441C402.539 272.77 402.699 272.09 402.699 271.402C402.699 268.605 402.109 267.191 400.93 267.16ZM404.117 273.535C404.328 273.535 404.504 273.629 404.645 273.816C404.793 273.996 404.867 274.203 404.867 274.438C404.867 274.609 404.824 274.75 404.738 274.859C404.66 274.961 404.551 275.012 404.41 275.012C404.191 275.012 404.016 274.922 403.883 274.742C403.758 274.562 403.695 274.352 403.695 274.109C403.695 273.938 403.73 273.801 403.801 273.699C403.879 273.59 403.984 273.535 404.117 273.535ZM405.582 271.098C405.59 269.41 405.809 268.195 406.238 267.453C406.668 266.703 407.32 266.305 408.195 266.258C408.578 266.258 408.918 266.363 409.215 266.574C409.512 266.785 409.746 267.055 409.918 267.383C410.098 267.703 410.246 268.09 410.363 268.543C410.48 268.988 410.559 269.414 410.598 269.82C410.645 270.219 410.676 270.645 410.691 271.098C410.691 271.715 410.598 272.348 410.41 272.996C410.23 273.637 409.949 274.199 409.566 274.684C409.191 275.16 408.77 275.398 408.301 275.398C406.488 275.398 405.582 273.965 405.582 271.098ZM408.031 267.16C407.844 267.199 407.676 267.262 407.527 267.348C407.379 267.434 407.254 267.531 407.152 267.641C407.059 267.75 406.977 267.895 406.906 268.074C406.836 268.254 406.781 268.422 406.742 268.578C406.711 268.727 406.68 268.922 406.648 269.164C406.625 269.406 406.609 269.617 406.602 269.797C406.594 269.969 406.582 270.199 406.566 270.488C406.559 270.77 406.547 271 406.531 271.18C406.531 271.539 406.551 271.883 406.59 272.211C406.629 272.531 406.699 272.867 406.801 273.219C406.91 273.57 407.078 273.855 407.305 274.074C407.531 274.293 407.805 274.418 408.125 274.449C408.609 274.449 409.008 274.113 409.32 273.441C409.641 272.77 409.801 272.09 409.801 271.402C409.801 268.605 409.211 267.191 408.031 267.16ZM415.977 271.59L416.094 272.117C415.688 272.164 415.398 272.195 415.227 272.211C415.242 272.57 415.262 273.023 415.285 273.57C415.316 274.117 415.336 274.566 415.344 274.918C415.273 275.16 415.141 275.281 414.945 275.281C414.805 275.281 414.668 275.223 414.535 275.105C414.402 274.988 414.32 274.848 414.289 274.684C414.297 274.441 414.324 273.645 414.371 272.293C414.121 272.309 413.922 272.316 413.773 272.316C413.539 272.316 413.176 272.305 412.684 272.281C412.199 272.25 411.844 272.234 411.617 272.234C411.508 272.234 411.359 272.242 411.172 272.258C411.188 272.07 411.195 271.941 411.195 271.871C411.195 271.824 411.191 271.75 411.184 271.648C411.184 271.539 411.184 271.457 411.184 271.402C412.488 269.207 413.543 267.578 414.348 266.516C414.59 266.516 414.922 266.566 415.344 266.668C415.328 267.035 415.305 267.832 415.273 269.059C415.25 270.277 415.227 271.102 415.203 271.531C415.547 271.547 415.805 271.566 415.977 271.59ZM412.039 271.438L414.395 271.508C414.418 271.062 414.441 270.402 414.465 269.527C414.488 268.652 414.508 267.992 414.523 267.547C414.203 267.875 413.738 268.562 413.129 269.609C412.527 270.648 412.164 271.258 412.039 271.438ZM420.969 266.516L421.168 267.043C419.34 267.824 418.254 268.871 417.91 270.184C418.223 269.98 418.539 269.879 418.859 269.879C419.531 269.879 420.094 270.184 420.547 270.793C421 271.395 421.227 272.164 421.227 273.102C421.227 273.773 421.02 274.309 420.605 274.707C420.199 275.105 419.68 275.305 419.047 275.305C418.453 275.305 417.93 275.09 417.477 274.66C417.031 274.223 416.809 273.645 416.809 272.926C416.809 272.473 416.816 272.078 416.832 271.742C416.855 271.406 416.898 271.039 416.961 270.641C417.031 270.234 417.125 269.883 417.242 269.586C417.359 269.289 417.52 268.98 417.723 268.66C417.934 268.332 418.184 268.047 418.473 267.805C418.762 267.555 419.113 267.32 419.527 267.102C419.949 266.875 420.43 266.68 420.969 266.516ZM417.652 272.586C417.652 273.234 417.773 273.723 418.016 274.051C418.258 274.371 418.559 274.531 418.918 274.531C419.301 274.531 419.633 274.402 419.914 274.145C420.195 273.887 420.336 273.531 420.336 273.078C420.336 272.391 420.18 271.816 419.867 271.355C419.555 270.895 419.176 270.664 418.73 270.664C418.527 270.664 418.355 270.703 418.215 270.781C418.074 270.852 417.969 270.934 417.898 271.027C417.828 271.121 417.773 271.27 417.734 271.473C417.695 271.668 417.672 271.836 417.664 271.977C417.656 272.109 417.652 272.312 417.652 272.586Z M400.48 89.0977C400.488 87.4102 400.707 86.1953 401.137 85.4531C401.566 84.7031 402.219 84.3047 403.094 84.2578C403.477 84.2578 403.816 84.3633 404.113 84.5742C404.41 84.7852 404.645 85.0547 404.816 85.3828C404.996 85.7031 405.145 86.0898 405.262 86.543C405.379 86.9883 405.457 87.4141 405.496 87.8203C405.543 88.2188 405.574 88.6445 405.59 89.0977C405.59 89.7148 405.496 90.3477 405.309 90.9961C405.129 91.6367 404.848 92.1992 404.465 92.6836C404.09 93.1602 403.668 93.3984 403.199 93.3984C401.387 93.3984 400.48 91.9648 400.48 89.0977ZM402.93 85.1602C402.742 85.1992 402.574 85.2617 402.426 85.3477C402.277 85.4336 402.152 85.5312 402.051 85.6406C401.957 85.75 401.875 85.8945 401.805 86.0742C401.734 86.2539 401.68 86.4219 401.641 86.5781C401.609 86.7266 401.578 86.9219 401.547 87.1641C401.523 87.4062 401.508 87.6172 401.5 87.7969C401.492 87.9688 401.48 88.1992 401.465 88.4883C401.457 88.7695 401.445 89 401.43 89.1797C401.43 89.5391 401.449 89.8828 401.488 90.2109C401.527 90.5312 401.598 90.8672 401.699 91.2188C401.809 91.5703 401.977 91.8555 402.203 92.0742C402.43 92.293 402.703 92.418 403.023 92.4492C403.508 92.4492 403.906 92.1133 404.219 91.4414C404.539 90.7695 404.699 90.0898 404.699 89.4023C404.699 86.6055 404.109 85.1914 402.93 85.1602ZM406.117 91.5352C406.328 91.5352 406.504 91.6289 406.645 91.8164C406.793 91.9961 406.867 92.2031 406.867 92.4375C406.867 92.6094 406.824 92.75 406.738 92.8594C406.66 92.9609 406.551 93.0117 406.41 93.0117C406.191 93.0117 406.016 92.9219 405.883 92.7422C405.758 92.5625 405.695 92.3516 405.695 92.1094C405.695 91.9375 405.73 91.8008 405.801 91.6992C405.879 91.5898 405.984 91.5352 406.117 91.5352ZM407.582 89.0977C407.59 87.4102 407.809 86.1953 408.238 85.4531C408.668 84.7031 409.32 84.3047 410.195 84.2578C410.578 84.2578 410.918 84.3633 411.215 84.5742C411.512 84.7852 411.746 85.0547 411.918 85.3828C412.098 85.7031 412.246 86.0898 412.363 86.543C412.48 86.9883 412.559 87.4141 412.598 87.8203C412.645 88.2188 412.676 88.6445 412.691 89.0977C412.691 89.7148 412.598 90.3477 412.41 90.9961C412.23 91.6367 411.949 92.1992 411.566 92.6836C411.191 93.1602 410.77 93.3984 410.301 93.3984C408.488 93.3984 407.582 91.9648 407.582 89.0977ZM410.031 85.1602C409.844 85.1992 409.676 85.2617 409.527 85.3477C409.379 85.4336 409.254 85.5312 409.152 85.6406C409.059 85.75 408.977 85.8945 408.906 86.0742C408.836 86.2539 408.781 86.4219 408.742 86.5781C408.711 86.7266 408.68 86.9219 408.648 87.1641C408.625 87.4062 408.609 87.6172 408.602 87.7969C408.594 87.9688 408.582 88.1992 408.566 88.4883C408.559 88.7695 408.547 89 408.531 89.1797C408.531 89.5391 408.551 89.8828 408.59 90.2109C408.629 90.5312 408.699 90.8672 408.801 91.2188C408.91 91.5703 409.078 91.8555 409.305 92.0742C409.531 92.293 409.805 92.418 410.125 92.4492C410.609 92.4492 411.008 92.1133 411.32 91.4414C411.641 90.7695 411.801 90.0898 411.801 89.4023C411.801 86.6055 411.211 85.1914 410.031 85.1602ZM413.992 93.0938L413.078 92.8242L416.242 85.0664C414.422 85.0117 413.188 84.957 412.539 84.9023L412.422 84.375C412.969 84.3125 413.797 84.2812 414.906 84.2812C416.016 84.2734 416.781 84.2539 417.203 84.2227L417.145 85.2422L413.992 93.0938ZM420.824 84.5156L421.023 85.043C419.195 85.8242 418.109 86.8711 417.766 88.1836C418.078 87.9805 418.395 87.8789 418.715 87.8789C419.387 87.8789 419.949 88.1836 420.402 88.793C420.855 89.3945 421.082 90.1641 421.082 91.1016C421.082 91.7734 420.875 92.3086 420.461 92.707C420.055 93.1055 419.535 93.3047 418.902 93.3047C418.309 93.3047 417.785 93.0898 417.332 92.6602C416.887 92.2227 416.664 91.6445 416.664 90.9258C416.664 90.4727 416.672 90.0781 416.688 89.7422C416.711 89.4062 416.754 89.0391 416.816 88.6406C416.887 88.2344 416.98 87.8828 417.098 87.5859C417.215 87.2891 417.375 86.9805 417.578 86.6602C417.789 86.332 418.039 86.0469 418.328 85.8047C418.617 85.5547 418.969 85.3203 419.383 85.1016C419.805 84.875 420.285 84.6797 420.824 84.5156ZM417.508 90.5859C417.508 91.2344 417.629 91.7227 417.871 92.0508C418.113 92.3711 418.414 92.5312 418.773 92.5312C419.156 92.5312 419.488 92.4023 419.77 92.1445C420.051 91.8867 420.191 91.5312 420.191 91.0781C420.191 90.3906 420.035 89.8164 419.723 89.3555C419.41 88.8945 419.031 88.6641 418.586 88.6641C418.383 88.6641 418.211 88.7031 418.07 88.7812C417.93 88.8516 417.824 88.9336 417.754 89.0273C417.684 89.1211 417.629 89.2695 417.59 89.4727C417.551 89.668 417.527 89.8359 417.52 89.9766C417.512 90.1094 417.508 90.3125 417.508 90.5859Z M398.48 297.098C398.488 295.41 398.707 294.195 399.137 293.453C399.566 292.703 400.219 292.305 401.094 292.258C401.477 292.258 401.816 292.363 402.113 292.574C402.41 292.785 402.645 293.055 402.816 293.383C402.996 293.703 403.145 294.09 403.262 294.543C403.379 294.988 403.457 295.414 403.496 295.82C403.543 296.219 403.574 296.645 403.59 297.098C403.59 297.715 403.496 298.348 403.309 298.996C403.129 299.637 402.848 300.199 402.465 300.684C402.09 301.16 401.668 301.398 401.199 301.398C399.387 301.398 398.48 299.965 398.48 297.098ZM400.93 293.16C400.742 293.199 400.574 293.262 400.426 293.348C400.277 293.434 400.152 293.531 400.051 293.641C399.957 293.75 399.875 293.895 399.805 294.074C399.734 294.254 399.68 294.422 399.641 294.578C399.609 294.727 399.578 294.922 399.547 295.164C399.523 295.406 399.508 295.617 399.5 295.797C399.492 295.969 399.48 296.199 399.465 296.488C399.457 296.77 399.445 297 399.43 297.18C399.43 297.539 399.449 297.883 399.488 298.211C399.527 298.531 399.598 298.867 399.699 299.219C399.809 299.57 399.977 299.855 400.203 300.074C400.43 300.293 400.703 300.418 401.023 300.449C401.508 300.449 401.906 300.113 402.219 299.441C402.539 298.77 402.699 298.09 402.699 297.402C402.699 294.605 402.109 293.191 400.93 293.16ZM404.117 299.535C404.328 299.535 404.504 299.629 404.645 299.816C404.793 299.996 404.867 300.203 404.867 300.438C404.867 300.609 404.824 300.75 404.738 300.859C404.66 300.961 404.551 301.012 404.41 301.012C404.191 301.012 404.016 300.922 403.883 300.742C403.758 300.562 403.695 300.352 403.695 300.109C403.695 299.938 403.73 299.801 403.801 299.699C403.879 299.59 403.984 299.535 404.117 299.535ZM405.582 297.098C405.59 295.41 405.809 294.195 406.238 293.453C406.668 292.703 407.32 292.305 408.195 292.258C408.578 292.258 408.918 292.363 409.215 292.574C409.512 292.785 409.746 293.055 409.918 293.383C410.098 293.703 410.246 294.09 410.363 294.543C410.48 294.988 410.559 295.414 410.598 295.82C410.645 296.219 410.676 296.645 410.691 297.098C410.691 297.715 410.598 298.348 410.41 298.996C410.23 299.637 409.949 300.199 409.566 300.684C409.191 301.16 408.77 301.398 408.301 301.398C406.488 301.398 405.582 299.965 405.582 297.098ZM408.031 293.16C407.844 293.199 407.676 293.262 407.527 293.348C407.379 293.434 407.254 293.531 407.152 293.641C407.059 293.75 406.977 293.895 406.906 294.074C406.836 294.254 406.781 294.422 406.742 294.578C406.711 294.727 406.68 294.922 406.648 295.164C406.625 295.406 406.609 295.617 406.602 295.797C406.594 295.969 406.582 296.199 406.566 296.488C406.559 296.77 406.547 297 406.531 297.18C406.531 297.539 406.551 297.883 406.59 298.211C406.629 298.531 406.699 298.867 406.801 299.219C406.91 299.57 407.078 299.855 407.305 300.074C407.531 300.293 407.805 300.418 408.125 300.449C408.609 300.449 409.008 300.113 409.32 299.441C409.641 298.77 409.801 298.09 409.801 297.402C409.801 294.605 409.211 293.191 408.031 293.16ZM416.633 298.645C416.633 299.496 416.426 300.129 416.012 300.543C415.598 300.949 414.965 301.152 414.113 301.152C412.473 301.152 411.652 300.301 411.652 298.598C411.652 297.988 411.777 297.453 412.027 296.992C412.277 296.531 412.621 296.266 413.059 296.195C412.613 296.188 412.277 296.023 412.051 295.703C411.824 295.383 411.711 294.984 411.711 294.508C411.711 293.773 411.91 293.195 412.309 292.773C412.715 292.352 413.289 292.141 414.031 292.141C414.812 292.141 415.426 292.336 415.871 292.727C416.316 293.117 416.539 293.719 416.539 294.531C416.539 295.008 416.426 295.406 416.199 295.727C415.973 296.047 415.637 296.211 415.191 296.219C415.645 296.289 415.996 296.559 416.246 297.027C416.504 297.496 416.633 298.035 416.633 298.645ZM414.242 300.309C414.68 300.309 415.043 300.141 415.332 299.805C415.621 299.461 415.766 299.055 415.766 298.586C415.766 298.117 415.605 297.715 415.285 297.379C414.965 297.035 414.535 296.859 413.996 296.852C413.527 296.992 413.176 297.215 412.941 297.52C412.707 297.816 412.59 298.152 412.59 298.527C412.59 298.996 412.746 299.41 413.059 299.77C413.371 300.129 413.766 300.309 414.242 300.309ZM414.242 292.785C413.719 292.824 413.32 292.996 413.047 293.301C412.773 293.605 412.637 293.957 412.637 294.355C412.637 294.762 412.766 295.113 413.023 295.41C413.289 295.707 413.641 295.855 414.078 295.855C414.586 295.848 414.973 295.711 415.238 295.445C415.504 295.172 415.637 294.844 415.637 294.461C415.637 294.078 415.508 293.723 415.25 293.395C415 293.066 414.664 292.863 414.242 292.785ZM417.641 300.965V300.344C417.828 300.32 418.059 300.281 418.332 300.227C418.613 300.172 418.832 300.133 418.988 300.109C419.012 299.547 419.023 298.98 419.023 298.41C419.023 298.051 419.02 297.512 419.012 296.793C419.004 296.066 419 295.52 419 295.152C419 294.285 419.012 293.629 419.035 293.184C418.324 293.59 417.805 293.918 417.477 294.168L417.102 293.781C417.227 293.68 417.441 293.504 417.746 293.254C418.051 292.996 418.324 292.766 418.566 292.562C418.809 292.352 418.996 292.18 419.129 292.047C419.254 292.062 419.383 292.074 419.516 292.082C419.648 292.082 419.777 292.09 419.902 292.105C419.949 293.012 419.973 294.672 419.973 297.086C419.973 298.523 419.984 299.555 420.008 300.18C420.078 300.188 420.246 300.219 420.512 300.273C420.785 300.32 420.996 300.352 421.145 300.367L421.332 300.988C420.941 300.988 420.602 300.988 420.312 300.988C420.023 300.988 419.637 300.988 419.152 300.988C418.676 300.988 418.301 300.988 418.027 300.988C417.762 300.98 417.633 300.973 417.641 300.965Z M399.48 141.098C399.488 139.41 399.707 138.195 400.137 137.453C400.566 136.703 401.219 136.305 402.094 136.258C402.477 136.258 402.816 136.363 403.113 136.574C403.41 136.785 403.645 137.055 403.816 137.383C403.996 137.703 404.145 138.09 404.262 138.543C404.379 138.988 404.457 139.414 404.496 139.82C404.543 140.219 404.574 140.645 404.59 141.098C404.59 141.715 404.496 142.348 404.309 142.996C404.129 143.637 403.848 144.199 403.465 144.684C403.09 145.16 402.668 145.398 402.199 145.398C400.387 145.398 399.48 143.965 399.48 141.098ZM401.93 137.16C401.742 137.199 401.574 137.262 401.426 137.348C401.277 137.434 401.152 137.531 401.051 137.641C400.957 137.75 400.875 137.895 400.805 138.074C400.734 138.254 400.68 138.422 400.641 138.578C400.609 138.727 400.578 138.922 400.547 139.164C400.523 139.406 400.508 139.617 400.5 139.797C400.492 139.969 400.48 140.199 400.465 140.488C400.457 140.77 400.445 141 400.43 141.18C400.43 141.539 400.449 141.883 400.488 142.211C400.527 142.531 400.598 142.867 400.699 143.219C400.809 143.57 400.977 143.855 401.203 144.074C401.43 144.293 401.703 144.418 402.023 144.449C402.508 144.449 402.906 144.113 403.219 143.441C403.539 142.77 403.699 142.09 403.699 141.402C403.699 138.605 403.109 137.191 401.93 137.16ZM405.117 143.535C405.328 143.535 405.504 143.629 405.645 143.816C405.793 143.996 405.867 144.203 405.867 144.438C405.867 144.609 405.824 144.75 405.738 144.859C405.66 144.961 405.551 145.012 405.41 145.012C405.191 145.012 405.016 144.922 404.883 144.742C404.758 144.562 404.695 144.352 404.695 144.109C404.695 143.938 404.73 143.801 404.801 143.699C404.879 143.59 404.984 143.535 405.117 143.535ZM406.582 141.098C406.59 139.41 406.809 138.195 407.238 137.453C407.668 136.703 408.32 136.305 409.195 136.258C409.578 136.258 409.918 136.363 410.215 136.574C410.512 136.785 410.746 137.055 410.918 137.383C411.098 137.703 411.246 138.09 411.363 138.543C411.48 138.988 411.559 139.414 411.598 139.82C411.645 140.219 411.676 140.645 411.691 141.098C411.691 141.715 411.598 142.348 411.41 142.996C411.23 143.637 410.949 144.199 410.566 144.684C410.191 145.16 409.77 145.398 409.301 145.398C407.488 145.398 406.582 143.965 406.582 141.098ZM409.031 137.16C408.844 137.199 408.676 137.262 408.527 137.348C408.379 137.434 408.254 137.531 408.152 137.641C408.059 137.75 407.977 137.895 407.906 138.074C407.836 138.254 407.781 138.422 407.742 138.578C407.711 138.727 407.68 138.922 407.648 139.164C407.625 139.406 407.609 139.617 407.602 139.797C407.594 139.969 407.582 140.199 407.566 140.488C407.559 140.77 407.547 141 407.531 141.18C407.531 141.539 407.551 141.883 407.59 142.211C407.629 142.531 407.699 142.867 407.801 143.219C407.91 143.57 408.078 143.855 408.305 144.074C408.531 144.293 408.805 144.418 409.125 144.449C409.609 144.449 410.008 144.113 410.32 143.441C410.641 142.77 410.801 142.09 410.801 141.402C410.801 138.605 410.211 137.191 409.031 137.16ZM412.992 145.094L412.078 144.824L415.242 137.066C413.422 137.012 412.188 136.957 411.539 136.902L411.422 136.375C411.969 136.312 412.797 136.281 413.906 136.281C415.016 136.273 415.781 136.254 416.203 136.223L416.145 137.242L412.992 145.094ZM416.203 144.625L416.297 144.086C416.359 144.094 416.535 144.129 416.824 144.191C417.121 144.254 417.383 144.301 417.609 144.332C417.844 144.363 418.051 144.379 418.23 144.379C418.676 144.379 419.023 144.211 419.273 143.875C419.531 143.539 419.66 143.148 419.66 142.703C419.66 142.094 419.449 141.57 419.027 141.133C418.613 140.688 418.012 140.465 417.223 140.465C417.098 140.465 417.004 140.469 416.941 140.477V139.902C417.012 139.91 417.121 139.914 417.27 139.914C417.98 139.914 418.559 139.789 419.004 139.539C419.457 139.289 419.684 138.891 419.684 138.344C419.684 137.93 419.566 137.598 419.332 137.348C419.098 137.098 418.793 136.973 418.418 136.973C418.246 136.973 418.059 136.984 417.855 137.008C417.66 137.023 417.445 137.047 417.211 137.078C416.977 137.109 416.828 137.129 416.766 137.137L416.578 136.609C416.672 136.586 416.824 136.543 417.035 136.48C417.246 136.418 417.41 136.371 417.527 136.34C417.652 136.309 417.809 136.281 417.996 136.258C418.184 136.227 418.359 136.211 418.523 136.211C419.125 136.211 419.602 136.422 419.953 136.844C420.305 137.258 420.48 137.828 420.48 138.555C420.48 139.016 420.367 139.395 420.141 139.691C419.922 139.988 419.586 140.172 419.133 140.242C419.602 140.43 419.957 140.738 420.199 141.168C420.449 141.59 420.574 142.09 420.574 142.668C420.574 143.332 420.418 143.902 420.105 144.379C419.793 144.848 419.32 145.082 418.688 145.082C417.773 145.082 416.945 144.93 416.203 144.625Z M397.48 115.098C397.488 113.41 397.707 112.195 398.137 111.453C398.566 110.703 399.219 110.305 400.094 110.258C400.477 110.258 400.816 110.363 401.113 110.574C401.41 110.785 401.645 111.055 401.816 111.383C401.996 111.703 402.145 112.09 402.262 112.543C402.379 112.988 402.457 113.414 402.496 113.82C402.543 114.219 402.574 114.645 402.59 115.098C402.59 115.715 402.496 116.348 402.309 116.996C402.129 117.637 401.848 118.199 401.465 118.684C401.09 119.16 400.668 119.398 400.199 119.398C398.387 119.398 397.48 117.965 397.48 115.098ZM399.93 111.16C399.742 111.199 399.574 111.262 399.426 111.348C399.277 111.434 399.152 111.531 399.051 111.641C398.957 111.75 398.875 111.895 398.805 112.074C398.734 112.254 398.68 112.422 398.641 112.578C398.609 112.727 398.578 112.922 398.547 113.164C398.523 113.406 398.508 113.617 398.5 113.797C398.492 113.969 398.48 114.199 398.465 114.488C398.457 114.77 398.445 115 398.43 115.18C398.43 115.539 398.449 115.883 398.488 116.211C398.527 116.531 398.598 116.867 398.699 117.219C398.809 117.57 398.977 117.855 399.203 118.074C399.43 118.293 399.703 118.418 400.023 118.449C400.508 118.449 400.906 118.113 401.219 117.441C401.539 116.77 401.699 116.09 401.699 115.402C401.699 112.605 401.109 111.191 399.93 111.16ZM403.117 117.535C403.328 117.535 403.504 117.629 403.645 117.816C403.793 117.996 403.867 118.203 403.867 118.438C403.867 118.609 403.824 118.75 403.738 118.859C403.66 118.961 403.551 119.012 403.41 119.012C403.191 119.012 403.016 118.922 402.883 118.742C402.758 118.562 402.695 118.352 402.695 118.109C402.695 117.938 402.73 117.801 402.801 117.699C402.879 117.59 402.984 117.535 403.117 117.535ZM404.582 115.098C404.59 113.41 404.809 112.195 405.238 111.453C405.668 110.703 406.32 110.305 407.195 110.258C407.578 110.258 407.918 110.363 408.215 110.574C408.512 110.785 408.746 111.055 408.918 111.383C409.098 111.703 409.246 112.09 409.363 112.543C409.48 112.988 409.559 113.414 409.598 113.82C409.645 114.219 409.676 114.645 409.691 115.098C409.691 115.715 409.598 116.348 409.41 116.996C409.23 117.637 408.949 118.199 408.566 118.684C408.191 119.16 407.77 119.398 407.301 119.398C405.488 119.398 404.582 117.965 404.582 115.098ZM407.031 111.16C406.844 111.199 406.676 111.262 406.527 111.348C406.379 111.434 406.254 111.531 406.152 111.641C406.059 111.75 405.977 111.895 405.906 112.074C405.836 112.254 405.781 112.422 405.742 112.578C405.711 112.727 405.68 112.922 405.648 113.164C405.625 113.406 405.609 113.617 405.602 113.797C405.594 113.969 405.582 114.199 405.566 114.488C405.559 114.77 405.547 115 405.531 115.18C405.531 115.539 405.551 115.883 405.59 116.211C405.629 116.531 405.699 116.867 405.801 117.219C405.91 117.57 406.078 117.855 406.305 118.074C406.531 118.293 406.805 118.418 407.125 118.449C407.609 118.449 408.008 118.113 408.32 117.441C408.641 116.77 408.801 116.09 408.801 115.402C408.801 112.605 408.211 111.191 407.031 111.16ZM410.781 119.223L410.594 118.695C412.414 117.922 413.496 116.875 413.84 115.555C413.512 115.766 413.195 115.871 412.891 115.871C412.219 115.871 411.656 115.57 411.203 114.969C410.758 114.359 410.535 113.582 410.535 112.637C410.535 111.965 410.738 111.434 411.145 111.043C411.551 110.645 412.07 110.445 412.703 110.445C413.305 110.445 413.828 110.664 414.273 111.102C414.727 111.531 414.953 112.105 414.953 112.824C414.953 113.277 414.941 113.672 414.918 114.008C414.902 114.344 414.859 114.711 414.789 115.109C414.727 115.508 414.637 115.859 414.52 116.164C414.402 116.461 414.238 116.773 414.027 117.102C413.824 117.422 413.578 117.703 413.289 117.945C413 118.188 412.645 118.422 412.223 118.648C411.801 118.867 411.32 119.059 410.781 119.223ZM414.109 113.152C414.109 112.504 413.984 112.02 413.734 111.699C413.492 111.371 413.191 111.207 412.832 111.207C412.449 111.207 412.117 111.336 411.836 111.594C411.555 111.852 411.414 112.207 411.414 112.66C411.414 113.348 411.57 113.922 411.883 114.383C412.195 114.844 412.578 115.074 413.031 115.074C413.234 115.074 413.406 115.039 413.547 114.969C413.688 114.891 413.793 114.805 413.863 114.711C413.934 114.617 413.988 114.473 414.027 114.277C414.066 114.074 414.09 113.906 414.098 113.773C414.105 113.633 414.109 113.426 414.109 113.152ZM420.883 116.645C420.883 117.496 420.676 118.129 420.262 118.543C419.848 118.949 419.215 119.152 418.363 119.152C416.723 119.152 415.902 118.301 415.902 116.598C415.902 115.988 416.027 115.453 416.277 114.992C416.527 114.531 416.871 114.266 417.309 114.195C416.863 114.188 416.527 114.023 416.301 113.703C416.074 113.383 415.961 112.984 415.961 112.508C415.961 111.773 416.16 111.195 416.559 110.773C416.965 110.352 417.539 110.141 418.281 110.141C419.062 110.141 419.676 110.336 420.121 110.727C420.566 111.117 420.789 111.719 420.789 112.531C420.789 113.008 420.676 113.406 420.449 113.727C420.223 114.047 419.887 114.211 419.441 114.219C419.895 114.289 420.246 114.559 420.496 115.027C420.754 115.496 420.883 116.035 420.883 116.645ZM418.492 118.309C418.93 118.309 419.293 118.141 419.582 117.805C419.871 117.461 420.016 117.055 420.016 116.586C420.016 116.117 419.855 115.715 419.535 115.379C419.215 115.035 418.785 114.859 418.246 114.852C417.777 114.992 417.426 115.215 417.191 115.52C416.957 115.816 416.84 116.152 416.84 116.527C416.84 116.996 416.996 117.41 417.309 117.77C417.621 118.129 418.016 118.309 418.492 118.309ZM418.492 110.785C417.969 110.824 417.57 110.996 417.297 111.301C417.023 111.605 416.887 111.957 416.887 112.355C416.887 112.762 417.016 113.113 417.273 113.41C417.539 113.707 417.891 113.855 418.328 113.855C418.836 113.848 419.223 113.711 419.488 113.445C419.754 113.172 419.887 112.844 419.887 112.461C419.887 112.078 419.758 111.723 419.5 111.395C419.25 111.066 418.914 110.863 418.492 110.785Z M398.48 323.098C398.488 321.41 398.707 320.195 399.137 319.453C399.566 318.703 400.219 318.305 401.094 318.258C401.477 318.258 401.816 318.363 402.113 318.574C402.41 318.785 402.645 319.055 402.816 319.383C402.996 319.703 403.145 320.09 403.262 320.543C403.379 320.988 403.457 321.414 403.496 321.82C403.543 322.219 403.574 322.645 403.59 323.098C403.59 323.715 403.496 324.348 403.309 324.996C403.129 325.637 402.848 326.199 402.465 326.684C402.09 327.16 401.668 327.398 401.199 327.398C399.387 327.398 398.48 325.965 398.48 323.098ZM400.93 319.16C400.742 319.199 400.574 319.262 400.426 319.348C400.277 319.434 400.152 319.531 400.051 319.641C399.957 319.75 399.875 319.895 399.805 320.074C399.734 320.254 399.68 320.422 399.641 320.578C399.609 320.727 399.578 320.922 399.547 321.164C399.523 321.406 399.508 321.617 399.5 321.797C399.492 321.969 399.48 322.199 399.465 322.488C399.457 322.77 399.445 323 399.43 323.18C399.43 323.539 399.449 323.883 399.488 324.211C399.527 324.531 399.598 324.867 399.699 325.219C399.809 325.57 399.977 325.855 400.203 326.074C400.43 326.293 400.703 326.418 401.023 326.449C401.508 326.449 401.906 326.113 402.219 325.441C402.539 324.77 402.699 324.09 402.699 323.402C402.699 320.605 402.109 319.191 400.93 319.16ZM404.117 325.535C404.328 325.535 404.504 325.629 404.645 325.816C404.793 325.996 404.867 326.203 404.867 326.438C404.867 326.609 404.824 326.75 404.738 326.859C404.66 326.961 404.551 327.012 404.41 327.012C404.191 327.012 404.016 326.922 403.883 326.742C403.758 326.562 403.695 326.352 403.695 326.109C403.695 325.938 403.73 325.801 403.801 325.699C403.879 325.59 403.984 325.535 404.117 325.535ZM405.582 323.098C405.59 321.41 405.809 320.195 406.238 319.453C406.668 318.703 407.32 318.305 408.195 318.258C408.578 318.258 408.918 318.363 409.215 318.574C409.512 318.785 409.746 319.055 409.918 319.383C410.098 319.703 410.246 320.09 410.363 320.543C410.48 320.988 410.559 321.414 410.598 321.82C410.645 322.219 410.676 322.645 410.691 323.098C410.691 323.715 410.598 324.348 410.41 324.996C410.23 325.637 409.949 326.199 409.566 326.684C409.191 327.16 408.77 327.398 408.301 327.398C406.488 327.398 405.582 325.965 405.582 323.098ZM408.031 319.16C407.844 319.199 407.676 319.262 407.527 319.348C407.379 319.434 407.254 319.531 407.152 319.641C407.059 319.75 406.977 319.895 406.906 320.074C406.836 320.254 406.781 320.422 406.742 320.578C406.711 320.727 406.68 320.922 406.648 321.164C406.625 321.406 406.609 321.617 406.602 321.797C406.594 321.969 406.582 322.199 406.566 322.488C406.559 322.77 406.547 323 406.531 323.18C406.531 323.539 406.551 323.883 406.59 324.211C406.629 324.531 406.699 324.867 406.801 325.219C406.91 325.57 407.078 325.855 407.305 326.074C407.531 326.293 407.805 326.418 408.125 326.449C408.609 326.449 409.008 326.113 409.32 325.441C409.641 324.77 409.801 324.09 409.801 323.402C409.801 320.605 409.211 319.191 408.031 319.16ZM411.652 323.098C411.66 321.41 411.879 320.195 412.309 319.453C412.738 318.703 413.391 318.305 414.266 318.258C414.648 318.258 414.988 318.363 415.285 318.574C415.582 318.785 415.816 319.055 415.988 319.383C416.168 319.703 416.316 320.09 416.434 320.543C416.551 320.988 416.629 321.414 416.668 321.82C416.715 322.219 416.746 322.645 416.762 323.098C416.762 323.715 416.668 324.348 416.48 324.996C416.301 325.637 416.02 326.199 415.637 326.684C415.262 327.16 414.84 327.398 414.371 327.398C412.559 327.398 411.652 325.965 411.652 323.098ZM414.102 319.16C413.914 319.199 413.746 319.262 413.598 319.348C413.449 319.434 413.324 319.531 413.223 319.641C413.129 319.75 413.047 319.895 412.977 320.074C412.906 320.254 412.852 320.422 412.812 320.578C412.781 320.727 412.75 320.922 412.719 321.164C412.695 321.406 412.68 321.617 412.672 321.797C412.664 321.969 412.652 322.199 412.637 322.488C412.629 322.77 412.617 323 412.602 323.18C412.602 323.539 412.621 323.883 412.66 324.211C412.699 324.531 412.77 324.867 412.871 325.219C412.98 325.57 413.148 325.855 413.375 326.074C413.602 326.293 413.875 326.418 414.195 326.449C414.68 326.449 415.078 326.113 415.391 325.441C415.711 324.77 415.871 324.09 415.871 323.402C415.871 320.605 415.281 319.191 414.102 319.16ZM421.637 326.191L422 326.965C421.414 326.98 420.496 326.992 419.246 327C417.996 327 417.332 327 417.254 327C417.254 326.938 417.25 326.828 417.242 326.672C417.242 326.516 417.242 326.391 417.242 326.297C417.391 326.039 417.637 325.73 417.98 325.371C418.324 325.004 418.668 324.648 419.012 324.305C419.355 323.953 419.691 323.57 420.02 323.156C420.355 322.742 420.629 322.281 420.84 321.773C421.051 321.258 421.156 320.73 421.156 320.191C421.156 319.848 421.035 319.57 420.793 319.359C420.551 319.141 420.258 319.031 419.914 319.031C419.516 319.031 419.145 319.195 418.801 319.523C418.465 319.844 418.23 320.336 418.098 321L417.57 320.812C417.602 320.055 417.848 319.465 418.309 319.043C418.777 318.621 419.316 318.41 419.926 318.41C420.473 318.41 420.941 318.582 421.332 318.926C421.723 319.27 421.918 319.75 421.918 320.367C421.918 320.875 421.84 321.371 421.684 321.855C421.527 322.332 421.301 322.781 421.004 323.203C420.707 323.625 420.43 323.988 420.172 324.293C419.914 324.59 419.59 324.938 419.199 325.336C418.816 325.727 418.547 326.008 418.391 326.18C418.656 326.195 418.883 326.203 419.07 326.203C419.266 326.203 419.57 326.199 419.984 326.191C420.398 326.176 420.707 326.168 420.91 326.168C421.098 326.168 421.34 326.176 421.637 326.191Z M400.48 245.098C400.488 243.41 400.707 242.195 401.137 241.453C401.566 240.703 402.219 240.305 403.094 240.258C403.477 240.258 403.816 240.363 404.113 240.574C404.41 240.785 404.645 241.055 404.816 241.383C404.996 241.703 405.145 242.09 405.262 242.543C405.379 242.988 405.457 243.414 405.496 243.82C405.543 244.219 405.574 244.645 405.59 245.098C405.59 245.715 405.496 246.348 405.309 246.996C405.129 247.637 404.848 248.199 404.465 248.684C404.09 249.16 403.668 249.398 403.199 249.398C401.387 249.398 400.48 247.965 400.48 245.098ZM402.93 241.16C402.742 241.199 402.574 241.262 402.426 241.348C402.277 241.434 402.152 241.531 402.051 241.641C401.957 241.75 401.875 241.895 401.805 242.074C401.734 242.254 401.68 242.422 401.641 242.578C401.609 242.727 401.578 242.922 401.547 243.164C401.523 243.406 401.508 243.617 401.5 243.797C401.492 243.969 401.48 244.199 401.465 244.488C401.457 244.77 401.445 245 401.43 245.18C401.43 245.539 401.449 245.883 401.488 246.211C401.527 246.531 401.598 246.867 401.699 247.219C401.809 247.57 401.977 247.855 402.203 248.074C402.43 248.293 402.703 248.418 403.023 248.449C403.508 248.449 403.906 248.113 404.219 247.441C404.539 246.77 404.699 246.09 404.699 245.402C404.699 242.605 404.109 241.191 402.93 241.16ZM406.117 247.535C406.328 247.535 406.504 247.629 406.645 247.816C406.793 247.996 406.867 248.203 406.867 248.438C406.867 248.609 406.824 248.75 406.738 248.859C406.66 248.961 406.551 249.012 406.41 249.012C406.191 249.012 406.016 248.922 405.883 248.742C405.758 248.562 405.695 248.352 405.695 248.109C405.695 247.938 405.73 247.801 405.801 247.699C405.879 247.59 405.984 247.535 406.117 247.535ZM407.582 245.098C407.59 243.41 407.809 242.195 408.238 241.453C408.668 240.703 409.32 240.305 410.195 240.258C410.578 240.258 410.918 240.363 411.215 240.574C411.512 240.785 411.746 241.055 411.918 241.383C412.098 241.703 412.246 242.09 412.363 242.543C412.48 242.988 412.559 243.414 412.598 243.82C412.645 244.219 412.676 244.645 412.691 245.098C412.691 245.715 412.598 246.348 412.41 246.996C412.23 247.637 411.949 248.199 411.566 248.684C411.191 249.16 410.77 249.398 410.301 249.398C408.488 249.398 407.582 247.965 407.582 245.098ZM410.031 241.16C409.844 241.199 409.676 241.262 409.527 241.348C409.379 241.434 409.254 241.531 409.152 241.641C409.059 241.75 408.977 241.895 408.906 242.074C408.836 242.254 408.781 242.422 408.742 242.578C408.711 242.727 408.68 242.922 408.648 243.164C408.625 243.406 408.609 243.617 408.602 243.797C408.594 243.969 408.582 244.199 408.566 244.488C408.559 244.77 408.547 245 408.531 245.18C408.531 245.539 408.551 245.883 408.59 246.211C408.629 246.531 408.699 246.867 408.801 247.219C408.91 247.57 409.078 247.855 409.305 248.074C409.531 248.293 409.805 248.418 410.125 248.449C410.609 248.449 411.008 248.113 411.32 247.441C411.641 246.77 411.801 246.09 411.801 245.402C411.801 242.605 411.211 241.191 410.031 241.16ZM413.992 249.094L413.078 248.824L416.242 241.066C414.422 241.012 413.188 240.957 412.539 240.902L412.422 240.375C412.969 240.312 413.797 240.281 414.906 240.281C416.016 240.273 416.781 240.254 417.203 240.223L417.145 241.242L413.992 249.094ZM417.742 248.965V248.344C417.93 248.32 418.16 248.281 418.434 248.227C418.715 248.172 418.934 248.133 419.09 248.109C419.113 247.547 419.125 246.98 419.125 246.41C419.125 246.051 419.121 245.512 419.113 244.793C419.105 244.066 419.102 243.52 419.102 243.152C419.102 242.285 419.113 241.629 419.137 241.184C418.426 241.59 417.906 241.918 417.578 242.168L417.203 241.781C417.328 241.68 417.543 241.504 417.848 241.254C418.152 240.996 418.426 240.766 418.668 240.562C418.91 240.352 419.098 240.18 419.23 240.047C419.355 240.062 419.484 240.074 419.617 240.082C419.75 240.082 419.879 240.09 420.004 240.105C420.051 241.012 420.074 242.672 420.074 245.086C420.074 246.523 420.086 247.555 420.109 248.18C420.18 248.188 420.348 248.219 420.613 248.273C420.887 248.32 421.098 248.352 421.246 248.367L421.434 248.988C421.043 248.988 420.703 248.988 420.414 248.988C420.125 248.988 419.738 248.988 419.254 248.988C418.777 248.988 418.402 248.988 418.129 248.988C417.863 248.98 417.734 248.973 417.742 248.965Z M399.48 167.098C399.488 165.41 399.707 164.195 400.137 163.453C400.566 162.703 401.219 162.305 402.094 162.258C402.477 162.258 402.816 162.363 403.113 162.574C403.41 162.785 403.645 163.055 403.816 163.383C403.996 163.703 404.145 164.09 404.262 164.543C404.379 164.988 404.457 165.414 404.496 165.82C404.543 166.219 404.574 166.645 404.59 167.098C404.59 167.715 404.496 168.348 404.309 168.996C404.129 169.637 403.848 170.199 403.465 170.684C403.09 171.16 402.668 171.398 402.199 171.398C400.387 171.398 399.48 169.965 399.48 167.098ZM401.93 163.16C401.742 163.199 401.574 163.262 401.426 163.348C401.277 163.434 401.152 163.531 401.051 163.641C400.957 163.75 400.875 163.895 400.805 164.074C400.734 164.254 400.68 164.422 400.641 164.578C400.609 164.727 400.578 164.922 400.547 165.164C400.523 165.406 400.508 165.617 400.5 165.797C400.492 165.969 400.48 166.199 400.465 166.488C400.457 166.77 400.445 167 400.43 167.18C400.43 167.539 400.449 167.883 400.488 168.211C400.527 168.531 400.598 168.867 400.699 169.219C400.809 169.57 400.977 169.855 401.203 170.074C401.43 170.293 401.703 170.418 402.023 170.449C402.508 170.449 402.906 170.113 403.219 169.441C403.539 168.77 403.699 168.09 403.699 167.402C403.699 164.605 403.109 163.191 401.93 163.16ZM405.117 169.535C405.328 169.535 405.504 169.629 405.645 169.816C405.793 169.996 405.867 170.203 405.867 170.438C405.867 170.609 405.824 170.75 405.738 170.859C405.66 170.961 405.551 171.012 405.41 171.012C405.191 171.012 405.016 170.922 404.883 170.742C404.758 170.562 404.695 170.352 404.695 170.109C404.695 169.938 404.73 169.801 404.801 169.699C404.879 169.59 404.984 169.535 405.117 169.535ZM406.582 167.098C406.59 165.41 406.809 164.195 407.238 163.453C407.668 162.703 408.32 162.305 409.195 162.258C409.578 162.258 409.918 162.363 410.215 162.574C410.512 162.785 410.746 163.055 410.918 163.383C411.098 163.703 411.246 164.09 411.363 164.543C411.48 164.988 411.559 165.414 411.598 165.82C411.645 166.219 411.676 166.645 411.691 167.098C411.691 167.715 411.598 168.348 411.41 168.996C411.23 169.637 410.949 170.199 410.566 170.684C410.191 171.16 409.77 171.398 409.301 171.398C407.488 171.398 406.582 169.965 406.582 167.098ZM409.031 163.16C408.844 163.199 408.676 163.262 408.527 163.348C408.379 163.434 408.254 163.531 408.152 163.641C408.059 163.75 407.977 163.895 407.906 164.074C407.836 164.254 407.781 164.422 407.742 164.578C407.711 164.727 407.68 164.922 407.648 165.164C407.625 165.406 407.609 165.617 407.602 165.797C407.594 165.969 407.582 166.199 407.566 166.488C407.559 166.77 407.547 167 407.531 167.18C407.531 167.539 407.551 167.883 407.59 168.211C407.629 168.531 407.699 168.867 407.801 169.219C407.91 169.57 408.078 169.855 408.305 170.074C408.531 170.293 408.805 170.418 409.125 170.449C409.609 170.449 410.008 170.113 410.32 169.441C410.641 168.77 410.801 168.09 410.801 167.402C410.801 164.605 410.211 163.191 409.031 163.16ZM412.992 171.094L412.078 170.824L415.242 163.066C413.422 163.012 412.188 162.957 411.539 162.902L411.422 162.375C411.969 162.312 412.797 162.281 413.906 162.281C415.016 162.273 415.781 162.254 416.203 162.223L416.145 163.242L412.992 171.094ZM420.855 162.68L420.984 163.207C420.602 163.277 420.164 163.312 419.672 163.312C418.938 163.312 418.469 163.324 418.266 163.348C418.148 164.246 417.996 165.199 417.809 166.207C418.035 166.16 418.254 166.137 418.465 166.137C419.152 166.137 419.762 166.41 420.293 166.957C420.824 167.496 421.09 168.121 421.09 168.832C421.09 169.504 420.828 170.078 420.305 170.555C419.781 171.031 419.137 171.27 418.371 171.27C417.629 171.27 416.906 171.023 416.203 170.531C416.211 170.523 416.27 170.398 416.379 170.156C416.496 169.914 416.609 169.793 416.719 169.793C416.773 169.793 416.824 169.812 416.871 169.852C417.41 170.258 417.918 170.461 418.395 170.461C418.879 170.461 419.277 170.27 419.59 169.887C419.902 169.504 420.059 169.074 420.059 168.598C420.059 168.152 419.91 167.773 419.613 167.461C419.324 167.148 418.898 166.992 418.336 166.992C418.133 166.992 417.941 167.008 417.762 167.039C417.605 166.953 417.434 166.867 417.246 166.781C417.059 166.695 416.902 166.621 416.777 166.559C416.957 165.855 417.105 165.152 417.223 164.449C417.34 163.746 417.496 163.117 417.691 162.562C417.965 162.586 418.469 162.598 419.203 162.598C419.938 162.598 420.488 162.625 420.855 162.68Z M398.48 219.098C398.488 217.41 398.707 216.195 399.137 215.453C399.566 214.703 400.219 214.305 401.094 214.258C401.477 214.258 401.816 214.363 402.113 214.574C402.41 214.785 402.645 215.055 402.816 215.383C402.996 215.703 403.145 216.09 403.262 216.543C403.379 216.988 403.457 217.414 403.496 217.82C403.543 218.219 403.574 218.645 403.59 219.098C403.59 219.715 403.496 220.348 403.309 220.996C403.129 221.637 402.848 222.199 402.465 222.684C402.09 223.16 401.668 223.398 401.199 223.398C399.387 223.398 398.48 221.965 398.48 219.098ZM400.93 215.16C400.742 215.199 400.574 215.262 400.426 215.348C400.277 215.434 400.152 215.531 400.051 215.641C399.957 215.75 399.875 215.895 399.805 216.074C399.734 216.254 399.68 216.422 399.641 216.578C399.609 216.727 399.578 216.922 399.547 217.164C399.523 217.406 399.508 217.617 399.5 217.797C399.492 217.969 399.48 218.199 399.465 218.488C399.457 218.77 399.445 219 399.43 219.18C399.43 219.539 399.449 219.883 399.488 220.211C399.527 220.531 399.598 220.867 399.699 221.219C399.809 221.57 399.977 221.855 400.203 222.074C400.43 222.293 400.703 222.418 401.023 222.449C401.508 222.449 401.906 222.113 402.219 221.441C402.539 220.77 402.699 220.09 402.699 219.402C402.699 216.605 402.109 215.191 400.93 215.16ZM404.117 221.535C404.328 221.535 404.504 221.629 404.645 221.816C404.793 221.996 404.867 222.203 404.867 222.438C404.867 222.609 404.824 222.75 404.738 222.859C404.66 222.961 404.551 223.012 404.41 223.012C404.191 223.012 404.016 222.922 403.883 222.742C403.758 222.562 403.695 222.352 403.695 222.109C403.695 221.938 403.73 221.801 403.801 221.699C403.879 221.59 403.984 221.535 404.117 221.535ZM405.582 219.098C405.59 217.41 405.809 216.195 406.238 215.453C406.668 214.703 407.32 214.305 408.195 214.258C408.578 214.258 408.918 214.363 409.215 214.574C409.512 214.785 409.746 215.055 409.918 215.383C410.098 215.703 410.246 216.09 410.363 216.543C410.48 216.988 410.559 217.414 410.598 217.82C410.645 218.219 410.676 218.645 410.691 219.098C410.691 219.715 410.598 220.348 410.41 220.996C410.23 221.637 409.949 222.199 409.566 222.684C409.191 223.16 408.77 223.398 408.301 223.398C406.488 223.398 405.582 221.965 405.582 219.098ZM408.031 215.16C407.844 215.199 407.676 215.262 407.527 215.348C407.379 215.434 407.254 215.531 407.152 215.641C407.059 215.75 406.977 215.895 406.906 216.074C406.836 216.254 406.781 216.422 406.742 216.578C406.711 216.727 406.68 216.922 406.648 217.164C406.625 217.406 406.609 217.617 406.602 217.797C406.594 217.969 406.582 218.199 406.566 218.488C406.559 218.77 406.547 219 406.531 219.18C406.531 219.539 406.551 219.883 406.59 220.211C406.629 220.531 406.699 220.867 406.801 221.219C406.91 221.57 407.078 221.855 407.305 222.074C407.531 222.293 407.805 222.418 408.125 222.449C408.609 222.449 409.008 222.113 409.32 221.441C409.641 220.77 409.801 220.09 409.801 219.402C409.801 216.605 409.211 215.191 408.031 215.16ZM415.812 214.516L416.012 215.043C414.184 215.824 413.098 216.871 412.754 218.184C413.066 217.98 413.383 217.879 413.703 217.879C414.375 217.879 414.938 218.184 415.391 218.793C415.844 219.395 416.07 220.164 416.07 221.102C416.07 221.773 415.863 222.309 415.449 222.707C415.043 223.105 414.523 223.305 413.891 223.305C413.297 223.305 412.773 223.09 412.32 222.66C411.875 222.223 411.652 221.645 411.652 220.926C411.652 220.473 411.66 220.078 411.676 219.742C411.699 219.406 411.742 219.039 411.805 218.641C411.875 218.234 411.969 217.883 412.086 217.586C412.203 217.289 412.363 216.98 412.566 216.66C412.777 216.332 413.027 216.047 413.316 215.805C413.605 215.555 413.957 215.32 414.371 215.102C414.793 214.875 415.273 214.68 415.812 214.516ZM412.496 220.586C412.496 221.234 412.617 221.723 412.859 222.051C413.102 222.371 413.402 222.531 413.762 222.531C414.145 222.531 414.477 222.402 414.758 222.145C415.039 221.887 415.18 221.531 415.18 221.078C415.18 220.391 415.023 219.816 414.711 219.355C414.398 218.895 414.02 218.664 413.574 218.664C413.371 218.664 413.199 218.703 413.059 218.781C412.918 218.852 412.812 218.934 412.742 219.027C412.672 219.121 412.617 219.27 412.578 219.473C412.539 219.668 412.516 219.836 412.508 219.977C412.5 220.109 412.496 220.312 412.496 220.586ZM421.191 214.68L421.32 215.207C420.938 215.277 420.5 215.312 420.008 215.312C419.273 215.312 418.805 215.324 418.602 215.348C418.484 216.246 418.332 217.199 418.145 218.207C418.371 218.16 418.59 218.137 418.801 218.137C419.488 218.137 420.098 218.41 420.629 218.957C421.16 219.496 421.426 220.121 421.426 220.832C421.426 221.504 421.164 222.078 420.641 222.555C420.117 223.031 419.473 223.27 418.707 223.27C417.965 223.27 417.242 223.023 416.539 222.531C416.547 222.523 416.605 222.398 416.715 222.156C416.832 221.914 416.945 221.793 417.055 221.793C417.109 221.793 417.16 221.812 417.207 221.852C417.746 222.258 418.254 222.461 418.73 222.461C419.215 222.461 419.613 222.27 419.926 221.887C420.238 221.504 420.395 221.074 420.395 220.598C420.395 220.152 420.246 219.773 419.949 219.461C419.66 219.148 419.234 218.992 418.672 218.992C418.469 218.992 418.277 219.008 418.098 219.039C417.941 218.953 417.77 218.867 417.582 218.781C417.395 218.695 417.238 218.621 417.113 218.559C417.293 217.855 417.441 217.152 417.559 216.449C417.676 215.746 417.832 215.117 418.027 214.562C418.301 214.586 418.805 214.598 419.539 214.598C420.273 214.598 420.824 214.625 421.191 214.68Z M411.312 347.07C411.734 347.07 412.086 347.258 412.367 347.633C412.664 347.992 412.812 348.406 412.812 348.875C412.812 349.219 412.727 349.5 412.555 349.719C412.398 349.922 412.18 350.023 411.898 350.023C411.461 350.023 411.109 349.844 410.844 349.484C410.594 349.125 410.469 348.703 410.469 348.219C410.469 347.875 410.539 347.602 410.68 347.398C410.836 347.18 411.047 347.07 411.312 347.07Z M411.312 357.07C411.734 357.07 412.086 357.258 412.367 357.633C412.664 357.992 412.812 358.406 412.812 358.875C412.812 359.219 412.727 359.5 412.555 359.719C412.398 359.922 412.18 360.023 411.898 360.023C411.461 360.023 411.109 359.844 410.844 359.484C410.594 359.125 410.469 358.703 410.469 358.219C410.469 357.875 410.539 357.602 410.68 357.398C410.836 357.18 411.047 357.07 411.312 357.07Z M411.312 367.07C411.734 367.07 412.086 367.258 412.367 367.633C412.664 367.992 412.812 368.406 412.812 368.875C412.812 369.219 412.727 369.5 412.555 369.719C412.398 369.922 412.18 370.023 411.898 370.023C411.461 370.023 411.109 369.844 410.844 369.484C410.594 369.125 410.469 368.703 410.469 368.219C410.469 367.875 410.539 367.602 410.68 367.398C410.836 367.18 411.047 367.07 411.312 367.07Z';

  var dataset08Sulfur = 'M474.364 27.112C474.396 27.2187 474.412 27.3253 474.412 27.432C474.412 27.6453 474.327 27.7893 474.156 27.864C474.177 28.024 474.113 28.184 473.964 28.344C473.815 28.504 473.676 28.584 473.548 28.584C473.495 28.68 473.335 28.7707 473.068 28.856C472.801 28.9413 472.556 28.984 472.332 28.984C472.172 28.984 472.049 28.952 471.964 28.888C471.815 28.9627 471.601 29 471.324 29C471.079 29 470.855 28.9627 470.652 28.888C470.46 28.8133 470.343 28.7013 470.3 28.552C470.087 28.584 469.847 28.52 469.58 28.36C469.324 28.2 469.159 28.0347 469.084 27.864C468.892 27.8107 468.732 27.7093 468.604 27.56C468.487 27.4107 468.423 27.2347 468.412 27.032C468.348 26.936 468.316 26.84 468.316 26.744C468.316 26.5947 468.364 26.4613 468.46 26.344C468.567 26.2267 468.689 26.168 468.828 26.168C468.967 26.168 469.1 26.2533 469.228 26.424C469.42 26.4027 469.591 26.4667 469.74 26.616C469.9 26.7653 469.98 26.9147 469.98 27.064C470.012 27.064 470.092 27.0747 470.22 27.096C470.359 27.1067 470.481 27.144 470.588 27.208C470.695 27.272 470.769 27.3627 470.812 27.48C471.004 27.48 471.191 27.5067 471.372 27.56C471.564 27.6027 471.676 27.656 471.708 27.72C471.793 27.6667 471.916 27.624 472.076 27.592C472.247 27.5493 472.391 27.528 472.508 27.528C472.54 27.4853 472.62 27.4427 472.748 27.4C472.876 27.3573 472.983 27.3307 473.068 27.32C473.015 27.2453 472.988 27.1333 472.988 26.984C472.988 26.76 473.057 26.6 473.196 26.504C473.068 26.4613 472.967 26.3973 472.892 26.312C472.817 26.216 472.785 26.1093 472.796 25.992C472.711 26.0133 472.647 26.024 472.604 26.024C472.401 26.024 472.236 25.944 472.108 25.784C471.895 25.8053 471.681 25.7573 471.468 25.64C471.265 25.5227 471.116 25.368 471.02 25.176C470.945 25.208 470.865 25.224 470.78 25.224C470.599 25.224 470.407 25.1707 470.204 25.064C470.012 24.9467 469.889 24.8347 469.836 24.728C469.687 24.7707 469.511 24.7227 469.308 24.584C469.105 24.4453 469.004 24.2907 469.004 24.12C468.876 24.056 468.775 23.9493 468.7 23.8C468.625 23.64 468.588 23.496 468.588 23.368C468.588 23.272 468.609 23.208 468.652 23.176C468.599 23.0693 468.572 22.9627 468.572 22.856C468.572 22.664 468.636 22.4987 468.764 22.36C468.732 22.2427 468.716 22.136 468.716 22.04C468.716 21.8587 468.753 21.7093 468.828 21.592C468.913 21.464 469.015 21.4107 469.132 21.432C469.111 21.2613 469.148 21.112 469.244 20.984C469.351 20.856 469.479 20.7653 469.628 20.712C469.788 20.648 469.927 20.6267 470.044 20.648C470.108 20.552 470.193 20.4773 470.3 20.424C470.407 20.3707 470.513 20.344 470.62 20.344C470.801 20.344 470.929 20.3973 471.004 20.504C471.015 20.4507 471.052 20.408 471.116 20.376C471.191 20.344 471.276 20.328 471.372 20.328C471.457 20.328 471.543 20.344 471.628 20.376C471.713 20.408 471.777 20.4453 471.82 20.488C471.884 20.424 471.996 20.392 472.156 20.392C472.284 20.392 472.412 20.4187 472.54 20.472C472.668 20.5147 472.753 20.5787 472.796 20.664C472.86 20.632 472.929 20.616 473.004 20.616C473.132 20.616 473.249 20.664 473.356 20.76C473.473 20.8453 473.553 20.9573 473.596 21.096C473.756 21.0747 473.921 21.128 474.092 21.256C474.263 21.384 474.327 21.512 474.284 21.64C474.572 21.8 474.716 22.0187 474.716 22.296C474.716 22.4667 474.657 22.616 474.54 22.744C474.423 22.872 474.273 22.936 474.092 22.936C473.932 22.9253 473.799 22.8827 473.692 22.808C473.585 22.7333 473.521 22.6427 473.5 22.536C473.361 22.5147 473.228 22.4613 473.1 22.376C472.983 22.28 472.919 22.1573 472.908 22.008C472.705 22.0293 472.551 22.008 472.444 21.944C472.348 21.88 472.263 21.7787 472.188 21.64C472.113 21.6933 472.017 21.72 471.9 21.72C471.783 21.72 471.655 21.688 471.516 21.624C471.441 21.688 471.345 21.7413 471.228 21.784C471.121 21.8267 471.015 21.848 470.908 21.848C470.791 21.848 470.689 21.8213 470.604 21.768C470.625 21.896 470.593 21.9973 470.508 22.072C470.423 22.1467 470.305 22.1733 470.156 22.152C470.188 22.2267 470.204 22.3067 470.204 22.392C470.204 22.584 470.119 22.744 469.948 22.872C470.065 22.9253 470.151 23.016 470.204 23.144C470.257 23.2613 470.279 23.3787 470.268 23.496L470.396 23.48C470.716 23.48 470.919 23.5813 471.004 23.784L471.132 23.768C471.303 23.768 471.463 23.8107 471.612 23.896C471.772 23.9813 471.889 24.1253 471.964 24.328C472.135 24.3173 472.3 24.3387 472.46 24.392C472.62 24.4347 472.732 24.52 472.796 24.648C472.881 24.616 472.961 24.6 473.036 24.6C473.217 24.6 473.377 24.6533 473.516 24.76C473.665 24.8667 473.745 24.9893 473.756 25.128C473.852 25.128 473.937 25.1813 474.012 25.288C474.097 25.3947 474.129 25.5173 474.108 25.656C474.183 25.6453 474.252 25.688 474.316 25.784C474.38 25.8693 474.412 25.9707 474.412 26.088C474.412 26.152 474.396 26.2107 474.364 26.264C474.513 26.3707 474.588 26.5147 474.588 26.696C474.588 26.792 474.567 26.8773 474.524 26.952C474.492 27.0267 474.439 27.08 474.364 27.112ZM478.392 28.728C478.274 28.7707 478.162 28.792 478.056 28.792C477.906 28.792 477.784 28.7387 477.688 28.632C477.57 28.6427 477.437 28.5947 477.288 28.488C477.149 28.3707 477.064 28.2587 477.032 28.152C476.904 28.12 476.786 28.0507 476.68 27.944C476.584 27.8267 476.52 27.6827 476.488 27.512C476.36 27.48 476.253 27.3947 476.168 27.256C476.093 27.1067 476.056 26.936 476.056 26.744C476.056 26.6267 476.072 26.5147 476.104 26.408C476.029 26.2907 476.002 26.1413 476.024 25.96C475.874 25.832 475.8 25.6827 475.8 25.512C475.8 25.4267 475.816 25.3467 475.848 25.272C475.784 25.176 475.752 25.064 475.752 24.936C475.752 24.776 475.8 24.632 475.896 24.504C475.746 24.376 475.672 24.216 475.672 24.024C475.672 23.9067 475.704 23.8053 475.768 23.72C475.672 23.5813 475.624 23.416 475.624 23.224C475.624 23.0747 475.656 22.9627 475.72 22.888C475.613 22.8027 475.56 22.6747 475.56 22.504C475.56 22.3973 475.592 22.28 475.656 22.152C475.602 22.0667 475.576 21.944 475.576 21.784C475.576 21.5493 475.64 21.368 475.768 21.24C475.736 21.144 475.72 21.0533 475.72 20.968C475.72 20.776 475.784 20.6267 475.912 20.52C476.05 20.4027 476.21 20.344 476.392 20.344C476.573 20.344 476.728 20.4027 476.856 20.52C476.994 20.6373 477.064 20.808 477.064 21.032C477.064 21.2027 477.026 21.384 476.952 21.576C477.101 21.704 477.176 21.8693 477.176 22.072C477.176 22.2213 477.128 22.3547 477.032 22.472C477.096 22.5893 477.128 22.744 477.128 22.936C477.128 23.1387 477.096 23.304 477.032 23.432C477.128 23.56 477.176 23.7573 477.176 24.024C477.176 24.2053 477.165 24.328 477.144 24.392C477.229 24.488 477.272 24.6107 477.272 24.76C477.272 24.8453 477.25 24.9413 477.208 25.048C477.314 25.1653 477.368 25.3253 477.368 25.528C477.368 25.592 477.357 25.656 477.336 25.72C477.378 25.752 477.416 25.8107 477.448 25.896C477.48 25.9707 477.496 26.0507 477.496 26.136C477.496 26.2427 477.469 26.3333 477.416 26.408C477.501 26.4187 477.56 26.4773 477.592 26.584C477.624 26.68 477.629 26.776 477.608 26.872H477.624C477.698 26.872 477.762 26.9147 477.816 27C477.88 27.0747 477.901 27.144 477.88 27.208C477.912 27.1867 477.96 27.176 478.024 27.176C478.109 27.176 478.184 27.1973 478.248 27.24C478.322 27.272 478.376 27.3147 478.408 27.368C478.621 27.2507 478.824 27.192 479.016 27.192C479.112 27.192 479.197 27.208 479.272 27.24C479.368 27.1653 479.49 27.1013 479.64 27.048C479.8 26.984 479.938 26.952 480.056 26.952C480.109 26.952 480.157 26.9627 480.2 26.984C480.125 26.8667 480.088 26.7173 480.088 26.536C480.088 26.3333 480.152 26.2053 480.28 26.152C480.205 26.0667 480.168 25.8853 480.168 25.608C480.168 25.2773 480.237 25.0427 480.376 24.904C480.28 24.744 480.232 24.568 480.232 24.376C480.232 24.2053 480.264 24.088 480.328 24.024C480.264 23.9387 480.232 23.832 480.232 23.704C480.232 23.576 480.253 23.4427 480.296 23.304C480.349 23.1547 480.413 23.0373 480.488 22.952C480.349 22.856 480.28 22.648 480.28 22.328C480.28 22.1253 480.296 21.96 480.328 21.832C480.232 21.6187 480.184 21.4373 480.184 21.288C480.184 21.096 480.248 20.9413 480.376 20.824C480.504 20.7067 480.653 20.648 480.824 20.648C481.026 20.648 481.197 20.728 481.336 20.888C481.485 21.048 481.554 21.2773 481.544 21.576C481.597 21.6293 481.64 21.7147 481.672 21.832C481.714 21.9387 481.736 22.0507 481.736 22.168C481.736 22.4027 481.677 22.568 481.56 22.664C481.752 22.8987 481.848 23.128 481.848 23.352C481.848 23.5013 481.805 23.624 481.72 23.72C481.805 23.8373 481.848 23.9653 481.848 24.104C481.848 24.2427 481.81 24.3867 481.736 24.536C481.8 24.632 481.832 24.7387 481.832 24.856C481.832 25.048 481.752 25.2133 481.592 25.352C481.698 25.4693 481.752 25.608 481.752 25.768C481.752 25.9387 481.682 26.1307 481.544 26.344C481.65 26.408 481.704 26.5413 481.704 26.744C481.704 26.9467 481.661 27.1547 481.576 27.368C481.661 27.4853 481.704 27.64 481.704 27.832C481.704 27.9493 481.682 28.0453 481.64 28.12C481.661 28.2267 481.672 28.3067 481.672 28.36C481.672 28.5627 481.608 28.7227 481.48 28.84C481.362 28.9467 481.218 29 481.048 29C480.898 29 480.765 28.952 480.648 28.856C480.53 28.7493 480.461 28.6 480.44 28.408C480.429 28.3973 480.413 28.3813 480.392 28.36C480.381 28.328 480.37 28.3013 480.36 28.28C480.178 28.3867 480.013 28.44 479.864 28.44C479.81 28.44 479.768 28.4347 479.736 28.424C479.597 28.52 479.464 28.568 479.336 28.568C479.229 28.568 479.128 28.5467 479.032 28.504C478.989 28.5787 478.92 28.6373 478.824 28.68C478.738 28.7227 478.642 28.744 478.536 28.744C478.472 28.744 478.424 28.7387 478.392 28.728ZM485.351 27C485.457 27.1173 485.511 27.2987 485.511 27.544C485.511 27.704 485.484 27.8587 485.431 28.008C485.388 28.1467 485.329 28.248 485.255 28.312C485.287 28.5147 485.233 28.68 485.095 28.808C484.956 28.936 484.791 29 484.599 29C484.471 29 484.348 28.968 484.231 28.904C484.113 28.84 484.028 28.7333 483.975 28.584C483.921 28.4347 483.895 28.2747 483.895 28.104C483.895 27.8693 483.932 27.6827 484.007 27.544C483.953 27.448 483.927 27.3093 483.927 27.128C483.927 26.9253 483.959 26.7173 484.023 26.504C483.948 26.4187 483.911 26.264 483.911 26.04C483.911 25.752 483.953 25.5387 484.039 25.4C483.975 25.2507 483.943 25.1067 483.943 24.968C483.943 24.776 483.991 24.584 484.087 24.392C484.001 24.168 483.959 23.9653 483.959 23.784C483.959 23.6347 483.991 23.464 484.055 23.272C483.948 23.1547 483.895 23.0053 483.895 22.824C483.895 22.7493 483.9 22.696 483.911 22.664C483.793 22.5253 483.735 22.3653 483.735 22.184C483.735 22.0667 483.767 21.9547 483.831 21.848C483.756 21.6773 483.719 21.512 483.719 21.352C483.719 21.096 483.783 20.904 483.911 20.776C483.847 20.6267 483.815 20.4453 483.815 20.232C483.815 20.0613 483.841 19.9387 483.895 19.864C483.841 19.832 483.799 19.7733 483.767 19.688C483.735 19.6027 483.719 19.5067 483.719 19.4C483.719 19.2187 483.761 19.0693 483.847 18.952C483.815 18.8667 483.799 18.7547 483.799 18.616C483.799 18.5093 483.809 18.4133 483.831 18.328C483.703 18.2 483.639 18.0507 483.639 17.88C483.639 17.6987 483.713 17.544 483.863 17.416C484.023 17.2773 484.199 17.208 484.391 17.208C484.519 17.208 484.636 17.2507 484.743 17.336C484.849 17.4107 484.924 17.528 484.967 17.688C485.127 17.7947 485.207 17.96 485.207 18.184C485.207 18.2267 485.196 18.2907 485.175 18.376C485.303 18.504 485.367 18.6693 485.367 18.872C485.367 19.0427 485.313 19.176 485.207 19.272C485.26 19.3147 485.308 19.3893 485.351 19.496C485.393 19.592 485.415 19.6987 485.415 19.816C485.415 20.008 485.345 20.168 485.207 20.296C485.292 20.4133 485.335 20.5573 485.335 20.728C485.335 20.8987 485.303 21.0373 485.239 21.144C485.281 21.1867 485.303 21.2933 485.303 21.464C485.303 21.56 485.292 21.6613 485.271 21.768C485.249 21.8747 485.217 21.9493 485.175 21.992C485.335 22.1307 485.415 22.3067 485.415 22.52C485.415 22.6373 485.393 22.7387 485.351 22.824C485.415 22.92 485.447 23.064 485.447 23.256C485.447 23.5013 485.404 23.6987 485.319 23.848C485.393 23.9973 485.431 24.1947 485.431 24.44C485.431 24.7387 485.383 24.952 485.287 25.08C485.361 25.1867 485.399 25.32 485.399 25.48C485.399 25.6187 485.367 25.784 485.303 25.976C485.399 26.0827 485.447 26.248 485.447 26.472C485.447 26.664 485.415 26.84 485.351 27ZM487.563 22.184C487.382 22.1733 487.227 22.104 487.099 21.976C486.982 21.848 486.923 21.6987 486.923 21.528C486.923 21.3147 487.003 21.1547 487.163 21.048C487.334 20.9307 487.531 20.872 487.755 20.872C487.936 20.872 488.08 20.904 488.187 20.968L488.219 20.952C488.155 20.8027 488.123 20.5733 488.123 20.264C488.123 20.0933 488.139 19.976 488.171 19.912C488.15 19.7413 488.139 19.6133 488.139 19.528C488.139 19.1867 488.224 18.9147 488.395 18.712C488.448 18.552 488.544 18.4027 488.683 18.264C488.822 18.1253 488.971 18.0347 489.131 17.992C489.163 17.8747 489.291 17.7467 489.515 17.608C489.739 17.4693 489.963 17.4053 490.187 17.416C490.251 17.3093 490.427 17.256 490.715 17.256C490.982 17.256 491.168 17.2827 491.275 17.336C491.371 17.272 491.499 17.24 491.659 17.24C491.926 17.24 492.182 17.3093 492.427 17.448C492.672 17.5867 492.795 17.7573 492.795 17.96C492.795 18.1413 492.715 18.296 492.555 18.424C492.406 18.5413 492.23 18.6 492.027 18.6C491.856 18.6 491.712 18.5627 491.595 18.488C491.488 18.552 491.376 18.584 491.259 18.584C491.142 18.584 491.035 18.552 490.939 18.488C490.907 18.552 490.822 18.6 490.683 18.632C490.555 18.6533 490.448 18.6533 490.363 18.632C490.203 18.8987 490.016 19.032 489.803 19.032C489.803 19.192 489.782 19.3627 489.739 19.544C489.707 19.7147 489.648 19.8267 489.563 19.88C489.648 19.9973 489.691 20.168 489.691 20.392C489.691 20.5733 489.654 20.7173 489.579 20.824C489.622 20.8133 489.68 20.808 489.755 20.808C489.926 20.808 490.08 20.8613 490.219 20.968C490.315 20.9147 490.454 20.888 490.635 20.888C490.816 20.888 490.95 20.9147 491.035 20.968C491.216 20.9787 491.35 21.0373 491.435 21.144C491.531 21.24 491.579 21.3627 491.579 21.512C491.579 21.6933 491.52 21.864 491.403 22.024C491.286 22.1733 491.136 22.248 490.955 22.248C490.88 22.248 490.779 22.2213 490.651 22.168C490.555 22.232 490.427 22.264 490.267 22.264C490.15 22.264 490.006 22.2427 489.835 22.2C489.792 22.2533 489.723 22.3013 489.627 22.344C489.648 22.408 489.659 22.4667 489.659 22.52C489.659 22.68 489.595 22.824 489.467 22.952C489.478 22.984 489.483 23.0373 489.483 23.112C489.483 23.176 489.478 23.224 489.467 23.256C489.595 23.384 489.659 23.5387 489.659 23.72C489.659 23.7947 489.643 23.8747 489.611 23.96C489.718 24.0987 489.771 24.3067 489.771 24.584C489.771 24.7227 489.75 24.8347 489.707 24.92C489.792 25.0373 489.835 25.208 489.835 25.432C489.835 25.5707 489.808 25.704 489.755 25.832C489.819 25.9387 489.851 26.0507 489.851 26.168C489.851 26.3067 489.814 26.4293 489.739 26.536C489.846 26.792 489.899 26.9893 489.899 27.128C489.899 27.288 489.84 27.4267 489.723 27.544C489.734 27.5867 489.766 27.704 489.819 27.896C489.872 28.0773 489.899 28.248 489.899 28.408C489.899 28.824 489.67 29.016 489.211 28.984C488.987 28.9733 488.8 28.8133 488.651 28.504C488.512 28.184 488.443 27.8587 488.443 27.528C488.443 27.304 488.48 27.1387 488.555 27.032C488.459 26.8187 488.411 26.6373 488.411 26.488C488.411 26.3813 488.432 26.2853 488.475 26.2C488.411 26.104 488.379 25.9973 488.379 25.88C488.379 25.7307 488.422 25.5973 488.507 25.48C488.422 25.4267 488.352 25.352 488.299 25.256C488.256 25.16 488.235 25.0587 488.235 24.952C488.235 24.7493 488.31 24.584 488.459 24.456C488.363 24.392 488.315 24.2053 488.315 23.896C488.315 23.7787 488.326 23.672 488.347 23.576C488.379 23.4693 488.416 23.4 488.459 23.368C488.384 23.2933 488.32 23.192 488.267 23.064C488.224 22.936 488.203 22.8133 488.203 22.696C488.203 22.536 488.235 22.4027 488.299 22.296C488.192 22.3173 488.107 22.328 488.043 22.328C487.851 22.328 487.691 22.28 487.563 22.184ZM496.11 28.728C495.993 28.7707 495.881 28.792 495.774 28.792C495.625 28.792 495.502 28.7387 495.406 28.632C495.289 28.6427 495.156 28.5947 495.006 28.488C494.868 28.3707 494.782 28.2587 494.75 28.152C494.622 28.12 494.505 28.0507 494.398 27.944C494.302 27.8267 494.238 27.6827 494.206 27.512C494.078 27.48 493.972 27.3947 493.886 27.256C493.812 27.1067 493.774 26.936 493.774 26.744C493.774 26.6267 493.79 26.5147 493.822 26.408C493.748 26.2907 493.721 26.1413 493.742 25.96C493.593 25.832 493.518 25.6827 493.518 25.512C493.518 25.4267 493.534 25.3467 493.566 25.272C493.502 25.176 493.47 25.064 493.47 24.936C493.47 24.776 493.518 24.632 493.614 24.504C493.465 24.376 493.39 24.216 493.39 24.024C493.39 23.9067 493.422 23.8053 493.486 23.72C493.39 23.5813 493.342 23.416 493.342 23.224C493.342 23.0747 493.374 22.9627 493.438 22.888C493.332 22.8027 493.278 22.6747 493.278 22.504C493.278 22.3973 493.31 22.28 493.374 22.152C493.321 22.0667 493.294 21.944 493.294 21.784C493.294 21.5493 493.358 21.368 493.486 21.24C493.454 21.144 493.438 21.0533 493.438 20.968C493.438 20.776 493.502 20.6267 493.63 20.52C493.769 20.4027 493.929 20.344 494.11 20.344C494.292 20.344 494.446 20.4027 494.574 20.52C494.713 20.6373 494.782 20.808 494.782 21.032C494.782 21.2027 494.745 21.384 494.67 21.576C494.82 21.704 494.894 21.8693 494.894 22.072C494.894 22.2213 494.846 22.3547 494.75 22.472C494.814 22.5893 494.846 22.744 494.846 22.936C494.846 23.1387 494.814 23.304 494.75 23.432C494.846 23.56 494.894 23.7573 494.894 24.024C494.894 24.2053 494.884 24.328 494.862 24.392C494.948 24.488 494.99 24.6107 494.99 24.76C494.99 24.8453 494.969 24.9413 494.926 25.048C495.033 25.1653 495.086 25.3253 495.086 25.528C495.086 25.592 495.076 25.656 495.054 25.72C495.097 25.752 495.134 25.8107 495.166 25.896C495.198 25.9707 495.214 26.0507 495.214 26.136C495.214 26.2427 495.188 26.3333 495.134 26.408C495.22 26.4187 495.278 26.4773 495.31 26.584C495.342 26.68 495.348 26.776 495.326 26.872H495.342C495.417 26.872 495.481 26.9147 495.534 27C495.598 27.0747 495.62 27.144 495.598 27.208C495.63 27.1867 495.678 27.176 495.742 27.176C495.828 27.176 495.902 27.1973 495.966 27.24C496.041 27.272 496.094 27.3147 496.126 27.368C496.34 27.2507 496.542 27.192 496.734 27.192C496.83 27.192 496.916 27.208 496.99 27.24C497.086 27.1653 497.209 27.1013 497.358 27.048C497.518 26.984 497.657 26.952 497.774 26.952C497.828 26.952 497.876 26.9627 497.918 26.984C497.844 26.8667 497.806 26.7173 497.806 26.536C497.806 26.3333 497.87 26.2053 497.998 26.152C497.924 26.0667 497.886 25.8853 497.886 25.608C497.886 25.2773 497.956 25.0427 498.094 24.904C497.998 24.744 497.95 24.568 497.95 24.376C497.95 24.2053 497.982 24.088 498.046 24.024C497.982 23.9387 497.95 23.832 497.95 23.704C497.95 23.576 497.972 23.4427 498.014 23.304C498.068 23.1547 498.132 23.0373 498.206 22.952C498.068 22.856 497.998 22.648 497.998 22.328C497.998 22.1253 498.014 21.96 498.046 21.832C497.95 21.6187 497.902 21.4373 497.902 21.288C497.902 21.096 497.966 20.9413 498.094 20.824C498.222 20.7067 498.372 20.648 498.542 20.648C498.745 20.648 498.916 20.728 499.054 20.888C499.204 21.048 499.273 21.2773 499.262 21.576C499.316 21.6293 499.358 21.7147 499.39 21.832C499.433 21.9387 499.454 22.0507 499.454 22.168C499.454 22.4027 499.396 22.568 499.278 22.664C499.47 22.8987 499.566 23.128 499.566 23.352C499.566 23.5013 499.524 23.624 499.438 23.72C499.524 23.8373 499.566 23.9653 499.566 24.104C499.566 24.2427 499.529 24.3867 499.454 24.536C499.518 24.632 499.55 24.7387 499.55 24.856C499.55 25.048 499.47 25.2133 499.31 25.352C499.417 25.4693 499.47 25.608 499.47 25.768C499.47 25.9387 499.401 26.1307 499.262 26.344C499.369 26.408 499.422 26.5413 499.422 26.744C499.422 26.9467 499.38 27.1547 499.294 27.368C499.38 27.4853 499.422 27.64 499.422 27.832C499.422 27.9493 499.401 28.0453 499.358 28.12C499.38 28.2267 499.39 28.3067 499.39 28.36C499.39 28.5627 499.326 28.7227 499.198 28.84C499.081 28.9467 498.937 29 498.766 29C498.617 29 498.484 28.952 498.366 28.856C498.249 28.7493 498.18 28.6 498.158 28.408C498.148 28.3973 498.132 28.3813 498.11 28.36C498.1 28.328 498.089 28.3013 498.078 28.28C497.897 28.3867 497.732 28.44 497.582 28.44C497.529 28.44 497.486 28.4347 497.454 28.424C497.316 28.52 497.182 28.568 497.054 28.568C496.948 28.568 496.846 28.5467 496.75 28.504C496.708 28.5787 496.638 28.6373 496.542 28.68C496.457 28.7227 496.361 28.744 496.254 28.744C496.19 28.744 496.142 28.7387 496.11 28.728ZM502.605 28.248C502.648 28.4827 502.6 28.6693 502.461 28.808C502.333 28.936 502.173 29 501.981 29C501.811 29 501.661 28.9467 501.533 28.84C501.405 28.7227 501.341 28.5627 501.341 28.36C501.341 28.232 501.373 28.088 501.437 27.928C501.373 27.7787 501.341 27.624 501.341 27.464C501.341 27.336 501.368 27.2293 501.421 27.144C501.357 27.1013 501.309 27.0373 501.277 26.952C501.245 26.8667 501.229 26.7707 501.229 26.664C501.229 26.5573 501.251 26.44 501.293 26.312C501.197 26.1947 501.149 26.056 501.149 25.896C501.149 25.6933 501.224 25.528 501.373 25.4C501.363 25.368 501.357 25.3147 501.357 25.24C501.357 25.1333 501.368 25.0587 501.389 25.016C501.272 24.8667 501.213 24.6533 501.213 24.376C501.213 24.184 501.251 24.0347 501.325 23.928C501.251 23.864 501.187 23.7787 501.133 23.672C501.08 23.5547 501.053 23.4373 501.053 23.32C501.053 23.192 501.091 23.0693 501.165 22.952C501.112 22.824 501.085 22.712 501.085 22.616C501.085 22.456 501.133 22.3067 501.229 22.168C501.101 22.04 501.037 21.9067 501.037 21.768C501.037 21.6613 501.075 21.5173 501.149 21.336C501.075 21.1867 501.037 21.0267 501.037 20.856C501.037 20.632 501.117 20.4933 501.277 20.44C501.288 20.2907 501.341 20.168 501.437 20.072C501.533 19.976 501.651 19.928 501.789 19.928C501.949 19.928 502.088 20.008 502.205 20.168C502.333 20.3173 502.397 20.536 502.397 20.824C502.397 20.9413 502.392 21.0373 502.381 21.112C502.424 21.0907 502.467 21.0587 502.509 21.016C502.552 20.9627 502.605 20.9253 502.669 20.904C502.733 20.8827 502.829 20.872 502.957 20.872C502.979 20.8187 503.048 20.7653 503.165 20.712C503.293 20.6587 503.416 20.632 503.533 20.632C503.619 20.632 503.677 20.6427 503.709 20.664C503.795 20.6213 503.88 20.6 503.965 20.6C504.093 20.6 504.232 20.6907 504.381 20.872C504.637 20.8507 504.824 20.9093 504.941 21.048C505.112 21.0373 505.261 21.0587 505.389 21.112C505.517 21.1653 505.619 21.2773 505.693 21.448C505.896 21.576 505.997 21.7467 505.997 21.96C505.997 22.1413 505.917 22.312 505.757 22.472C505.608 22.6213 505.443 22.696 505.261 22.696C505.059 22.696 504.888 22.5893 504.749 22.376C504.632 22.376 504.541 22.3653 504.477 22.344C504.413 22.3227 504.349 22.2747 504.285 22.2C504.221 22.2213 504.168 22.232 504.125 22.232C504.029 22.232 503.928 22.2053 503.821 22.152C503.672 22.248 503.512 22.2907 503.341 22.28C503.277 22.4293 503.112 22.504 502.845 22.504C502.856 22.536 502.861 22.5893 502.861 22.664C502.861 22.8027 502.829 22.9413 502.765 23.08C502.712 23.208 502.643 23.304 502.557 23.368C502.643 23.5707 502.685 23.7733 502.685 23.976C502.685 24.1573 502.643 24.296 502.557 24.392C502.589 24.4347 502.621 24.488 502.653 24.552C502.696 24.616 502.728 24.6747 502.749 24.728C502.771 24.8133 502.781 24.8773 502.781 24.92C502.781 24.9947 502.755 25.096 502.701 25.224C502.755 25.352 502.781 25.448 502.781 25.512C502.781 25.5973 502.744 25.7147 502.669 25.864C502.733 25.9707 502.765 26.088 502.765 26.216C502.765 26.3653 502.728 26.4933 502.653 26.6C502.728 26.7707 502.765 26.9467 502.765 27.128C502.765 27.2667 502.733 27.3947 502.669 27.512C502.723 27.6187 502.749 27.7253 502.749 27.832C502.749 27.9813 502.701 28.12 502.605 28.248ZM469.526 48.056C469.505 48.152 469.425 48.232 469.286 48.296C469.148 48.36 468.998 48.392 468.838 48.392C468.764 48.392 468.71 48.3867 468.678 48.376C468.625 48.4613 468.513 48.5467 468.342 48.632C468.172 48.7173 468.022 48.76 467.894 48.76C467.83 48.76 467.772 48.744 467.718 48.712C467.612 48.7333 467.521 48.744 467.446 48.744C467.297 48.744 467.148 48.7173 466.998 48.664C466.86 48.6107 466.753 48.5413 466.678 48.456C466.497 48.4773 466.326 48.456 466.166 48.392C466.017 48.3173 465.932 48.2213 465.91 48.104C465.793 48.1253 465.66 48.0773 465.51 47.96C465.372 47.8427 465.297 47.6827 465.286 47.48C465.126 47.3947 465.009 47.2667 464.934 47.096C464.86 46.9253 464.822 46.744 464.822 46.552C464.822 46.4133 464.838 46.3067 464.87 46.232C464.785 46.1573 464.716 46.0027 464.662 45.768C464.609 45.5227 464.582 45.2667 464.582 45C464.582 44.68 464.62 44.4453 464.694 44.296C464.641 44.1893 464.614 44.0667 464.614 43.928C464.614 43.8107 464.63 43.6987 464.662 43.592C464.705 43.4853 464.764 43.4 464.838 43.336C464.806 43.2827 464.79 43.2347 464.79 43.192C464.79 43.1173 464.817 43.0373 464.87 42.952C464.924 42.8667 464.982 42.8027 465.046 42.76C465.036 42.5893 465.078 42.4347 465.174 42.296C465.281 42.1467 465.388 42.056 465.494 42.024C465.484 41.9173 465.521 41.7893 465.606 41.64C465.692 41.4907 465.804 41.368 465.942 41.272C466.092 41.176 466.241 41.1333 466.39 41.144C466.604 40.8453 466.897 40.696 467.27 40.696C467.43 40.696 467.553 40.7173 467.638 40.76C467.756 40.7067 467.9 40.68 468.07 40.68C468.241 40.68 468.428 40.7227 468.63 40.808C468.694 40.776 468.774 40.76 468.87 40.76C468.977 40.76 469.078 40.7813 469.174 40.824C469.281 40.856 469.35 40.904 469.382 40.968C469.372 40.9253 469.366 40.8613 469.366 40.776C469.366 40.6053 469.409 40.456 469.494 40.328C469.42 40.2 469.382 40.072 469.382 39.944C469.382 39.88 469.388 39.832 469.398 39.8C469.388 39.7467 469.366 39.6773 469.334 39.592C469.302 39.496 469.286 39.416 469.286 39.352C469.286 39.2667 469.308 39.1813 469.35 39.096C469.297 38.9893 469.27 38.8827 469.27 38.776C469.27 38.6587 469.302 38.5467 469.366 38.44C469.292 38.2907 469.254 38.136 469.254 37.976C469.254 37.7627 469.313 37.5707 469.43 37.4C469.558 37.2293 469.729 37.144 469.942 37.144C470.124 37.144 470.278 37.2133 470.406 37.352C470.545 37.48 470.614 37.6293 470.614 37.8C470.614 37.864 470.609 37.912 470.598 37.944C470.758 38.072 470.838 38.248 470.838 38.472C470.838 38.5893 470.801 38.712 470.726 38.84C470.758 38.9147 470.774 38.9947 470.774 39.08C470.774 39.1973 470.748 39.3093 470.694 39.416C470.748 39.5227 470.774 39.6347 470.774 39.752C470.774 39.9013 470.737 40.0293 470.662 40.136C470.769 40.264 470.822 40.3867 470.822 40.504C470.822 40.5893 470.79 40.68 470.726 40.776C470.758 40.84 470.774 40.92 470.774 41.016C470.774 41.0907 470.758 41.1707 470.726 41.256C470.812 41.3733 470.854 41.5013 470.854 41.64C470.854 41.7467 470.828 41.8533 470.774 41.96C470.838 42.0667 470.87 42.1947 470.87 42.344C470.87 42.5893 470.812 42.76 470.694 42.856C470.801 42.984 470.854 43.176 470.854 43.432C470.854 43.5813 470.833 43.7307 470.79 43.88C470.758 44.0293 470.726 44.136 470.694 44.2C470.801 44.36 470.854 44.5627 470.854 44.808C470.854 44.9253 470.828 45.0373 470.774 45.144C470.892 45.2613 470.95 45.4373 470.95 45.672C470.95 45.928 470.897 46.136 470.79 46.296C470.897 46.4347 470.95 46.632 470.95 46.888C470.95 47.0587 470.924 47.2133 470.87 47.352C470.828 47.48 470.769 47.5653 470.694 47.608C470.705 47.6827 470.732 47.7947 470.774 47.944C470.828 48.1787 470.854 48.328 470.854 48.392C470.854 48.5627 470.801 48.7013 470.694 48.808C470.566 48.936 470.417 49 470.246 49C470.108 49 469.98 48.952 469.862 48.856C469.756 48.7493 469.692 48.6107 469.67 48.44C469.617 48.3867 469.58 48.3173 469.558 48.232C469.537 48.136 469.526 48.0773 469.526 48.056ZM467.526 47.432C467.558 47.3573 467.654 47.32 467.814 47.32C467.889 47.32 467.953 47.3253 468.006 47.336C468.06 47.3467 468.102 47.352 468.134 47.352C468.145 47.2773 468.209 47.2133 468.326 47.16C468.454 47.096 468.577 47.064 468.694 47.064C468.769 47.064 468.833 47.08 468.886 47.112C468.876 47.0053 468.897 46.92 468.95 46.856C469.004 46.792 469.073 46.7333 469.158 46.68C469.254 46.616 469.324 46.568 469.366 46.536C469.345 46.4933 469.334 46.3973 469.334 46.248C469.334 45.928 469.372 45.7307 469.446 45.656C469.372 45.5813 469.334 45.432 469.334 45.208C469.334 44.952 469.372 44.728 469.446 44.536C469.382 44.3973 469.35 44.1627 469.35 43.832C469.35 43.512 469.372 43.2987 469.414 43.192C469.318 43 469.27 42.7813 469.27 42.536C469.27 42.344 469.292 42.2053 469.334 42.12C469.27 42.1627 469.174 42.168 469.046 42.136C468.929 42.0933 468.833 42.0347 468.758 41.96C468.716 42.024 468.63 42.056 468.502 42.056C468.417 42.056 468.332 42.0453 468.246 42.024C468.161 41.992 468.102 41.96 468.07 41.928C467.9 42.0027 467.734 42.04 467.574 42.04C467.532 42.04 467.468 42.0293 467.382 42.008C467.244 42.1573 467.137 42.264 467.062 42.328C466.988 42.392 466.886 42.4293 466.758 42.44C466.726 42.5147 466.694 42.6053 466.662 42.712C466.63 42.808 466.593 42.888 466.55 42.952C466.508 43.016 466.433 43.0693 466.326 43.112C466.305 43.2507 466.252 43.3627 466.166 43.448C466.177 43.4907 466.182 43.5493 466.182 43.624C466.182 43.7307 466.156 43.848 466.102 43.976C466.134 44.0507 466.15 44.216 466.15 44.472C466.15 44.9627 466.108 45.256 466.022 45.352C466.033 45.3947 466.07 45.496 466.134 45.656C466.198 45.816 466.23 45.9707 466.23 46.12C466.23 46.2373 466.209 46.344 466.166 46.44C466.38 46.5253 466.513 46.6747 466.566 46.888C466.673 46.92 466.774 46.9893 466.87 47.096C467.126 47.0853 467.345 47.1973 467.526 47.432ZM472.906 37.592C472.767 37.656 472.655 37.7467 472.57 37.864C472.485 37.9813 472.442 38.104 472.442 38.232C472.442 38.4027 472.511 38.5733 472.65 38.744C472.629 38.8827 472.703 39.016 472.874 39.144C473.045 39.272 473.231 39.336 473.434 39.336C473.573 39.336 473.695 39.2987 473.802 39.224C474.101 39.064 474.25 38.8613 474.25 38.616C474.25 38.456 474.186 38.2747 474.058 38.072C474.069 37.8587 474.005 37.6933 473.866 37.576C473.738 37.448 473.583 37.384 473.402 37.384C473.199 37.384 473.034 37.4533 472.906 37.592ZM473.946 44.664C474.031 44.696 474.095 44.7973 474.138 44.968C474.191 45.1387 474.218 45.3253 474.218 45.528C474.218 45.7627 474.181 45.9173 474.106 45.992C474.17 46.152 474.202 46.3067 474.202 46.456C474.202 46.648 474.154 46.808 474.058 46.936C474.133 47.1173 474.17 47.3307 474.17 47.576C474.17 47.7787 474.138 47.944 474.074 48.072C474.106 48.168 474.122 48.2587 474.122 48.344C474.122 48.536 474.053 48.6907 473.914 48.808C473.775 48.9147 473.61 48.968 473.418 48.968C473.237 48.968 473.082 48.9147 472.954 48.808C472.826 48.6907 472.767 48.536 472.778 48.344C472.725 48.28 472.682 48.1787 472.65 48.04C472.618 47.9013 472.602 47.7573 472.602 47.608C472.602 47.3307 472.661 47.1493 472.778 47.064C472.693 46.9253 472.65 46.7173 472.65 46.44C472.65 46.1627 472.687 45.96 472.762 45.832C472.719 45.7893 472.687 45.688 472.666 45.528C472.645 45.368 472.634 45.192 472.634 45C472.634 44.8187 472.645 44.6587 472.666 44.52C472.687 44.3707 472.719 44.2747 472.762 44.232C472.698 44.168 472.666 43.992 472.666 43.704C472.666 43.3733 472.703 43.1333 472.778 42.984C472.725 42.8987 472.677 42.7867 472.634 42.648C472.591 42.5093 472.57 42.3813 472.57 42.264C472.57 42.1573 472.581 42.0827 472.602 42.04C472.517 41.7627 472.474 41.5387 472.474 41.368C472.474 41.1867 472.517 41 472.602 40.808C472.581 40.648 472.618 40.5253 472.714 40.44C472.81 40.3547 472.949 40.312 473.13 40.312C473.621 40.312 473.866 40.6107 473.866 41.208C473.962 41.272 474.031 41.3627 474.074 41.48C474.127 41.5867 474.154 41.7093 474.154 41.848C474.154 42.072 474.101 42.264 473.994 42.424C474.037 42.488 474.069 42.584 474.09 42.712C474.122 42.84 474.138 42.968 474.138 43.096C474.138 43.2667 474.111 43.384 474.058 43.448C474.101 43.5013 474.122 43.6133 474.122 43.784C474.122 43.944 474.101 44.1147 474.058 44.296C474.026 44.4773 473.989 44.6 473.946 44.664ZM479.878 48.808C479.75 48.936 479.552 49 479.286 49C479.083 49 478.918 48.968 478.79 48.904C478.598 48.9467 478.427 48.968 478.278 48.968C477.862 48.968 477.563 48.8613 477.382 48.648C477.339 48.6587 477.28 48.664 477.206 48.664C476.96 48.664 476.774 48.552 476.646 48.328C476.539 48.3387 476.4 48.2853 476.23 48.168C476.07 48.04 476 47.9173 476.022 47.8C475.851 47.7573 475.707 47.656 475.59 47.496C475.483 47.3253 475.435 47.1333 475.446 46.92C475.328 46.8773 475.238 46.792 475.174 46.664C475.11 46.536 475.078 46.392 475.078 46.232C475.078 46.0613 475.104 45.9387 475.158 45.864C475.04 45.6827 474.982 45.4747 474.982 45.24C474.982 44.9947 475.056 44.7973 475.206 44.648C475.088 44.5627 475.03 44.4347 475.03 44.264C475.03 44.1573 475.056 44.0507 475.11 43.944C475.163 43.8373 475.232 43.7627 475.318 43.72C475.296 43.5707 475.312 43.432 475.366 43.304C475.43 43.1653 475.515 43.064 475.622 43C475.6 42.968 475.59 42.92 475.59 42.856C475.59 42.76 475.622 42.664 475.686 42.568C475.76 42.472 475.84 42.4133 475.926 42.392C475.915 42.36 475.91 42.3173 475.91 42.264C475.91 42.04 475.995 41.848 476.166 41.688C476.336 41.5173 476.502 41.4427 476.662 41.464C476.662 41.3147 476.726 41.192 476.854 41.096C476.992 40.9893 477.168 40.936 477.382 40.936C477.478 40.936 477.552 40.9413 477.606 40.952C477.68 40.792 477.808 40.664 477.99 40.568C478.171 40.4613 478.358 40.408 478.55 40.408C478.678 40.408 478.784 40.4347 478.87 40.488C479.019 40.36 479.206 40.296 479.43 40.296C479.611 40.296 479.771 40.3387 479.91 40.424C480.059 40.5093 480.15 40.6267 480.182 40.776C480.352 40.776 480.534 40.84 480.726 40.968C480.918 41.0853 481.03 41.208 481.062 41.336C481.318 41.4107 481.563 41.576 481.798 41.832C482.043 42.0773 482.166 42.328 482.166 42.584C482.166 42.6267 482.155 42.6907 482.134 42.776C482.592 42.872 482.8 43.336 482.758 44.168C482.854 44.328 482.902 44.4987 482.902 44.68C482.902 44.8933 482.832 45.1067 482.694 45.32C482.726 45.416 482.742 45.5067 482.742 45.592C482.742 45.72 482.715 45.8427 482.662 45.96C482.608 46.0773 482.539 46.168 482.454 46.232C482.464 46.4027 482.432 46.5413 482.358 46.648C482.294 46.7547 482.171 46.8987 481.99 47.08C482 47.1227 482.006 47.1867 482.006 47.272C482.006 47.592 481.824 47.8 481.462 47.896C481.43 48.0667 481.339 48.2053 481.19 48.312C481.051 48.4187 480.88 48.472 480.678 48.472C480.507 48.7067 480.299 48.824 480.054 48.824C479.979 48.824 479.92 48.8187 479.878 48.808ZM478.374 47.688C478.459 47.6133 478.603 47.576 478.806 47.576C478.955 47.576 479.035 47.5973 479.046 47.64C479.131 47.544 479.238 47.4693 479.366 47.416C479.494 47.3627 479.611 47.3413 479.718 47.352C479.899 47.1707 480.096 47.08 480.31 47.08C480.384 47.08 480.438 47.0853 480.47 47.096C480.459 47 480.486 46.9093 480.55 46.824C480.614 46.728 480.688 46.664 480.774 46.632C480.774 46.4933 480.806 46.376 480.87 46.28C480.944 46.1733 481.035 46.0933 481.142 46.04C481.142 45.8267 481.184 45.656 481.27 45.528C481.238 45.4427 481.222 45.3573 481.222 45.272C481.222 45.1547 481.248 45.0427 481.302 44.936C481.355 44.8187 481.43 44.7227 481.526 44.648C481.419 44.552 481.366 44.4347 481.366 44.296C481.366 44.168 481.403 44.04 481.478 43.912C481.264 43.784 481.12 43.6613 481.046 43.544C480.982 43.416 480.95 43.1867 480.95 42.856C480.854 42.8667 480.752 42.8133 480.646 42.696C480.55 42.5787 480.491 42.4453 480.47 42.296C480.352 42.328 480.208 42.296 480.038 42.2C479.878 42.0933 479.798 41.96 479.798 41.8C479.712 41.8427 479.611 41.864 479.494 41.864C479.27 41.864 479.088 41.784 478.95 41.624C478.832 41.7413 478.678 41.8373 478.486 41.912C478.304 41.976 478.144 41.9973 478.006 41.976C477.995 42.0827 477.899 42.2107 477.718 42.36C477.547 42.4987 477.392 42.5893 477.254 42.632C477.286 42.696 477.302 42.7707 477.302 42.856C477.302 42.9627 477.275 43.0693 477.222 43.176C477.168 43.2827 477.094 43.3733 476.998 43.448C477.008 43.5973 476.971 43.7413 476.886 43.88C476.811 44.0187 476.704 44.1147 476.566 44.168C476.587 44.2533 476.598 44.3227 476.598 44.376C476.598 44.5253 476.56 44.6427 476.486 44.728C476.518 44.8027 476.534 44.8773 476.534 44.952C476.534 45.0693 476.475 45.1973 476.358 45.336C476.624 45.5173 476.758 45.7787 476.758 46.12C476.758 46.3013 476.726 46.456 476.662 46.584C476.768 46.5947 476.843 46.6267 476.886 46.68C476.928 46.7333 476.966 46.8187 476.998 46.936C477.264 46.968 477.462 47.096 477.59 47.32C477.707 47.32 477.851 47.3573 478.022 47.432C478.203 47.5067 478.32 47.592 478.374 47.688ZM487.195 46.072C487.195 46.1787 487.153 46.3067 487.067 46.456C486.982 46.5947 486.886 46.6693 486.779 46.68C486.769 47.0213 486.593 47.272 486.251 47.432C486.283 47.5813 486.23 47.7733 486.091 48.008C485.963 48.2427 485.825 48.392 485.675 48.456C485.622 48.6693 485.526 48.856 485.387 49.016C485.249 49.1867 485.083 49.272 484.891 49.272C484.721 49.272 484.577 49.208 484.459 49.08C484.342 48.9627 484.283 48.8133 484.283 48.632C484.283 48.3867 484.39 48.152 484.603 47.928C484.593 47.7467 484.63 47.576 484.715 47.416C484.801 47.256 484.918 47.128 485.067 47.032C485.057 46.808 485.105 46.6267 485.211 46.488C485.318 46.3493 485.446 46.2853 485.595 46.296C485.574 46.1467 485.595 46.008 485.659 45.88C485.734 45.7413 485.841 45.64 485.979 45.576C486.001 45.48 486.081 45.352 486.219 45.192C486.315 45.096 486.385 45.0053 486.427 44.92C486.182 44.792 486.07 44.5893 486.091 44.312C485.91 44.3013 485.761 44.232 485.643 44.104C485.526 43.9653 485.467 43.8107 485.467 43.64C485.467 43.544 485.478 43.4747 485.499 43.432C485.403 43.4107 485.302 43.336 485.195 43.208C485.099 43.08 485.057 42.9573 485.067 42.84C484.907 42.7547 484.785 42.6747 484.699 42.6C484.614 42.5147 484.545 42.408 484.491 42.28C484.235 42.12 484.075 41.928 484.011 41.704C483.659 41.448 483.483 41.1653 483.483 40.856C483.483 40.7707 483.499 40.68 483.531 40.584C483.659 40.2853 483.846 40.136 484.091 40.136C484.273 40.136 484.454 40.216 484.635 40.376C484.817 40.5253 484.939 40.6907 485.003 40.872C485.238 40.9147 485.435 41.032 485.595 41.224C485.766 41.4053 485.851 41.592 485.851 41.784C485.851 41.8373 485.846 41.88 485.835 41.912C486.198 42.0933 486.422 42.3973 486.507 42.824C486.678 42.8987 486.833 43.0107 486.971 43.16C487.11 43.3093 487.201 43.496 487.243 43.72C487.265 43.6987 487.302 43.64 487.355 43.544C487.409 43.4373 487.473 43.3467 487.547 43.272C487.622 43.1867 487.707 43.144 487.803 43.144C487.782 43.0267 487.809 42.8827 487.883 42.712C487.969 42.5307 488.07 42.4187 488.187 42.376C488.177 42.3333 488.171 42.2693 488.171 42.184C488.171 42.0453 488.209 41.9333 488.283 41.848C488.358 41.7627 488.443 41.7253 488.539 41.736C488.539 41.512 488.593 41.3307 488.699 41.192C488.817 41.0533 488.945 40.9893 489.083 41C489.105 40.7867 489.179 40.616 489.307 40.488C489.446 40.3493 489.601 40.28 489.771 40.28C489.974 40.28 490.129 40.3813 490.235 40.584C490.342 40.7333 490.395 40.888 490.395 41.048C490.395 41.24 490.31 41.4053 490.139 41.544C490.161 41.6293 490.171 41.6827 490.171 41.704C490.171 41.832 490.123 41.9493 490.027 42.056C489.931 42.1627 489.83 42.232 489.723 42.264V42.328C489.723 42.4987 489.627 42.6053 489.435 42.648C489.425 43.0427 489.211 43.3893 488.795 43.688C488.806 43.9013 488.753 44.104 488.635 44.296C488.518 44.4773 488.369 44.6053 488.187 44.68C488.198 44.712 488.203 44.76 488.203 44.824C488.203 44.8987 488.187 44.984 488.155 45.08C488.251 45.144 488.347 45.24 488.443 45.368C488.55 45.4853 488.598 45.6187 488.587 45.768C488.694 45.8 488.79 45.864 488.875 45.96C488.971 46.056 489.014 46.1733 489.003 46.312C489.377 46.4933 489.563 46.7227 489.563 47C489.563 47.032 489.553 47.1013 489.531 47.208C489.67 47.208 489.782 47.2613 489.867 47.368C489.963 47.4747 490.006 47.608 489.995 47.768C490.091 47.8 490.171 47.8587 490.235 47.944C490.31 48.0293 490.347 48.152 490.347 48.312C490.347 48.3547 490.337 48.44 490.315 48.568C490.379 48.664 490.411 48.76 490.411 48.856C490.411 48.9947 490.358 49.112 490.251 49.208C490.145 49.304 490.017 49.352 489.867 49.352C489.526 49.352 489.27 49.1173 489.099 48.648C488.95 48.584 488.801 48.4293 488.651 48.184C488.502 47.9387 488.427 47.7307 488.427 47.56C488.214 47.4213 488.022 47.256 487.851 47.064C487.691 46.872 487.595 46.68 487.563 46.488C487.371 46.424 487.249 46.2853 487.195 46.072ZM492.187 37.592C492.049 37.656 491.937 37.7467 491.851 37.864C491.766 37.9813 491.723 38.104 491.723 38.232C491.723 38.4027 491.793 38.5733 491.931 38.744C491.91 38.8827 491.985 39.016 492.155 39.144C492.326 39.272 492.513 39.336 492.715 39.336C492.854 39.336 492.977 39.2987 493.083 39.224C493.382 39.064 493.531 38.8613 493.531 38.616C493.531 38.456 493.467 38.2747 493.339 38.072C493.35 37.8587 493.286 37.6933 493.147 37.576C493.019 37.448 492.865 37.384 492.683 37.384C492.481 37.384 492.315 37.4533 492.187 37.592ZM493.227 44.664C493.313 44.696 493.377 44.7973 493.419 44.968C493.473 45.1387 493.499 45.3253 493.499 45.528C493.499 45.7627 493.462 45.9173 493.387 45.992C493.451 46.152 493.483 46.3067 493.483 46.456C493.483 46.648 493.435 46.808 493.339 46.936C493.414 47.1173 493.451 47.3307 493.451 47.576C493.451 47.7787 493.419 47.944 493.355 48.072C493.387 48.168 493.403 48.2587 493.403 48.344C493.403 48.536 493.334 48.6907 493.195 48.808C493.057 48.9147 492.891 48.968 492.699 48.968C492.518 48.968 492.363 48.9147 492.235 48.808C492.107 48.6907 492.049 48.536 492.059 48.344C492.006 48.28 491.963 48.1787 491.931 48.04C491.899 47.9013 491.883 47.7573 491.883 47.608C491.883 47.3307 491.942 47.1493 492.059 47.064C491.974 46.9253 491.931 46.7173 491.931 46.44C491.931 46.1627 491.969 45.96 492.043 45.832C492.001 45.7893 491.969 45.688 491.947 45.528C491.926 45.368 491.915 45.192 491.915 45C491.915 44.8187 491.926 44.6587 491.947 44.52C491.969 44.3707 492.001 44.2747 492.043 44.232C491.979 44.168 491.947 43.992 491.947 43.704C491.947 43.3733 491.985 43.1333 492.059 42.984C492.006 42.8987 491.958 42.7867 491.915 42.648C491.873 42.5093 491.851 42.3813 491.851 42.264C491.851 42.1573 491.862 42.0827 491.883 42.04C491.798 41.7627 491.755 41.5387 491.755 41.368C491.755 41.1867 491.798 41 491.883 40.808C491.862 40.648 491.899 40.5253 491.995 40.44C492.091 40.3547 492.23 40.312 492.411 40.312C492.902 40.312 493.147 40.6107 493.147 41.208C493.243 41.272 493.313 41.3627 493.355 41.48C493.409 41.5867 493.435 41.7093 493.435 41.848C493.435 42.072 493.382 42.264 493.275 42.424C493.318 42.488 493.35 42.584 493.371 42.712C493.403 42.84 493.419 42.968 493.419 43.096C493.419 43.2667 493.393 43.384 493.339 43.448C493.382 43.5013 493.403 43.6133 493.403 43.784C493.403 43.944 493.382 44.1147 493.339 44.296C493.307 44.4773 493.27 44.6 493.227 44.664ZM499.495 48.056C499.474 48.152 499.394 48.232 499.255 48.296C499.116 48.36 498.967 48.392 498.807 48.392C498.732 48.392 498.679 48.3867 498.647 48.376C498.594 48.4613 498.482 48.5467 498.311 48.632C498.14 48.7173 497.991 48.76 497.863 48.76C497.799 48.76 497.74 48.744 497.687 48.712C497.58 48.7333 497.49 48.744 497.415 48.744C497.266 48.744 497.116 48.7173 496.967 48.664C496.828 48.6107 496.722 48.5413 496.647 48.456C496.466 48.4773 496.295 48.456 496.135 48.392C495.986 48.3173 495.9 48.2213 495.879 48.104C495.762 48.1253 495.628 48.0773 495.479 47.96C495.34 47.8427 495.266 47.6827 495.255 47.48C495.095 47.3947 494.978 47.2667 494.903 47.096C494.828 46.9253 494.791 46.744 494.791 46.552C494.791 46.4133 494.807 46.3067 494.839 46.232C494.754 46.1573 494.684 46.0027 494.631 45.768C494.578 45.5227 494.551 45.2667 494.551 45C494.551 44.68 494.588 44.4453 494.663 44.296C494.61 44.1893 494.583 44.0667 494.583 43.928C494.583 43.8107 494.599 43.6987 494.631 43.592C494.674 43.4853 494.732 43.4 494.807 43.336C494.775 43.2827 494.759 43.2347 494.759 43.192C494.759 43.1173 494.786 43.0373 494.839 42.952C494.892 42.8667 494.951 42.8027 495.015 42.76C495.004 42.5893 495.047 42.4347 495.143 42.296C495.25 42.1467 495.356 42.056 495.463 42.024C495.452 41.9173 495.49 41.7893 495.575 41.64C495.66 41.4907 495.772 41.368 495.911 41.272C496.06 41.176 496.21 41.1333 496.359 41.144C496.572 40.8453 496.866 40.696 497.239 40.696C497.399 40.696 497.522 40.7173 497.607 40.76C497.724 40.7067 497.868 40.68 498.039 40.68C498.21 40.68 498.396 40.7227 498.599 40.808C498.663 40.776 498.743 40.76 498.839 40.76C498.946 40.76 499.047 40.7813 499.143 40.824C499.25 40.856 499.319 40.904 499.351 40.968C499.34 40.9253 499.335 40.8613 499.335 40.776C499.335 40.6053 499.378 40.456 499.463 40.328C499.388 40.2 499.351 40.072 499.351 39.944C499.351 39.88 499.356 39.832 499.367 39.8C499.356 39.7467 499.335 39.6773 499.303 39.592C499.271 39.496 499.255 39.416 499.255 39.352C499.255 39.2667 499.276 39.1813 499.319 39.096C499.266 38.9893 499.239 38.8827 499.239 38.776C499.239 38.6587 499.271 38.5467 499.335 38.44C499.26 38.2907 499.223 38.136 499.223 37.976C499.223 37.7627 499.282 37.5707 499.399 37.4C499.527 37.2293 499.698 37.144 499.911 37.144C500.092 37.144 500.247 37.2133 500.375 37.352C500.514 37.48 500.583 37.6293 500.583 37.8C500.583 37.864 500.578 37.912 500.567 37.944C500.727 38.072 500.807 38.248 500.807 38.472C500.807 38.5893 500.77 38.712 500.695 38.84C500.727 38.9147 500.743 38.9947 500.743 39.08C500.743 39.1973 500.716 39.3093 500.663 39.416C500.716 39.5227 500.743 39.6347 500.743 39.752C500.743 39.9013 500.706 40.0293 500.631 40.136C500.738 40.264 500.791 40.3867 500.791 40.504C500.791 40.5893 500.759 40.68 500.695 40.776C500.727 40.84 500.743 40.92 500.743 41.016C500.743 41.0907 500.727 41.1707 500.695 41.256C500.78 41.3733 500.823 41.5013 500.823 41.64C500.823 41.7467 500.796 41.8533 500.743 41.96C500.807 42.0667 500.839 42.1947 500.839 42.344C500.839 42.5893 500.78 42.76 500.663 42.856C500.77 42.984 500.823 43.176 500.823 43.432C500.823 43.5813 500.802 43.7307 500.759 43.88C500.727 44.0293 500.695 44.136 500.663 44.2C500.77 44.36 500.823 44.5627 500.823 44.808C500.823 44.9253 500.796 45.0373 500.743 45.144C500.86 45.2613 500.919 45.4373 500.919 45.672C500.919 45.928 500.866 46.136 500.759 46.296C500.866 46.4347 500.919 46.632 500.919 46.888C500.919 47.0587 500.892 47.2133 500.839 47.352C500.796 47.48 500.738 47.5653 500.663 47.608C500.674 47.6827 500.7 47.7947 500.743 47.944C500.796 48.1787 500.823 48.328 500.823 48.392C500.823 48.5627 500.77 48.7013 500.663 48.808C500.535 48.936 500.386 49 500.215 49C500.076 49 499.948 48.952 499.831 48.856C499.724 48.7493 499.66 48.6107 499.639 48.44C499.586 48.3867 499.548 48.3173 499.527 48.232C499.506 48.136 499.495 48.0773 499.495 48.056ZM497.495 47.432C497.527 47.3573 497.623 47.32 497.783 47.32C497.858 47.32 497.922 47.3253 497.975 47.336C498.028 47.3467 498.071 47.352 498.103 47.352C498.114 47.2773 498.178 47.2133 498.295 47.16C498.423 47.096 498.546 47.064 498.663 47.064C498.738 47.064 498.802 47.08 498.855 47.112C498.844 47.0053 498.866 46.92 498.919 46.856C498.972 46.792 499.042 46.7333 499.127 46.68C499.223 46.616 499.292 46.568 499.335 46.536C499.314 46.4933 499.303 46.3973 499.303 46.248C499.303 45.928 499.34 45.7307 499.415 45.656C499.34 45.5813 499.303 45.432 499.303 45.208C499.303 44.952 499.34 44.728 499.415 44.536C499.351 44.3973 499.319 44.1627 499.319 43.832C499.319 43.512 499.34 43.2987 499.383 43.192C499.287 43 499.239 42.7813 499.239 42.536C499.239 42.344 499.26 42.2053 499.303 42.12C499.239 42.1627 499.143 42.168 499.015 42.136C498.898 42.0933 498.802 42.0347 498.727 41.96C498.684 42.024 498.599 42.056 498.471 42.056C498.386 42.056 498.3 42.0453 498.215 42.024C498.13 41.992 498.071 41.96 498.039 41.928C497.868 42.0027 497.703 42.04 497.543 42.04C497.5 42.04 497.436 42.0293 497.351 42.008C497.212 42.1573 497.106 42.264 497.031 42.328C496.956 42.392 496.855 42.4293 496.727 42.44C496.695 42.5147 496.663 42.6053 496.631 42.712C496.599 42.808 496.562 42.888 496.519 42.952C496.476 43.016 496.402 43.0693 496.295 43.112C496.274 43.2507 496.22 43.3627 496.135 43.448C496.146 43.4907 496.151 43.5493 496.151 43.624C496.151 43.7307 496.124 43.848 496.071 43.976C496.103 44.0507 496.119 44.216 496.119 44.472C496.119 44.9627 496.076 45.256 495.991 45.352C496.002 45.3947 496.039 45.496 496.103 45.656C496.167 45.816 496.199 45.9707 496.199 46.12C496.199 46.2373 496.178 46.344 496.135 46.44C496.348 46.5253 496.482 46.6747 496.535 46.888C496.642 46.92 496.743 46.9893 496.839 47.096C497.095 47.0853 497.314 47.1973 497.495 47.432ZM509.319 42.744C509.436 42.7973 509.543 42.9253 509.639 43.128C509.746 43.3307 509.799 43.5387 509.799 43.752C509.799 44.1147 509.639 44.36 509.319 44.488C509.234 44.6373 509.116 44.7547 508.967 44.84C508.828 44.9253 508.674 44.968 508.503 44.968C508.364 44.968 508.22 44.936 508.071 44.872C507.986 44.9253 507.868 44.9733 507.719 45.016C507.57 45.0587 507.42 45.08 507.271 45.08C507.015 45.08 506.839 45.0267 506.743 44.92C506.636 45.0053 506.466 45.048 506.231 45.048C506.06 45.048 505.906 45.016 505.767 44.952C505.618 45.0267 505.447 45.064 505.255 45.064C505.074 45.064 504.924 45.0373 504.807 44.984C504.7 45.08 504.482 45.128 504.151 45.128C503.97 45.128 503.847 45.112 503.783 45.08C503.815 45.3893 503.772 45.6187 503.655 45.768C503.858 45.9707 503.938 46.1893 503.895 46.424C503.906 46.4347 503.964 46.4773 504.071 46.552C504.178 46.6267 504.252 46.7493 504.295 46.92C504.412 46.92 504.519 46.968 504.615 47.064C504.722 47.16 504.786 47.256 504.807 47.352C504.85 47.3093 504.935 47.288 505.063 47.288C505.159 47.288 505.244 47.304 505.319 47.336C505.394 47.368 505.436 47.4053 505.447 47.448C505.522 47.4053 505.607 47.384 505.703 47.384C505.842 47.384 505.97 47.432 506.087 47.528C506.194 47.5067 506.274 47.496 506.327 47.496C506.434 47.496 506.524 47.512 506.599 47.544C506.631 47.4587 506.716 47.3787 506.855 47.304C506.994 47.2187 507.138 47.1813 507.287 47.192C507.372 47.0853 507.49 47 507.639 46.936C507.788 46.872 507.938 46.84 508.087 46.84C508.375 46.84 508.583 46.9573 508.711 47.192C508.754 47.2773 508.775 47.3787 508.775 47.496C508.775 47.752 508.658 47.9547 508.423 48.104C508.37 48.136 508.279 48.1947 508.151 48.28C508.023 48.3547 507.906 48.4133 507.799 48.456C507.692 48.4987 507.596 48.52 507.511 48.52C507.351 48.712 507.132 48.808 506.855 48.808C506.727 48.808 506.631 48.7973 506.567 48.776C506.439 48.8827 506.252 48.936 506.007 48.936C505.783 48.936 505.628 48.8933 505.543 48.808C505.468 48.84 505.394 48.856 505.319 48.856C505.17 48.856 505.031 48.8027 504.903 48.696C504.359 48.728 503.991 48.5573 503.799 48.184C503.65 48.184 503.479 48.0933 503.287 47.912C503.106 47.72 503.004 47.5547 502.983 47.416C502.738 47.32 502.583 47.144 502.519 46.888C502.508 46.8027 502.508 46.7227 502.519 46.648C502.476 46.6373 502.439 46.5947 502.407 46.52C502.386 46.4347 502.375 46.3493 502.375 46.264C502.375 46.2 502.38 46.1573 502.391 46.136C502.306 45.88 502.263 45.6453 502.263 45.432C502.263 45.2187 502.306 45.0267 502.391 44.856C502.327 44.7387 502.295 44.6107 502.295 44.472C502.295 44.3013 502.332 44.1307 502.407 43.96C502.482 43.7893 502.551 43.6773 502.615 43.624C502.594 43.5707 502.61 43.48 502.663 43.352C502.716 43.2133 502.786 43.0907 502.871 42.984C502.967 42.8667 503.063 42.7973 503.159 42.776L503.143 42.6C503.143 42.184 503.367 41.9227 503.815 41.816C503.815 41.6347 503.922 41.4587 504.135 41.288C504.348 41.1173 504.535 41.0427 504.695 41.064C504.716 40.9467 504.818 40.856 504.999 40.792C505.191 40.7173 505.335 40.696 505.431 40.728C505.516 40.5893 505.687 40.4933 505.943 40.44C506.039 40.3333 506.178 40.28 506.359 40.28C506.412 40.28 506.482 40.2907 506.567 40.312L506.711 40.296C506.839 40.296 506.946 40.3227 507.031 40.376C507.127 40.4187 507.17 40.472 507.159 40.536C507.394 40.5573 507.591 40.6107 507.751 40.696C507.911 40.7813 508.007 40.936 508.039 41.16C508.178 41.128 508.354 41.1653 508.567 41.272C508.78 41.368 508.962 41.5227 509.111 41.736C509.271 41.9387 509.351 42.1787 509.351 42.456C509.351 42.52 509.34 42.616 509.319 42.744ZM506.967 43.784C507.074 43.6347 507.335 43.56 507.751 43.56C507.986 43.56 508.167 43.5813 508.295 43.624C508.21 43.5813 508.13 43.4907 508.055 43.352C507.991 43.2027 507.959 43.064 507.959 42.936C507.959 42.8507 507.975 42.7867 508.007 42.744C507.858 42.7547 507.73 42.7173 507.623 42.632C507.527 42.536 507.436 42.4293 507.351 42.312C507.276 42.1947 507.218 42.1093 507.175 42.056C507.122 42.088 507.01 42.0613 506.839 41.976C506.679 41.88 506.594 41.784 506.583 41.688C506.54 41.7413 506.45 41.7893 506.311 41.832C506.172 41.864 506.066 41.8747 505.991 41.864C505.959 41.9173 505.884 41.9707 505.767 42.024C505.65 42.0773 505.527 42.0933 505.399 42.072C505.292 42.2747 505.18 42.44 505.063 42.568C504.946 42.696 504.796 42.792 504.615 42.856C504.594 43.0053 504.524 43.1707 504.407 43.352C504.3 43.5333 504.188 43.672 504.071 43.768L504.135 43.784C504.284 43.6773 504.487 43.624 504.743 43.624C504.892 43.624 505.031 43.64 505.159 43.672C505.298 43.704 505.394 43.7413 505.447 43.784C505.703 43.624 505.986 43.544 506.295 43.544C506.551 43.544 506.775 43.624 506.967 43.784Z M483.539 196.965V196.344C483.727 196.32 483.957 196.281 484.23 196.227C484.512 196.172 484.73 196.133 484.887 196.109C484.91 195.547 484.922 194.98 484.922 194.41C484.922 194.051 484.918 193.512 484.91 192.793C484.902 192.066 484.898 191.52 484.898 191.152C484.898 190.285 484.91 189.629 484.934 189.184C484.223 189.59 483.703 189.918 483.375 190.168L483 189.781C483.125 189.68 483.34 189.504 483.645 189.254C483.949 188.996 484.223 188.766 484.465 188.562C484.707 188.352 484.895 188.18 485.027 188.047C485.152 188.062 485.281 188.074 485.414 188.082C485.547 188.082 485.676 188.09 485.801 188.105C485.848 189.012 485.871 190.672 485.871 193.086C485.871 194.523 485.883 195.555 485.906 196.18C485.977 196.188 486.145 196.219 486.41 196.273C486.684 196.32 486.895 196.352 487.043 196.367L487.23 196.988C486.84 196.988 486.5 196.988 486.211 196.988C485.922 196.988 485.535 196.988 485.051 196.988C484.574 196.988 484.199 196.988 483.926 196.988C483.66 196.98 483.531 196.973 483.539 196.965ZM487.77 196.965V196.344C487.957 196.32 488.188 196.281 488.461 196.227C488.742 196.172 488.961 196.133 489.117 196.109C489.141 195.547 489.152 194.98 489.152 194.41C489.152 194.051 489.148 193.512 489.141 192.793C489.133 192.066 489.129 191.52 489.129 191.152C489.129 190.285 489.141 189.629 489.164 189.184C488.453 189.59 487.934 189.918 487.605 190.168L487.23 189.781C487.355 189.68 487.57 189.504 487.875 189.254C488.18 188.996 488.453 188.766 488.695 188.562C488.938 188.352 489.125 188.18 489.258 188.047C489.383 188.062 489.512 188.074 489.645 188.082C489.777 188.082 489.906 188.09 490.031 188.105C490.078 189.012 490.102 190.672 490.102 193.086C490.102 194.523 490.113 195.555 490.137 196.18C490.207 196.188 490.375 196.219 490.641 196.273C490.914 196.32 491.125 196.352 491.273 196.367L491.461 196.988C491.07 196.988 490.73 196.988 490.441 196.988C490.152 196.988 489.766 196.988 489.281 196.988C488.805 196.988 488.43 196.988 488.156 196.988C487.891 196.98 487.762 196.973 487.77 196.965Z M486.395 274.191L486.758 274.965C486.172 274.98 485.254 274.992 484.004 275C482.754 275 482.09 275 482.012 275C482.012 274.938 482.008 274.828 482 274.672C482 274.516 482 274.391 482 274.297C482.148 274.039 482.395 273.73 482.738 273.371C483.082 273.004 483.426 272.648 483.77 272.305C484.113 271.953 484.449 271.57 484.777 271.156C485.113 270.742 485.387 270.281 485.598 269.773C485.809 269.258 485.914 268.73 485.914 268.191C485.914 267.848 485.793 267.57 485.551 267.359C485.309 267.141 485.016 267.031 484.672 267.031C484.273 267.031 483.902 267.195 483.559 267.523C483.223 267.844 482.988 268.336 482.855 269L482.328 268.812C482.359 268.055 482.605 267.465 483.066 267.043C483.535 266.621 484.074 266.41 484.684 266.41C485.23 266.41 485.699 266.582 486.09 266.926C486.48 267.27 486.676 267.75 486.676 268.367C486.676 268.875 486.598 269.371 486.441 269.855C486.285 270.332 486.059 270.781 485.762 271.203C485.465 271.625 485.188 271.988 484.93 272.293C484.672 272.59 484.348 272.938 483.957 273.336C483.574 273.727 483.305 274.008 483.148 274.18C483.414 274.195 483.641 274.203 483.828 274.203C484.023 274.203 484.328 274.199 484.742 274.191C485.156 274.176 485.465 274.168 485.668 274.168C485.855 274.168 486.098 274.176 486.395 274.191ZM491.141 274.191L491.504 274.965C490.918 274.98 490 274.992 488.75 275C487.5 275 486.836 275 486.758 275C486.758 274.938 486.754 274.828 486.746 274.672C486.746 274.516 486.746 274.391 486.746 274.297C486.895 274.039 487.141 273.73 487.484 273.371C487.828 273.004 488.172 272.648 488.516 272.305C488.859 271.953 489.195 271.57 489.523 271.156C489.859 270.742 490.133 270.281 490.344 269.773C490.555 269.258 490.66 268.73 490.66 268.191C490.66 267.848 490.539 267.57 490.297 267.359C490.055 267.141 489.762 267.031 489.418 267.031C489.02 267.031 488.648 267.195 488.305 267.523C487.969 267.844 487.734 268.336 487.602 269L487.074 268.812C487.105 268.055 487.352 267.465 487.812 267.043C488.281 266.621 488.82 266.41 489.43 266.41C489.977 266.41 490.445 266.582 490.836 266.926C491.227 267.27 491.422 267.75 491.422 268.367C491.422 268.875 491.344 269.371 491.188 269.855C491.031 270.332 490.805 270.781 490.508 271.203C490.211 271.625 489.934 271.988 489.676 272.293C489.418 272.59 489.094 272.938 488.703 273.336C488.32 273.727 488.051 274.008 487.895 274.18C488.16 274.195 488.387 274.203 488.574 274.203C488.77 274.203 489.074 274.199 489.488 274.191C489.902 274.176 490.211 274.168 490.414 274.168C490.602 274.168 490.844 274.176 491.141 274.191Z M483.539 92.9648V92.3438C483.727 92.3203 483.957 92.2812 484.23 92.2266C484.512 92.1719 484.73 92.1328 484.887 92.1094C484.91 91.5469 484.922 90.9805 484.922 90.4102C484.922 90.0508 484.918 89.5117 484.91 88.793C484.902 88.0664 484.898 87.5195 484.898 87.1523C484.898 86.2852 484.91 85.6289 484.934 85.1836C484.223 85.5898 483.703 85.918 483.375 86.168L483 85.7812C483.125 85.6797 483.34 85.5039 483.645 85.2539C483.949 84.9961 484.223 84.7656 484.465 84.5625C484.707 84.3516 484.895 84.1797 485.027 84.0469C485.152 84.0625 485.281 84.0742 485.414 84.082C485.547 84.082 485.676 84.0898 485.801 84.1055C485.848 85.0117 485.871 86.6719 485.871 89.0859C485.871 90.5234 485.883 91.5547 485.906 92.1797C485.977 92.1875 486.145 92.2188 486.41 92.2734C486.684 92.3203 486.895 92.3516 487.043 92.3672L487.23 92.9883C486.84 92.9883 486.5 92.9883 486.211 92.9883C485.922 92.9883 485.535 92.9883 485.051 92.9883C484.574 92.9883 484.199 92.9883 483.926 92.9883C483.66 92.9805 483.531 92.9727 483.539 92.9648ZM491.625 92.1914L491.988 92.9648C491.402 92.9805 490.484 92.9922 489.234 93C487.984 93 487.32 93 487.242 93C487.242 92.9375 487.238 92.8281 487.23 92.6719C487.23 92.5156 487.23 92.3906 487.23 92.2969C487.379 92.0391 487.625 91.7305 487.969 91.3711C488.312 91.0039 488.656 90.6484 489 90.3047C489.344 89.9531 489.68 89.5703 490.008 89.1562C490.344 88.7422 490.617 88.2812 490.828 87.7734C491.039 87.2578 491.145 86.7305 491.145 86.1914C491.145 85.8477 491.023 85.5703 490.781 85.3594C490.539 85.1406 490.246 85.0312 489.902 85.0312C489.504 85.0312 489.133 85.1953 488.789 85.5234C488.453 85.8438 488.219 86.3359 488.086 87L487.559 86.8125C487.59 86.0547 487.836 85.4648 488.297 85.043C488.766 84.6211 489.305 84.4102 489.914 84.4102C490.461 84.4102 490.93 84.582 491.32 84.9258C491.711 85.2695 491.906 85.75 491.906 86.3672C491.906 86.875 491.828 87.3711 491.672 87.8555C491.516 88.332 491.289 88.7812 490.992 89.2031C490.695 89.625 490.418 89.9883 490.16 90.293C489.902 90.5898 489.578 90.9375 489.188 91.3359C488.805 91.7266 488.535 92.0078 488.379 92.1797C488.645 92.1953 488.871 92.2031 489.059 92.2031C489.254 92.2031 489.559 92.1992 489.973 92.1914C490.387 92.1758 490.695 92.168 490.898 92.168C491.086 92.168 491.328 92.1758 491.625 92.1914Z M482.539 300.965V300.344C482.727 300.32 482.957 300.281 483.23 300.227C483.512 300.172 483.73 300.133 483.887 300.109C483.91 299.547 483.922 298.98 483.922 298.41C483.922 298.051 483.918 297.512 483.91 296.793C483.902 296.066 483.898 295.52 483.898 295.152C483.898 294.285 483.91 293.629 483.934 293.184C483.223 293.59 482.703 293.918 482.375 294.168L482 293.781C482.125 293.68 482.34 293.504 482.645 293.254C482.949 292.996 483.223 292.766 483.465 292.562C483.707 292.352 483.895 292.18 484.027 292.047C484.152 292.062 484.281 292.074 484.414 292.082C484.547 292.082 484.676 292.09 484.801 292.105C484.848 293.012 484.871 294.672 484.871 297.086C484.871 298.523 484.883 299.555 484.906 300.18C484.977 300.188 485.145 300.219 485.41 300.273C485.684 300.32 485.895 300.352 486.043 300.367L486.23 300.988C485.84 300.988 485.5 300.988 485.211 300.988C484.922 300.988 484.535 300.988 484.051 300.988C483.574 300.988 483.199 300.988 482.926 300.988C482.66 300.98 482.531 300.973 482.539 300.965ZM491.035 297.59L491.152 298.117C490.746 298.164 490.457 298.195 490.285 298.211C490.301 298.57 490.32 299.023 490.344 299.57C490.375 300.117 490.395 300.566 490.402 300.918C490.332 301.16 490.199 301.281 490.004 301.281C489.863 301.281 489.727 301.223 489.594 301.105C489.461 300.988 489.379 300.848 489.348 300.684C489.355 300.441 489.383 299.645 489.43 298.293C489.18 298.309 488.98 298.316 488.832 298.316C488.598 298.316 488.234 298.305 487.742 298.281C487.258 298.25 486.902 298.234 486.676 298.234C486.566 298.234 486.418 298.242 486.23 298.258C486.246 298.07 486.254 297.941 486.254 297.871C486.254 297.824 486.25 297.75 486.242 297.648C486.242 297.539 486.242 297.457 486.242 297.402C487.547 295.207 488.602 293.578 489.406 292.516C489.648 292.516 489.98 292.566 490.402 292.668C490.387 293.035 490.363 293.832 490.332 295.059C490.309 296.277 490.285 297.102 490.262 297.531C490.605 297.547 490.863 297.566 491.035 297.59ZM487.098 297.438L489.453 297.508C489.477 297.062 489.5 296.402 489.523 295.527C489.547 294.652 489.566 293.992 489.582 293.547C489.262 293.875 488.797 294.562 488.188 295.609C487.586 296.648 487.223 297.258 487.098 297.438Z M482.539 144.965V144.344C482.727 144.32 482.957 144.281 483.23 144.227C483.512 144.172 483.73 144.133 483.887 144.109C483.91 143.547 483.922 142.98 483.922 142.41C483.922 142.051 483.918 141.512 483.91 140.793C483.902 140.066 483.898 139.52 483.898 139.152C483.898 138.285 483.91 137.629 483.934 137.184C483.223 137.59 482.703 137.918 482.375 138.168L482 137.781C482.125 137.68 482.34 137.504 482.645 137.254C482.949 136.996 483.223 136.766 483.465 136.562C483.707 136.352 483.895 136.18 484.027 136.047C484.152 136.062 484.281 136.074 484.414 136.082C484.547 136.082 484.676 136.09 484.801 136.105C484.848 137.012 484.871 138.672 484.871 141.086C484.871 142.523 484.883 143.555 484.906 144.18C484.977 144.188 485.145 144.219 485.41 144.273C485.684 144.32 485.895 144.352 486.043 144.367L486.23 144.988C485.84 144.988 485.5 144.988 485.211 144.988C484.922 144.988 484.535 144.988 484.051 144.988C483.574 144.988 483.199 144.988 482.926 144.988C482.66 144.98 482.531 144.973 482.539 144.965ZM491.035 141.59L491.152 142.117C490.746 142.164 490.457 142.195 490.285 142.211C490.301 142.57 490.32 143.023 490.344 143.57C490.375 144.117 490.395 144.566 490.402 144.918C490.332 145.16 490.199 145.281 490.004 145.281C489.863 145.281 489.727 145.223 489.594 145.105C489.461 144.988 489.379 144.848 489.348 144.684C489.355 144.441 489.383 143.645 489.43 142.293C489.18 142.309 488.98 142.316 488.832 142.316C488.598 142.316 488.234 142.305 487.742 142.281C487.258 142.25 486.902 142.234 486.676 142.234C486.566 142.234 486.418 142.242 486.23 142.258C486.246 142.07 486.254 141.941 486.254 141.871C486.254 141.824 486.25 141.75 486.242 141.648C486.242 141.539 486.242 141.457 486.242 141.402C487.547 139.207 488.602 137.578 489.406 136.516C489.648 136.516 489.98 136.566 490.402 136.668C490.387 137.035 490.363 137.832 490.332 139.059C490.309 140.277 490.285 141.102 490.262 141.531C490.605 141.547 490.863 141.566 491.035 141.59ZM487.098 141.438L489.453 141.508C489.477 141.062 489.5 140.402 489.523 139.527C489.547 138.652 489.566 137.992 489.582 137.547C489.262 137.875 488.797 138.562 488.188 139.609C487.586 140.648 487.223 141.258 487.098 141.438Z M482.539 118.965V118.344C482.727 118.32 482.957 118.281 483.23 118.227C483.512 118.172 483.73 118.133 483.887 118.109C483.91 117.547 483.922 116.98 483.922 116.41C483.922 116.051 483.918 115.512 483.91 114.793C483.902 114.066 483.898 113.52 483.898 113.152C483.898 112.285 483.91 111.629 483.934 111.184C483.223 111.59 482.703 111.918 482.375 112.168L482 111.781C482.125 111.68 482.34 111.504 482.645 111.254C482.949 110.996 483.223 110.766 483.465 110.562C483.707 110.352 483.895 110.18 484.027 110.047C484.152 110.062 484.281 110.074 484.414 110.082C484.547 110.082 484.676 110.09 484.801 110.105C484.848 111.012 484.871 112.672 484.871 115.086C484.871 116.523 484.883 117.555 484.906 118.18C484.977 118.188 485.145 118.219 485.41 118.273C485.684 118.32 485.895 118.352 486.043 118.367L486.23 118.988C485.84 118.988 485.5 118.988 485.211 118.988C484.922 118.988 484.535 118.988 484.051 118.988C483.574 118.988 483.199 118.988 482.926 118.988C482.66 118.98 482.531 118.973 482.539 118.965ZM490.871 110.516L491.07 111.043C489.242 111.824 488.156 112.871 487.812 114.184C488.125 113.98 488.441 113.879 488.762 113.879C489.434 113.879 489.996 114.184 490.449 114.793C490.902 115.395 491.129 116.164 491.129 117.102C491.129 117.773 490.922 118.309 490.508 118.707C490.102 119.105 489.582 119.305 488.949 119.305C488.355 119.305 487.832 119.09 487.379 118.66C486.934 118.223 486.711 117.645 486.711 116.926C486.711 116.473 486.719 116.078 486.734 115.742C486.758 115.406 486.801 115.039 486.863 114.641C486.934 114.234 487.027 113.883 487.145 113.586C487.262 113.289 487.422 112.98 487.625 112.66C487.836 112.332 488.086 112.047 488.375 111.805C488.664 111.555 489.016 111.32 489.43 111.102C489.852 110.875 490.332 110.68 490.871 110.516ZM487.555 116.586C487.555 117.234 487.676 117.723 487.918 118.051C488.16 118.371 488.461 118.531 488.82 118.531C489.203 118.531 489.535 118.402 489.816 118.145C490.098 117.887 490.238 117.531 490.238 117.078C490.238 116.391 490.082 115.816 489.77 115.355C489.457 114.895 489.078 114.664 488.633 114.664C488.43 114.664 488.258 114.703 488.117 114.781C487.977 114.852 487.871 114.934 487.801 115.027C487.73 115.121 487.676 115.27 487.637 115.473C487.598 115.668 487.574 115.836 487.566 115.977C487.559 116.109 487.555 116.312 487.555 116.586Z M482.539 326.965V326.344C482.727 326.32 482.957 326.281 483.23 326.227C483.512 326.172 483.73 326.133 483.887 326.109C483.91 325.547 483.922 324.98 483.922 324.41C483.922 324.051 483.918 323.512 483.91 322.793C483.902 322.066 483.898 321.52 483.898 321.152C483.898 320.285 483.91 319.629 483.934 319.184C483.223 319.59 482.703 319.918 482.375 320.168L482 319.781C482.125 319.68 482.34 319.504 482.645 319.254C482.949 318.996 483.223 318.766 483.465 318.562C483.707 318.352 483.895 318.18 484.027 318.047C484.152 318.062 484.281 318.074 484.414 318.082C484.547 318.082 484.676 318.09 484.801 318.105C484.848 319.012 484.871 320.672 484.871 323.086C484.871 324.523 484.883 325.555 484.906 326.18C484.977 326.188 485.145 326.219 485.41 326.273C485.684 326.32 485.895 326.352 486.043 326.367L486.23 326.988C485.84 326.988 485.5 326.988 485.211 326.988C484.922 326.988 484.535 326.988 484.051 326.988C483.574 326.988 483.199 326.988 482.926 326.988C482.66 326.98 482.531 326.973 482.539 326.965ZM490.871 318.516L491.07 319.043C489.242 319.824 488.156 320.871 487.812 322.184C488.125 321.98 488.441 321.879 488.762 321.879C489.434 321.879 489.996 322.184 490.449 322.793C490.902 323.395 491.129 324.164 491.129 325.102C491.129 325.773 490.922 326.309 490.508 326.707C490.102 327.105 489.582 327.305 488.949 327.305C488.355 327.305 487.832 327.09 487.379 326.66C486.934 326.223 486.711 325.645 486.711 324.926C486.711 324.473 486.719 324.078 486.734 323.742C486.758 323.406 486.801 323.039 486.863 322.641C486.934 322.234 487.027 321.883 487.145 321.586C487.262 321.289 487.422 320.98 487.625 320.66C487.836 320.332 488.086 320.047 488.375 319.805C488.664 319.555 489.016 319.32 489.43 319.102C489.852 318.875 490.332 318.68 490.871 318.516ZM487.555 324.586C487.555 325.234 487.676 325.723 487.918 326.051C488.16 326.371 488.461 326.531 488.82 326.531C489.203 326.531 489.535 326.402 489.816 326.145C490.098 325.887 490.238 325.531 490.238 325.078C490.238 324.391 490.082 323.816 489.77 323.355C489.457 322.895 489.078 322.664 488.633 322.664C488.43 322.664 488.258 322.703 488.117 322.781C487.977 322.852 487.871 322.934 487.801 323.027C487.73 323.121 487.676 323.27 487.637 323.473C487.598 323.668 487.574 323.836 487.566 323.977C487.559 324.109 487.555 324.312 487.555 324.586Z M481.539 248.965V248.344C481.727 248.32 481.957 248.281 482.23 248.227C482.512 248.172 482.73 248.133 482.887 248.109C482.91 247.547 482.922 246.98 482.922 246.41C482.922 246.051 482.918 245.512 482.91 244.793C482.902 244.066 482.898 243.52 482.898 243.152C482.898 242.285 482.91 241.629 482.934 241.184C482.223 241.59 481.703 241.918 481.375 242.168L481 241.781C481.125 241.68 481.34 241.504 481.645 241.254C481.949 240.996 482.223 240.766 482.465 240.562C482.707 240.352 482.895 240.18 483.027 240.047C483.152 240.062 483.281 240.074 483.414 240.082C483.547 240.082 483.676 240.09 483.801 240.105C483.848 241.012 483.871 242.672 483.871 245.086C483.871 246.523 483.883 247.555 483.906 248.18C483.977 248.188 484.145 248.219 484.41 248.273C484.684 248.32 484.895 248.352 485.043 248.367L485.23 248.988C484.84 248.988 484.5 248.988 484.211 248.988C483.922 248.988 483.535 248.988 483.051 248.988C482.574 248.988 482.199 248.988 481.926 248.988C481.66 248.98 481.531 248.973 481.539 248.965ZM490.691 246.645C490.691 247.496 490.484 248.129 490.07 248.543C489.656 248.949 489.023 249.152 488.172 249.152C486.531 249.152 485.711 248.301 485.711 246.598C485.711 245.988 485.836 245.453 486.086 244.992C486.336 244.531 486.68 244.266 487.117 244.195C486.672 244.188 486.336 244.023 486.109 243.703C485.883 243.383 485.77 242.984 485.77 242.508C485.77 241.773 485.969 241.195 486.367 240.773C486.773 240.352 487.348 240.141 488.09 240.141C488.871 240.141 489.484 240.336 489.93 240.727C490.375 241.117 490.598 241.719 490.598 242.531C490.598 243.008 490.484 243.406 490.258 243.727C490.031 244.047 489.695 244.211 489.25 244.219C489.703 244.289 490.055 244.559 490.305 245.027C490.562 245.496 490.691 246.035 490.691 246.645ZM488.301 248.309C488.738 248.309 489.102 248.141 489.391 247.805C489.68 247.461 489.824 247.055 489.824 246.586C489.824 246.117 489.664 245.715 489.344 245.379C489.023 245.035 488.594 244.859 488.055 244.852C487.586 244.992 487.234 245.215 487 245.52C486.766 245.816 486.648 246.152 486.648 246.527C486.648 246.996 486.805 247.41 487.117 247.77C487.43 248.129 487.824 248.309 488.301 248.309ZM488.301 240.785C487.777 240.824 487.379 240.996 487.105 241.301C486.832 241.605 486.695 241.957 486.695 242.355C486.695 242.762 486.824 243.113 487.082 243.41C487.348 243.707 487.699 243.855 488.137 243.855C488.645 243.848 489.031 243.711 489.297 243.445C489.562 243.172 489.695 242.844 489.695 242.461C489.695 242.078 489.566 241.723 489.309 241.395C489.059 241.066 488.723 240.863 488.301 240.785Z M491.461 168.645C491.461 169.496 491.254 170.129 490.84 170.543C490.426 170.949 489.793 171.152 488.941 171.152C487.301 171.152 486.48 170.301 486.48 168.598C486.48 167.988 486.605 167.453 486.855 166.992C487.105 166.531 487.449 166.266 487.887 166.195C487.441 166.188 487.105 166.023 486.879 165.703C486.652 165.383 486.539 164.984 486.539 164.508C486.539 163.773 486.738 163.195 487.137 162.773C487.543 162.352 488.117 162.141 488.859 162.141C489.641 162.141 490.254 162.336 490.699 162.727C491.145 163.117 491.367 163.719 491.367 164.531C491.367 165.008 491.254 165.406 491.027 165.727C490.801 166.047 490.465 166.211 490.02 166.219C490.473 166.289 490.824 166.559 491.074 167.027C491.332 167.496 491.461 168.035 491.461 168.645ZM489.07 170.309C489.508 170.309 489.871 170.141 490.16 169.805C490.449 169.461 490.594 169.055 490.594 168.586C490.594 168.117 490.434 167.715 490.113 167.379C489.793 167.035 489.363 166.859 488.824 166.852C488.355 166.992 488.004 167.215 487.77 167.52C487.535 167.816 487.418 168.152 487.418 168.527C487.418 168.996 487.574 169.41 487.887 169.77C488.199 170.129 488.594 170.309 489.07 170.309ZM489.07 162.785C488.547 162.824 488.148 162.996 487.875 163.301C487.602 163.605 487.465 163.957 487.465 164.355C487.465 164.762 487.594 165.113 487.852 165.41C488.117 165.707 488.469 165.855 488.906 165.855C489.414 165.848 489.801 165.711 490.066 165.445C490.332 165.172 490.465 164.844 490.465 164.461C490.465 164.078 490.336 163.723 490.078 163.395C489.828 163.066 489.492 162.863 489.07 162.785Z M486.609 223.223L486.422 222.695C488.242 221.922 489.324 220.875 489.668 219.555C489.34 219.766 489.023 219.871 488.719 219.871C488.047 219.871 487.484 219.57 487.031 218.969C486.586 218.359 486.363 217.582 486.363 216.637C486.363 215.965 486.566 215.434 486.973 215.043C487.379 214.645 487.898 214.445 488.531 214.445C489.133 214.445 489.656 214.664 490.102 215.102C490.555 215.531 490.781 216.105 490.781 216.824C490.781 217.277 490.77 217.672 490.746 218.008C490.73 218.344 490.688 218.711 490.617 219.109C490.555 219.508 490.465 219.859 490.348 220.164C490.23 220.461 490.066 220.773 489.855 221.102C489.652 221.422 489.406 221.703 489.117 221.945C488.828 222.188 488.473 222.422 488.051 222.648C487.629 222.867 487.148 223.059 486.609 223.223ZM489.938 217.152C489.938 216.504 489.812 216.02 489.562 215.699C489.32 215.371 489.02 215.207 488.66 215.207C488.277 215.207 487.945 215.336 487.664 215.594C487.383 215.852 487.242 216.207 487.242 216.66C487.242 217.348 487.398 217.922 487.711 218.383C488.023 218.844 488.406 219.074 488.859 219.074C489.062 219.074 489.234 219.039 489.375 218.969C489.516 218.891 489.621 218.805 489.691 218.711C489.762 218.617 489.816 218.473 489.855 218.277C489.895 218.074 489.918 217.906 489.926 217.773C489.934 217.633 489.938 217.426 489.938 217.152Z M488.312 347.07C488.734 347.07 489.086 347.258 489.367 347.633C489.664 347.992 489.812 348.406 489.812 348.875C489.812 349.219 489.727 349.5 489.555 349.719C489.398 349.922 489.18 350.023 488.898 350.023C488.461 350.023 488.109 349.844 487.844 349.484C487.594 349.125 487.469 348.703 487.469 348.219C487.469 347.875 487.539 347.602 487.68 347.398C487.836 347.18 488.047 347.07 488.312 347.07Z M488.312 357.07C488.734 357.07 489.086 357.258 489.367 357.633C489.664 357.992 489.812 358.406 489.812 358.875C489.812 359.219 489.727 359.5 489.555 359.719C489.398 359.922 489.18 360.023 488.898 360.023C488.461 360.023 488.109 359.844 487.844 359.484C487.594 359.125 487.469 358.703 487.469 358.219C487.469 357.875 487.539 357.602 487.68 357.398C487.836 357.18 488.047 357.07 488.312 357.07Z M488.312 367.07C488.734 367.07 489.086 367.258 489.367 367.633C489.664 367.992 489.812 368.406 489.812 368.875C489.812 369.219 489.727 369.5 489.555 369.719C489.398 369.922 489.18 370.023 488.898 370.023C488.461 370.023 488.109 369.844 487.844 369.484C487.594 369.125 487.469 368.703 487.469 368.219C487.469 367.875 487.539 367.602 487.68 367.398C487.836 367.18 488.047 367.07 488.312 367.07Z';

  var dataset09Density = 'M538.651 28.056C538.63 28.152 538.55 28.232 538.411 28.296C538.273 28.36 538.123 28.392 537.963 28.392C537.889 28.392 537.835 28.3867 537.803 28.376C537.75 28.4613 537.638 28.5467 537.467 28.632C537.297 28.7173 537.147 28.76 537.019 28.76C536.955 28.76 536.897 28.744 536.843 28.712C536.737 28.7333 536.646 28.744 536.571 28.744C536.422 28.744 536.273 28.7173 536.123 28.664C535.985 28.6107 535.878 28.5413 535.803 28.456C535.622 28.4773 535.451 28.456 535.291 28.392C535.142 28.3173 535.057 28.2213 535.035 28.104C534.918 28.1253 534.785 28.0773 534.635 27.96C534.497 27.8427 534.422 27.6827 534.411 27.48C534.251 27.3947 534.134 27.2667 534.059 27.096C533.985 26.9253 533.947 26.744 533.947 26.552C533.947 26.4133 533.963 26.3067 533.995 26.232C533.91 26.1573 533.841 26.0027 533.787 25.768C533.734 25.5227 533.707 25.2667 533.707 25C533.707 24.68 533.745 24.4453 533.819 24.296C533.766 24.1893 533.739 24.0667 533.739 23.928C533.739 23.8107 533.755 23.6987 533.787 23.592C533.83 23.4853 533.889 23.4 533.963 23.336C533.931 23.2827 533.915 23.2347 533.915 23.192C533.915 23.1173 533.942 23.0373 533.995 22.952C534.049 22.8667 534.107 22.8027 534.171 22.76C534.161 22.5893 534.203 22.4347 534.299 22.296C534.406 22.1467 534.513 22.056 534.619 22.024C534.609 21.9173 534.646 21.7893 534.731 21.64C534.817 21.4907 534.929 21.368 535.067 21.272C535.217 21.176 535.366 21.1333 535.515 21.144C535.729 20.8453 536.022 20.696 536.395 20.696C536.555 20.696 536.678 20.7173 536.763 20.76C536.881 20.7067 537.025 20.68 537.195 20.68C537.366 20.68 537.553 20.7227 537.755 20.808C537.819 20.776 537.899 20.76 537.995 20.76C538.102 20.76 538.203 20.7813 538.299 20.824C538.406 20.856 538.475 20.904 538.507 20.968C538.497 20.9253 538.491 20.8613 538.491 20.776C538.491 20.6053 538.534 20.456 538.619 20.328C538.545 20.2 538.507 20.072 538.507 19.944C538.507 19.88 538.513 19.832 538.523 19.8C538.513 19.7467 538.491 19.6773 538.459 19.592C538.427 19.496 538.411 19.416 538.411 19.352C538.411 19.2667 538.433 19.1813 538.475 19.096C538.422 18.9893 538.395 18.8827 538.395 18.776C538.395 18.6587 538.427 18.5467 538.491 18.44C538.417 18.2907 538.379 18.136 538.379 17.976C538.379 17.7627 538.438 17.5707 538.555 17.4C538.683 17.2293 538.854 17.144 539.067 17.144C539.249 17.144 539.403 17.2133 539.531 17.352C539.67 17.48 539.739 17.6293 539.739 17.8C539.739 17.864 539.734 17.912 539.723 17.944C539.883 18.072 539.963 18.248 539.963 18.472C539.963 18.5893 539.926 18.712 539.851 18.84C539.883 18.9147 539.899 18.9947 539.899 19.08C539.899 19.1973 539.873 19.3093 539.819 19.416C539.873 19.5227 539.899 19.6347 539.899 19.752C539.899 19.9013 539.862 20.0293 539.787 20.136C539.894 20.264 539.947 20.3867 539.947 20.504C539.947 20.5893 539.915 20.68 539.851 20.776C539.883 20.84 539.899 20.92 539.899 21.016C539.899 21.0907 539.883 21.1707 539.851 21.256C539.937 21.3733 539.979 21.5013 539.979 21.64C539.979 21.7467 539.953 21.8533 539.899 21.96C539.963 22.0667 539.995 22.1947 539.995 22.344C539.995 22.5893 539.937 22.76 539.819 22.856C539.926 22.984 539.979 23.176 539.979 23.432C539.979 23.5813 539.958 23.7307 539.915 23.88C539.883 24.0293 539.851 24.136 539.819 24.2C539.926 24.36 539.979 24.5627 539.979 24.808C539.979 24.9253 539.953 25.0373 539.899 25.144C540.017 25.2613 540.075 25.4373 540.075 25.672C540.075 25.928 540.022 26.136 539.915 26.296C540.022 26.4347 540.075 26.632 540.075 26.888C540.075 27.0587 540.049 27.2133 539.995 27.352C539.953 27.48 539.894 27.5653 539.819 27.608C539.83 27.6827 539.857 27.7947 539.899 27.944C539.953 28.1787 539.979 28.328 539.979 28.392C539.979 28.5627 539.926 28.7013 539.819 28.808C539.691 28.936 539.542 29 539.371 29C539.233 29 539.105 28.952 538.987 28.856C538.881 28.7493 538.817 28.6107 538.795 28.44C538.742 28.3867 538.705 28.3173 538.683 28.232C538.662 28.136 538.651 28.0773 538.651 28.056ZM536.651 27.432C536.683 27.3573 536.779 27.32 536.939 27.32C537.014 27.32 537.078 27.3253 537.131 27.336C537.185 27.3467 537.227 27.352 537.259 27.352C537.27 27.2773 537.334 27.2133 537.451 27.16C537.579 27.096 537.702 27.064 537.819 27.064C537.894 27.064 537.958 27.08 538.011 27.112C538.001 27.0053 538.022 26.92 538.075 26.856C538.129 26.792 538.198 26.7333 538.283 26.68C538.379 26.616 538.449 26.568 538.491 26.536C538.47 26.4933 538.459 26.3973 538.459 26.248C538.459 25.928 538.497 25.7307 538.571 25.656C538.497 25.5813 538.459 25.432 538.459 25.208C538.459 24.952 538.497 24.728 538.571 24.536C538.507 24.3973 538.475 24.1627 538.475 23.832C538.475 23.512 538.497 23.2987 538.539 23.192C538.443 23 538.395 22.7813 538.395 22.536C538.395 22.344 538.417 22.2053 538.459 22.12C538.395 22.1627 538.299 22.168 538.171 22.136C538.054 22.0933 537.958 22.0347 537.883 21.96C537.841 22.024 537.755 22.056 537.627 22.056C537.542 22.056 537.457 22.0453 537.371 22.024C537.286 21.992 537.227 21.96 537.195 21.928C537.025 22.0027 536.859 22.04 536.699 22.04C536.657 22.04 536.593 22.0293 536.507 22.008C536.369 22.1573 536.262 22.264 536.187 22.328C536.113 22.392 536.011 22.4293 535.883 22.44C535.851 22.5147 535.819 22.6053 535.787 22.712C535.755 22.808 535.718 22.888 535.675 22.952C535.633 23.016 535.558 23.0693 535.451 23.112C535.43 23.2507 535.377 23.3627 535.291 23.448C535.302 23.4907 535.307 23.5493 535.307 23.624C535.307 23.7307 535.281 23.848 535.227 23.976C535.259 24.0507 535.275 24.216 535.275 24.472C535.275 24.9627 535.233 25.256 535.147 25.352C535.158 25.3947 535.195 25.496 535.259 25.656C535.323 25.816 535.355 25.9707 535.355 26.12C535.355 26.2373 535.334 26.344 535.291 26.44C535.505 26.5253 535.638 26.6747 535.691 26.888C535.798 26.92 535.899 26.9893 535.995 27.096C536.251 27.0853 536.47 27.1973 536.651 27.432ZM548.475 22.744C548.593 22.7973 548.699 22.9253 548.795 23.128C548.902 23.3307 548.955 23.5387 548.955 23.752C548.955 24.1147 548.795 24.36 548.475 24.488C548.39 24.6373 548.273 24.7547 548.123 24.84C547.985 24.9253 547.83 24.968 547.659 24.968C547.521 24.968 547.377 24.936 547.227 24.872C547.142 24.9253 547.025 24.9733 546.875 25.016C546.726 25.0587 546.577 25.08 546.427 25.08C546.171 25.08 545.995 25.0267 545.899 24.92C545.793 25.0053 545.622 25.048 545.387 25.048C545.217 25.048 545.062 25.016 544.923 24.952C544.774 25.0267 544.603 25.064 544.411 25.064C544.23 25.064 544.081 25.0373 543.963 24.984C543.857 25.08 543.638 25.128 543.307 25.128C543.126 25.128 543.003 25.112 542.939 25.08C542.971 25.3893 542.929 25.6187 542.811 25.768C543.014 25.9707 543.094 26.1893 543.051 26.424C543.062 26.4347 543.121 26.4773 543.227 26.552C543.334 26.6267 543.409 26.7493 543.451 26.92C543.569 26.92 543.675 26.968 543.771 27.064C543.878 27.16 543.942 27.256 543.963 27.352C544.006 27.3093 544.091 27.288 544.219 27.288C544.315 27.288 544.401 27.304 544.475 27.336C544.55 27.368 544.593 27.4053 544.603 27.448C544.678 27.4053 544.763 27.384 544.859 27.384C544.998 27.384 545.126 27.432 545.243 27.528C545.35 27.5067 545.43 27.496 545.483 27.496C545.59 27.496 545.681 27.512 545.755 27.544C545.787 27.4587 545.873 27.3787 546.011 27.304C546.15 27.2187 546.294 27.1813 546.443 27.192C546.529 27.0853 546.646 27 546.795 26.936C546.945 26.872 547.094 26.84 547.243 26.84C547.531 26.84 547.739 26.9573 547.867 27.192C547.91 27.2773 547.931 27.3787 547.931 27.496C547.931 27.752 547.814 27.9547 547.579 28.104C547.526 28.136 547.435 28.1947 547.307 28.28C547.179 28.3547 547.062 28.4133 546.955 28.456C546.849 28.4987 546.753 28.52 546.667 28.52C546.507 28.712 546.289 28.808 546.011 28.808C545.883 28.808 545.787 28.7973 545.723 28.776C545.595 28.8827 545.409 28.936 545.163 28.936C544.939 28.936 544.785 28.8933 544.699 28.808C544.625 28.84 544.55 28.856 544.475 28.856C544.326 28.856 544.187 28.8027 544.059 28.696C543.515 28.728 543.147 28.5573 542.955 28.184C542.806 28.184 542.635 28.0933 542.443 27.912C542.262 27.72 542.161 27.5547 542.139 27.416C541.894 27.32 541.739 27.144 541.675 26.888C541.665 26.8027 541.665 26.7227 541.675 26.648C541.633 26.6373 541.595 26.5947 541.563 26.52C541.542 26.4347 541.531 26.3493 541.531 26.264C541.531 26.2 541.537 26.1573 541.547 26.136C541.462 25.88 541.419 25.6453 541.419 25.432C541.419 25.2187 541.462 25.0267 541.547 24.856C541.483 24.7387 541.451 24.6107 541.451 24.472C541.451 24.3013 541.489 24.1307 541.563 23.96C541.638 23.7893 541.707 23.6773 541.771 23.624C541.75 23.5707 541.766 23.48 541.819 23.352C541.873 23.2133 541.942 23.0907 542.027 22.984C542.123 22.8667 542.219 22.7973 542.315 22.776L542.299 22.6C542.299 22.184 542.523 21.9227 542.971 21.816C542.971 21.6347 543.078 21.4587 543.291 21.288C543.505 21.1173 543.691 21.0427 543.851 21.064C543.873 20.9467 543.974 20.856 544.155 20.792C544.347 20.7173 544.491 20.696 544.587 20.728C544.673 20.5893 544.843 20.4933 545.099 20.44C545.195 20.3333 545.334 20.28 545.515 20.28C545.569 20.28 545.638 20.2907 545.723 20.312L545.867 20.296C545.995 20.296 546.102 20.3227 546.187 20.376C546.283 20.4187 546.326 20.472 546.315 20.536C546.55 20.5573 546.747 20.6107 546.907 20.696C547.067 20.7813 547.163 20.936 547.195 21.16C547.334 21.128 547.51 21.1653 547.723 21.272C547.937 21.368 548.118 21.5227 548.267 21.736C548.427 21.9387 548.507 22.1787 548.507 22.456C548.507 22.52 548.497 22.616 548.475 22.744ZM546.123 23.784C546.23 23.6347 546.491 23.56 546.907 23.56C547.142 23.56 547.323 23.5813 547.451 23.624C547.366 23.5813 547.286 23.4907 547.211 23.352C547.147 23.2027 547.115 23.064 547.115 22.936C547.115 22.8507 547.131 22.7867 547.163 22.744C547.014 22.7547 546.886 22.7173 546.779 22.632C546.683 22.536 546.593 22.4293 546.507 22.312C546.433 22.1947 546.374 22.1093 546.331 22.056C546.278 22.088 546.166 22.0613 545.995 21.976C545.835 21.88 545.75 21.784 545.739 21.688C545.697 21.7413 545.606 21.7893 545.467 21.832C545.329 21.864 545.222 21.8747 545.147 21.864C545.115 21.9173 545.041 21.9707 544.923 22.024C544.806 22.0773 544.683 22.0933 544.555 22.072C544.449 22.2747 544.337 22.44 544.219 22.568C544.102 22.696 543.953 22.792 543.771 22.856C543.75 23.0053 543.681 23.1707 543.563 23.352C543.457 23.5333 543.345 23.672 543.227 23.768L543.291 23.784C543.441 23.6773 543.643 23.624 543.899 23.624C544.049 23.624 544.187 23.64 544.315 23.672C544.454 23.704 544.55 23.7413 544.603 23.784C544.859 23.624 545.142 23.544 545.451 23.544C545.707 23.544 545.931 23.624 546.123 23.784ZM552.853 22.152C552.875 22.2693 552.837 22.376 552.741 22.472C552.656 22.5573 552.549 22.6053 552.421 22.616C552.347 22.8293 552.149 22.9573 551.829 23C551.84 23.1813 551.803 23.336 551.717 23.464C551.632 23.5813 551.536 23.6507 551.429 23.672C551.429 23.9493 551.371 24.2373 551.253 24.536C551.275 24.6213 551.285 24.696 551.285 24.76C551.285 24.9733 551.243 25.1653 551.157 25.336C551.211 25.4427 551.237 25.5653 551.237 25.704C551.237 25.8853 551.205 26.072 551.141 26.264C551.237 26.392 551.285 26.536 551.285 26.696C551.285 26.792 551.259 26.904 551.205 27.032C551.237 27.096 551.253 27.1973 551.253 27.336C551.253 27.5707 551.205 27.7413 551.109 27.848C551.152 27.9973 551.173 28.1147 551.173 28.2C551.173 28.2853 551.157 28.36 551.125 28.424C551.125 28.6053 551.056 28.7493 550.917 28.856C550.779 28.952 550.613 29 550.421 29C550.24 29 550.08 28.952 549.941 28.856C549.813 28.7493 549.755 28.6053 549.765 28.424C549.733 28.328 549.717 28.2267 549.717 28.12C549.717 27.896 549.755 27.6827 549.829 27.48C549.733 27.352 549.685 27.2133 549.685 27.064C549.685 26.968 549.712 26.856 549.765 26.728C549.691 26.6107 549.653 26.4773 549.653 26.328C549.653 26.2213 549.675 26.1253 549.717 26.04C549.76 25.9547 549.813 25.8853 549.877 25.832C549.728 25.6613 549.653 25.464 549.653 25.24C549.653 25.0267 549.723 24.8453 549.861 24.696C549.819 24.6427 549.781 24.5627 549.749 24.456C549.717 24.3493 549.701 24.2427 549.701 24.136C549.701 23.9973 549.733 23.896 549.797 23.832C549.712 23.64 549.669 23.4213 549.669 23.176C549.669 22.9627 549.701 22.8187 549.765 22.744C549.669 22.5307 549.621 22.328 549.621 22.136C549.621 21.9227 549.669 21.768 549.765 21.672C549.595 21.4693 549.509 21.2453 549.509 21C549.509 20.7013 549.637 20.4827 549.893 20.344C550.021 20.28 550.149 20.248 550.277 20.248C550.48 20.248 550.651 20.3333 550.789 20.504C550.928 20.664 550.997 20.856 550.997 21.08C550.997 21.1973 550.971 21.32 550.917 21.448C551.056 21.5867 551.125 21.7627 551.125 21.976C551.125 22.1253 551.115 22.248 551.093 22.344C551.179 22.0347 551.301 21.8533 551.461 21.8C551.461 21.5973 551.525 21.4107 551.653 21.24C551.781 21.0693 551.931 20.9413 552.101 20.856C552.283 20.7707 552.432 20.744 552.549 20.776C552.816 20.488 553.104 20.344 553.413 20.344C553.552 20.344 553.675 20.3707 553.781 20.424C553.877 20.3493 554.021 20.312 554.213 20.312C554.373 20.312 554.523 20.344 554.661 20.408C554.8 20.4613 554.891 20.5467 554.933 20.664C555.317 20.6853 555.589 20.8453 555.749 21.144C555.888 21.1547 556.021 21.2347 556.149 21.384C556.288 21.5333 556.357 21.704 556.357 21.896C556.357 21.9813 556.331 22.088 556.277 22.216C556.523 22.312 556.645 22.4987 556.645 22.776C556.645 22.872 556.64 22.9413 556.629 22.984C556.768 23.0587 556.864 23.1387 556.917 23.224C556.981 23.2987 557.013 23.3947 557.013 23.512C557.013 23.64 556.981 23.8107 556.917 24.024C557.045 24.12 557.109 24.28 557.109 24.504C557.109 24.7387 557.051 24.9147 556.933 25.032C557.029 25.192 557.077 25.3893 557.077 25.624C557.077 25.8587 557.024 26.0453 556.917 26.184C556.981 26.504 557.013 26.728 557.013 26.856C557.013 27.08 556.965 27.2347 556.869 27.32C556.955 27.512 556.997 27.6987 556.997 27.88C556.997 28.1253 556.939 28.3067 556.821 28.424C556.832 28.5947 556.757 28.7333 556.597 28.84C556.448 28.9467 556.277 29 556.085 29C555.936 29 555.808 28.9627 555.701 28.888C555.595 28.8133 555.541 28.7067 555.541 28.568C555.456 28.3653 555.413 28.136 555.413 27.88C555.413 27.4853 555.509 27.1973 555.701 27.016C555.627 26.92 555.557 26.7653 555.493 26.552C555.44 26.328 555.413 26.12 555.413 25.928C555.413 25.6613 555.467 25.496 555.573 25.432C555.488 25.272 555.445 25.1067 555.445 24.936C555.445 24.744 555.504 24.5093 555.621 24.232C555.525 24.1573 555.445 24.0453 555.381 23.896C555.317 23.7467 555.285 23.6027 555.285 23.464C555.285 23.4213 555.296 23.3573 555.317 23.272C555.2 23.176 555.093 23.0213 554.997 22.808C554.912 22.5947 554.875 22.4027 554.885 22.232C554.789 22.2213 554.693 22.1893 554.597 22.136C554.501 22.0827 554.427 22.008 554.373 21.912H554.197C554.016 21.912 553.888 21.8747 553.813 21.8C553.728 21.9067 553.584 22.0027 553.381 22.088C553.189 22.1627 553.019 22.184 552.869 22.152H552.853ZM564.051 27.112C564.083 27.2187 564.099 27.3253 564.099 27.432C564.099 27.6453 564.014 27.7893 563.843 27.864C563.865 28.024 563.801 28.184 563.651 28.344C563.502 28.504 563.363 28.584 563.235 28.584C563.182 28.68 563.022 28.7707 562.755 28.856C562.489 28.9413 562.243 28.984 562.019 28.984C561.859 28.984 561.737 28.952 561.651 28.888C561.502 28.9627 561.289 29 561.011 29C560.766 29 560.542 28.9627 560.339 28.888C560.147 28.8133 560.03 28.7013 559.987 28.552C559.774 28.584 559.534 28.52 559.267 28.36C559.011 28.2 558.846 28.0347 558.771 27.864C558.579 27.8107 558.419 27.7093 558.291 27.56C558.174 27.4107 558.11 27.2347 558.099 27.032C558.035 26.936 558.003 26.84 558.003 26.744C558.003 26.5947 558.051 26.4613 558.147 26.344C558.254 26.2267 558.377 26.168 558.515 26.168C558.654 26.168 558.787 26.2533 558.915 26.424C559.107 26.4027 559.278 26.4667 559.427 26.616C559.587 26.7653 559.667 26.9147 559.667 27.064C559.699 27.064 559.779 27.0747 559.907 27.096C560.046 27.1067 560.169 27.144 560.275 27.208C560.382 27.272 560.457 27.3627 560.499 27.48C560.691 27.48 560.878 27.5067 561.059 27.56C561.251 27.6027 561.363 27.656 561.395 27.72C561.481 27.6667 561.603 27.624 561.763 27.592C561.934 27.5493 562.078 27.528 562.195 27.528C562.227 27.4853 562.307 27.4427 562.435 27.4C562.563 27.3573 562.67 27.3307 562.755 27.32C562.702 27.2453 562.675 27.1333 562.675 26.984C562.675 26.76 562.745 26.6 562.883 26.504C562.755 26.4613 562.654 26.3973 562.579 26.312C562.505 26.216 562.473 26.1093 562.483 25.992C562.398 26.0133 562.334 26.024 562.291 26.024C562.089 26.024 561.923 25.944 561.795 25.784C561.582 25.8053 561.369 25.7573 561.155 25.64C560.953 25.5227 560.803 25.368 560.707 25.176C560.633 25.208 560.553 25.224 560.467 25.224C560.286 25.224 560.094 25.1707 559.891 25.064C559.699 24.9467 559.577 24.8347 559.523 24.728C559.374 24.7707 559.198 24.7227 558.995 24.584C558.793 24.4453 558.691 24.2907 558.691 24.12C558.563 24.056 558.462 23.9493 558.387 23.8C558.313 23.64 558.275 23.496 558.275 23.368C558.275 23.272 558.297 23.208 558.339 23.176C558.286 23.0693 558.259 22.9627 558.259 22.856C558.259 22.664 558.323 22.4987 558.451 22.36C558.419 22.2427 558.403 22.136 558.403 22.04C558.403 21.8587 558.441 21.7093 558.515 21.592C558.601 21.464 558.702 21.4107 558.819 21.432C558.798 21.2613 558.835 21.112 558.931 20.984C559.038 20.856 559.166 20.7653 559.315 20.712C559.475 20.648 559.614 20.6267 559.731 20.648C559.795 20.552 559.881 20.4773 559.987 20.424C560.094 20.3707 560.201 20.344 560.307 20.344C560.489 20.344 560.617 20.3973 560.691 20.504C560.702 20.4507 560.739 20.408 560.803 20.376C560.878 20.344 560.963 20.328 561.059 20.328C561.145 20.328 561.23 20.344 561.315 20.376C561.401 20.408 561.465 20.4453 561.507 20.488C561.571 20.424 561.683 20.392 561.843 20.392C561.971 20.392 562.099 20.4187 562.227 20.472C562.355 20.5147 562.441 20.5787 562.483 20.664C562.547 20.632 562.617 20.616 562.691 20.616C562.819 20.616 562.937 20.664 563.043 20.76C563.161 20.8453 563.241 20.9573 563.283 21.096C563.443 21.0747 563.609 21.128 563.779 21.256C563.95 21.384 564.014 21.512 563.971 21.64C564.259 21.8 564.403 22.0187 564.403 22.296C564.403 22.4667 564.345 22.616 564.227 22.744C564.11 22.872 563.961 22.936 563.779 22.936C563.619 22.9253 563.486 22.8827 563.379 22.808C563.273 22.7333 563.209 22.6427 563.187 22.536C563.049 22.5147 562.915 22.4613 562.787 22.376C562.67 22.28 562.606 22.1573 562.595 22.008C562.393 22.0293 562.238 22.008 562.131 21.944C562.035 21.88 561.95 21.7787 561.875 21.64C561.801 21.6933 561.705 21.72 561.587 21.72C561.47 21.72 561.342 21.688 561.203 21.624C561.129 21.688 561.033 21.7413 560.915 21.784C560.809 21.8267 560.702 21.848 560.595 21.848C560.478 21.848 560.377 21.8213 560.291 21.768C560.313 21.896 560.281 21.9973 560.195 22.072C560.11 22.1467 559.993 22.1733 559.843 22.152C559.875 22.2267 559.891 22.3067 559.891 22.392C559.891 22.584 559.806 22.744 559.635 22.872C559.753 22.9253 559.838 23.016 559.891 23.144C559.945 23.2613 559.966 23.3787 559.955 23.496L560.083 23.48C560.403 23.48 560.606 23.5813 560.691 23.784L560.819 23.768C560.99 23.768 561.15 23.8107 561.299 23.896C561.459 23.9813 561.577 24.1253 561.651 24.328C561.822 24.3173 561.987 24.3387 562.147 24.392C562.307 24.4347 562.419 24.52 562.483 24.648C562.569 24.616 562.649 24.6 562.723 24.6C562.905 24.6 563.065 24.6533 563.203 24.76C563.353 24.8667 563.433 24.9893 563.443 25.128C563.539 25.128 563.625 25.1813 563.699 25.288C563.785 25.3947 563.817 25.5173 563.795 25.656C563.87 25.6453 563.939 25.688 564.003 25.784C564.067 25.8693 564.099 25.9707 564.099 26.088C564.099 26.152 564.083 26.2107 564.051 26.264C564.201 26.3707 564.275 26.5147 564.275 26.696C564.275 26.792 564.254 26.8773 564.211 26.952C564.179 27.0267 564.126 27.08 564.051 27.112ZM565.672 17.592C565.533 17.656 565.421 17.7467 565.336 17.864C565.25 17.9813 565.208 18.104 565.208 18.232C565.208 18.4027 565.277 18.5733 565.416 18.744C565.394 18.8827 565.469 19.016 565.64 19.144C565.81 19.272 565.997 19.336 566.2 19.336C566.338 19.336 566.461 19.2987 566.568 19.224C566.866 19.064 567.016 18.8613 567.016 18.616C567.016 18.456 566.952 18.2747 566.824 18.072C566.834 17.8587 566.77 17.6933 566.632 17.576C566.504 17.448 566.349 17.384 566.168 17.384C565.965 17.384 565.8 17.4533 565.672 17.592ZM566.712 24.664C566.797 24.696 566.861 24.7973 566.904 24.968C566.957 25.1387 566.984 25.3253 566.984 25.528C566.984 25.7627 566.946 25.9173 566.872 25.992C566.936 26.152 566.968 26.3067 566.968 26.456C566.968 26.648 566.92 26.808 566.824 26.936C566.898 27.1173 566.936 27.3307 566.936 27.576C566.936 27.7787 566.904 27.944 566.84 28.072C566.872 28.168 566.888 28.2587 566.888 28.344C566.888 28.536 566.818 28.6907 566.68 28.808C566.541 28.9147 566.376 28.968 566.184 28.968C566.002 28.968 565.848 28.9147 565.72 28.808C565.592 28.6907 565.533 28.536 565.544 28.344C565.49 28.28 565.448 28.1787 565.416 28.04C565.384 27.9013 565.368 27.7573 565.368 27.608C565.368 27.3307 565.426 27.1493 565.544 27.064C565.458 26.9253 565.416 26.7173 565.416 26.44C565.416 26.1627 565.453 25.96 565.528 25.832C565.485 25.7893 565.453 25.688 565.432 25.528C565.41 25.368 565.4 25.192 565.4 25C565.4 24.8187 565.41 24.6587 565.432 24.52C565.453 24.3707 565.485 24.2747 565.528 24.232C565.464 24.168 565.432 23.992 565.432 23.704C565.432 23.3733 565.469 23.1333 565.544 22.984C565.49 22.8987 565.442 22.7867 565.4 22.648C565.357 22.5093 565.336 22.3813 565.336 22.264C565.336 22.1573 565.346 22.0827 565.368 22.04C565.282 21.7627 565.24 21.5387 565.24 21.368C565.24 21.1867 565.282 21 565.368 20.808C565.346 20.648 565.384 20.5253 565.48 20.44C565.576 20.3547 565.714 20.312 565.896 20.312C566.386 20.312 566.632 20.6107 566.632 21.208C566.728 21.272 566.797 21.3627 566.84 21.48C566.893 21.5867 566.92 21.7093 566.92 21.848C566.92 22.072 566.866 22.264 566.76 22.424C566.802 22.488 566.834 22.584 566.856 22.712C566.888 22.84 566.904 22.968 566.904 23.096C566.904 23.2667 566.877 23.384 566.824 23.448C566.866 23.5013 566.888 23.6133 566.888 23.784C566.888 23.944 566.866 24.1147 566.824 24.296C566.792 24.4773 566.754 24.6 566.712 24.664ZM572.963 27.624C572.974 27.5707 573.001 27.5333 573.043 27.512C573.097 27.4907 573.155 27.4747 573.219 27.464C573.262 27.4533 573.315 27.448 573.379 27.448C573.561 27.448 573.705 27.5173 573.811 27.656C573.929 27.784 573.987 27.9387 573.987 28.12C573.987 28.2587 573.95 28.3813 573.875 28.488C573.801 28.584 573.689 28.6533 573.539 28.696C573.315 28.888 573.049 28.968 572.739 28.936C572.654 29.0107 572.542 29.048 572.403 29.048C572.211 29.048 572.035 28.9787 571.875 28.84C571.769 28.8187 571.641 28.7653 571.491 28.68C571.342 28.584 571.267 28.4987 571.267 28.424C571.118 28.4027 570.963 28.3173 570.803 28.168C570.654 28.0187 570.601 27.8373 570.643 27.624C570.526 27.496 570.457 27.3627 570.435 27.224C570.307 27.16 570.211 27.064 570.147 26.936C570.094 26.808 570.078 26.6747 570.099 26.536C569.961 26.408 569.891 26.216 569.891 25.96C569.891 25.864 569.902 25.7413 569.923 25.592C569.774 25.4747 569.699 25.3147 569.699 25.112C569.699 24.9307 569.758 24.7813 569.875 24.664C569.747 24.536 569.683 24.3707 569.683 24.168C569.683 24.0933 569.705 24.0027 569.747 23.896C569.683 23.768 569.651 23.64 569.651 23.512C569.651 23.3413 569.699 23.208 569.795 23.112C569.731 22.984 569.699 22.8453 569.699 22.696C569.699 22.568 569.715 22.456 569.747 22.36C569.79 22.2533 569.838 22.1733 569.891 22.12C569.774 21.9813 569.715 21.832 569.715 21.672C569.715 21.5867 569.731 21.496 569.763 21.4C569.667 21.432 569.561 21.448 569.443 21.448C569.262 21.448 569.129 21.4107 569.043 21.336C568.915 21.368 568.803 21.384 568.707 21.384C568.515 21.384 568.318 21.3253 568.115 21.208C568.009 21.272 567.897 21.304 567.779 21.304C567.609 21.304 567.47 21.2347 567.363 21.096C567.246 20.9467 567.187 20.7813 567.187 20.6C567.187 20.44 567.241 20.3067 567.347 20.2C567.443 20.0827 567.587 20.0187 567.779 20.008C567.907 19.9547 568.025 19.928 568.131 19.928C568.345 19.928 568.531 19.9813 568.691 20.088C568.83 20.0347 568.985 20.008 569.155 20.008C569.305 20.008 569.422 20.0347 569.507 20.088C569.518 20.0453 569.561 20.008 569.635 19.976C569.721 19.9333 569.79 19.9173 569.843 19.928C569.801 19.832 569.779 19.704 569.779 19.544C569.779 19.352 569.822 19.2507 569.907 19.24C569.833 19.1333 569.795 18.9787 569.795 18.776C569.795 18.4987 569.865 18.3067 570.003 18.2C569.993 17.9867 570.035 17.8267 570.131 17.72C570.227 17.6133 570.35 17.56 570.499 17.56C570.649 17.56 570.787 17.6133 570.915 17.72C571.043 17.816 571.107 17.944 571.107 18.104C571.107 18.2107 571.065 18.3333 570.979 18.472C571.086 18.568 571.139 18.728 571.139 18.952C571.139 19.048 571.123 19.1493 571.091 19.256C571.07 19.352 571.038 19.4267 570.995 19.48C571.059 19.5227 571.091 19.608 571.091 19.736C571.091 19.8427 571.065 19.9867 571.011 20.168C571.107 20.136 571.209 20.12 571.315 20.12C571.475 20.12 571.598 20.1573 571.683 20.232C571.79 20.1787 571.875 20.152 571.939 20.152C572.046 20.152 572.131 20.1947 572.195 20.28C572.27 20.2267 572.361 20.2 572.467 20.2C572.617 20.2 572.734 20.2587 572.819 20.376C573.022 20.376 573.171 20.424 573.267 20.52C573.374 20.6053 573.427 20.7173 573.427 20.856C573.427 21.0267 573.358 21.192 573.219 21.352C573.091 21.5013 572.942 21.576 572.771 21.576C572.675 21.576 572.579 21.544 572.483 21.48C572.377 21.5653 572.238 21.608 572.067 21.608C571.907 21.608 571.774 21.5707 571.667 21.496C571.529 21.5493 571.427 21.576 571.363 21.576C571.278 21.576 571.177 21.5387 571.059 21.464C571.155 21.592 571.203 21.7307 571.203 21.88C571.203 22.04 571.139 22.184 571.011 22.312C571.107 22.44 571.155 22.6 571.155 22.792C571.155 22.9627 571.107 23.1227 571.011 23.272C571.139 23.3573 571.203 23.496 571.203 23.688C571.203 23.848 571.155 23.9867 571.059 24.104C571.166 24.2213 571.219 24.4293 571.219 24.728C571.219 24.856 571.203 24.9627 571.171 25.048C571.246 25.1547 571.283 25.2667 571.283 25.384C571.283 25.448 571.267 25.5333 571.235 25.64C571.214 25.736 571.198 25.816 571.187 25.88C571.315 26.0293 571.379 26.1733 571.379 26.312C571.561 26.4507 571.651 26.616 571.651 26.808C571.865 26.9253 571.971 27.1227 571.971 27.4C571.993 27.432 572.014 27.4533 572.035 27.464C572.057 27.4747 572.073 27.4853 572.083 27.496L572.195 27.48C572.355 27.48 572.483 27.528 572.579 27.624C572.665 27.6027 572.734 27.592 572.787 27.592C572.819 27.592 572.878 27.6027 572.963 27.624ZM579.657 26.056C579.614 26.1947 579.523 26.3173 579.385 26.424C579.406 26.8507 579.294 27.1173 579.049 27.224C579.027 27.3947 578.953 27.576 578.825 27.768C578.697 27.96 578.558 28.088 578.409 28.152C578.409 28.1947 578.398 28.2853 578.377 28.424C578.366 28.552 578.334 28.6587 578.281 28.744C578.238 28.8293 578.169 28.9147 578.073 29C578.126 29.3733 577.95 29.7467 577.545 30.12C577.534 30.376 577.449 30.5787 577.289 30.728C577.139 30.888 576.958 30.984 576.745 31.016C576.723 31.1653 576.611 31.3093 576.409 31.448C576.217 31.5973 576.03 31.672 575.849 31.672C575.806 31.7893 575.63 31.9067 575.321 32.024C575.022 32.152 574.825 32.184 574.729 32.12C574.473 32.1413 574.27 32.0773 574.121 31.928C573.971 31.7787 573.897 31.6027 573.897 31.4C573.897 31.2507 573.939 31.1227 574.025 31.016C574.11 30.9093 574.233 30.856 574.393 30.856C574.446 30.856 574.489 30.8613 574.521 30.872C574.819 30.648 575.059 30.536 575.241 30.536C575.305 30.536 575.353 30.5413 575.385 30.552C575.406 30.424 575.481 30.3013 575.609 30.184C575.737 30.0773 575.886 29.992 576.057 29.928C576.057 29.8213 576.099 29.7093 576.185 29.592C576.27 29.4747 576.371 29.3787 576.489 29.304C576.467 29.24 576.457 29.192 576.457 29.16C576.457 29 576.526 28.824 576.665 28.632C576.803 28.4293 576.942 28.3013 577.081 28.248C576.835 28.12 576.713 27.9227 576.713 27.656C576.606 27.6453 576.505 27.5707 576.409 27.432C576.323 27.2933 576.281 27.144 576.281 26.984C576.281 26.888 576.307 26.7973 576.361 26.712C576.201 26.6587 576.078 26.5733 575.993 26.456C575.918 26.3387 575.881 26.2 575.881 26.04C575.881 25.9227 575.902 25.8053 575.945 25.688C575.795 25.6027 575.678 25.512 575.593 25.416C575.518 25.32 575.486 25.208 575.497 25.08C575.337 24.9733 575.257 24.808 575.257 24.584C575.257 24.4773 575.273 24.376 575.305 24.28C575.038 23.992 574.905 23.6827 574.905 23.352C574.905 23.256 574.91 23.1813 574.921 23.128C574.771 23.0533 574.659 22.952 574.585 22.824C574.51 22.6853 574.473 22.5307 574.473 22.36C574.473 22.2 574.505 22.0507 574.569 21.912C574.291 21.72 574.153 21.5067 574.153 21.272C574.153 21.0053 574.27 20.792 574.505 20.632C574.601 20.568 574.707 20.536 574.825 20.536C574.985 20.536 575.129 20.5947 575.257 20.712C575.395 20.8293 575.497 20.9733 575.561 21.144C575.657 21.2293 575.737 21.3627 575.801 21.544C575.865 21.7253 575.897 21.896 575.897 22.056C575.897 22.152 575.891 22.216 575.881 22.248C576.201 22.5893 576.361 22.92 576.361 23.24C576.361 23.2827 576.35 23.3573 576.329 23.464C576.467 23.5387 576.569 23.6507 576.633 23.8C576.697 23.9387 576.718 24.0827 576.697 24.232C576.803 24.3173 576.878 24.424 576.921 24.552C576.974 24.68 576.99 24.808 576.969 24.936C577.065 24.936 577.15 25.0107 577.225 25.16C577.31 25.2987 577.342 25.4427 577.321 25.592C577.459 25.6667 577.55 25.768 577.593 25.896C577.635 26.0133 577.646 26.1573 577.625 26.328C577.763 26.3707 577.833 26.504 577.833 26.728C577.865 26.5467 577.902 26.4133 577.945 26.328C577.987 26.2427 578.051 26.152 578.137 26.056C578.115 25.9493 578.105 25.88 578.105 25.848C578.105 25.7307 578.126 25.64 578.169 25.576C578.211 25.5013 578.27 25.4587 578.345 25.448C578.302 25.2453 578.355 25.048 578.505 24.856C578.473 24.792 578.457 24.728 578.457 24.664C578.457 24.5893 578.489 24.5093 578.553 24.424C578.627 24.328 578.675 24.264 578.697 24.232C578.633 24.04 578.601 23.88 578.601 23.752C578.601 23.6453 578.622 23.544 578.665 23.448C578.707 23.352 578.777 23.2347 578.873 23.096C578.809 22.968 578.777 22.776 578.777 22.52C578.777 22.1787 578.846 21.8693 578.985 21.592C578.942 21.4427 578.921 21.3253 578.921 21.24C578.921 21.112 578.953 21 579.017 20.904C579.017 20.648 579.097 20.4453 579.257 20.296C579.417 20.1467 579.598 20.072 579.801 20.072C579.971 20.072 580.115 20.136 580.233 20.264C580.361 20.3813 580.419 20.552 580.409 20.776C580.483 20.9253 580.521 21.1067 580.521 21.32C580.521 21.704 580.43 22.04 580.249 22.328C580.291 22.4667 580.313 22.616 580.313 22.776C580.313 23.0427 580.217 23.2987 580.025 23.544C580.035 23.6293 580.057 23.7307 580.089 23.848C580.121 23.9653 580.137 24.0613 580.137 24.136C580.137 24.296 580.083 24.4347 579.977 24.552C580.03 24.7013 579.918 25.016 579.641 25.496C579.683 25.624 579.705 25.7253 579.705 25.8C579.705 25.8853 579.689 25.9707 579.657 26.056Z M547.48 193.098C547.488 191.41 547.707 190.195 548.137 189.453C548.566 188.703 549.219 188.305 550.094 188.258C550.477 188.258 550.816 188.363 551.113 188.574C551.41 188.785 551.645 189.055 551.816 189.383C551.996 189.703 552.145 190.09 552.262 190.543C552.379 190.988 552.457 191.414 552.496 191.82C552.543 192.219 552.574 192.645 552.59 193.098C552.59 193.715 552.496 194.348 552.309 194.996C552.129 195.637 551.848 196.199 551.465 196.684C551.09 197.16 550.668 197.398 550.199 197.398C548.387 197.398 547.48 195.965 547.48 193.098ZM549.93 189.16C549.742 189.199 549.574 189.262 549.426 189.348C549.277 189.434 549.152 189.531 549.051 189.641C548.957 189.75 548.875 189.895 548.805 190.074C548.734 190.254 548.68 190.422 548.641 190.578C548.609 190.727 548.578 190.922 548.547 191.164C548.523 191.406 548.508 191.617 548.5 191.797C548.492 191.969 548.48 192.199 548.465 192.488C548.457 192.77 548.445 193 548.43 193.18C548.43 193.539 548.449 193.883 548.488 194.211C548.527 194.531 548.598 194.867 548.699 195.219C548.809 195.57 548.977 195.855 549.203 196.074C549.43 196.293 549.703 196.418 550.023 196.449C550.508 196.449 550.906 196.113 551.219 195.441C551.539 194.77 551.699 194.09 551.699 193.402C551.699 190.605 551.109 189.191 549.93 189.16ZM553.117 195.535C553.328 195.535 553.504 195.629 553.645 195.816C553.793 195.996 553.867 196.203 553.867 196.438C553.867 196.609 553.824 196.75 553.738 196.859C553.66 196.961 553.551 197.012 553.41 197.012C553.191 197.012 553.016 196.922 552.883 196.742C552.758 196.562 552.695 196.352 552.695 196.109C552.695 195.938 552.73 195.801 552.801 195.699C552.879 195.59 552.984 195.535 553.117 195.535ZM554.711 197.223L554.523 196.695C556.344 195.922 557.426 194.875 557.77 193.555C557.441 193.766 557.125 193.871 556.82 193.871C556.148 193.871 555.586 193.57 555.133 192.969C554.688 192.359 554.465 191.582 554.465 190.637C554.465 189.965 554.668 189.434 555.074 189.043C555.48 188.645 556 188.445 556.633 188.445C557.234 188.445 557.758 188.664 558.203 189.102C558.656 189.531 558.883 190.105 558.883 190.824C558.883 191.277 558.871 191.672 558.848 192.008C558.832 192.344 558.789 192.711 558.719 193.109C558.656 193.508 558.566 193.859 558.449 194.164C558.332 194.461 558.168 194.773 557.957 195.102C557.754 195.422 557.508 195.703 557.219 195.945C556.93 196.188 556.574 196.422 556.152 196.648C555.73 196.867 555.25 197.059 554.711 197.223ZM558.039 191.152C558.039 190.504 557.914 190.02 557.664 189.699C557.422 189.371 557.121 189.207 556.762 189.207C556.379 189.207 556.047 189.336 555.766 189.594C555.484 189.852 555.344 190.207 555.344 190.66C555.344 191.348 555.5 191.922 555.812 192.383C556.125 192.844 556.508 193.074 556.961 193.074C557.164 193.074 557.336 193.039 557.477 192.969C557.617 192.891 557.723 192.805 557.793 192.711C557.863 192.617 557.918 192.473 557.957 192.277C557.996 192.074 558.02 191.906 558.027 191.773C558.035 191.633 558.039 191.426 558.039 191.152ZM564.812 194.645C564.812 195.496 564.605 196.129 564.191 196.543C563.777 196.949 563.145 197.152 562.293 197.152C560.652 197.152 559.832 196.301 559.832 194.598C559.832 193.988 559.957 193.453 560.207 192.992C560.457 192.531 560.801 192.266 561.238 192.195C560.793 192.188 560.457 192.023 560.23 191.703C560.004 191.383 559.891 190.984 559.891 190.508C559.891 189.773 560.09 189.195 560.488 188.773C560.895 188.352 561.469 188.141 562.211 188.141C562.992 188.141 563.605 188.336 564.051 188.727C564.496 189.117 564.719 189.719 564.719 190.531C564.719 191.008 564.605 191.406 564.379 191.727C564.152 192.047 563.816 192.211 563.371 192.219C563.824 192.289 564.176 192.559 564.426 193.027C564.684 193.496 564.812 194.035 564.812 194.645ZM562.422 196.309C562.859 196.309 563.223 196.141 563.512 195.805C563.801 195.461 563.945 195.055 563.945 194.586C563.945 194.117 563.785 193.715 563.465 193.379C563.145 193.035 562.715 192.859 562.176 192.852C561.707 192.992 561.355 193.215 561.121 193.52C560.887 193.816 560.77 194.152 560.77 194.527C560.77 194.996 560.926 195.41 561.238 195.77C561.551 196.129 561.945 196.309 562.422 196.309ZM562.422 188.785C561.898 188.824 561.5 188.996 561.227 189.301C560.953 189.605 560.816 189.957 560.816 190.355C560.816 190.762 560.945 191.113 561.203 191.41C561.469 191.707 561.82 191.855 562.258 191.855C562.766 191.848 563.152 191.711 563.418 191.445C563.684 191.172 563.816 190.844 563.816 190.461C563.816 190.078 563.688 189.723 563.43 189.395C563.18 189.066 562.844 188.863 562.422 188.785ZM566.734 197.094L565.82 196.824L568.984 189.066C567.164 189.012 565.93 188.957 565.281 188.902L565.164 188.375C565.711 188.312 566.539 188.281 567.648 188.281C568.758 188.273 569.523 188.254 569.945 188.223L569.887 189.242L566.734 197.094ZM570.555 197.223L570.367 196.695C572.188 195.922 573.27 194.875 573.613 193.555C573.285 193.766 572.969 193.871 572.664 193.871C571.992 193.871 571.43 193.57 570.977 192.969C570.531 192.359 570.309 191.582 570.309 190.637C570.309 189.965 570.512 189.434 570.918 189.043C571.324 188.645 571.844 188.445 572.477 188.445C573.078 188.445 573.602 188.664 574.047 189.102C574.5 189.531 574.727 190.105 574.727 190.824C574.727 191.277 574.715 191.672 574.691 192.008C574.676 192.344 574.633 192.711 574.562 193.109C574.5 193.508 574.41 193.859 574.293 194.164C574.176 194.461 574.012 194.773 573.801 195.102C573.598 195.422 573.352 195.703 573.062 195.945C572.773 196.188 572.418 196.422 571.996 196.648C571.574 196.867 571.094 197.059 570.555 197.223ZM573.883 191.152C573.883 190.504 573.758 190.02 573.508 189.699C573.266 189.371 572.965 189.207 572.605 189.207C572.223 189.207 571.891 189.336 571.609 189.594C571.328 189.852 571.188 190.207 571.188 190.66C571.188 191.348 571.344 191.922 571.656 192.383C571.969 192.844 572.352 193.074 572.805 193.074C573.008 193.074 573.18 193.039 573.32 192.969C573.461 192.891 573.566 192.805 573.637 192.711C573.707 192.617 573.762 192.473 573.801 192.277C573.84 192.074 573.863 191.906 573.871 191.773C573.879 191.633 573.883 191.426 573.883 191.152Z M546.48 271.098C546.488 269.41 546.707 268.195 547.137 267.453C547.566 266.703 548.219 266.305 549.094 266.258C549.477 266.258 549.816 266.363 550.113 266.574C550.41 266.785 550.645 267.055 550.816 267.383C550.996 267.703 551.145 268.09 551.262 268.543C551.379 268.988 551.457 269.414 551.496 269.82C551.543 270.219 551.574 270.645 551.59 271.098C551.59 271.715 551.496 272.348 551.309 272.996C551.129 273.637 550.848 274.199 550.465 274.684C550.09 275.16 549.668 275.398 549.199 275.398C547.387 275.398 546.48 273.965 546.48 271.098ZM548.93 267.16C548.742 267.199 548.574 267.262 548.426 267.348C548.277 267.434 548.152 267.531 548.051 267.641C547.957 267.75 547.875 267.895 547.805 268.074C547.734 268.254 547.68 268.422 547.641 268.578C547.609 268.727 547.578 268.922 547.547 269.164C547.523 269.406 547.508 269.617 547.5 269.797C547.492 269.969 547.48 270.199 547.465 270.488C547.457 270.77 547.445 271 547.43 271.18C547.43 271.539 547.449 271.883 547.488 272.211C547.527 272.531 547.598 272.867 547.699 273.219C547.809 273.57 547.977 273.855 548.203 274.074C548.43 274.293 548.703 274.418 549.023 274.449C549.508 274.449 549.906 274.113 550.219 273.441C550.539 272.77 550.699 272.09 550.699 271.402C550.699 268.605 550.109 267.191 548.93 267.16ZM552.117 273.535C552.328 273.535 552.504 273.629 552.645 273.816C552.793 273.996 552.867 274.203 552.867 274.438C552.867 274.609 552.824 274.75 552.738 274.859C552.66 274.961 552.551 275.012 552.41 275.012C552.191 275.012 552.016 274.922 551.883 274.742C551.758 274.562 551.695 274.352 551.695 274.109C551.695 273.938 551.73 273.801 551.801 273.699C551.879 273.59 551.984 273.535 552.117 273.535ZM553.711 275.223L553.523 274.695C555.344 273.922 556.426 272.875 556.77 271.555C556.441 271.766 556.125 271.871 555.82 271.871C555.148 271.871 554.586 271.57 554.133 270.969C553.688 270.359 553.465 269.582 553.465 268.637C553.465 267.965 553.668 267.434 554.074 267.043C554.48 266.645 555 266.445 555.633 266.445C556.234 266.445 556.758 266.664 557.203 267.102C557.656 267.531 557.883 268.105 557.883 268.824C557.883 269.277 557.871 269.672 557.848 270.008C557.832 270.344 557.789 270.711 557.719 271.109C557.656 271.508 557.566 271.859 557.449 272.164C557.332 272.461 557.168 272.773 556.957 273.102C556.754 273.422 556.508 273.703 556.219 273.945C555.93 274.188 555.574 274.422 555.152 274.648C554.73 274.867 554.25 275.059 553.711 275.223ZM557.039 269.152C557.039 268.504 556.914 268.02 556.664 267.699C556.422 267.371 556.121 267.207 555.762 267.207C555.379 267.207 555.047 267.336 554.766 267.594C554.484 267.852 554.344 268.207 554.344 268.66C554.344 269.348 554.5 269.922 554.812 270.383C555.125 270.844 555.508 271.074 555.961 271.074C556.164 271.074 556.336 271.039 556.477 270.969C556.617 270.891 556.723 270.805 556.793 270.711C556.863 270.617 556.918 270.473 556.957 270.277C556.996 270.074 557.02 269.906 557.027 269.773C557.035 269.633 557.039 269.426 557.039 269.152ZM558.961 275.223L558.773 274.695C560.594 273.922 561.676 272.875 562.02 271.555C561.691 271.766 561.375 271.871 561.07 271.871C560.398 271.871 559.836 271.57 559.383 270.969C558.938 270.359 558.715 269.582 558.715 268.637C558.715 267.965 558.918 267.434 559.324 267.043C559.73 266.645 560.25 266.445 560.883 266.445C561.484 266.445 562.008 266.664 562.453 267.102C562.906 267.531 563.133 268.105 563.133 268.824C563.133 269.277 563.121 269.672 563.098 270.008C563.082 270.344 563.039 270.711 562.969 271.109C562.906 271.508 562.816 271.859 562.699 272.164C562.582 272.461 562.418 272.773 562.207 273.102C562.004 273.422 561.758 273.703 561.469 273.945C561.18 274.188 560.824 274.422 560.402 274.648C559.98 274.867 559.5 275.059 558.961 275.223ZM562.289 269.152C562.289 268.504 562.164 268.02 561.914 267.699C561.672 267.371 561.371 267.207 561.012 267.207C560.629 267.207 560.297 267.336 560.016 267.594C559.734 267.852 559.594 268.207 559.594 268.66C559.594 269.348 559.75 269.922 560.062 270.383C560.375 270.844 560.758 271.074 561.211 271.074C561.414 271.074 561.586 271.039 561.727 270.969C561.867 270.891 561.973 270.805 562.043 270.711C562.113 270.617 562.168 270.473 562.207 270.277C562.246 270.074 562.27 269.906 562.277 269.773C562.285 269.633 562.289 269.426 562.289 269.152ZM568.242 266.516L568.441 267.043C566.613 267.824 565.527 268.871 565.184 270.184C565.496 269.98 565.812 269.879 566.133 269.879C566.805 269.879 567.367 270.184 567.82 270.793C568.273 271.395 568.5 272.164 568.5 273.102C568.5 273.773 568.293 274.309 567.879 274.707C567.473 275.105 566.953 275.305 566.32 275.305C565.727 275.305 565.203 275.09 564.75 274.66C564.305 274.223 564.082 273.645 564.082 272.926C564.082 272.473 564.09 272.078 564.105 271.742C564.129 271.406 564.172 271.039 564.234 270.641C564.305 270.234 564.398 269.883 564.516 269.586C564.633 269.289 564.793 268.98 564.996 268.66C565.207 268.332 565.457 268.047 565.746 267.805C566.035 267.555 566.387 267.32 566.801 267.102C567.223 266.875 567.703 266.68 568.242 266.516ZM564.926 272.586C564.926 273.234 565.047 273.723 565.289 274.051C565.531 274.371 565.832 274.531 566.191 274.531C566.574 274.531 566.906 274.402 567.188 274.145C567.469 273.887 567.609 273.531 567.609 273.078C567.609 272.391 567.453 271.816 567.141 271.355C566.828 270.895 566.449 270.664 566.004 270.664C565.801 270.664 565.629 270.703 565.488 270.781C565.348 270.852 565.242 270.934 565.172 271.027C565.102 271.121 565.047 271.27 565.008 271.473C564.969 271.668 564.945 271.836 564.938 271.977C564.93 272.109 564.926 272.312 564.926 272.586ZM569.449 271.098C569.457 269.41 569.676 268.195 570.105 267.453C570.535 266.703 571.188 266.305 572.062 266.258C572.445 266.258 572.785 266.363 573.082 266.574C573.379 266.785 573.613 267.055 573.785 267.383C573.965 267.703 574.113 268.09 574.23 268.543C574.348 268.988 574.426 269.414 574.465 269.82C574.512 270.219 574.543 270.645 574.559 271.098C574.559 271.715 574.465 272.348 574.277 272.996C574.098 273.637 573.816 274.199 573.434 274.684C573.059 275.16 572.637 275.398 572.168 275.398C570.355 275.398 569.449 273.965 569.449 271.098ZM571.898 267.16C571.711 267.199 571.543 267.262 571.395 267.348C571.246 267.434 571.121 267.531 571.02 267.641C570.926 267.75 570.844 267.895 570.773 268.074C570.703 268.254 570.648 268.422 570.609 268.578C570.578 268.727 570.547 268.922 570.516 269.164C570.492 269.406 570.477 269.617 570.469 269.797C570.461 269.969 570.449 270.199 570.434 270.488C570.426 270.77 570.414 271 570.398 271.18C570.398 271.539 570.418 271.883 570.457 272.211C570.496 272.531 570.566 272.867 570.668 273.219C570.777 273.57 570.945 273.855 571.172 274.074C571.398 274.293 571.672 274.418 571.992 274.449C572.477 274.449 572.875 274.113 573.188 273.441C573.508 272.77 573.668 272.09 573.668 271.402C573.668 268.605 573.078 267.191 571.898 267.16Z M547.48 89.0977C547.488 87.4102 547.707 86.1953 548.137 85.4531C548.566 84.7031 549.219 84.3047 550.094 84.2578C550.477 84.2578 550.816 84.3633 551.113 84.5742C551.41 84.7852 551.645 85.0547 551.816 85.3828C551.996 85.7031 552.145 86.0898 552.262 86.543C552.379 86.9883 552.457 87.4141 552.496 87.8203C552.543 88.2188 552.574 88.6445 552.59 89.0977C552.59 89.7148 552.496 90.3477 552.309 90.9961C552.129 91.6367 551.848 92.1992 551.465 92.6836C551.09 93.1602 550.668 93.3984 550.199 93.3984C548.387 93.3984 547.48 91.9648 547.48 89.0977ZM549.93 85.1602C549.742 85.1992 549.574 85.2617 549.426 85.3477C549.277 85.4336 549.152 85.5312 549.051 85.6406C548.957 85.75 548.875 85.8945 548.805 86.0742C548.734 86.2539 548.68 86.4219 548.641 86.5781C548.609 86.7266 548.578 86.9219 548.547 87.1641C548.523 87.4062 548.508 87.6172 548.5 87.7969C548.492 87.9688 548.48 88.1992 548.465 88.4883C548.457 88.7695 548.445 89 548.43 89.1797C548.43 89.5391 548.449 89.8828 548.488 90.2109C548.527 90.5312 548.598 90.8672 548.699 91.2188C548.809 91.5703 548.977 91.8555 549.203 92.0742C549.43 92.293 549.703 92.418 550.023 92.4492C550.508 92.4492 550.906 92.1133 551.219 91.4414C551.539 90.7695 551.699 90.0898 551.699 89.4023C551.699 86.6055 551.109 85.1914 549.93 85.1602ZM553.117 91.5352C553.328 91.5352 553.504 91.6289 553.645 91.8164C553.793 91.9961 553.867 92.2031 553.867 92.4375C553.867 92.6094 553.824 92.75 553.738 92.8594C553.66 92.9609 553.551 93.0117 553.41 93.0117C553.191 93.0117 553.016 92.9219 552.883 92.7422C552.758 92.5625 552.695 92.3516 552.695 92.1094C552.695 91.9375 552.73 91.8008 552.801 91.6992C552.879 91.5898 552.984 91.5352 553.117 91.5352ZM554.711 93.2227L554.523 92.6953C556.344 91.9219 557.426 90.875 557.77 89.5547C557.441 89.7656 557.125 89.8711 556.82 89.8711C556.148 89.8711 555.586 89.5703 555.133 88.9688C554.688 88.3594 554.465 87.582 554.465 86.6367C554.465 85.9648 554.668 85.4336 555.074 85.043C555.48 84.6445 556 84.4453 556.633 84.4453C557.234 84.4453 557.758 84.6641 558.203 85.1016C558.656 85.5312 558.883 86.1055 558.883 86.8242C558.883 87.2773 558.871 87.6719 558.848 88.0078C558.832 88.3438 558.789 88.7109 558.719 89.1094C558.656 89.5078 558.566 89.8594 558.449 90.1641C558.332 90.4609 558.168 90.7734 557.957 91.1016C557.754 91.4219 557.508 91.7031 557.219 91.9453C556.93 92.1875 556.574 92.4219 556.152 92.6484C555.73 92.8672 555.25 93.0586 554.711 93.2227ZM558.039 87.1523C558.039 86.5039 557.914 86.0195 557.664 85.6992C557.422 85.3711 557.121 85.207 556.762 85.207C556.379 85.207 556.047 85.3359 555.766 85.5938C555.484 85.8516 555.344 86.207 555.344 86.6602C555.344 87.3477 555.5 87.9219 555.812 88.3828C556.125 88.8438 556.508 89.0742 556.961 89.0742C557.164 89.0742 557.336 89.0391 557.477 88.9688C557.617 88.8906 557.723 88.8047 557.793 88.7109C557.863 88.6172 557.918 88.4727 557.957 88.2773C557.996 88.0742 558.02 87.9062 558.027 87.7734C558.035 87.6328 558.039 87.4258 558.039 87.1523ZM559.961 93.2227L559.773 92.6953C561.594 91.9219 562.676 90.875 563.02 89.5547C562.691 89.7656 562.375 89.8711 562.07 89.8711C561.398 89.8711 560.836 89.5703 560.383 88.9688C559.938 88.3594 559.715 87.582 559.715 86.6367C559.715 85.9648 559.918 85.4336 560.324 85.043C560.73 84.6445 561.25 84.4453 561.883 84.4453C562.484 84.4453 563.008 84.6641 563.453 85.1016C563.906 85.5312 564.133 86.1055 564.133 86.8242C564.133 87.2773 564.121 87.6719 564.098 88.0078C564.082 88.3438 564.039 88.7109 563.969 89.1094C563.906 89.5078 563.816 89.8594 563.699 90.1641C563.582 90.4609 563.418 90.7734 563.207 91.1016C563.004 91.4219 562.758 91.7031 562.469 91.9453C562.18 92.1875 561.824 92.4219 561.402 92.6484C560.98 92.8672 560.5 93.0586 559.961 93.2227ZM563.289 87.1523C563.289 86.5039 563.164 86.0195 562.914 85.6992C562.672 85.3711 562.371 85.207 562.012 85.207C561.629 85.207 561.297 85.3359 561.016 85.5938C560.734 85.8516 560.594 86.207 560.594 86.6602C560.594 87.3477 560.75 87.9219 561.062 88.3828C561.375 88.8438 561.758 89.0742 562.211 89.0742C562.414 89.0742 562.586 89.0391 562.727 88.9688C562.867 88.8906 562.973 88.8047 563.043 88.7109C563.113 88.6172 563.168 88.4727 563.207 88.2773C563.246 88.0742 563.27 87.9062 563.277 87.7734C563.285 87.6328 563.289 87.4258 563.289 87.1523ZM566.055 93.0938L565.141 92.8242L568.305 85.0664C566.484 85.0117 565.25 84.957 564.602 84.9023L564.484 84.375C565.031 84.3125 565.859 84.2812 566.969 84.2812C568.078 84.2734 568.844 84.2539 569.266 84.2227L569.207 85.2422L566.055 93.0938ZM574.727 90.6445C574.727 91.4961 574.52 92.1289 574.105 92.543C573.691 92.9492 573.059 93.1523 572.207 93.1523C570.566 93.1523 569.746 92.3008 569.746 90.5977C569.746 89.9883 569.871 89.4531 570.121 88.9922C570.371 88.5312 570.715 88.2656 571.152 88.1953C570.707 88.1875 570.371 88.0234 570.145 87.7031C569.918 87.3828 569.805 86.9844 569.805 86.5078C569.805 85.7734 570.004 85.1953 570.402 84.7734C570.809 84.3516 571.383 84.1406 572.125 84.1406C572.906 84.1406 573.52 84.3359 573.965 84.7266C574.41 85.1172 574.633 85.7188 574.633 86.5312C574.633 87.0078 574.52 87.4062 574.293 87.7266C574.066 88.0469 573.73 88.2109 573.285 88.2188C573.738 88.2891 574.09 88.5586 574.34 89.0273C574.598 89.4961 574.727 90.0352 574.727 90.6445ZM572.336 92.3086C572.773 92.3086 573.137 92.1406 573.426 91.8047C573.715 91.4609 573.859 91.0547 573.859 90.5859C573.859 90.1172 573.699 89.7148 573.379 89.3789C573.059 89.0352 572.629 88.8594 572.09 88.8516C571.621 88.9922 571.27 89.2148 571.035 89.5195C570.801 89.8164 570.684 90.1523 570.684 90.5273C570.684 90.9961 570.84 91.4102 571.152 91.7695C571.465 92.1289 571.859 92.3086 572.336 92.3086ZM572.336 84.7852C571.812 84.8242 571.414 84.9961 571.141 85.3008C570.867 85.6055 570.73 85.957 570.73 86.3555C570.73 86.7617 570.859 87.1133 571.117 87.4102C571.383 87.707 571.734 87.8555 572.172 87.8555C572.68 87.8477 573.066 87.7109 573.332 87.4453C573.598 87.1719 573.73 86.8438 573.73 86.4609C573.73 86.0781 573.602 85.7227 573.344 85.3945C573.094 85.0664 572.758 84.8633 572.336 84.7852Z M548.48 297.098C548.488 295.41 548.707 294.195 549.137 293.453C549.566 292.703 550.219 292.305 551.094 292.258C551.477 292.258 551.816 292.363 552.113 292.574C552.41 292.785 552.645 293.055 552.816 293.383C552.996 293.703 553.145 294.09 553.262 294.543C553.379 294.988 553.457 295.414 553.496 295.82C553.543 296.219 553.574 296.645 553.59 297.098C553.59 297.715 553.496 298.348 553.309 298.996C553.129 299.637 552.848 300.199 552.465 300.684C552.09 301.16 551.668 301.398 551.199 301.398C549.387 301.398 548.48 299.965 548.48 297.098ZM550.93 293.16C550.742 293.199 550.574 293.262 550.426 293.348C550.277 293.434 550.152 293.531 550.051 293.641C549.957 293.75 549.875 293.895 549.805 294.074C549.734 294.254 549.68 294.422 549.641 294.578C549.609 294.727 549.578 294.922 549.547 295.164C549.523 295.406 549.508 295.617 549.5 295.797C549.492 295.969 549.48 296.199 549.465 296.488C549.457 296.77 549.445 297 549.43 297.18C549.43 297.539 549.449 297.883 549.488 298.211C549.527 298.531 549.598 298.867 549.699 299.219C549.809 299.57 549.977 299.855 550.203 300.074C550.43 300.293 550.703 300.418 551.023 300.449C551.508 300.449 551.906 300.113 552.219 299.441C552.539 298.77 552.699 298.09 552.699 297.402C552.699 294.605 552.109 293.191 550.93 293.16ZM554.117 299.535C554.328 299.535 554.504 299.629 554.645 299.816C554.793 299.996 554.867 300.203 554.867 300.438C554.867 300.609 554.824 300.75 554.738 300.859C554.66 300.961 554.551 301.012 554.41 301.012C554.191 301.012 554.016 300.922 553.883 300.742C553.758 300.562 553.695 300.352 553.695 300.109C553.695 299.938 553.73 299.801 553.801 299.699C553.879 299.59 553.984 299.535 554.117 299.535ZM555.711 301.223L555.523 300.695C557.344 299.922 558.426 298.875 558.77 297.555C558.441 297.766 558.125 297.871 557.82 297.871C557.148 297.871 556.586 297.57 556.133 296.969C555.688 296.359 555.465 295.582 555.465 294.637C555.465 293.965 555.668 293.434 556.074 293.043C556.48 292.645 557 292.445 557.633 292.445C558.234 292.445 558.758 292.664 559.203 293.102C559.656 293.531 559.883 294.105 559.883 294.824C559.883 295.277 559.871 295.672 559.848 296.008C559.832 296.344 559.789 296.711 559.719 297.109C559.656 297.508 559.566 297.859 559.449 298.164C559.332 298.461 559.168 298.773 558.957 299.102C558.754 299.422 558.508 299.703 558.219 299.945C557.93 300.188 557.574 300.422 557.152 300.648C556.73 300.867 556.25 301.059 555.711 301.223ZM559.039 295.152C559.039 294.504 558.914 294.02 558.664 293.699C558.422 293.371 558.121 293.207 557.762 293.207C557.379 293.207 557.047 293.336 556.766 293.594C556.484 293.852 556.344 294.207 556.344 294.66C556.344 295.348 556.5 295.922 556.812 296.383C557.125 296.844 557.508 297.074 557.961 297.074C558.164 297.074 558.336 297.039 558.477 296.969C558.617 296.891 558.723 296.805 558.793 296.711C558.863 296.617 558.918 296.473 558.957 296.277C558.996 296.074 559.02 295.906 559.027 295.773C559.035 295.633 559.039 295.426 559.039 295.152ZM560.961 301.223L560.773 300.695C562.594 299.922 563.676 298.875 564.02 297.555C563.691 297.766 563.375 297.871 563.07 297.871C562.398 297.871 561.836 297.57 561.383 296.969C560.938 296.359 560.715 295.582 560.715 294.637C560.715 293.965 560.918 293.434 561.324 293.043C561.73 292.645 562.25 292.445 562.883 292.445C563.484 292.445 564.008 292.664 564.453 293.102C564.906 293.531 565.133 294.105 565.133 294.824C565.133 295.277 565.121 295.672 565.098 296.008C565.082 296.344 565.039 296.711 564.969 297.109C564.906 297.508 564.816 297.859 564.699 298.164C564.582 298.461 564.418 298.773 564.207 299.102C564.004 299.422 563.758 299.703 563.469 299.945C563.18 300.188 562.824 300.422 562.402 300.648C561.98 300.867 561.5 301.059 560.961 301.223ZM564.289 295.152C564.289 294.504 564.164 294.02 563.914 293.699C563.672 293.371 563.371 293.207 563.012 293.207C562.629 293.207 562.297 293.336 562.016 293.594C561.734 293.852 561.594 294.207 561.594 294.66C561.594 295.348 561.75 295.922 562.062 296.383C562.375 296.844 562.758 297.074 563.211 297.074C563.414 297.074 563.586 297.039 563.727 296.969C563.867 296.891 563.973 296.805 564.043 296.711C564.113 296.617 564.168 296.473 564.207 296.277C564.246 296.074 564.27 295.906 564.277 295.773C564.285 295.633 564.289 295.426 564.289 295.152ZM570.406 297.59L570.523 298.117C570.117 298.164 569.828 298.195 569.656 298.211C569.672 298.57 569.691 299.023 569.715 299.57C569.746 300.117 569.766 300.566 569.773 300.918C569.703 301.16 569.57 301.281 569.375 301.281C569.234 301.281 569.098 301.223 568.965 301.105C568.832 300.988 568.75 300.848 568.719 300.684C568.727 300.441 568.754 299.645 568.801 298.293C568.551 298.309 568.352 298.316 568.203 298.316C567.969 298.316 567.605 298.305 567.113 298.281C566.629 298.25 566.273 298.234 566.047 298.234C565.938 298.234 565.789 298.242 565.602 298.258C565.617 298.07 565.625 297.941 565.625 297.871C565.625 297.824 565.621 297.75 565.613 297.648C565.613 297.539 565.613 297.457 565.613 297.402C566.918 295.207 567.973 293.578 568.777 292.516C569.02 292.516 569.352 292.566 569.773 292.668C569.758 293.035 569.734 293.832 569.703 295.059C569.68 296.277 569.656 297.102 569.633 297.531C569.977 297.547 570.234 297.566 570.406 297.59ZM566.469 297.438L568.824 297.508C568.848 297.062 568.871 296.402 568.895 295.527C568.918 294.652 568.938 293.992 568.953 293.547C568.633 293.875 568.168 294.562 567.559 295.609C566.957 296.648 566.594 297.258 566.469 297.438ZM570.758 300.625L570.852 300.086C570.914 300.094 571.09 300.129 571.379 300.191C571.676 300.254 571.938 300.301 572.164 300.332C572.398 300.363 572.605 300.379 572.785 300.379C573.23 300.379 573.578 300.211 573.828 299.875C574.086 299.539 574.215 299.148 574.215 298.703C574.215 298.094 574.004 297.57 573.582 297.133C573.168 296.688 572.566 296.465 571.777 296.465C571.652 296.465 571.559 296.469 571.496 296.477V295.902C571.566 295.91 571.676 295.914 571.824 295.914C572.535 295.914 573.113 295.789 573.559 295.539C574.012 295.289 574.238 294.891 574.238 294.344C574.238 293.93 574.121 293.598 573.887 293.348C573.652 293.098 573.348 292.973 572.973 292.973C572.801 292.973 572.613 292.984 572.41 293.008C572.215 293.023 572 293.047 571.766 293.078C571.531 293.109 571.383 293.129 571.32 293.137L571.133 292.609C571.227 292.586 571.379 292.543 571.59 292.48C571.801 292.418 571.965 292.371 572.082 292.34C572.207 292.309 572.363 292.281 572.551 292.258C572.738 292.227 572.914 292.211 573.078 292.211C573.68 292.211 574.156 292.422 574.508 292.844C574.859 293.258 575.035 293.828 575.035 294.555C575.035 295.016 574.922 295.395 574.695 295.691C574.477 295.988 574.141 296.172 573.688 296.242C574.156 296.43 574.512 296.738 574.754 297.168C575.004 297.59 575.129 298.09 575.129 298.668C575.129 299.332 574.973 299.902 574.66 300.379C574.348 300.848 573.875 301.082 573.242 301.082C572.328 301.082 571.5 300.93 570.758 300.625Z M546.48 141.098C546.488 139.41 546.707 138.195 547.137 137.453C547.566 136.703 548.219 136.305 549.094 136.258C549.477 136.258 549.816 136.363 550.113 136.574C550.41 136.785 550.645 137.055 550.816 137.383C550.996 137.703 551.145 138.09 551.262 138.543C551.379 138.988 551.457 139.414 551.496 139.82C551.543 140.219 551.574 140.645 551.59 141.098C551.59 141.715 551.496 142.348 551.309 142.996C551.129 143.637 550.848 144.199 550.465 144.684C550.09 145.16 549.668 145.398 549.199 145.398C547.387 145.398 546.48 143.965 546.48 141.098ZM548.93 137.16C548.742 137.199 548.574 137.262 548.426 137.348C548.277 137.434 548.152 137.531 548.051 137.641C547.957 137.75 547.875 137.895 547.805 138.074C547.734 138.254 547.68 138.422 547.641 138.578C547.609 138.727 547.578 138.922 547.547 139.164C547.523 139.406 547.508 139.617 547.5 139.797C547.492 139.969 547.48 140.199 547.465 140.488C547.457 140.77 547.445 141 547.43 141.18C547.43 141.539 547.449 141.883 547.488 142.211C547.527 142.531 547.598 142.867 547.699 143.219C547.809 143.57 547.977 143.855 548.203 144.074C548.43 144.293 548.703 144.418 549.023 144.449C549.508 144.449 549.906 144.113 550.219 143.441C550.539 142.77 550.699 142.09 550.699 141.402C550.699 138.605 550.109 137.191 548.93 137.16ZM552.117 143.535C552.328 143.535 552.504 143.629 552.645 143.816C552.793 143.996 552.867 144.203 552.867 144.438C552.867 144.609 552.824 144.75 552.738 144.859C552.66 144.961 552.551 145.012 552.41 145.012C552.191 145.012 552.016 144.922 551.883 144.742C551.758 144.562 551.695 144.352 551.695 144.109C551.695 143.938 551.73 143.801 551.801 143.699C551.879 143.59 551.984 143.535 552.117 143.535ZM553.711 145.223L553.523 144.695C555.344 143.922 556.426 142.875 556.77 141.555C556.441 141.766 556.125 141.871 555.82 141.871C555.148 141.871 554.586 141.57 554.133 140.969C553.688 140.359 553.465 139.582 553.465 138.637C553.465 137.965 553.668 137.434 554.074 137.043C554.48 136.645 555 136.445 555.633 136.445C556.234 136.445 556.758 136.664 557.203 137.102C557.656 137.531 557.883 138.105 557.883 138.824C557.883 139.277 557.871 139.672 557.848 140.008C557.832 140.344 557.789 140.711 557.719 141.109C557.656 141.508 557.566 141.859 557.449 142.164C557.332 142.461 557.168 142.773 556.957 143.102C556.754 143.422 556.508 143.703 556.219 143.945C555.93 144.188 555.574 144.422 555.152 144.648C554.73 144.867 554.25 145.059 553.711 145.223ZM557.039 139.152C557.039 138.504 556.914 138.02 556.664 137.699C556.422 137.371 556.121 137.207 555.762 137.207C555.379 137.207 555.047 137.336 554.766 137.594C554.484 137.852 554.344 138.207 554.344 138.66C554.344 139.348 554.5 139.922 554.812 140.383C555.125 140.844 555.508 141.074 555.961 141.074C556.164 141.074 556.336 141.039 556.477 140.969C556.617 140.891 556.723 140.805 556.793 140.711C556.863 140.617 556.918 140.473 556.957 140.277C556.996 140.074 557.02 139.906 557.027 139.773C557.035 139.633 557.039 139.426 557.039 139.152ZM558.961 145.223L558.773 144.695C560.594 143.922 561.676 142.875 562.02 141.555C561.691 141.766 561.375 141.871 561.07 141.871C560.398 141.871 559.836 141.57 559.383 140.969C558.938 140.359 558.715 139.582 558.715 138.637C558.715 137.965 558.918 137.434 559.324 137.043C559.73 136.645 560.25 136.445 560.883 136.445C561.484 136.445 562.008 136.664 562.453 137.102C562.906 137.531 563.133 138.105 563.133 138.824C563.133 139.277 563.121 139.672 563.098 140.008C563.082 140.344 563.039 140.711 562.969 141.109C562.906 141.508 562.816 141.859 562.699 142.164C562.582 142.461 562.418 142.773 562.207 143.102C562.004 143.422 561.758 143.703 561.469 143.945C561.18 144.188 560.824 144.422 560.402 144.648C559.98 144.867 559.5 145.059 558.961 145.223ZM562.289 139.152C562.289 138.504 562.164 138.02 561.914 137.699C561.672 137.371 561.371 137.207 561.012 137.207C560.629 137.207 560.297 137.336 560.016 137.594C559.734 137.852 559.594 138.207 559.594 138.66C559.594 139.348 559.75 139.922 560.062 140.383C560.375 140.844 560.758 141.074 561.211 141.074C561.414 141.074 561.586 141.039 561.727 140.969C561.867 140.891 561.973 140.805 562.043 140.711C562.113 140.617 562.168 140.473 562.207 140.277C562.246 140.074 562.27 139.906 562.277 139.773C562.285 139.633 562.289 139.426 562.289 139.152ZM569.062 142.645C569.062 143.496 568.855 144.129 568.441 144.543C568.027 144.949 567.395 145.152 566.543 145.152C564.902 145.152 564.082 144.301 564.082 142.598C564.082 141.988 564.207 141.453 564.457 140.992C564.707 140.531 565.051 140.266 565.488 140.195C565.043 140.188 564.707 140.023 564.48 139.703C564.254 139.383 564.141 138.984 564.141 138.508C564.141 137.773 564.34 137.195 564.738 136.773C565.145 136.352 565.719 136.141 566.461 136.141C567.242 136.141 567.855 136.336 568.301 136.727C568.746 137.117 568.969 137.719 568.969 138.531C568.969 139.008 568.855 139.406 568.629 139.727C568.402 140.047 568.066 140.211 567.621 140.219C568.074 140.289 568.426 140.559 568.676 141.027C568.934 141.496 569.062 142.035 569.062 142.645ZM566.672 144.309C567.109 144.309 567.473 144.141 567.762 143.805C568.051 143.461 568.195 143.055 568.195 142.586C568.195 142.117 568.035 141.715 567.715 141.379C567.395 141.035 566.965 140.859 566.426 140.852C565.957 140.992 565.605 141.215 565.371 141.52C565.137 141.816 565.02 142.152 565.02 142.527C565.02 142.996 565.176 143.41 565.488 143.77C565.801 144.129 566.195 144.309 566.672 144.309ZM566.672 136.785C566.148 136.824 565.75 136.996 565.477 137.301C565.203 137.605 565.066 137.957 565.066 138.355C565.066 138.762 565.195 139.113 565.453 139.41C565.719 139.707 566.07 139.855 566.508 139.855C567.016 139.848 567.402 139.711 567.668 139.445C567.934 139.172 568.066 138.844 568.066 138.461C568.066 138.078 567.938 137.723 567.68 137.395C567.43 137.066 567.094 136.863 566.672 136.785ZM570.012 141.098C570.02 139.41 570.238 138.195 570.668 137.453C571.098 136.703 571.75 136.305 572.625 136.258C573.008 136.258 573.348 136.363 573.645 136.574C573.941 136.785 574.176 137.055 574.348 137.383C574.527 137.703 574.676 138.09 574.793 138.543C574.91 138.988 574.988 139.414 575.027 139.82C575.074 140.219 575.105 140.645 575.121 141.098C575.121 141.715 575.027 142.348 574.84 142.996C574.66 143.637 574.379 144.199 573.996 144.684C573.621 145.16 573.199 145.398 572.73 145.398C570.918 145.398 570.012 143.965 570.012 141.098ZM572.461 137.16C572.273 137.199 572.105 137.262 571.957 137.348C571.809 137.434 571.684 137.531 571.582 137.641C571.488 137.75 571.406 137.895 571.336 138.074C571.266 138.254 571.211 138.422 571.172 138.578C571.141 138.727 571.109 138.922 571.078 139.164C571.055 139.406 571.039 139.617 571.031 139.797C571.023 139.969 571.012 140.199 570.996 140.488C570.988 140.77 570.977 141 570.961 141.18C570.961 141.539 570.98 141.883 571.02 142.211C571.059 142.531 571.129 142.867 571.23 143.219C571.34 143.57 571.508 143.855 571.734 144.074C571.961 144.293 572.234 144.418 572.555 144.449C573.039 144.449 573.438 144.113 573.75 143.441C574.07 142.77 574.23 142.09 574.23 141.402C574.23 138.605 573.641 137.191 572.461 137.16Z M549.48 115.098C549.488 113.41 549.707 112.195 550.137 111.453C550.566 110.703 551.219 110.305 552.094 110.258C552.477 110.258 552.816 110.363 553.113 110.574C553.41 110.785 553.645 111.055 553.816 111.383C553.996 111.703 554.145 112.09 554.262 112.543C554.379 112.988 554.457 113.414 554.496 113.82C554.543 114.219 554.574 114.645 554.59 115.098C554.59 115.715 554.496 116.348 554.309 116.996C554.129 117.637 553.848 118.199 553.465 118.684C553.09 119.16 552.668 119.398 552.199 119.398C550.387 119.398 549.48 117.965 549.48 115.098ZM551.93 111.16C551.742 111.199 551.574 111.262 551.426 111.348C551.277 111.434 551.152 111.531 551.051 111.641C550.957 111.75 550.875 111.895 550.805 112.074C550.734 112.254 550.68 112.422 550.641 112.578C550.609 112.727 550.578 112.922 550.547 113.164C550.523 113.406 550.508 113.617 550.5 113.797C550.492 113.969 550.48 114.199 550.465 114.488C550.457 114.77 550.445 115 550.43 115.18C550.43 115.539 550.449 115.883 550.488 116.211C550.527 116.531 550.598 116.867 550.699 117.219C550.809 117.57 550.977 117.855 551.203 118.074C551.43 118.293 551.703 118.418 552.023 118.449C552.508 118.449 552.906 118.113 553.219 117.441C553.539 116.77 553.699 116.09 553.699 115.402C553.699 112.605 553.109 111.191 551.93 111.16ZM555.117 117.535C555.328 117.535 555.504 117.629 555.645 117.816C555.793 117.996 555.867 118.203 555.867 118.438C555.867 118.609 555.824 118.75 555.738 118.859C555.66 118.961 555.551 119.012 555.41 119.012C555.191 119.012 555.016 118.922 554.883 118.742C554.758 118.562 554.695 118.352 554.695 118.109C554.695 117.938 554.73 117.801 554.801 117.699C554.879 117.59 554.984 117.535 555.117 117.535ZM556.711 119.223L556.523 118.695C558.344 117.922 559.426 116.875 559.77 115.555C559.441 115.766 559.125 115.871 558.82 115.871C558.148 115.871 557.586 115.57 557.133 114.969C556.688 114.359 556.465 113.582 556.465 112.637C556.465 111.965 556.668 111.434 557.074 111.043C557.48 110.645 558 110.445 558.633 110.445C559.234 110.445 559.758 110.664 560.203 111.102C560.656 111.531 560.883 112.105 560.883 112.824C560.883 113.277 560.871 113.672 560.848 114.008C560.832 114.344 560.789 114.711 560.719 115.109C560.656 115.508 560.566 115.859 560.449 116.164C560.332 116.461 560.168 116.773 559.957 117.102C559.754 117.422 559.508 117.703 559.219 117.945C558.93 118.188 558.574 118.422 558.152 118.648C557.73 118.867 557.25 119.059 556.711 119.223ZM560.039 113.152C560.039 112.504 559.914 112.02 559.664 111.699C559.422 111.371 559.121 111.207 558.762 111.207C558.379 111.207 558.047 111.336 557.766 111.594C557.484 111.852 557.344 112.207 557.344 112.66C557.344 113.348 557.5 113.922 557.812 114.383C558.125 114.844 558.508 115.074 558.961 115.074C559.164 115.074 559.336 115.039 559.477 114.969C559.617 114.891 559.723 114.805 559.793 114.711C559.863 114.617 559.918 114.473 559.957 114.277C559.996 114.074 560.02 113.906 560.027 113.773C560.035 113.633 560.039 113.426 560.039 113.152ZM561.961 119.223L561.773 118.695C563.594 117.922 564.676 116.875 565.02 115.555C564.691 115.766 564.375 115.871 564.07 115.871C563.398 115.871 562.836 115.57 562.383 114.969C561.938 114.359 561.715 113.582 561.715 112.637C561.715 111.965 561.918 111.434 562.324 111.043C562.73 110.645 563.25 110.445 563.883 110.445C564.484 110.445 565.008 110.664 565.453 111.102C565.906 111.531 566.133 112.105 566.133 112.824C566.133 113.277 566.121 113.672 566.098 114.008C566.082 114.344 566.039 114.711 565.969 115.109C565.906 115.508 565.816 115.859 565.699 116.164C565.582 116.461 565.418 116.773 565.207 117.102C565.004 117.422 564.758 117.703 564.469 117.945C564.18 118.188 563.824 118.422 563.402 118.648C562.98 118.867 562.5 119.059 561.961 119.223ZM565.289 113.152C565.289 112.504 565.164 112.02 564.914 111.699C564.672 111.371 564.371 111.207 564.012 111.207C563.629 111.207 563.297 111.336 563.016 111.594C562.734 111.852 562.594 112.207 562.594 112.66C562.594 113.348 562.75 113.922 563.062 114.383C563.375 114.844 563.758 115.074 564.211 115.074C564.414 115.074 564.586 115.039 564.727 114.969C564.867 114.891 564.973 114.805 565.043 114.711C565.113 114.617 565.168 114.473 565.207 114.277C565.246 114.074 565.27 113.906 565.277 113.773C565.285 113.633 565.289 113.426 565.289 113.152ZM568.055 119.094L567.141 118.824L570.305 111.066C568.484 111.012 567.25 110.957 566.602 110.902L566.484 110.375C567.031 110.312 567.859 110.281 568.969 110.281C570.078 110.273 570.844 110.254 571.266 110.223L571.207 111.242L568.055 119.094ZM574.887 110.516L575.086 111.043C573.258 111.824 572.172 112.871 571.828 114.184C572.141 113.98 572.457 113.879 572.777 113.879C573.449 113.879 574.012 114.184 574.465 114.793C574.918 115.395 575.145 116.164 575.145 117.102C575.145 117.773 574.938 118.309 574.523 118.707C574.117 119.105 573.598 119.305 572.965 119.305C572.371 119.305 571.848 119.09 571.395 118.66C570.949 118.223 570.727 117.645 570.727 116.926C570.727 116.473 570.734 116.078 570.75 115.742C570.773 115.406 570.816 115.039 570.879 114.641C570.949 114.234 571.043 113.883 571.16 113.586C571.277 113.289 571.438 112.98 571.641 112.66C571.852 112.332 572.102 112.047 572.391 111.805C572.68 111.555 573.031 111.32 573.445 111.102C573.867 110.875 574.348 110.68 574.887 110.516ZM571.57 116.586C571.57 117.234 571.691 117.723 571.934 118.051C572.176 118.371 572.477 118.531 572.836 118.531C573.219 118.531 573.551 118.402 573.832 118.145C574.113 117.887 574.254 117.531 574.254 117.078C574.254 116.391 574.098 115.816 573.785 115.355C573.473 114.895 573.094 114.664 572.648 114.664C572.445 114.664 572.273 114.703 572.133 114.781C571.992 114.852 571.887 114.934 571.816 115.027C571.746 115.121 571.691 115.27 571.652 115.473C571.613 115.668 571.59 115.836 571.582 115.977C571.574 116.109 571.57 116.312 571.57 116.586Z M549.48 323.098C549.488 321.41 549.707 320.195 550.137 319.453C550.566 318.703 551.219 318.305 552.094 318.258C552.477 318.258 552.816 318.363 553.113 318.574C553.41 318.785 553.645 319.055 553.816 319.383C553.996 319.703 554.145 320.09 554.262 320.543C554.379 320.988 554.457 321.414 554.496 321.82C554.543 322.219 554.574 322.645 554.59 323.098C554.59 323.715 554.496 324.348 554.309 324.996C554.129 325.637 553.848 326.199 553.465 326.684C553.09 327.16 552.668 327.398 552.199 327.398C550.387 327.398 549.48 325.965 549.48 323.098ZM551.93 319.16C551.742 319.199 551.574 319.262 551.426 319.348C551.277 319.434 551.152 319.531 551.051 319.641C550.957 319.75 550.875 319.895 550.805 320.074C550.734 320.254 550.68 320.422 550.641 320.578C550.609 320.727 550.578 320.922 550.547 321.164C550.523 321.406 550.508 321.617 550.5 321.797C550.492 321.969 550.48 322.199 550.465 322.488C550.457 322.77 550.445 323 550.43 323.18C550.43 323.539 550.449 323.883 550.488 324.211C550.527 324.531 550.598 324.867 550.699 325.219C550.809 325.57 550.977 325.855 551.203 326.074C551.43 326.293 551.703 326.418 552.023 326.449C552.508 326.449 552.906 326.113 553.219 325.441C553.539 324.77 553.699 324.09 553.699 323.402C553.699 320.605 553.109 319.191 551.93 319.16ZM555.117 325.535C555.328 325.535 555.504 325.629 555.645 325.816C555.793 325.996 555.867 326.203 555.867 326.438C555.867 326.609 555.824 326.75 555.738 326.859C555.66 326.961 555.551 327.012 555.41 327.012C555.191 327.012 555.016 326.922 554.883 326.742C554.758 326.562 554.695 326.352 554.695 326.109C554.695 325.938 554.73 325.801 554.801 325.699C554.879 325.59 554.984 325.535 555.117 325.535ZM556.711 327.223L556.523 326.695C558.344 325.922 559.426 324.875 559.77 323.555C559.441 323.766 559.125 323.871 558.82 323.871C558.148 323.871 557.586 323.57 557.133 322.969C556.688 322.359 556.465 321.582 556.465 320.637C556.465 319.965 556.668 319.434 557.074 319.043C557.48 318.645 558 318.445 558.633 318.445C559.234 318.445 559.758 318.664 560.203 319.102C560.656 319.531 560.883 320.105 560.883 320.824C560.883 321.277 560.871 321.672 560.848 322.008C560.832 322.344 560.789 322.711 560.719 323.109C560.656 323.508 560.566 323.859 560.449 324.164C560.332 324.461 560.168 324.773 559.957 325.102C559.754 325.422 559.508 325.703 559.219 325.945C558.93 326.188 558.574 326.422 558.152 326.648C557.73 326.867 557.25 327.059 556.711 327.223ZM560.039 321.152C560.039 320.504 559.914 320.02 559.664 319.699C559.422 319.371 559.121 319.207 558.762 319.207C558.379 319.207 558.047 319.336 557.766 319.594C557.484 319.852 557.344 320.207 557.344 320.66C557.344 321.348 557.5 321.922 557.812 322.383C558.125 322.844 558.508 323.074 558.961 323.074C559.164 323.074 559.336 323.039 559.477 322.969C559.617 322.891 559.723 322.805 559.793 322.711C559.863 322.617 559.918 322.473 559.957 322.277C559.996 322.074 560.02 321.906 560.027 321.773C560.035 321.633 560.039 321.426 560.039 321.152ZM561.961 327.223L561.773 326.695C563.594 325.922 564.676 324.875 565.02 323.555C564.691 323.766 564.375 323.871 564.07 323.871C563.398 323.871 562.836 323.57 562.383 322.969C561.938 322.359 561.715 321.582 561.715 320.637C561.715 319.965 561.918 319.434 562.324 319.043C562.73 318.645 563.25 318.445 563.883 318.445C564.484 318.445 565.008 318.664 565.453 319.102C565.906 319.531 566.133 320.105 566.133 320.824C566.133 321.277 566.121 321.672 566.098 322.008C566.082 322.344 566.039 322.711 565.969 323.109C565.906 323.508 565.816 323.859 565.699 324.164C565.582 324.461 565.418 324.773 565.207 325.102C565.004 325.422 564.758 325.703 564.469 325.945C564.18 326.188 563.824 326.422 563.402 326.648C562.98 326.867 562.5 327.059 561.961 327.223ZM565.289 321.152C565.289 320.504 565.164 320.02 564.914 319.699C564.672 319.371 564.371 319.207 564.012 319.207C563.629 319.207 563.297 319.336 563.016 319.594C562.734 319.852 562.594 320.207 562.594 320.66C562.594 321.348 562.75 321.922 563.062 322.383C563.375 322.844 563.758 323.074 564.211 323.074C564.414 323.074 564.586 323.039 564.727 322.969C564.867 322.891 564.973 322.805 565.043 322.711C565.113 322.617 565.168 322.473 565.207 322.277C565.246 322.074 565.27 321.906 565.277 321.773C565.285 321.633 565.289 321.426 565.289 321.152ZM567.141 326.965V326.344C567.328 326.32 567.559 326.281 567.832 326.227C568.113 326.172 568.332 326.133 568.488 326.109C568.512 325.547 568.523 324.98 568.523 324.41C568.523 324.051 568.52 323.512 568.512 322.793C568.504 322.066 568.5 321.52 568.5 321.152C568.5 320.285 568.512 319.629 568.535 319.184C567.824 319.59 567.305 319.918 566.977 320.168L566.602 319.781C566.727 319.68 566.941 319.504 567.246 319.254C567.551 318.996 567.824 318.766 568.066 318.562C568.309 318.352 568.496 318.18 568.629 318.047C568.754 318.062 568.883 318.074 569.016 318.082C569.148 318.082 569.277 318.09 569.402 318.105C569.449 319.012 569.473 320.672 569.473 323.086C569.473 324.523 569.484 325.555 569.508 326.18C569.578 326.188 569.746 326.219 570.012 326.273C570.285 326.32 570.496 326.352 570.645 326.367L570.832 326.988C570.441 326.988 570.102 326.988 569.812 326.988C569.523 326.988 569.137 326.988 568.652 326.988C568.176 326.988 567.801 326.988 567.527 326.988C567.262 326.98 567.133 326.973 567.141 326.965ZM575.637 323.59L575.754 324.117C575.348 324.164 575.059 324.195 574.887 324.211C574.902 324.57 574.922 325.023 574.945 325.57C574.977 326.117 574.996 326.566 575.004 326.918C574.934 327.16 574.801 327.281 574.605 327.281C574.465 327.281 574.328 327.223 574.195 327.105C574.062 326.988 573.98 326.848 573.949 326.684C573.957 326.441 573.984 325.645 574.031 324.293C573.781 324.309 573.582 324.316 573.434 324.316C573.199 324.316 572.836 324.305 572.344 324.281C571.859 324.25 571.504 324.234 571.277 324.234C571.168 324.234 571.02 324.242 570.832 324.258C570.848 324.07 570.855 323.941 570.855 323.871C570.855 323.824 570.852 323.75 570.844 323.648C570.844 323.539 570.844 323.457 570.844 323.402C572.148 321.207 573.203 319.578 574.008 318.516C574.25 318.516 574.582 318.566 575.004 318.668C574.988 319.035 574.965 319.832 574.934 321.059C574.91 322.277 574.887 323.102 574.863 323.531C575.207 323.547 575.465 323.566 575.637 323.59ZM571.699 323.438L574.055 323.508C574.078 323.062 574.102 322.402 574.125 321.527C574.148 320.652 574.168 319.992 574.184 319.547C573.863 319.875 573.398 320.562 572.789 321.609C572.188 322.648 571.824 323.258 571.699 323.438Z M548.48 245.098C548.488 243.41 548.707 242.195 549.137 241.453C549.566 240.703 550.219 240.305 551.094 240.258C551.477 240.258 551.816 240.363 552.113 240.574C552.41 240.785 552.645 241.055 552.816 241.383C552.996 241.703 553.145 242.09 553.262 242.543C553.379 242.988 553.457 243.414 553.496 243.82C553.543 244.219 553.574 244.645 553.59 245.098C553.59 245.715 553.496 246.348 553.309 246.996C553.129 247.637 552.848 248.199 552.465 248.684C552.09 249.16 551.668 249.398 551.199 249.398C549.387 249.398 548.48 247.965 548.48 245.098ZM550.93 241.16C550.742 241.199 550.574 241.262 550.426 241.348C550.277 241.434 550.152 241.531 550.051 241.641C549.957 241.75 549.875 241.895 549.805 242.074C549.734 242.254 549.68 242.422 549.641 242.578C549.609 242.727 549.578 242.922 549.547 243.164C549.523 243.406 549.508 243.617 549.5 243.797C549.492 243.969 549.48 244.199 549.465 244.488C549.457 244.77 549.445 245 549.43 245.18C549.43 245.539 549.449 245.883 549.488 246.211C549.527 246.531 549.598 246.867 549.699 247.219C549.809 247.57 549.977 247.855 550.203 248.074C550.43 248.293 550.703 248.418 551.023 248.449C551.508 248.449 551.906 248.113 552.219 247.441C552.539 246.77 552.699 246.09 552.699 245.402C552.699 242.605 552.109 241.191 550.93 241.16ZM554.117 247.535C554.328 247.535 554.504 247.629 554.645 247.816C554.793 247.996 554.867 248.203 554.867 248.438C554.867 248.609 554.824 248.75 554.738 248.859C554.66 248.961 554.551 249.012 554.41 249.012C554.191 249.012 554.016 248.922 553.883 248.742C553.758 248.562 553.695 248.352 553.695 248.109C553.695 247.938 553.73 247.801 553.801 247.699C553.879 247.59 553.984 247.535 554.117 247.535ZM555.711 249.223L555.523 248.695C557.344 247.922 558.426 246.875 558.77 245.555C558.441 245.766 558.125 245.871 557.82 245.871C557.148 245.871 556.586 245.57 556.133 244.969C555.688 244.359 555.465 243.582 555.465 242.637C555.465 241.965 555.668 241.434 556.074 241.043C556.48 240.645 557 240.445 557.633 240.445C558.234 240.445 558.758 240.664 559.203 241.102C559.656 241.531 559.883 242.105 559.883 242.824C559.883 243.277 559.871 243.672 559.848 244.008C559.832 244.344 559.789 244.711 559.719 245.109C559.656 245.508 559.566 245.859 559.449 246.164C559.332 246.461 559.168 246.773 558.957 247.102C558.754 247.422 558.508 247.703 558.219 247.945C557.93 248.188 557.574 248.422 557.152 248.648C556.73 248.867 556.25 249.059 555.711 249.223ZM559.039 243.152C559.039 242.504 558.914 242.02 558.664 241.699C558.422 241.371 558.121 241.207 557.762 241.207C557.379 241.207 557.047 241.336 556.766 241.594C556.484 241.852 556.344 242.207 556.344 242.66C556.344 243.348 556.5 243.922 556.812 244.383C557.125 244.844 557.508 245.074 557.961 245.074C558.164 245.074 558.336 245.039 558.477 244.969C558.617 244.891 558.723 244.805 558.793 244.711C558.863 244.617 558.918 244.473 558.957 244.277C558.996 244.074 559.02 243.906 559.027 243.773C559.035 243.633 559.039 243.426 559.039 243.152ZM560.961 249.223L560.773 248.695C562.594 247.922 563.676 246.875 564.02 245.555C563.691 245.766 563.375 245.871 563.07 245.871C562.398 245.871 561.836 245.57 561.383 244.969C560.938 244.359 560.715 243.582 560.715 242.637C560.715 241.965 560.918 241.434 561.324 241.043C561.73 240.645 562.25 240.445 562.883 240.445C563.484 240.445 564.008 240.664 564.453 241.102C564.906 241.531 565.133 242.105 565.133 242.824C565.133 243.277 565.121 243.672 565.098 244.008C565.082 244.344 565.039 244.711 564.969 245.109C564.906 245.508 564.816 245.859 564.699 246.164C564.582 246.461 564.418 246.773 564.207 247.102C564.004 247.422 563.758 247.703 563.469 247.945C563.18 248.188 562.824 248.422 562.402 248.648C561.98 248.867 561.5 249.059 560.961 249.223ZM564.289 243.152C564.289 242.504 564.164 242.02 563.914 241.699C563.672 241.371 563.371 241.207 563.012 241.207C562.629 241.207 562.297 241.336 562.016 241.594C561.734 241.852 561.594 242.207 561.594 242.66C561.594 243.348 561.75 243.922 562.062 244.383C562.375 244.844 562.758 245.074 563.211 245.074C563.414 245.074 563.586 245.039 563.727 244.969C563.867 244.891 563.973 244.805 564.043 244.711C564.113 244.617 564.168 244.473 564.207 244.277C564.246 244.074 564.27 243.906 564.277 243.773C564.285 243.633 564.289 243.426 564.289 243.152ZM571.062 246.645C571.062 247.496 570.855 248.129 570.441 248.543C570.027 248.949 569.395 249.152 568.543 249.152C566.902 249.152 566.082 248.301 566.082 246.598C566.082 245.988 566.207 245.453 566.457 244.992C566.707 244.531 567.051 244.266 567.488 244.195C567.043 244.188 566.707 244.023 566.48 243.703C566.254 243.383 566.141 242.984 566.141 242.508C566.141 241.773 566.34 241.195 566.738 240.773C567.145 240.352 567.719 240.141 568.461 240.141C569.242 240.141 569.855 240.336 570.301 240.727C570.746 241.117 570.969 241.719 570.969 242.531C570.969 243.008 570.855 243.406 570.629 243.727C570.402 244.047 570.066 244.211 569.621 244.219C570.074 244.289 570.426 244.559 570.676 245.027C570.934 245.496 571.062 246.035 571.062 246.645ZM568.672 248.309C569.109 248.309 569.473 248.141 569.762 247.805C570.051 247.461 570.195 247.055 570.195 246.586C570.195 246.117 570.035 245.715 569.715 245.379C569.395 245.035 568.965 244.859 568.426 244.852C567.957 244.992 567.605 245.215 567.371 245.52C567.137 245.816 567.02 246.152 567.02 246.527C567.02 246.996 567.176 247.41 567.488 247.77C567.801 248.129 568.195 248.309 568.672 248.309ZM568.672 240.785C568.148 240.824 567.75 240.996 567.477 241.301C567.203 241.605 567.066 241.957 567.066 242.355C567.066 242.762 567.195 243.113 567.453 243.41C567.719 243.707 568.07 243.855 568.508 243.855C569.016 243.848 569.402 243.711 569.668 243.445C569.934 243.172 570.066 242.844 570.066 242.461C570.066 242.078 569.938 241.723 569.68 241.395C569.43 241.066 569.094 240.863 568.672 240.785ZM572.07 248.965V248.344C572.258 248.32 572.488 248.281 572.762 248.227C573.043 248.172 573.262 248.133 573.418 248.109C573.441 247.547 573.453 246.98 573.453 246.41C573.453 246.051 573.449 245.512 573.441 244.793C573.434 244.066 573.43 243.52 573.43 243.152C573.43 242.285 573.441 241.629 573.465 241.184C572.754 241.59 572.234 241.918 571.906 242.168L571.531 241.781C571.656 241.68 571.871 241.504 572.176 241.254C572.48 240.996 572.754 240.766 572.996 240.562C573.238 240.352 573.426 240.18 573.559 240.047C573.684 240.062 573.812 240.074 573.945 240.082C574.078 240.082 574.207 240.09 574.332 240.105C574.379 241.012 574.402 242.672 574.402 245.086C574.402 246.523 574.414 247.555 574.438 248.18C574.508 248.188 574.676 248.219 574.941 248.273C575.215 248.32 575.426 248.352 575.574 248.367L575.762 248.988C575.371 248.988 575.031 248.988 574.742 248.988C574.453 248.988 574.066 248.988 573.582 248.988C573.105 248.988 572.73 248.988 572.457 248.988C572.191 248.98 572.062 248.973 572.07 248.965Z M548.48 167.098C548.488 165.41 548.707 164.195 549.137 163.453C549.566 162.703 550.219 162.305 551.094 162.258C551.477 162.258 551.816 162.363 552.113 162.574C552.41 162.785 552.645 163.055 552.816 163.383C552.996 163.703 553.145 164.09 553.262 164.543C553.379 164.988 553.457 165.414 553.496 165.82C553.543 166.219 553.574 166.645 553.59 167.098C553.59 167.715 553.496 168.348 553.309 168.996C553.129 169.637 552.848 170.199 552.465 170.684C552.09 171.16 551.668 171.398 551.199 171.398C549.387 171.398 548.48 169.965 548.48 167.098ZM550.93 163.16C550.742 163.199 550.574 163.262 550.426 163.348C550.277 163.434 550.152 163.531 550.051 163.641C549.957 163.75 549.875 163.895 549.805 164.074C549.734 164.254 549.68 164.422 549.641 164.578C549.609 164.727 549.578 164.922 549.547 165.164C549.523 165.406 549.508 165.617 549.5 165.797C549.492 165.969 549.48 166.199 549.465 166.488C549.457 166.77 549.445 167 549.43 167.18C549.43 167.539 549.449 167.883 549.488 168.211C549.527 168.531 549.598 168.867 549.699 169.219C549.809 169.57 549.977 169.855 550.203 170.074C550.43 170.293 550.703 170.418 551.023 170.449C551.508 170.449 551.906 170.113 552.219 169.441C552.539 168.77 552.699 168.09 552.699 167.402C552.699 164.605 552.109 163.191 550.93 163.16ZM554.117 169.535C554.328 169.535 554.504 169.629 554.645 169.816C554.793 169.996 554.867 170.203 554.867 170.438C554.867 170.609 554.824 170.75 554.738 170.859C554.66 170.961 554.551 171.012 554.41 171.012C554.191 171.012 554.016 170.922 553.883 170.742C553.758 170.562 553.695 170.352 553.695 170.109C553.695 169.938 553.73 169.801 553.801 169.699C553.879 169.59 553.984 169.535 554.117 169.535ZM555.711 171.223L555.523 170.695C557.344 169.922 558.426 168.875 558.77 167.555C558.441 167.766 558.125 167.871 557.82 167.871C557.148 167.871 556.586 167.57 556.133 166.969C555.688 166.359 555.465 165.582 555.465 164.637C555.465 163.965 555.668 163.434 556.074 163.043C556.48 162.645 557 162.445 557.633 162.445C558.234 162.445 558.758 162.664 559.203 163.102C559.656 163.531 559.883 164.105 559.883 164.824C559.883 165.277 559.871 165.672 559.848 166.008C559.832 166.344 559.789 166.711 559.719 167.109C559.656 167.508 559.566 167.859 559.449 168.164C559.332 168.461 559.168 168.773 558.957 169.102C558.754 169.422 558.508 169.703 558.219 169.945C557.93 170.188 557.574 170.422 557.152 170.648C556.73 170.867 556.25 171.059 555.711 171.223ZM559.039 165.152C559.039 164.504 558.914 164.02 558.664 163.699C558.422 163.371 558.121 163.207 557.762 163.207C557.379 163.207 557.047 163.336 556.766 163.594C556.484 163.852 556.344 164.207 556.344 164.66C556.344 165.348 556.5 165.922 556.812 166.383C557.125 166.844 557.508 167.074 557.961 167.074C558.164 167.074 558.336 167.039 558.477 166.969C558.617 166.891 558.723 166.805 558.793 166.711C558.863 166.617 558.918 166.473 558.957 166.277C558.996 166.074 559.02 165.906 559.027 165.773C559.035 165.633 559.039 165.426 559.039 165.152ZM560.961 171.223L560.773 170.695C562.594 169.922 563.676 168.875 564.02 167.555C563.691 167.766 563.375 167.871 563.07 167.871C562.398 167.871 561.836 167.57 561.383 166.969C560.938 166.359 560.715 165.582 560.715 164.637C560.715 163.965 560.918 163.434 561.324 163.043C561.73 162.645 562.25 162.445 562.883 162.445C563.484 162.445 564.008 162.664 564.453 163.102C564.906 163.531 565.133 164.105 565.133 164.824C565.133 165.277 565.121 165.672 565.098 166.008C565.082 166.344 565.039 166.711 564.969 167.109C564.906 167.508 564.816 167.859 564.699 168.164C564.582 168.461 564.418 168.773 564.207 169.102C564.004 169.422 563.758 169.703 563.469 169.945C563.18 170.188 562.824 170.422 562.402 170.648C561.98 170.867 561.5 171.059 560.961 171.223ZM564.289 165.152C564.289 164.504 564.164 164.02 563.914 163.699C563.672 163.371 563.371 163.207 563.012 163.207C562.629 163.207 562.297 163.336 562.016 163.594C561.734 163.852 561.594 164.207 561.594 164.66C561.594 165.348 561.75 165.922 562.062 166.383C562.375 166.844 562.758 167.074 563.211 167.074C563.414 167.074 563.586 167.039 563.727 166.969C563.867 166.891 563.973 166.805 564.043 166.711C564.113 166.617 564.168 166.473 564.207 166.277C564.246 166.074 564.27 165.906 564.277 165.773C564.285 165.633 564.289 165.426 564.289 165.152ZM569.832 162.68L569.961 163.207C569.578 163.277 569.141 163.312 568.648 163.312C567.914 163.312 567.445 163.324 567.242 163.348C567.125 164.246 566.973 165.199 566.785 166.207C567.012 166.16 567.23 166.137 567.441 166.137C568.129 166.137 568.738 166.41 569.27 166.957C569.801 167.496 570.066 168.121 570.066 168.832C570.066 169.504 569.805 170.078 569.281 170.555C568.758 171.031 568.113 171.27 567.348 171.27C566.605 171.27 565.883 171.023 565.18 170.531C565.188 170.523 565.246 170.398 565.355 170.156C565.473 169.914 565.586 169.793 565.695 169.793C565.75 169.793 565.801 169.812 565.848 169.852C566.387 170.258 566.895 170.461 567.371 170.461C567.855 170.461 568.254 170.27 568.566 169.887C568.879 169.504 569.035 169.074 569.035 168.598C569.035 168.152 568.887 167.773 568.59 167.461C568.301 167.148 567.875 166.992 567.312 166.992C567.109 166.992 566.918 167.008 566.738 167.039C566.582 166.953 566.41 166.867 566.223 166.781C566.035 166.695 565.879 166.621 565.754 166.559C565.934 165.855 566.082 165.152 566.199 164.449C566.316 163.746 566.473 163.117 566.668 162.562C566.941 162.586 567.445 162.598 568.18 162.598C568.914 162.598 569.465 162.625 569.832 162.68ZM575.105 167.59L575.223 168.117C574.816 168.164 574.527 168.195 574.355 168.211C574.371 168.57 574.391 169.023 574.414 169.57C574.445 170.117 574.465 170.566 574.473 170.918C574.402 171.16 574.27 171.281 574.074 171.281C573.934 171.281 573.797 171.223 573.664 171.105C573.531 170.988 573.449 170.848 573.418 170.684C573.426 170.441 573.453 169.645 573.5 168.293C573.25 168.309 573.051 168.316 572.902 168.316C572.668 168.316 572.305 168.305 571.812 168.281C571.328 168.25 570.973 168.234 570.746 168.234C570.637 168.234 570.488 168.242 570.301 168.258C570.316 168.07 570.324 167.941 570.324 167.871C570.324 167.824 570.32 167.75 570.312 167.648C570.312 167.539 570.312 167.457 570.312 167.402C571.617 165.207 572.672 163.578 573.477 162.516C573.719 162.516 574.051 162.566 574.473 162.668C574.457 163.035 574.434 163.832 574.402 165.059C574.379 166.277 574.355 167.102 574.332 167.531C574.676 167.547 574.934 167.566 575.105 167.59ZM571.168 167.438L573.523 167.508C573.547 167.062 573.57 166.402 573.594 165.527C573.617 164.652 573.637 163.992 573.652 163.547C573.332 163.875 572.867 164.562 572.258 165.609C571.656 166.648 571.293 167.258 571.168 167.438Z M549.48 219.098C549.488 217.41 549.707 216.195 550.137 215.453C550.566 214.703 551.219 214.305 552.094 214.258C552.477 214.258 552.816 214.363 553.113 214.574C553.41 214.785 553.645 215.055 553.816 215.383C553.996 215.703 554.145 216.09 554.262 216.543C554.379 216.988 554.457 217.414 554.496 217.82C554.543 218.219 554.574 218.645 554.59 219.098C554.59 219.715 554.496 220.348 554.309 220.996C554.129 221.637 553.848 222.199 553.465 222.684C553.09 223.16 552.668 223.398 552.199 223.398C550.387 223.398 549.48 221.965 549.48 219.098ZM551.93 215.16C551.742 215.199 551.574 215.262 551.426 215.348C551.277 215.434 551.152 215.531 551.051 215.641C550.957 215.75 550.875 215.895 550.805 216.074C550.734 216.254 550.68 216.422 550.641 216.578C550.609 216.727 550.578 216.922 550.547 217.164C550.523 217.406 550.508 217.617 550.5 217.797C550.492 217.969 550.48 218.199 550.465 218.488C550.457 218.77 550.445 219 550.43 219.18C550.43 219.539 550.449 219.883 550.488 220.211C550.527 220.531 550.598 220.867 550.699 221.219C550.809 221.57 550.977 221.855 551.203 222.074C551.43 222.293 551.703 222.418 552.023 222.449C552.508 222.449 552.906 222.113 553.219 221.441C553.539 220.77 553.699 220.09 553.699 219.402C553.699 216.605 553.109 215.191 551.93 215.16ZM555.117 221.535C555.328 221.535 555.504 221.629 555.645 221.816C555.793 221.996 555.867 222.203 555.867 222.438C555.867 222.609 555.824 222.75 555.738 222.859C555.66 222.961 555.551 223.012 555.41 223.012C555.191 223.012 555.016 222.922 554.883 222.742C554.758 222.562 554.695 222.352 554.695 222.109C554.695 221.938 554.73 221.801 554.801 221.699C554.879 221.59 554.984 221.535 555.117 221.535ZM556.711 223.223L556.523 222.695C558.344 221.922 559.426 220.875 559.77 219.555C559.441 219.766 559.125 219.871 558.82 219.871C558.148 219.871 557.586 219.57 557.133 218.969C556.688 218.359 556.465 217.582 556.465 216.637C556.465 215.965 556.668 215.434 557.074 215.043C557.48 214.645 558 214.445 558.633 214.445C559.234 214.445 559.758 214.664 560.203 215.102C560.656 215.531 560.883 216.105 560.883 216.824C560.883 217.277 560.871 217.672 560.848 218.008C560.832 218.344 560.789 218.711 560.719 219.109C560.656 219.508 560.566 219.859 560.449 220.164C560.332 220.461 560.168 220.773 559.957 221.102C559.754 221.422 559.508 221.703 559.219 221.945C558.93 222.188 558.574 222.422 558.152 222.648C557.73 222.867 557.25 223.059 556.711 223.223ZM560.039 217.152C560.039 216.504 559.914 216.02 559.664 215.699C559.422 215.371 559.121 215.207 558.762 215.207C558.379 215.207 558.047 215.336 557.766 215.594C557.484 215.852 557.344 216.207 557.344 216.66C557.344 217.348 557.5 217.922 557.812 218.383C558.125 218.844 558.508 219.074 558.961 219.074C559.164 219.074 559.336 219.039 559.477 218.969C559.617 218.891 559.723 218.805 559.793 218.711C559.863 218.617 559.918 218.473 559.957 218.277C559.996 218.074 560.02 217.906 560.027 217.773C560.035 217.633 560.039 217.426 560.039 217.152ZM561.961 223.223L561.773 222.695C563.594 221.922 564.676 220.875 565.02 219.555C564.691 219.766 564.375 219.871 564.07 219.871C563.398 219.871 562.836 219.57 562.383 218.969C561.938 218.359 561.715 217.582 561.715 216.637C561.715 215.965 561.918 215.434 562.324 215.043C562.73 214.645 563.25 214.445 563.883 214.445C564.484 214.445 565.008 214.664 565.453 215.102C565.906 215.531 566.133 216.105 566.133 216.824C566.133 217.277 566.121 217.672 566.098 218.008C566.082 218.344 566.039 218.711 565.969 219.109C565.906 219.508 565.816 219.859 565.699 220.164C565.582 220.461 565.418 220.773 565.207 221.102C565.004 221.422 564.758 221.703 564.469 221.945C564.18 222.188 563.824 222.422 563.402 222.648C562.98 222.867 562.5 223.059 561.961 223.223ZM565.289 217.152C565.289 216.504 565.164 216.02 564.914 215.699C564.672 215.371 564.371 215.207 564.012 215.207C563.629 215.207 563.297 215.336 563.016 215.594C562.734 215.852 562.594 216.207 562.594 216.66C562.594 217.348 562.75 217.922 563.062 218.383C563.375 218.844 563.758 219.074 564.211 219.074C564.414 219.074 564.586 219.039 564.727 218.969C564.867 218.891 564.973 218.805 565.043 218.711C565.113 218.617 565.168 218.473 565.207 218.277C565.246 218.074 565.27 217.906 565.277 217.773C565.285 217.633 565.289 217.426 565.289 217.152ZM567.141 222.965V222.344C567.328 222.32 567.559 222.281 567.832 222.227C568.113 222.172 568.332 222.133 568.488 222.109C568.512 221.547 568.523 220.98 568.523 220.41C568.523 220.051 568.52 219.512 568.512 218.793C568.504 218.066 568.5 217.52 568.5 217.152C568.5 216.285 568.512 215.629 568.535 215.184C567.824 215.59 567.305 215.918 566.977 216.168L566.602 215.781C566.727 215.68 566.941 215.504 567.246 215.254C567.551 214.996 567.824 214.766 568.066 214.562C568.309 214.352 568.496 214.18 568.629 214.047C568.754 214.062 568.883 214.074 569.016 214.082C569.148 214.082 569.277 214.09 569.402 214.105C569.449 215.012 569.473 216.672 569.473 219.086C569.473 220.523 569.484 221.555 569.508 222.18C569.578 222.188 569.746 222.219 570.012 222.273C570.285 222.32 570.496 222.352 570.645 222.367L570.832 222.988C570.441 222.988 570.102 222.988 569.812 222.988C569.523 222.988 569.137 222.988 568.652 222.988C568.176 222.988 567.801 222.988 567.527 222.988C567.262 222.98 567.133 222.973 567.141 222.965ZM575.227 222.191L575.59 222.965C575.004 222.98 574.086 222.992 572.836 223C571.586 223 570.922 223 570.844 223C570.844 222.938 570.84 222.828 570.832 222.672C570.832 222.516 570.832 222.391 570.832 222.297C570.98 222.039 571.227 221.73 571.57 221.371C571.914 221.004 572.258 220.648 572.602 220.305C572.945 219.953 573.281 219.57 573.609 219.156C573.945 218.742 574.219 218.281 574.43 217.773C574.641 217.258 574.746 216.73 574.746 216.191C574.746 215.848 574.625 215.57 574.383 215.359C574.141 215.141 573.848 215.031 573.504 215.031C573.105 215.031 572.734 215.195 572.391 215.523C572.055 215.844 571.82 216.336 571.688 217L571.16 216.812C571.191 216.055 571.438 215.465 571.898 215.043C572.367 214.621 572.906 214.41 573.516 214.41C574.062 214.41 574.531 214.582 574.922 214.926C575.312 215.27 575.508 215.75 575.508 216.367C575.508 216.875 575.43 217.371 575.273 217.855C575.117 218.332 574.891 218.781 574.594 219.203C574.297 219.625 574.02 219.988 573.762 220.293C573.504 220.59 573.18 220.938 572.789 221.336C572.406 221.727 572.137 222.008 571.98 222.18C572.246 222.195 572.473 222.203 572.66 222.203C572.855 222.203 573.16 222.199 573.574 222.191C573.988 222.176 574.297 222.168 574.5 222.168C574.688 222.168 574.93 222.176 575.227 222.191Z M562.312 347.07C562.734 347.07 563.086 347.258 563.367 347.633C563.664 347.992 563.812 348.406 563.812 348.875C563.812 349.219 563.727 349.5 563.555 349.719C563.398 349.922 563.18 350.023 562.898 350.023C562.461 350.023 562.109 349.844 561.844 349.484C561.594 349.125 561.469 348.703 561.469 348.219C561.469 347.875 561.539 347.602 561.68 347.398C561.836 347.18 562.047 347.07 562.312 347.07Z M562.312 357.07C562.734 357.07 563.086 357.258 563.367 357.633C563.664 357.992 563.812 358.406 563.812 358.875C563.812 359.219 563.727 359.5 563.555 359.719C563.398 359.922 563.18 360.023 562.898 360.023C562.461 360.023 562.109 359.844 561.844 359.484C561.594 359.125 561.469 358.703 561.469 358.219C561.469 357.875 561.539 357.602 561.68 357.398C561.836 357.18 562.047 357.07 562.312 357.07Z M562.312 367.07C562.734 367.07 563.086 367.258 563.367 367.633C563.664 367.992 563.812 368.406 563.812 368.875C563.812 369.219 563.727 369.5 563.555 369.719C563.398 369.922 563.18 370.023 562.898 370.023C562.461 370.023 562.109 369.844 561.844 369.484C561.594 369.125 561.469 368.703 561.469 368.219C561.469 367.875 561.539 367.602 561.68 367.398C561.836 367.18 562.047 367.07 562.312 367.07Z';

  var dataset10Ph = 'M610.756 23.304C610.884 23.4107 610.948 23.5813 610.948 23.816C610.948 23.8693 610.937 23.9387 610.916 24.024C610.969 24.0453 611.012 24.1467 611.044 24.328C611.076 24.4987 611.092 24.6907 611.092 24.904C611.092 25.224 611.055 25.4267 610.98 25.512C611.012 25.5867 611.028 25.672 611.028 25.768C611.028 25.992 610.932 26.1787 610.74 26.328C610.772 26.392 610.788 26.4773 610.788 26.584C610.788 26.7547 610.751 26.9467 610.676 27.16C610.601 27.3627 610.516 27.5067 610.42 27.592C610.42 27.7627 610.324 27.9547 610.132 28.168C609.951 28.3707 609.775 28.4827 609.604 28.504C609.529 28.6213 609.412 28.7173 609.252 28.792C609.092 28.8667 608.927 28.904 608.756 28.904C608.617 28.904 608.5 28.8827 608.404 28.84C608.297 28.904 608.159 28.936 607.988 28.936C607.849 28.936 607.711 28.9147 607.572 28.872C607.444 28.8293 607.348 28.776 607.284 28.712C607.199 28.7333 607.124 28.744 607.06 28.744C606.847 28.744 606.692 28.696 606.596 28.6C606.585 28.6533 606.575 28.7333 606.564 28.84C606.553 28.936 606.521 29.0107 606.468 29.064C606.532 29.16 606.564 29.2827 606.564 29.432C606.564 29.6667 606.505 29.8427 606.388 29.96C606.452 30.0133 606.505 30.0933 606.548 30.2C606.591 30.3173 606.612 30.4347 606.612 30.552C606.612 30.7333 606.559 30.872 606.452 30.968C606.505 31.128 606.532 31.2933 606.532 31.464C606.532 31.7093 606.468 31.896 606.34 32.024C606.212 32.1627 606.063 32.232 605.892 32.232C605.732 32.232 605.583 32.1787 605.444 32.072C605.316 31.9653 605.225 31.8107 605.172 31.608C605.14 31.5653 605.113 31.4907 605.092 31.384C605.071 31.288 605.06 31.1813 605.06 31.064C605.06 30.808 605.103 30.664 605.188 30.632C605.081 30.4293 605.028 30.1893 605.028 29.912C605.028 29.6773 605.071 29.448 605.156 29.224C605.06 29.128 605.012 28.968 605.012 28.744C605.012 28.552 605.055 28.4027 605.14 28.296C605.119 28.2213 605.087 28.1307 605.044 28.024C605.001 27.9067 604.98 27.8053 604.98 27.72C604.98 27.6453 605.007 27.5547 605.06 27.448C604.996 27.32 604.964 27.208 604.964 27.112C604.964 27.016 604.996 26.8987 605.06 26.76C605.124 26.6213 605.167 26.5253 605.188 26.472C605.092 26.3227 605.044 26.088 605.044 25.768C605.044 25.48 605.081 25.2827 605.156 25.176C605.007 24.856 604.932 24.6053 604.932 24.424C604.932 24.2427 604.98 24.0987 605.076 23.992C605.033 23.9067 605.012 23.8107 605.012 23.704C605.012 23.5973 605.044 23.496 605.108 23.4C605.033 23.2827 604.996 23.112 604.996 22.888C604.996 22.6 605.049 22.3973 605.156 22.28C605.039 21.9813 604.98 21.688 604.98 21.4C604.98 21.1547 605.023 20.9733 605.108 20.856C605.097 20.824 605.092 20.776 605.092 20.712C605.092 20.5307 605.167 20.3813 605.316 20.264C605.476 20.136 605.647 20.072 605.828 20.072C605.967 20.072 606.084 20.1093 606.18 20.184C606.276 20.2587 606.345 20.3707 606.388 20.52L606.468 20.568C606.543 20.4613 606.644 20.3867 606.772 20.344C606.9 20.2907 607.039 20.2747 607.188 20.296C607.284 20.168 607.465 20.104 607.732 20.104C607.903 20.104 608.057 20.12 608.196 20.152C608.26 20.1307 608.319 20.12 608.372 20.12C608.479 20.12 608.585 20.1467 608.692 20.2C608.799 20.2427 608.868 20.2907 608.9 20.344C609.039 20.344 609.14 20.3547 609.204 20.376C609.279 20.3973 609.359 20.4613 609.444 20.568C609.529 20.568 609.604 20.5947 609.668 20.648C609.743 20.6907 609.791 20.744 609.812 20.808C609.908 20.8187 609.972 20.8453 610.004 20.888C610.047 20.9307 610.084 21 610.116 21.096C610.329 21.2987 610.447 21.6347 610.468 22.104C610.585 22.168 610.671 22.2747 610.724 22.424C610.788 22.5733 610.82 22.7333 610.82 22.904C610.82 23.0427 610.799 23.176 610.756 23.304ZM608.388 27.544C608.441 27.4267 608.532 27.3253 608.66 27.24C608.788 27.144 608.911 27.0853 609.028 27.064C609.028 26.8187 609.119 26.584 609.3 26.36C609.268 26.2 609.252 26.104 609.252 26.072C609.252 25.8267 609.353 25.6187 609.556 25.448C609.524 25.256 609.508 25.032 609.508 24.776C609.508 24.6373 609.519 24.536 609.54 24.472C609.433 24.3867 609.343 24.2373 609.268 24.024C609.204 23.8 609.172 23.5813 609.172 23.368C609.172 23.2293 609.188 23.112 609.22 23.016C609.135 22.9307 609.065 22.7973 609.012 22.616C608.969 22.4347 608.959 22.2693 608.98 22.12C608.895 22.088 608.799 22.0293 608.692 21.944C608.596 21.8587 608.521 21.7787 608.468 21.704C608.393 21.704 608.319 21.688 608.244 21.656C608.18 21.624 608.111 21.5867 608.036 21.544C607.983 21.5867 607.855 21.608 607.652 21.608C607.492 21.608 607.385 21.5973 607.332 21.576C607.151 21.6933 606.969 21.752 606.788 21.752C606.66 21.752 606.537 21.7147 606.42 21.64C606.516 21.8 606.564 22.0027 606.564 22.248C606.564 22.4933 606.527 22.6907 606.452 22.84C606.537 22.9573 606.58 23.1707 606.58 23.48C606.58 23.7467 606.543 23.9333 606.468 24.04C606.553 24.1893 606.596 24.44 606.596 24.792C606.596 25.0907 606.553 25.3093 606.468 25.448C606.543 25.5867 606.58 25.784 606.58 26.04C606.58 26.2747 606.548 26.456 606.484 26.584C606.548 26.68 606.58 26.8293 606.58 27.032C606.58 27.1067 606.569 27.1867 606.548 27.272C606.676 27.2507 606.852 27.272 607.076 27.336C607.311 27.3893 607.481 27.4587 607.588 27.544C607.652 27.5227 607.785 27.512 607.988 27.512C608.201 27.512 608.335 27.5227 608.388 27.544ZM620.495 21.848C620.527 21.912 620.543 21.9653 620.543 22.008C620.543 22.0613 620.532 22.1093 620.511 22.152C620.5 22.184 620.49 22.2053 620.479 22.216C620.692 22.216 620.847 22.2693 620.943 22.376C621.039 22.4827 621.087 22.6213 621.087 22.792C621.087 22.9627 621.039 23.1227 620.943 23.272C620.847 23.4107 620.735 23.4747 620.607 23.464C620.639 23.5387 620.655 23.6613 620.655 23.832C620.655 24.0987 620.612 24.2587 620.527 24.312C620.623 24.4187 620.671 24.6107 620.671 24.888C620.671 25.048 620.65 25.2027 620.607 25.352C620.575 25.4907 620.527 25.5867 620.463 25.64C620.559 25.7467 620.607 25.9333 620.607 26.2C620.607 26.3707 620.58 26.4827 620.527 26.536C620.58 26.6427 620.607 26.7653 620.607 26.904C620.607 27.1493 620.559 27.3467 620.463 27.496C620.548 27.6347 620.591 27.7787 620.591 27.928C620.591 28.0667 620.564 28.168 620.511 28.232C620.5 28.4347 620.442 28.616 620.335 28.776C620.228 28.9253 620.084 29 619.903 29C619.828 29 619.727 28.9733 619.599 28.92C619.375 28.8133 619.263 28.5733 619.263 28.2C619.263 28.008 619.279 27.8427 619.311 27.704C619.236 27.512 619.199 27.2933 619.199 27.048C619.199 26.76 619.252 26.504 619.359 26.28C619.231 26.088 619.167 25.8533 619.167 25.576C619.167 25.352 619.215 25.1867 619.311 25.08C619.268 25.0373 619.247 24.92 619.247 24.728C619.247 24.5467 619.268 24.4293 619.311 24.376C619.258 24.1947 619.231 23.9493 619.231 23.64C619.231 23.544 619.236 23.4853 619.247 23.464C619.162 23.5067 619.092 23.528 619.039 23.528C618.932 23.528 618.852 23.4907 618.799 23.416C618.703 23.48 618.612 23.512 618.527 23.512C618.431 23.512 618.34 23.4747 618.255 23.4C618.127 23.464 617.994 23.496 617.855 23.496C617.727 23.496 617.62 23.464 617.535 23.4C617.428 23.4427 617.284 23.464 617.103 23.464C616.9 23.464 616.756 23.4373 616.671 23.384C616.479 23.448 616.303 23.48 616.143 23.48C615.994 23.48 615.871 23.448 615.775 23.384C615.594 23.4587 615.412 23.496 615.231 23.496C615.028 23.496 614.826 23.4427 614.623 23.336C614.708 23.464 614.751 23.6293 614.751 23.832C614.751 23.992 614.73 24.1413 614.687 24.28C614.804 24.4507 614.863 24.6213 614.863 24.792C614.863 24.92 614.831 25.0587 614.767 25.208C614.852 25.3467 614.895 25.5227 614.895 25.736C614.895 25.9387 614.858 26.0933 614.783 26.2C614.911 26.456 614.975 26.664 614.975 26.824C614.975 26.9733 614.922 27.1387 614.815 27.32C614.89 27.448 614.927 27.64 614.927 27.896C614.927 28.0667 614.9 28.2 614.847 28.296C614.847 28.488 614.788 28.6373 614.671 28.744C614.554 28.8507 614.41 28.904 614.239 28.904C614.058 28.904 613.903 28.856 613.775 28.76C613.647 28.6533 613.583 28.5147 613.583 28.344C613.583 28.2693 613.599 28.184 613.631 28.088C613.503 27.928 613.439 27.7467 613.439 27.544C613.439 27.4373 613.46 27.3413 613.503 27.256C613.546 27.16 613.604 27.0907 613.679 27.048C613.636 26.9733 613.594 26.8507 613.551 26.68C613.519 26.4987 613.503 26.3333 613.503 26.184C613.503 25.9813 613.53 25.8533 613.583 25.8C613.519 25.7573 613.466 25.688 613.423 25.592C613.391 25.496 613.375 25.3947 613.375 25.288C613.375 25.128 613.412 25 613.487 24.904C613.412 24.744 613.375 24.5787 613.375 24.408C613.375 24.3227 613.38 24.2587 613.391 24.216C613.359 24.0987 613.343 23.9813 613.343 23.864C613.343 23.7253 613.359 23.5867 613.391 23.448C613.306 23.224 613.263 22.9627 613.263 22.664C613.263 22.3653 613.311 22.168 613.407 22.072C613.332 21.9227 613.295 21.7413 613.295 21.528C613.295 21.3467 613.316 21.208 613.359 21.112C613.274 20.9947 613.231 20.84 613.231 20.648C613.231 20.488 613.252 20.36 613.295 20.264C613.263 20.2 613.231 20.1093 613.199 19.992C613.178 19.8747 613.167 19.7573 613.167 19.64C613.167 19.384 613.22 19.1973 613.327 19.08C613.284 18.9947 613.263 18.9307 613.263 18.888C613.263 18.824 613.284 18.7707 613.327 18.728C613.21 18.6 613.151 18.4613 613.151 18.312C613.151 18.1413 613.226 17.992 613.375 17.864C613.524 17.736 613.69 17.672 613.871 17.672C613.988 17.672 614.095 17.7093 614.191 17.784C614.298 17.8587 614.372 17.976 614.415 18.136C614.575 18.2747 614.655 18.4347 614.655 18.616C614.655 18.7013 614.628 18.7973 614.575 18.904C614.628 18.968 614.655 19.0587 614.655 19.176C614.655 19.272 614.634 19.3627 614.591 19.448C614.548 19.5333 614.5 19.592 614.447 19.624C614.596 19.752 614.671 19.9173 614.671 20.12C614.671 20.2907 614.612 20.4347 614.495 20.552C614.634 20.68 614.703 20.824 614.703 20.984C614.703 21.1013 614.666 21.2347 614.591 21.384C614.698 21.5227 614.751 21.6827 614.751 21.864C614.751 21.992 614.73 22.0827 614.687 22.136C614.847 22.0507 615.039 22.008 615.263 22.008C615.508 22.008 615.679 22.0613 615.775 22.168C616.042 22.072 616.266 22.024 616.447 22.024C616.65 22.024 616.82 22.072 616.959 22.168C617.044 22.1253 617.156 22.088 617.295 22.056C617.434 22.024 617.567 22.008 617.695 22.008C617.887 22.008 618.026 22.0507 618.111 22.136C618.25 22.04 618.426 21.992 618.639 21.992C618.927 21.992 619.156 22.072 619.327 22.232C619.295 22.1467 619.279 22.0293 619.279 21.88C619.279 21.6667 619.306 21.5493 619.359 21.528C619.295 21.4 619.263 21.2667 619.263 21.128C619.263 20.9893 619.295 20.888 619.359 20.824C619.338 20.7387 619.327 20.6693 619.327 20.616C619.327 20.4987 619.343 20.4027 619.375 20.328C619.29 20.2107 619.247 20.0827 619.247 19.944C619.247 19.848 619.274 19.7467 619.327 19.64C619.274 19.5333 619.247 19.4373 619.247 19.352C619.247 19.2027 619.3 19.1013 619.407 19.048C619.375 18.9307 619.359 18.84 619.359 18.776C619.359 18.68 619.38 18.5733 619.423 18.456C619.348 18.3173 619.311 18.1893 619.311 18.072C619.311 17.912 619.375 17.7787 619.503 17.672C619.631 17.5547 619.78 17.496 619.951 17.496C620.079 17.496 620.196 17.5387 620.303 17.624C620.41 17.6987 620.484 17.8107 620.527 17.96C620.666 18.056 620.735 18.2267 620.735 18.472C620.735 18.6747 620.692 18.872 620.607 19.064C620.671 19.16 620.703 19.336 620.703 19.592C620.703 19.784 620.682 19.9173 620.639 19.992C620.682 20.0667 620.703 20.168 620.703 20.296C620.703 20.4667 620.676 20.6053 620.623 20.712C620.676 20.7653 620.703 20.8347 620.703 20.92C620.703 21.0373 620.671 21.128 620.607 21.192C620.639 21.288 620.655 21.3733 620.655 21.448C620.655 21.5973 620.602 21.7307 620.495 21.848Z M606 196.625L606.094 196.086C606.156 196.094 606.332 196.129 606.621 196.191C606.918 196.254 607.18 196.301 607.406 196.332C607.641 196.363 607.848 196.379 608.027 196.379C608.473 196.379 608.82 196.211 609.07 195.875C609.328 195.539 609.457 195.148 609.457 194.703C609.457 194.094 609.246 193.57 608.824 193.133C608.41 192.688 607.809 192.465 607.02 192.465C606.895 192.465 606.801 192.469 606.738 192.477V191.902C606.809 191.91 606.918 191.914 607.066 191.914C607.777 191.914 608.355 191.789 608.801 191.539C609.254 191.289 609.48 190.891 609.48 190.344C609.48 189.93 609.363 189.598 609.129 189.348C608.895 189.098 608.59 188.973 608.215 188.973C608.043 188.973 607.855 188.984 607.652 189.008C607.457 189.023 607.242 189.047 607.008 189.078C606.773 189.109 606.625 189.129 606.562 189.137L606.375 188.609C606.469 188.586 606.621 188.543 606.832 188.48C607.043 188.418 607.207 188.371 607.324 188.34C607.449 188.309 607.605 188.281 607.793 188.258C607.98 188.227 608.156 188.211 608.32 188.211C608.922 188.211 609.398 188.422 609.75 188.844C610.102 189.258 610.277 189.828 610.277 190.555C610.277 191.016 610.164 191.395 609.938 191.691C609.719 191.988 609.383 192.172 608.93 192.242C609.398 192.43 609.754 192.738 609.996 193.168C610.246 193.59 610.371 194.09 610.371 194.668C610.371 195.332 610.215 195.902 609.902 196.379C609.59 196.848 609.117 197.082 608.484 197.082C607.57 197.082 606.742 196.93 606 196.625ZM611.496 195.535C611.707 195.535 611.883 195.629 612.023 195.816C612.172 195.996 612.246 196.203 612.246 196.438C612.246 196.609 612.203 196.75 612.117 196.859C612.039 196.961 611.93 197.012 611.789 197.012C611.57 197.012 611.395 196.922 611.262 196.742C611.137 196.562 611.074 196.352 611.074 196.109C611.074 195.938 611.109 195.801 611.18 195.699C611.258 195.59 611.363 195.535 611.496 195.535ZM613.02 196.965V196.344C613.207 196.32 613.438 196.281 613.711 196.227C613.992 196.172 614.211 196.133 614.367 196.109C614.391 195.547 614.402 194.98 614.402 194.41C614.402 194.051 614.398 193.512 614.391 192.793C614.383 192.066 614.379 191.52 614.379 191.152C614.379 190.285 614.391 189.629 614.414 189.184C613.703 189.59 613.184 189.918 612.855 190.168L612.48 189.781C612.605 189.68 612.82 189.504 613.125 189.254C613.43 188.996 613.703 188.766 613.945 188.562C614.188 188.352 614.375 188.18 614.508 188.047C614.633 188.062 614.762 188.074 614.895 188.082C615.027 188.082 615.156 188.09 615.281 188.105C615.328 189.012 615.352 190.672 615.352 193.086C615.352 194.523 615.363 195.555 615.387 196.18C615.457 196.188 615.625 196.219 615.891 196.273C616.164 196.32 616.375 196.352 616.523 196.367L616.711 196.988C616.32 196.988 615.98 196.988 615.691 196.988C615.402 196.988 615.016 196.988 614.531 196.988C614.055 196.988 613.68 196.988 613.406 196.988C613.141 196.98 613.012 196.973 613.02 196.965ZM621.352 188.516L621.551 189.043C619.723 189.824 618.637 190.871 618.293 192.184C618.605 191.98 618.922 191.879 619.242 191.879C619.914 191.879 620.477 192.184 620.93 192.793C621.383 193.395 621.609 194.164 621.609 195.102C621.609 195.773 621.402 196.309 620.988 196.707C620.582 197.105 620.062 197.305 619.43 197.305C618.836 197.305 618.312 197.09 617.859 196.66C617.414 196.223 617.191 195.645 617.191 194.926C617.191 194.473 617.199 194.078 617.215 193.742C617.238 193.406 617.281 193.039 617.344 192.641C617.414 192.234 617.508 191.883 617.625 191.586C617.742 191.289 617.902 190.98 618.105 190.66C618.316 190.332 618.566 190.047 618.855 189.805C619.145 189.555 619.496 189.32 619.91 189.102C620.332 188.875 620.812 188.68 621.352 188.516ZM618.035 194.586C618.035 195.234 618.156 195.723 618.398 196.051C618.641 196.371 618.941 196.531 619.301 196.531C619.684 196.531 620.016 196.402 620.297 196.145C620.578 195.887 620.719 195.531 620.719 195.078C620.719 194.391 620.562 193.816 620.25 193.355C619.938 192.895 619.559 192.664 619.113 192.664C618.91 192.664 618.738 192.703 618.598 192.781C618.457 192.852 618.352 192.934 618.281 193.027C618.211 193.121 618.156 193.27 618.117 193.473C618.078 193.668 618.055 193.836 618.047 193.977C618.039 194.109 618.035 194.312 618.035 194.586Z M607 274.625L607.094 274.086C607.156 274.094 607.332 274.129 607.621 274.191C607.918 274.254 608.18 274.301 608.406 274.332C608.641 274.363 608.848 274.379 609.027 274.379C609.473 274.379 609.82 274.211 610.07 273.875C610.328 273.539 610.457 273.148 610.457 272.703C610.457 272.094 610.246 271.57 609.824 271.133C609.41 270.688 608.809 270.465 608.02 270.465C607.895 270.465 607.801 270.469 607.738 270.477V269.902C607.809 269.91 607.918 269.914 608.066 269.914C608.777 269.914 609.355 269.789 609.801 269.539C610.254 269.289 610.48 268.891 610.48 268.344C610.48 267.93 610.363 267.598 610.129 267.348C609.895 267.098 609.59 266.973 609.215 266.973C609.043 266.973 608.855 266.984 608.652 267.008C608.457 267.023 608.242 267.047 608.008 267.078C607.773 267.109 607.625 267.129 607.562 267.137L607.375 266.609C607.469 266.586 607.621 266.543 607.832 266.48C608.043 266.418 608.207 266.371 608.324 266.34C608.449 266.309 608.605 266.281 608.793 266.258C608.98 266.227 609.156 266.211 609.32 266.211C609.922 266.211 610.398 266.422 610.75 266.844C611.102 267.258 611.277 267.828 611.277 268.555C611.277 269.016 611.164 269.395 610.938 269.691C610.719 269.988 610.383 270.172 609.93 270.242C610.398 270.43 610.754 270.738 610.996 271.168C611.246 271.59 611.371 272.09 611.371 272.668C611.371 273.332 611.215 273.902 610.902 274.379C610.59 274.848 610.117 275.082 609.484 275.082C608.57 275.082 607.742 274.93 607 274.625ZM612.496 273.535C612.707 273.535 612.883 273.629 613.023 273.816C613.172 273.996 613.246 274.203 613.246 274.438C613.246 274.609 613.203 274.75 613.117 274.859C613.039 274.961 612.93 275.012 612.789 275.012C612.57 275.012 612.395 274.922 612.262 274.742C612.137 274.562 612.074 274.352 612.074 274.109C612.074 273.938 612.109 273.801 612.18 273.699C612.258 273.59 612.363 273.535 612.496 273.535ZM613.48 274.625L613.574 274.086C613.637 274.094 613.812 274.129 614.102 274.191C614.398 274.254 614.66 274.301 614.887 274.332C615.121 274.363 615.328 274.379 615.508 274.379C615.953 274.379 616.301 274.211 616.551 273.875C616.809 273.539 616.938 273.148 616.938 272.703C616.938 272.094 616.727 271.57 616.305 271.133C615.891 270.688 615.289 270.465 614.5 270.465C614.375 270.465 614.281 270.469 614.219 270.477V269.902C614.289 269.91 614.398 269.914 614.547 269.914C615.258 269.914 615.836 269.789 616.281 269.539C616.734 269.289 616.961 268.891 616.961 268.344C616.961 267.93 616.844 267.598 616.609 267.348C616.375 267.098 616.07 266.973 615.695 266.973C615.523 266.973 615.336 266.984 615.133 267.008C614.938 267.023 614.723 267.047 614.488 267.078C614.254 267.109 614.105 267.129 614.043 267.137L613.855 266.609C613.949 266.586 614.102 266.543 614.312 266.48C614.523 266.418 614.688 266.371 614.805 266.34C614.93 266.309 615.086 266.281 615.273 266.258C615.461 266.227 615.637 266.211 615.801 266.211C616.402 266.211 616.879 266.422 617.23 266.844C617.582 267.258 617.758 267.828 617.758 268.555C617.758 269.016 617.645 269.395 617.418 269.691C617.199 269.988 616.863 270.172 616.41 270.242C616.879 270.43 617.234 270.738 617.477 271.168C617.727 271.59 617.852 272.09 617.852 272.668C617.852 273.332 617.695 273.902 617.383 274.379C617.07 274.848 616.598 275.082 615.965 275.082C615.051 275.082 614.223 274.93 613.48 274.625ZM618.859 274.965V274.344C619.047 274.32 619.277 274.281 619.551 274.227C619.832 274.172 620.051 274.133 620.207 274.109C620.23 273.547 620.242 272.98 620.242 272.41C620.242 272.051 620.238 271.512 620.23 270.793C620.223 270.066 620.219 269.52 620.219 269.152C620.219 268.285 620.23 267.629 620.254 267.184C619.543 267.59 619.023 267.918 618.695 268.168L618.32 267.781C618.445 267.68 618.66 267.504 618.965 267.254C619.27 266.996 619.543 266.766 619.785 266.562C620.027 266.352 620.215 266.18 620.348 266.047C620.473 266.062 620.602 266.074 620.734 266.082C620.867 266.082 620.996 266.09 621.121 266.105C621.168 267.012 621.191 268.672 621.191 271.086C621.191 272.523 621.203 273.555 621.227 274.18C621.297 274.188 621.465 274.219 621.73 274.273C622.004 274.32 622.215 274.352 622.363 274.367L622.551 274.988C622.16 274.988 621.82 274.988 621.531 274.988C621.242 274.988 620.855 274.988 620.371 274.988C619.895 274.988 619.52 274.988 619.246 274.988C618.98 274.98 618.852 274.973 618.859 274.965Z M611.395 92.1914L611.758 92.9648C611.172 92.9805 610.254 92.9922 609.004 93C607.754 93 607.09 93 607.012 93C607.012 92.9375 607.008 92.8281 607 92.6719C607 92.5156 607 92.3906 607 92.2969C607.148 92.0391 607.395 91.7305 607.738 91.3711C608.082 91.0039 608.426 90.6484 608.77 90.3047C609.113 89.9531 609.449 89.5703 609.777 89.1562C610.113 88.7422 610.387 88.2812 610.598 87.7734C610.809 87.2578 610.914 86.7305 610.914 86.1914C610.914 85.8477 610.793 85.5703 610.551 85.3594C610.309 85.1406 610.016 85.0312 609.672 85.0312C609.273 85.0312 608.902 85.1953 608.559 85.5234C608.223 85.8438 607.988 86.3359 607.855 87L607.328 86.8125C607.359 86.0547 607.605 85.4648 608.066 85.043C608.535 84.6211 609.074 84.4102 609.684 84.4102C610.23 84.4102 610.699 84.582 611.09 84.9258C611.48 85.2695 611.676 85.75 611.676 86.3672C611.676 86.875 611.598 87.3711 611.441 87.8555C611.285 88.332 611.059 88.7812 610.762 89.2031C610.465 89.625 610.188 89.9883 609.93 90.293C609.672 90.5898 609.348 90.9375 608.957 91.3359C608.574 91.7266 608.305 92.0078 608.148 92.1797C608.414 92.1953 608.641 92.2031 608.828 92.2031C609.023 92.2031 609.328 92.1992 609.742 92.1914C610.156 92.1758 610.465 92.168 610.668 92.168C610.855 92.168 611.098 92.1758 611.395 92.1914ZM612.402 91.5352C612.613 91.5352 612.789 91.6289 612.93 91.8164C613.078 91.9961 613.152 92.2031 613.152 92.4375C613.152 92.6094 613.109 92.75 613.023 92.8594C612.945 92.9609 612.836 93.0117 612.695 93.0117C612.477 93.0117 612.301 92.9219 612.168 92.7422C612.043 92.5625 611.98 92.3516 611.98 92.1094C611.98 91.9375 612.016 91.8008 612.086 91.6992C612.164 91.5898 612.27 91.5352 612.402 91.5352ZM618.039 84.6797L618.168 85.207C617.785 85.2773 617.348 85.3125 616.855 85.3125C616.121 85.3125 615.652 85.3242 615.449 85.3477C615.332 86.2461 615.18 87.1992 614.992 88.207C615.219 88.1602 615.438 88.1367 615.648 88.1367C616.336 88.1367 616.945 88.4102 617.477 88.957C618.008 89.4961 618.273 90.1211 618.273 90.832C618.273 91.5039 618.012 92.0781 617.488 92.5547C616.965 93.0312 616.32 93.2695 615.555 93.2695C614.812 93.2695 614.09 93.0234 613.387 92.5312C613.395 92.5234 613.453 92.3984 613.562 92.1562C613.68 91.9141 613.793 91.793 613.902 91.793C613.957 91.793 614.008 91.8125 614.055 91.8516C614.594 92.2578 615.102 92.4609 615.578 92.4609C616.062 92.4609 616.461 92.2695 616.773 91.8867C617.086 91.5039 617.242 91.0742 617.242 90.5977C617.242 90.1523 617.094 89.7734 616.797 89.4609C616.508 89.1484 616.082 88.9922 615.52 88.9922C615.316 88.9922 615.125 89.0078 614.945 89.0391C614.789 88.9531 614.617 88.8672 614.43 88.7812C614.242 88.6953 614.086 88.6211 613.961 88.5586C614.141 87.8555 614.289 87.1523 614.406 86.4492C614.523 85.7461 614.68 85.1172 614.875 84.5625C615.148 84.5859 615.652 84.5977 616.387 84.5977C617.121 84.5977 617.672 84.625 618.039 84.6797ZM619.047 92.9648V92.3438C619.234 92.3203 619.465 92.2812 619.738 92.2266C620.02 92.1719 620.238 92.1328 620.395 92.1094C620.418 91.5469 620.43 90.9805 620.43 90.4102C620.43 90.0508 620.426 89.5117 620.418 88.793C620.41 88.0664 620.406 87.5195 620.406 87.1523C620.406 86.2852 620.418 85.6289 620.441 85.1836C619.73 85.5898 619.211 85.918 618.883 86.168L618.508 85.7812C618.633 85.6797 618.848 85.5039 619.152 85.2539C619.457 84.9961 619.73 84.7656 619.973 84.5625C620.215 84.3516 620.402 84.1797 620.535 84.0469C620.66 84.0625 620.789 84.0742 620.922 84.082C621.055 84.082 621.184 84.0898 621.309 84.1055C621.355 85.0117 621.379 86.6719 621.379 89.0859C621.379 90.5234 621.391 91.5547 621.414 92.1797C621.484 92.1875 621.652 92.2188 621.918 92.2734C622.191 92.3203 622.402 92.3516 622.551 92.3672L622.738 92.9883C622.348 92.9883 622.008 92.9883 621.719 92.9883C621.43 92.9883 621.043 92.9883 620.559 92.9883C620.082 92.9883 619.707 92.9883 619.434 92.9883C619.168 92.9805 619.039 92.9727 619.047 92.9648Z M606 300.625L606.094 300.086C606.156 300.094 606.332 300.129 606.621 300.191C606.918 300.254 607.18 300.301 607.406 300.332C607.641 300.363 607.848 300.379 608.027 300.379C608.473 300.379 608.82 300.211 609.07 299.875C609.328 299.539 609.457 299.148 609.457 298.703C609.457 298.094 609.246 297.57 608.824 297.133C608.41 296.688 607.809 296.465 607.02 296.465C606.895 296.465 606.801 296.469 606.738 296.477V295.902C606.809 295.91 606.918 295.914 607.066 295.914C607.777 295.914 608.355 295.789 608.801 295.539C609.254 295.289 609.48 294.891 609.48 294.344C609.48 293.93 609.363 293.598 609.129 293.348C608.895 293.098 608.59 292.973 608.215 292.973C608.043 292.973 607.855 292.984 607.652 293.008C607.457 293.023 607.242 293.047 607.008 293.078C606.773 293.109 606.625 293.129 606.562 293.137L606.375 292.609C606.469 292.586 606.621 292.543 606.832 292.48C607.043 292.418 607.207 292.371 607.324 292.34C607.449 292.309 607.605 292.281 607.793 292.258C607.98 292.227 608.156 292.211 608.32 292.211C608.922 292.211 609.398 292.422 609.75 292.844C610.102 293.258 610.277 293.828 610.277 294.555C610.277 295.016 610.164 295.395 609.938 295.691C609.719 295.988 609.383 296.172 608.93 296.242C609.398 296.43 609.754 296.738 609.996 297.168C610.246 297.59 610.371 298.09 610.371 298.668C610.371 299.332 610.215 299.902 609.902 300.379C609.59 300.848 609.117 301.082 608.484 301.082C607.57 301.082 606.742 300.93 606 300.625ZM611.496 299.535C611.707 299.535 611.883 299.629 612.023 299.816C612.172 299.996 612.246 300.203 612.246 300.438C612.246 300.609 612.203 300.75 612.117 300.859C612.039 300.961 611.93 301.012 611.789 301.012C611.57 301.012 611.395 300.922 611.262 300.742C611.137 300.562 611.074 300.352 611.074 300.109C611.074 299.938 611.109 299.801 611.18 299.699C611.258 299.59 611.363 299.535 611.496 299.535ZM613.09 301.223L612.902 300.695C614.723 299.922 615.805 298.875 616.148 297.555C615.82 297.766 615.504 297.871 615.199 297.871C614.527 297.871 613.965 297.57 613.512 296.969C613.066 296.359 612.844 295.582 612.844 294.637C612.844 293.965 613.047 293.434 613.453 293.043C613.859 292.645 614.379 292.445 615.012 292.445C615.613 292.445 616.137 292.664 616.582 293.102C617.035 293.531 617.262 294.105 617.262 294.824C617.262 295.277 617.25 295.672 617.227 296.008C617.211 296.344 617.168 296.711 617.098 297.109C617.035 297.508 616.945 297.859 616.828 298.164C616.711 298.461 616.547 298.773 616.336 299.102C616.133 299.422 615.887 299.703 615.598 299.945C615.309 300.188 614.953 300.422 614.531 300.648C614.109 300.867 613.629 301.059 613.09 301.223ZM616.418 295.152C616.418 294.504 616.293 294.02 616.043 293.699C615.801 293.371 615.5 293.207 615.141 293.207C614.758 293.207 614.426 293.336 614.145 293.594C613.863 293.852 613.723 294.207 613.723 294.66C613.723 295.348 613.879 295.922 614.191 296.383C614.504 296.844 614.887 297.074 615.34 297.074C615.543 297.074 615.715 297.039 615.855 296.969C615.996 296.891 616.102 296.805 616.172 296.711C616.242 296.617 616.297 296.473 616.336 296.277C616.375 296.074 616.398 295.906 616.406 295.773C616.414 295.633 616.418 295.426 616.418 295.152ZM619.184 301.094L618.27 300.824L621.434 293.066C619.613 293.012 618.379 292.957 617.73 292.902L617.613 292.375C618.16 292.312 618.988 292.281 620.098 292.281C621.207 292.273 621.973 292.254 622.395 292.223L622.336 293.242L619.184 301.094Z M607 144.625L607.094 144.086C607.156 144.094 607.332 144.129 607.621 144.191C607.918 144.254 608.18 144.301 608.406 144.332C608.641 144.363 608.848 144.379 609.027 144.379C609.473 144.379 609.82 144.211 610.07 143.875C610.328 143.539 610.457 143.148 610.457 142.703C610.457 142.094 610.246 141.57 609.824 141.133C609.41 140.688 608.809 140.465 608.02 140.465C607.895 140.465 607.801 140.469 607.738 140.477V139.902C607.809 139.91 607.918 139.914 608.066 139.914C608.777 139.914 609.355 139.789 609.801 139.539C610.254 139.289 610.48 138.891 610.48 138.344C610.48 137.93 610.363 137.598 610.129 137.348C609.895 137.098 609.59 136.973 609.215 136.973C609.043 136.973 608.855 136.984 608.652 137.008C608.457 137.023 608.242 137.047 608.008 137.078C607.773 137.109 607.625 137.129 607.562 137.137L607.375 136.609C607.469 136.586 607.621 136.543 607.832 136.48C608.043 136.418 608.207 136.371 608.324 136.34C608.449 136.309 608.605 136.281 608.793 136.258C608.98 136.227 609.156 136.211 609.32 136.211C609.922 136.211 610.398 136.422 610.75 136.844C611.102 137.258 611.277 137.828 611.277 138.555C611.277 139.016 611.164 139.395 610.938 139.691C610.719 139.988 610.383 140.172 609.93 140.242C610.398 140.43 610.754 140.738 610.996 141.168C611.246 141.59 611.371 142.09 611.371 142.668C611.371 143.332 611.215 143.902 610.902 144.379C610.59 144.848 610.117 145.082 609.484 145.082C608.57 145.082 607.742 144.93 607 144.625ZM612.496 143.535C612.707 143.535 612.883 143.629 613.023 143.816C613.172 143.996 613.246 144.203 613.246 144.438C613.246 144.609 613.203 144.75 613.117 144.859C613.039 144.961 612.93 145.012 612.789 145.012C612.57 145.012 612.395 144.922 612.262 144.742C612.137 144.562 612.074 144.352 612.074 144.109C612.074 143.938 612.109 143.801 612.18 143.699C612.258 143.59 612.363 143.535 612.496 143.535ZM614.934 145.094L614.02 144.824L617.184 137.066C615.363 137.012 614.129 136.957 613.48 136.902L613.363 136.375C613.91 136.312 614.738 136.281 615.848 136.281C616.957 136.273 617.723 136.254 618.145 136.223L618.086 137.242L614.934 145.094ZM621.766 136.516L621.965 137.043C620.137 137.824 619.051 138.871 618.707 140.184C619.02 139.98 619.336 139.879 619.656 139.879C620.328 139.879 620.891 140.184 621.344 140.793C621.797 141.395 622.023 142.164 622.023 143.102C622.023 143.773 621.816 144.309 621.402 144.707C620.996 145.105 620.477 145.305 619.844 145.305C619.25 145.305 618.727 145.09 618.273 144.66C617.828 144.223 617.605 143.645 617.605 142.926C617.605 142.473 617.613 142.078 617.629 141.742C617.652 141.406 617.695 141.039 617.758 140.641C617.828 140.234 617.922 139.883 618.039 139.586C618.156 139.289 618.316 138.98 618.52 138.66C618.73 138.332 618.98 138.047 619.27 137.805C619.559 137.555 619.91 137.32 620.324 137.102C620.746 136.875 621.227 136.68 621.766 136.516ZM618.449 142.586C618.449 143.234 618.57 143.723 618.812 144.051C619.055 144.371 619.355 144.531 619.715 144.531C620.098 144.531 620.43 144.402 620.711 144.145C620.992 143.887 621.133 143.531 621.133 143.078C621.133 142.391 620.977 141.816 620.664 141.355C620.352 140.895 619.973 140.664 619.527 140.664C619.324 140.664 619.152 140.703 619.012 140.781C618.871 140.852 618.766 140.934 618.695 141.027C618.625 141.121 618.57 141.27 618.531 141.473C618.492 141.668 618.469 141.836 618.461 141.977C618.453 142.109 618.449 142.312 618.449 142.586Z M607 118.625L607.094 118.086C607.156 118.094 607.332 118.129 607.621 118.191C607.918 118.254 608.18 118.301 608.406 118.332C608.641 118.363 608.848 118.379 609.027 118.379C609.473 118.379 609.82 118.211 610.07 117.875C610.328 117.539 610.457 117.148 610.457 116.703C610.457 116.094 610.246 115.57 609.824 115.133C609.41 114.688 608.809 114.465 608.02 114.465C607.895 114.465 607.801 114.469 607.738 114.477V113.902C607.809 113.91 607.918 113.914 608.066 113.914C608.777 113.914 609.355 113.789 609.801 113.539C610.254 113.289 610.48 112.891 610.48 112.344C610.48 111.93 610.363 111.598 610.129 111.348C609.895 111.098 609.59 110.973 609.215 110.973C609.043 110.973 608.855 110.984 608.652 111.008C608.457 111.023 608.242 111.047 608.008 111.078C607.773 111.109 607.625 111.129 607.562 111.137L607.375 110.609C607.469 110.586 607.621 110.543 607.832 110.48C608.043 110.418 608.207 110.371 608.324 110.34C608.449 110.309 608.605 110.281 608.793 110.258C608.98 110.227 609.156 110.211 609.32 110.211C609.922 110.211 610.398 110.422 610.75 110.844C611.102 111.258 611.277 111.828 611.277 112.555C611.277 113.016 611.164 113.395 610.938 113.691C610.719 113.988 610.383 114.172 609.93 114.242C610.398 114.43 610.754 114.738 610.996 115.168C611.246 115.59 611.371 116.09 611.371 116.668C611.371 117.332 611.215 117.902 610.902 118.379C610.59 118.848 610.117 119.082 609.484 119.082C608.57 119.082 607.742 118.93 607 118.625ZM612.496 117.535C612.707 117.535 612.883 117.629 613.023 117.816C613.172 117.996 613.246 118.203 613.246 118.438C613.246 118.609 613.203 118.75 613.117 118.859C613.039 118.961 612.93 119.012 612.789 119.012C612.57 119.012 612.395 118.922 612.262 118.742C612.137 118.562 612.074 118.352 612.074 118.109C612.074 117.938 612.109 117.801 612.18 117.699C612.258 117.59 612.363 117.535 612.496 117.535ZM617.875 118.191L618.238 118.965C617.652 118.98 616.734 118.992 615.484 119C614.234 119 613.57 119 613.492 119C613.492 118.938 613.488 118.828 613.48 118.672C613.48 118.516 613.48 118.391 613.48 118.297C613.629 118.039 613.875 117.73 614.219 117.371C614.562 117.004 614.906 116.648 615.25 116.305C615.594 115.953 615.93 115.57 616.258 115.156C616.594 114.742 616.867 114.281 617.078 113.773C617.289 113.258 617.395 112.73 617.395 112.191C617.395 111.848 617.273 111.57 617.031 111.359C616.789 111.141 616.496 111.031 616.152 111.031C615.754 111.031 615.383 111.195 615.039 111.523C614.703 111.844 614.469 112.336 614.336 113L613.809 112.812C613.84 112.055 614.086 111.465 614.547 111.043C615.016 110.621 615.555 110.41 616.164 110.41C616.711 110.41 617.18 110.582 617.57 110.926C617.961 111.27 618.156 111.75 618.156 112.367C618.156 112.875 618.078 113.371 617.922 113.855C617.766 114.332 617.539 114.781 617.242 115.203C616.945 115.625 616.668 115.988 616.41 116.293C616.152 116.59 615.828 116.938 615.438 117.336C615.055 117.727 614.785 118.008 614.629 118.18C614.895 118.195 615.121 118.203 615.309 118.203C615.504 118.203 615.809 118.199 616.223 118.191C616.637 118.176 616.945 118.168 617.148 118.168C617.336 118.168 617.578 118.176 617.875 118.191ZM618.766 118.965V118.344C618.953 118.32 619.184 118.281 619.457 118.227C619.738 118.172 619.957 118.133 620.113 118.109C620.137 117.547 620.148 116.98 620.148 116.41C620.148 116.051 620.145 115.512 620.137 114.793C620.129 114.066 620.125 113.52 620.125 113.152C620.125 112.285 620.137 111.629 620.16 111.184C619.449 111.59 618.93 111.918 618.602 112.168L618.227 111.781C618.352 111.68 618.566 111.504 618.871 111.254C619.176 110.996 619.449 110.766 619.691 110.562C619.934 110.352 620.121 110.18 620.254 110.047C620.379 110.062 620.508 110.074 620.641 110.082C620.773 110.082 620.902 110.09 621.027 110.105C621.074 111.012 621.098 112.672 621.098 115.086C621.098 116.523 621.109 117.555 621.133 118.18C621.203 118.188 621.371 118.219 621.637 118.273C621.91 118.32 622.121 118.352 622.27 118.367L622.457 118.988C622.066 118.988 621.727 118.988 621.438 118.988C621.148 118.988 620.762 118.988 620.277 118.988C619.801 118.988 619.426 118.988 619.152 118.988C618.887 118.98 618.758 118.973 618.766 118.965Z M606 326.625L606.094 326.086C606.156 326.094 606.332 326.129 606.621 326.191C606.918 326.254 607.18 326.301 607.406 326.332C607.641 326.363 607.848 326.379 608.027 326.379C608.473 326.379 608.82 326.211 609.07 325.875C609.328 325.539 609.457 325.148 609.457 324.703C609.457 324.094 609.246 323.57 608.824 323.133C608.41 322.688 607.809 322.465 607.02 322.465C606.895 322.465 606.801 322.469 606.738 322.477V321.902C606.809 321.91 606.918 321.914 607.066 321.914C607.777 321.914 608.355 321.789 608.801 321.539C609.254 321.289 609.48 320.891 609.48 320.344C609.48 319.93 609.363 319.598 609.129 319.348C608.895 319.098 608.59 318.973 608.215 318.973C608.043 318.973 607.855 318.984 607.652 319.008C607.457 319.023 607.242 319.047 607.008 319.078C606.773 319.109 606.625 319.129 606.562 319.137L606.375 318.609C606.469 318.586 606.621 318.543 606.832 318.48C607.043 318.418 607.207 318.371 607.324 318.34C607.449 318.309 607.605 318.281 607.793 318.258C607.98 318.227 608.156 318.211 608.32 318.211C608.922 318.211 609.398 318.422 609.75 318.844C610.102 319.258 610.277 319.828 610.277 320.555C610.277 321.016 610.164 321.395 609.938 321.691C609.719 321.988 609.383 322.172 608.93 322.242C609.398 322.43 609.754 322.738 609.996 323.168C610.246 323.59 610.371 324.09 610.371 324.668C610.371 325.332 610.215 325.902 609.902 326.379C609.59 326.848 609.117 327.082 608.484 327.082C607.57 327.082 606.742 326.93 606 326.625ZM611.496 325.535C611.707 325.535 611.883 325.629 612.023 325.816C612.172 325.996 612.246 326.203 612.246 326.438C612.246 326.609 612.203 326.75 612.117 326.859C612.039 326.961 611.93 327.012 611.789 327.012C611.57 327.012 611.395 326.922 611.262 326.742C611.137 326.562 611.074 326.352 611.074 326.109C611.074 325.938 611.109 325.801 611.18 325.699C611.258 325.59 611.363 325.535 611.496 325.535ZM613.02 326.965V326.344C613.207 326.32 613.438 326.281 613.711 326.227C613.992 326.172 614.211 326.133 614.367 326.109C614.391 325.547 614.402 324.98 614.402 324.41C614.402 324.051 614.398 323.512 614.391 322.793C614.383 322.066 614.379 321.52 614.379 321.152C614.379 320.285 614.391 319.629 614.414 319.184C613.703 319.59 613.184 319.918 612.855 320.168L612.48 319.781C612.605 319.68 612.82 319.504 613.125 319.254C613.43 318.996 613.703 318.766 613.945 318.562C614.188 318.352 614.375 318.18 614.508 318.047C614.633 318.062 614.762 318.074 614.895 318.082C615.027 318.082 615.156 318.09 615.281 318.105C615.328 319.012 615.352 320.672 615.352 323.086C615.352 324.523 615.363 325.555 615.387 326.18C615.457 326.188 615.625 326.219 615.891 326.273C616.164 326.32 616.375 326.352 616.523 326.367L616.711 326.988C616.32 326.988 615.98 326.988 615.691 326.988C615.402 326.988 615.016 326.988 614.531 326.988C614.055 326.988 613.68 326.988 613.406 326.988C613.141 326.98 613.012 326.973 613.02 326.965ZM617.191 323.098C617.199 321.41 617.418 320.195 617.848 319.453C618.277 318.703 618.93 318.305 619.805 318.258C620.188 318.258 620.527 318.363 620.824 318.574C621.121 318.785 621.355 319.055 621.527 319.383C621.707 319.703 621.855 320.09 621.973 320.543C622.09 320.988 622.168 321.414 622.207 321.82C622.254 322.219 622.285 322.645 622.301 323.098C622.301 323.715 622.207 324.348 622.02 324.996C621.84 325.637 621.559 326.199 621.176 326.684C620.801 327.16 620.379 327.398 619.91 327.398C618.098 327.398 617.191 325.965 617.191 323.098ZM619.641 319.16C619.453 319.199 619.285 319.262 619.137 319.348C618.988 319.434 618.863 319.531 618.762 319.641C618.668 319.75 618.586 319.895 618.516 320.074C618.445 320.254 618.391 320.422 618.352 320.578C618.32 320.727 618.289 320.922 618.258 321.164C618.234 321.406 618.219 321.617 618.211 321.797C618.203 321.969 618.191 322.199 618.176 322.488C618.168 322.77 618.156 323 618.141 323.18C618.141 323.539 618.16 323.883 618.199 324.211C618.238 324.531 618.309 324.867 618.41 325.219C618.52 325.57 618.688 325.855 618.914 326.074C619.141 326.293 619.414 326.418 619.734 326.449C620.219 326.449 620.617 326.113 620.93 325.441C621.25 324.77 621.41 324.09 621.41 323.402C621.41 320.605 620.82 319.191 619.641 319.16Z M605 248.625L605.094 248.086C605.156 248.094 605.332 248.129 605.621 248.191C605.918 248.254 606.18 248.301 606.406 248.332C606.641 248.363 606.848 248.379 607.027 248.379C607.473 248.379 607.82 248.211 608.07 247.875C608.328 247.539 608.457 247.148 608.457 246.703C608.457 246.094 608.246 245.57 607.824 245.133C607.41 244.688 606.809 244.465 606.02 244.465C605.895 244.465 605.801 244.469 605.738 244.477V243.902C605.809 243.91 605.918 243.914 606.066 243.914C606.777 243.914 607.355 243.789 607.801 243.539C608.254 243.289 608.48 242.891 608.48 242.344C608.48 241.93 608.363 241.598 608.129 241.348C607.895 241.098 607.59 240.973 607.215 240.973C607.043 240.973 606.855 240.984 606.652 241.008C606.457 241.023 606.242 241.047 606.008 241.078C605.773 241.109 605.625 241.129 605.562 241.137L605.375 240.609C605.469 240.586 605.621 240.543 605.832 240.48C606.043 240.418 606.207 240.371 606.324 240.34C606.449 240.309 606.605 240.281 606.793 240.258C606.98 240.227 607.156 240.211 607.32 240.211C607.922 240.211 608.398 240.422 608.75 240.844C609.102 241.258 609.277 241.828 609.277 242.555C609.277 243.016 609.164 243.395 608.938 243.691C608.719 243.988 608.383 244.172 607.93 244.242C608.398 244.43 608.754 244.738 608.996 245.168C609.246 245.59 609.371 246.09 609.371 246.668C609.371 247.332 609.215 247.902 608.902 248.379C608.59 248.848 608.117 249.082 607.484 249.082C606.57 249.082 605.742 248.93 605 248.625ZM610.496 247.535C610.707 247.535 610.883 247.629 611.023 247.816C611.172 247.996 611.246 248.203 611.246 248.438C611.246 248.609 611.203 248.75 611.117 248.859C611.039 248.961 610.93 249.012 610.789 249.012C610.57 249.012 610.395 248.922 610.262 248.742C610.137 248.562 610.074 248.352 610.074 248.109C610.074 247.938 610.109 247.801 610.18 247.699C610.258 247.59 610.363 247.535 610.496 247.535ZM612.09 249.223L611.902 248.695C613.723 247.922 614.805 246.875 615.148 245.555C614.82 245.766 614.504 245.871 614.199 245.871C613.527 245.871 612.965 245.57 612.512 244.969C612.066 244.359 611.844 243.582 611.844 242.637C611.844 241.965 612.047 241.434 612.453 241.043C612.859 240.645 613.379 240.445 614.012 240.445C614.613 240.445 615.137 240.664 615.582 241.102C616.035 241.531 616.262 242.105 616.262 242.824C616.262 243.277 616.25 243.672 616.227 244.008C616.211 244.344 616.168 244.711 616.098 245.109C616.035 245.508 615.945 245.859 615.828 246.164C615.711 246.461 615.547 246.773 615.336 247.102C615.133 247.422 614.887 247.703 614.598 247.945C614.309 248.188 613.953 248.422 613.531 248.648C613.109 248.867 612.629 249.059 612.09 249.223ZM615.418 243.152C615.418 242.504 615.293 242.02 615.043 241.699C614.801 241.371 614.5 241.207 614.141 241.207C613.758 241.207 613.426 241.336 613.145 241.594C612.863 241.852 612.723 242.207 612.723 242.66C612.723 243.348 612.879 243.922 613.191 244.383C613.504 244.844 613.887 245.074 614.34 245.074C614.543 245.074 614.715 245.039 614.855 244.969C614.996 244.891 615.102 244.805 615.172 244.711C615.242 244.617 615.297 244.473 615.336 244.277C615.375 244.074 615.398 243.906 615.406 243.773C615.414 243.633 615.418 243.426 615.418 243.152ZM622.191 246.645C622.191 247.496 621.984 248.129 621.57 248.543C621.156 248.949 620.523 249.152 619.672 249.152C618.031 249.152 617.211 248.301 617.211 246.598C617.211 245.988 617.336 245.453 617.586 244.992C617.836 244.531 618.18 244.266 618.617 244.195C618.172 244.188 617.836 244.023 617.609 243.703C617.383 243.383 617.27 242.984 617.27 242.508C617.27 241.773 617.469 241.195 617.867 240.773C618.273 240.352 618.848 240.141 619.59 240.141C620.371 240.141 620.984 240.336 621.43 240.727C621.875 241.117 622.098 241.719 622.098 242.531C622.098 243.008 621.984 243.406 621.758 243.727C621.531 244.047 621.195 244.211 620.75 244.219C621.203 244.289 621.555 244.559 621.805 245.027C622.062 245.496 622.191 246.035 622.191 246.645ZM619.801 248.309C620.238 248.309 620.602 248.141 620.891 247.805C621.18 247.461 621.324 247.055 621.324 246.586C621.324 246.117 621.164 245.715 620.844 245.379C620.523 245.035 620.094 244.859 619.555 244.852C619.086 244.992 618.734 245.215 618.5 245.52C618.266 245.816 618.148 246.152 618.148 246.527C618.148 246.996 618.305 247.41 618.617 247.77C618.93 248.129 619.324 248.309 619.801 248.309ZM619.801 240.785C619.277 240.824 618.879 240.996 618.605 241.301C618.332 241.605 618.195 241.957 618.195 242.355C618.195 242.762 618.324 243.113 618.582 243.41C618.848 243.707 619.199 243.855 619.637 243.855C620.145 243.848 620.531 243.711 620.797 243.445C621.062 243.172 621.195 242.844 621.195 242.461C621.195 242.078 621.066 241.723 620.809 241.395C620.559 241.066 620.223 240.863 619.801 240.785Z M606 170.625L606.094 170.086C606.156 170.094 606.332 170.129 606.621 170.191C606.918 170.254 607.18 170.301 607.406 170.332C607.641 170.363 607.848 170.379 608.027 170.379C608.473 170.379 608.82 170.211 609.07 169.875C609.328 169.539 609.457 169.148 609.457 168.703C609.457 168.094 609.246 167.57 608.824 167.133C608.41 166.688 607.809 166.465 607.02 166.465C606.895 166.465 606.801 166.469 606.738 166.477V165.902C606.809 165.91 606.918 165.914 607.066 165.914C607.777 165.914 608.355 165.789 608.801 165.539C609.254 165.289 609.48 164.891 609.48 164.344C609.48 163.93 609.363 163.598 609.129 163.348C608.895 163.098 608.59 162.973 608.215 162.973C608.043 162.973 607.855 162.984 607.652 163.008C607.457 163.023 607.242 163.047 607.008 163.078C606.773 163.109 606.625 163.129 606.562 163.137L606.375 162.609C606.469 162.586 606.621 162.543 606.832 162.48C607.043 162.418 607.207 162.371 607.324 162.34C607.449 162.309 607.605 162.281 607.793 162.258C607.98 162.227 608.156 162.211 608.32 162.211C608.922 162.211 609.398 162.422 609.75 162.844C610.102 163.258 610.277 163.828 610.277 164.555C610.277 165.016 610.164 165.395 609.938 165.691C609.719 165.988 609.383 166.172 608.93 166.242C609.398 166.43 609.754 166.738 609.996 167.168C610.246 167.59 610.371 168.09 610.371 168.668C610.371 169.332 610.215 169.902 609.902 170.379C609.59 170.848 609.117 171.082 608.484 171.082C607.57 171.082 606.742 170.93 606 170.625ZM611.496 169.535C611.707 169.535 611.883 169.629 612.023 169.816C612.172 169.996 612.246 170.203 612.246 170.438C612.246 170.609 612.203 170.75 612.117 170.859C612.039 170.961 611.93 171.012 611.789 171.012C611.57 171.012 611.395 170.922 611.262 170.742C611.137 170.562 611.074 170.352 611.074 170.109C611.074 169.938 611.109 169.801 611.18 169.699C611.258 169.59 611.363 169.535 611.496 169.535ZM612.48 170.625L612.574 170.086C612.637 170.094 612.812 170.129 613.102 170.191C613.398 170.254 613.66 170.301 613.887 170.332C614.121 170.363 614.328 170.379 614.508 170.379C614.953 170.379 615.301 170.211 615.551 169.875C615.809 169.539 615.938 169.148 615.938 168.703C615.938 168.094 615.727 167.57 615.305 167.133C614.891 166.688 614.289 166.465 613.5 166.465C613.375 166.465 613.281 166.469 613.219 166.477V165.902C613.289 165.91 613.398 165.914 613.547 165.914C614.258 165.914 614.836 165.789 615.281 165.539C615.734 165.289 615.961 164.891 615.961 164.344C615.961 163.93 615.844 163.598 615.609 163.348C615.375 163.098 615.07 162.973 614.695 162.973C614.523 162.973 614.336 162.984 614.133 163.008C613.938 163.023 613.723 163.047 613.488 163.078C613.254 163.109 613.105 163.129 613.043 163.137L612.855 162.609C612.949 162.586 613.102 162.543 613.312 162.48C613.523 162.418 613.688 162.371 613.805 162.34C613.93 162.309 614.086 162.281 614.273 162.258C614.461 162.227 614.637 162.211 614.801 162.211C615.402 162.211 615.879 162.422 616.23 162.844C616.582 163.258 616.758 163.828 616.758 164.555C616.758 165.016 616.645 165.395 616.418 165.691C616.199 165.988 615.863 166.172 615.41 166.242C615.879 166.43 616.234 166.738 616.477 167.168C616.727 167.59 616.852 168.09 616.852 168.668C616.852 169.332 616.695 169.902 616.383 170.379C616.07 170.848 615.598 171.082 614.965 171.082C614.051 171.082 613.223 170.93 612.48 170.625ZM617.93 171.223L617.742 170.695C619.562 169.922 620.645 168.875 620.988 167.555C620.66 167.766 620.344 167.871 620.039 167.871C619.367 167.871 618.805 167.57 618.352 166.969C617.906 166.359 617.684 165.582 617.684 164.637C617.684 163.965 617.887 163.434 618.293 163.043C618.699 162.645 619.219 162.445 619.852 162.445C620.453 162.445 620.977 162.664 621.422 163.102C621.875 163.531 622.102 164.105 622.102 164.824C622.102 165.277 622.09 165.672 622.066 166.008C622.051 166.344 622.008 166.711 621.938 167.109C621.875 167.508 621.785 167.859 621.668 168.164C621.551 168.461 621.387 168.773 621.176 169.102C620.973 169.422 620.727 169.703 620.438 169.945C620.148 170.188 619.793 170.422 619.371 170.648C618.949 170.867 618.469 171.059 617.93 171.223ZM621.258 165.152C621.258 164.504 621.133 164.02 620.883 163.699C620.641 163.371 620.34 163.207 619.98 163.207C619.598 163.207 619.266 163.336 618.984 163.594C618.703 163.852 618.562 164.207 618.562 164.66C618.562 165.348 618.719 165.922 619.031 166.383C619.344 166.844 619.727 167.074 620.18 167.074C620.383 167.074 620.555 167.039 620.695 166.969C620.836 166.891 620.941 166.805 621.012 166.711C621.082 166.617 621.137 166.473 621.176 166.277C621.215 166.074 621.238 165.906 621.246 165.773C621.254 165.633 621.258 165.426 621.258 165.152Z M606 222.625L606.094 222.086C606.156 222.094 606.332 222.129 606.621 222.191C606.918 222.254 607.18 222.301 607.406 222.332C607.641 222.363 607.848 222.379 608.027 222.379C608.473 222.379 608.82 222.211 609.07 221.875C609.328 221.539 609.457 221.148 609.457 220.703C609.457 220.094 609.246 219.57 608.824 219.133C608.41 218.688 607.809 218.465 607.02 218.465C606.895 218.465 606.801 218.469 606.738 218.477V217.902C606.809 217.91 606.918 217.914 607.066 217.914C607.777 217.914 608.355 217.789 608.801 217.539C609.254 217.289 609.48 216.891 609.48 216.344C609.48 215.93 609.363 215.598 609.129 215.348C608.895 215.098 608.59 214.973 608.215 214.973C608.043 214.973 607.855 214.984 607.652 215.008C607.457 215.023 607.242 215.047 607.008 215.078C606.773 215.109 606.625 215.129 606.562 215.137L606.375 214.609C606.469 214.586 606.621 214.543 606.832 214.48C607.043 214.418 607.207 214.371 607.324 214.34C607.449 214.309 607.605 214.281 607.793 214.258C607.98 214.227 608.156 214.211 608.32 214.211C608.922 214.211 609.398 214.422 609.75 214.844C610.102 215.258 610.277 215.828 610.277 216.555C610.277 217.016 610.164 217.395 609.938 217.691C609.719 217.988 609.383 218.172 608.93 218.242C609.398 218.43 609.754 218.738 609.996 219.168C610.246 219.59 610.371 220.09 610.371 220.668C610.371 221.332 610.215 221.902 609.902 222.379C609.59 222.848 609.117 223.082 608.484 223.082C607.57 223.082 606.742 222.93 606 222.625ZM611.496 221.535C611.707 221.535 611.883 221.629 612.023 221.816C612.172 221.996 612.246 222.203 612.246 222.438C612.246 222.609 612.203 222.75 612.117 222.859C612.039 222.961 611.93 223.012 611.789 223.012C611.57 223.012 611.395 222.922 611.262 222.742C611.137 222.562 611.074 222.352 611.074 222.109C611.074 221.938 611.109 221.801 611.18 221.699C611.258 221.59 611.363 221.535 611.496 221.535ZM612.48 222.625L612.574 222.086C612.637 222.094 612.812 222.129 613.102 222.191C613.398 222.254 613.66 222.301 613.887 222.332C614.121 222.363 614.328 222.379 614.508 222.379C614.953 222.379 615.301 222.211 615.551 221.875C615.809 221.539 615.938 221.148 615.938 220.703C615.938 220.094 615.727 219.57 615.305 219.133C614.891 218.688 614.289 218.465 613.5 218.465C613.375 218.465 613.281 218.469 613.219 218.477V217.902C613.289 217.91 613.398 217.914 613.547 217.914C614.258 217.914 614.836 217.789 615.281 217.539C615.734 217.289 615.961 216.891 615.961 216.344C615.961 215.93 615.844 215.598 615.609 215.348C615.375 215.098 615.07 214.973 614.695 214.973C614.523 214.973 614.336 214.984 614.133 215.008C613.938 215.023 613.723 215.047 613.488 215.078C613.254 215.109 613.105 215.129 613.043 215.137L612.855 214.609C612.949 214.586 613.102 214.543 613.312 214.48C613.523 214.418 613.688 214.371 613.805 214.34C613.93 214.309 614.086 214.281 614.273 214.258C614.461 214.227 614.637 214.211 614.801 214.211C615.402 214.211 615.879 214.422 616.23 214.844C616.582 215.258 616.758 215.828 616.758 216.555C616.758 217.016 616.645 217.395 616.418 217.691C616.199 217.988 615.863 218.172 615.41 218.242C615.879 218.43 616.234 218.738 616.477 219.168C616.727 219.59 616.852 220.09 616.852 220.668C616.852 221.332 616.695 221.902 616.383 222.379C616.07 222.848 615.598 223.082 614.965 223.082C614.051 223.082 613.223 222.93 612.48 222.625ZM621.961 214.516L622.16 215.043C620.332 215.824 619.246 216.871 618.902 218.184C619.215 217.98 619.531 217.879 619.852 217.879C620.523 217.879 621.086 218.184 621.539 218.793C621.992 219.395 622.219 220.164 622.219 221.102C622.219 221.773 622.012 222.309 621.598 222.707C621.191 223.105 620.672 223.305 620.039 223.305C619.445 223.305 618.922 223.09 618.469 222.66C618.023 222.223 617.801 221.645 617.801 220.926C617.801 220.473 617.809 220.078 617.824 219.742C617.848 219.406 617.891 219.039 617.953 218.641C618.023 218.234 618.117 217.883 618.234 217.586C618.352 217.289 618.512 216.98 618.715 216.66C618.926 216.332 619.176 216.047 619.465 215.805C619.754 215.555 620.105 215.32 620.52 215.102C620.941 214.875 621.422 214.68 621.961 214.516ZM618.645 220.586C618.645 221.234 618.766 221.723 619.008 222.051C619.25 222.371 619.551 222.531 619.91 222.531C620.293 222.531 620.625 222.402 620.906 222.145C621.188 221.887 621.328 221.531 621.328 221.078C621.328 220.391 621.172 219.816 620.859 219.355C620.547 218.895 620.168 218.664 619.723 218.664C619.52 218.664 619.348 218.703 619.207 218.781C619.066 218.852 618.961 218.934 618.891 219.027C618.82 219.121 618.766 219.27 618.727 219.473C618.688 219.668 618.664 219.836 618.656 219.977C618.648 220.109 618.645 220.312 618.645 220.586Z M615.312 347.07C615.734 347.07 616.086 347.258 616.367 347.633C616.664 347.992 616.812 348.406 616.812 348.875C616.812 349.219 616.727 349.5 616.555 349.719C616.398 349.922 616.18 350.023 615.898 350.023C615.461 350.023 615.109 349.844 614.844 349.484C614.594 349.125 614.469 348.703 614.469 348.219C614.469 347.875 614.539 347.602 614.68 347.398C614.836 347.18 615.047 347.07 615.312 347.07Z M615.312 357.07C615.734 357.07 616.086 357.258 616.367 357.633C616.664 357.992 616.812 358.406 616.812 358.875C616.812 359.219 616.727 359.5 616.555 359.719C616.398 359.922 616.18 360.023 615.898 360.023C615.461 360.023 615.109 359.844 614.844 359.484C614.594 359.125 614.469 358.703 614.469 358.219C614.469 357.875 614.539 357.602 614.68 357.398C614.836 357.18 615.047 357.07 615.312 357.07Z M615.312 367.07C615.734 367.07 616.086 367.258 616.367 367.633C616.664 367.992 616.812 368.406 616.812 368.875C616.812 369.219 616.727 369.5 616.555 369.719C616.398 369.922 616.18 370.023 615.898 370.023C615.461 370.023 615.109 369.844 614.844 369.484C614.594 369.125 614.469 368.703 614.469 368.219C614.469 367.875 614.539 367.602 614.68 367.398C614.836 367.18 615.047 367.07 615.312 367.07Z';

  var dataset11Sulphates = 'M651.926 27.112C651.958 27.2187 651.974 27.3253 651.974 27.432C651.974 27.6453 651.889 27.7893 651.718 27.864C651.74 28.024 651.676 28.184 651.526 28.344C651.377 28.504 651.238 28.584 651.11 28.584C651.057 28.68 650.897 28.7707 650.63 28.856C650.364 28.9413 650.118 28.984 649.894 28.984C649.734 28.984 649.612 28.952 649.526 28.888C649.377 28.9627 649.164 29 648.886 29C648.641 29 648.417 28.9627 648.214 28.888C648.022 28.8133 647.905 28.7013 647.862 28.552C647.649 28.584 647.409 28.52 647.142 28.36C646.886 28.2 646.721 28.0347 646.646 27.864C646.454 27.8107 646.294 27.7093 646.166 27.56C646.049 27.4107 645.985 27.2347 645.974 27.032C645.91 26.936 645.878 26.84 645.878 26.744C645.878 26.5947 645.926 26.4613 646.022 26.344C646.129 26.2267 646.252 26.168 646.39 26.168C646.529 26.168 646.662 26.2533 646.79 26.424C646.982 26.4027 647.153 26.4667 647.302 26.616C647.462 26.7653 647.542 26.9147 647.542 27.064C647.574 27.064 647.654 27.0747 647.782 27.096C647.921 27.1067 648.044 27.144 648.15 27.208C648.257 27.272 648.332 27.3627 648.374 27.48C648.566 27.48 648.753 27.5067 648.934 27.56C649.126 27.6027 649.238 27.656 649.27 27.72C649.356 27.6667 649.478 27.624 649.638 27.592C649.809 27.5493 649.953 27.528 650.07 27.528C650.102 27.4853 650.182 27.4427 650.31 27.4C650.438 27.3573 650.545 27.3307 650.63 27.32C650.577 27.2453 650.55 27.1333 650.55 26.984C650.55 26.76 650.62 26.6 650.758 26.504C650.63 26.4613 650.529 26.3973 650.454 26.312C650.38 26.216 650.348 26.1093 650.358 25.992C650.273 26.0133 650.209 26.024 650.166 26.024C649.964 26.024 649.798 25.944 649.67 25.784C649.457 25.8053 649.244 25.7573 649.03 25.64C648.828 25.5227 648.678 25.368 648.582 25.176C648.508 25.208 648.428 25.224 648.342 25.224C648.161 25.224 647.969 25.1707 647.766 25.064C647.574 24.9467 647.452 24.8347 647.398 24.728C647.249 24.7707 647.073 24.7227 646.87 24.584C646.668 24.4453 646.566 24.2907 646.566 24.12C646.438 24.056 646.337 23.9493 646.262 23.8C646.188 23.64 646.15 23.496 646.15 23.368C646.15 23.272 646.172 23.208 646.214 23.176C646.161 23.0693 646.134 22.9627 646.134 22.856C646.134 22.664 646.198 22.4987 646.326 22.36C646.294 22.2427 646.278 22.136 646.278 22.04C646.278 21.8587 646.316 21.7093 646.39 21.592C646.476 21.464 646.577 21.4107 646.694 21.432C646.673 21.2613 646.71 21.112 646.806 20.984C646.913 20.856 647.041 20.7653 647.19 20.712C647.35 20.648 647.489 20.6267 647.606 20.648C647.67 20.552 647.756 20.4773 647.862 20.424C647.969 20.3707 648.076 20.344 648.182 20.344C648.364 20.344 648.492 20.3973 648.566 20.504C648.577 20.4507 648.614 20.408 648.678 20.376C648.753 20.344 648.838 20.328 648.934 20.328C649.02 20.328 649.105 20.344 649.19 20.376C649.276 20.408 649.34 20.4453 649.382 20.488C649.446 20.424 649.558 20.392 649.718 20.392C649.846 20.392 649.974 20.4187 650.102 20.472C650.23 20.5147 650.316 20.5787 650.358 20.664C650.422 20.632 650.492 20.616 650.566 20.616C650.694 20.616 650.812 20.664 650.918 20.76C651.036 20.8453 651.116 20.9573 651.158 21.096C651.318 21.0747 651.484 21.128 651.654 21.256C651.825 21.384 651.889 21.512 651.846 21.64C652.134 21.8 652.278 22.0187 652.278 22.296C652.278 22.4667 652.22 22.616 652.102 22.744C651.985 22.872 651.836 22.936 651.654 22.936C651.494 22.9253 651.361 22.8827 651.254 22.808C651.148 22.7333 651.084 22.6427 651.062 22.536C650.924 22.5147 650.79 22.4613 650.662 22.376C650.545 22.28 650.481 22.1573 650.47 22.008C650.268 22.0293 650.113 22.008 650.006 21.944C649.91 21.88 649.825 21.7787 649.75 21.64C649.676 21.6933 649.58 21.72 649.462 21.72C649.345 21.72 649.217 21.688 649.078 21.624C649.004 21.688 648.908 21.7413 648.79 21.784C648.684 21.8267 648.577 21.848 648.47 21.848C648.353 21.848 648.252 21.8213 648.166 21.768C648.188 21.896 648.156 21.9973 648.07 22.072C647.985 22.1467 647.868 22.1733 647.718 22.152C647.75 22.2267 647.766 22.3067 647.766 22.392C647.766 22.584 647.681 22.744 647.51 22.872C647.628 22.9253 647.713 23.016 647.766 23.144C647.82 23.2613 647.841 23.3787 647.83 23.496L647.958 23.48C648.278 23.48 648.481 23.5813 648.566 23.784L648.694 23.768C648.865 23.768 649.025 23.8107 649.174 23.896C649.334 23.9813 649.452 24.1253 649.526 24.328C649.697 24.3173 649.862 24.3387 650.022 24.392C650.182 24.4347 650.294 24.52 650.358 24.648C650.444 24.616 650.524 24.6 650.598 24.6C650.78 24.6 650.94 24.6533 651.078 24.76C651.228 24.8667 651.308 24.9893 651.318 25.128C651.414 25.128 651.5 25.1813 651.574 25.288C651.66 25.3947 651.692 25.5173 651.67 25.656C651.745 25.6453 651.814 25.688 651.878 25.784C651.942 25.8693 651.974 25.9707 651.974 26.088C651.974 26.152 651.958 26.2107 651.926 26.264C652.076 26.3707 652.15 26.5147 652.15 26.696C652.15 26.792 652.129 26.8773 652.086 26.952C652.054 27.0267 652.001 27.08 651.926 27.112ZM655.954 28.728C655.837 28.7707 655.725 28.792 655.618 28.792C655.469 28.792 655.346 28.7387 655.25 28.632C655.133 28.6427 655 28.5947 654.85 28.488C654.712 28.3707 654.626 28.2587 654.594 28.152C654.466 28.12 654.349 28.0507 654.242 27.944C654.146 27.8267 654.082 27.6827 654.05 27.512C653.922 27.48 653.816 27.3947 653.73 27.256C653.656 27.1067 653.618 26.936 653.618 26.744C653.618 26.6267 653.634 26.5147 653.666 26.408C653.592 26.2907 653.565 26.1413 653.586 25.96C653.437 25.832 653.362 25.6827 653.362 25.512C653.362 25.4267 653.378 25.3467 653.41 25.272C653.346 25.176 653.314 25.064 653.314 24.936C653.314 24.776 653.362 24.632 653.458 24.504C653.309 24.376 653.234 24.216 653.234 24.024C653.234 23.9067 653.266 23.8053 653.33 23.72C653.234 23.5813 653.186 23.416 653.186 23.224C653.186 23.0747 653.218 22.9627 653.282 22.888C653.176 22.8027 653.122 22.6747 653.122 22.504C653.122 22.3973 653.154 22.28 653.218 22.152C653.165 22.0667 653.138 21.944 653.138 21.784C653.138 21.5493 653.202 21.368 653.33 21.24C653.298 21.144 653.282 21.0533 653.282 20.968C653.282 20.776 653.346 20.6267 653.474 20.52C653.613 20.4027 653.773 20.344 653.954 20.344C654.136 20.344 654.29 20.4027 654.418 20.52C654.557 20.6373 654.626 20.808 654.626 21.032C654.626 21.2027 654.589 21.384 654.514 21.576C654.664 21.704 654.738 21.8693 654.738 22.072C654.738 22.2213 654.69 22.3547 654.594 22.472C654.658 22.5893 654.69 22.744 654.69 22.936C654.69 23.1387 654.658 23.304 654.594 23.432C654.69 23.56 654.738 23.7573 654.738 24.024C654.738 24.2053 654.728 24.328 654.706 24.392C654.792 24.488 654.834 24.6107 654.834 24.76C654.834 24.8453 654.813 24.9413 654.77 25.048C654.877 25.1653 654.93 25.3253 654.93 25.528C654.93 25.592 654.92 25.656 654.898 25.72C654.941 25.752 654.978 25.8107 655.01 25.896C655.042 25.9707 655.058 26.0507 655.058 26.136C655.058 26.2427 655.032 26.3333 654.978 26.408C655.064 26.4187 655.122 26.4773 655.154 26.584C655.186 26.68 655.192 26.776 655.17 26.872H655.186C655.261 26.872 655.325 26.9147 655.378 27C655.442 27.0747 655.464 27.144 655.442 27.208C655.474 27.1867 655.522 27.176 655.586 27.176C655.672 27.176 655.746 27.1973 655.81 27.24C655.885 27.272 655.938 27.3147 655.97 27.368C656.184 27.2507 656.386 27.192 656.578 27.192C656.674 27.192 656.76 27.208 656.834 27.24C656.93 27.1653 657.053 27.1013 657.202 27.048C657.362 26.984 657.501 26.952 657.618 26.952C657.672 26.952 657.72 26.9627 657.762 26.984C657.688 26.8667 657.65 26.7173 657.65 26.536C657.65 26.3333 657.714 26.2053 657.842 26.152C657.768 26.0667 657.73 25.8853 657.73 25.608C657.73 25.2773 657.8 25.0427 657.938 24.904C657.842 24.744 657.794 24.568 657.794 24.376C657.794 24.2053 657.826 24.088 657.89 24.024C657.826 23.9387 657.794 23.832 657.794 23.704C657.794 23.576 657.816 23.4427 657.858 23.304C657.912 23.1547 657.976 23.0373 658.05 22.952C657.912 22.856 657.842 22.648 657.842 22.328C657.842 22.1253 657.858 21.96 657.89 21.832C657.794 21.6187 657.746 21.4373 657.746 21.288C657.746 21.096 657.81 20.9413 657.938 20.824C658.066 20.7067 658.216 20.648 658.386 20.648C658.589 20.648 658.76 20.728 658.898 20.888C659.048 21.048 659.117 21.2773 659.106 21.576C659.16 21.6293 659.202 21.7147 659.234 21.832C659.277 21.9387 659.298 22.0507 659.298 22.168C659.298 22.4027 659.24 22.568 659.122 22.664C659.314 22.8987 659.41 23.128 659.41 23.352C659.41 23.5013 659.368 23.624 659.282 23.72C659.368 23.8373 659.41 23.9653 659.41 24.104C659.41 24.2427 659.373 24.3867 659.298 24.536C659.362 24.632 659.394 24.7387 659.394 24.856C659.394 25.048 659.314 25.2133 659.154 25.352C659.261 25.4693 659.314 25.608 659.314 25.768C659.314 25.9387 659.245 26.1307 659.106 26.344C659.213 26.408 659.266 26.5413 659.266 26.744C659.266 26.9467 659.224 27.1547 659.138 27.368C659.224 27.4853 659.266 27.64 659.266 27.832C659.266 27.9493 659.245 28.0453 659.202 28.12C659.224 28.2267 659.234 28.3067 659.234 28.36C659.234 28.5627 659.17 28.7227 659.042 28.84C658.925 28.9467 658.781 29 658.61 29C658.461 29 658.328 28.952 658.21 28.856C658.093 28.7493 658.024 28.6 658.002 28.408C657.992 28.3973 657.976 28.3813 657.954 28.36C657.944 28.328 657.933 28.3013 657.922 28.28C657.741 28.3867 657.576 28.44 657.426 28.44C657.373 28.44 657.33 28.4347 657.298 28.424C657.16 28.52 657.026 28.568 656.898 28.568C656.792 28.568 656.69 28.5467 656.594 28.504C656.552 28.5787 656.482 28.6373 656.386 28.68C656.301 28.7227 656.205 28.744 656.098 28.744C656.034 28.744 655.986 28.7387 655.954 28.728ZM662.913 27C663.02 27.1173 663.073 27.2987 663.073 27.544C663.073 27.704 663.046 27.8587 662.993 28.008C662.95 28.1467 662.892 28.248 662.817 28.312C662.849 28.5147 662.796 28.68 662.657 28.808C662.518 28.936 662.353 29 662.161 29C662.033 29 661.91 28.968 661.793 28.904C661.676 28.84 661.59 28.7333 661.537 28.584C661.484 28.4347 661.457 28.2747 661.457 28.104C661.457 27.8693 661.494 27.6827 661.569 27.544C661.516 27.448 661.489 27.3093 661.489 27.128C661.489 26.9253 661.521 26.7173 661.585 26.504C661.51 26.4187 661.473 26.264 661.473 26.04C661.473 25.752 661.516 25.5387 661.601 25.4C661.537 25.2507 661.505 25.1067 661.505 24.968C661.505 24.776 661.553 24.584 661.649 24.392C661.564 24.168 661.521 23.9653 661.521 23.784C661.521 23.6347 661.553 23.464 661.617 23.272C661.51 23.1547 661.457 23.0053 661.457 22.824C661.457 22.7493 661.462 22.696 661.473 22.664C661.356 22.5253 661.297 22.3653 661.297 22.184C661.297 22.0667 661.329 21.9547 661.393 21.848C661.318 21.6773 661.281 21.512 661.281 21.352C661.281 21.096 661.345 20.904 661.473 20.776C661.409 20.6267 661.377 20.4453 661.377 20.232C661.377 20.0613 661.404 19.9387 661.457 19.864C661.404 19.832 661.361 19.7733 661.329 19.688C661.297 19.6027 661.281 19.5067 661.281 19.4C661.281 19.2187 661.324 19.0693 661.409 18.952C661.377 18.8667 661.361 18.7547 661.361 18.616C661.361 18.5093 661.372 18.4133 661.393 18.328C661.265 18.2 661.201 18.0507 661.201 17.88C661.201 17.6987 661.276 17.544 661.425 17.416C661.585 17.2773 661.761 17.208 661.953 17.208C662.081 17.208 662.198 17.2507 662.305 17.336C662.412 17.4107 662.486 17.528 662.529 17.688C662.689 17.7947 662.769 17.96 662.769 18.184C662.769 18.2267 662.758 18.2907 662.737 18.376C662.865 18.504 662.929 18.6693 662.929 18.872C662.929 19.0427 662.876 19.176 662.769 19.272C662.822 19.3147 662.87 19.3893 662.913 19.496C662.956 19.592 662.977 19.6987 662.977 19.816C662.977 20.008 662.908 20.168 662.769 20.296C662.854 20.4133 662.897 20.5573 662.897 20.728C662.897 20.8987 662.865 21.0373 662.801 21.144C662.844 21.1867 662.865 21.2933 662.865 21.464C662.865 21.56 662.854 21.6613 662.833 21.768C662.812 21.8747 662.78 21.9493 662.737 21.992C662.897 22.1307 662.977 22.3067 662.977 22.52C662.977 22.6373 662.956 22.7387 662.913 22.824C662.977 22.92 663.009 23.064 663.009 23.256C663.009 23.5013 662.966 23.6987 662.881 23.848C662.956 23.9973 662.993 24.1947 662.993 24.44C662.993 24.7387 662.945 24.952 662.849 25.08C662.924 25.1867 662.961 25.32 662.961 25.48C662.961 25.6187 662.929 25.784 662.865 25.976C662.961 26.0827 663.009 26.248 663.009 26.472C663.009 26.664 662.977 26.84 662.913 27ZM670.694 23.304C670.822 23.4107 670.886 23.5813 670.886 23.816C670.886 23.8693 670.875 23.9387 670.854 24.024C670.907 24.0453 670.95 24.1467 670.982 24.328C671.014 24.4987 671.03 24.6907 671.03 24.904C671.03 25.224 670.992 25.4267 670.918 25.512C670.95 25.5867 670.966 25.672 670.966 25.768C670.966 25.992 670.87 26.1787 670.678 26.328C670.71 26.392 670.726 26.4773 670.726 26.584C670.726 26.7547 670.688 26.9467 670.614 27.16C670.539 27.3627 670.454 27.5067 670.358 27.592C670.358 27.7627 670.262 27.9547 670.07 28.168C669.888 28.3707 669.712 28.4827 669.542 28.504C669.467 28.6213 669.35 28.7173 669.19 28.792C669.03 28.8667 668.864 28.904 668.694 28.904C668.555 28.904 668.438 28.8827 668.342 28.84C668.235 28.904 668.096 28.936 667.926 28.936C667.787 28.936 667.648 28.9147 667.51 28.872C667.382 28.8293 667.286 28.776 667.222 28.712C667.136 28.7333 667.062 28.744 666.998 28.744C666.784 28.744 666.63 28.696 666.534 28.6C666.523 28.6533 666.512 28.7333 666.502 28.84C666.491 28.936 666.459 29.0107 666.406 29.064C666.47 29.16 666.502 29.2827 666.502 29.432C666.502 29.6667 666.443 29.8427 666.326 29.96C666.39 30.0133 666.443 30.0933 666.486 30.2C666.528 30.3173 666.55 30.4347 666.55 30.552C666.55 30.7333 666.496 30.872 666.39 30.968C666.443 31.128 666.47 31.2933 666.47 31.464C666.47 31.7093 666.406 31.896 666.278 32.024C666.15 32.1627 666 32.232 665.83 32.232C665.67 32.232 665.52 32.1787 665.382 32.072C665.254 31.9653 665.163 31.8107 665.11 31.608C665.078 31.5653 665.051 31.4907 665.03 31.384C665.008 31.288 664.998 31.1813 664.998 31.064C664.998 30.808 665.04 30.664 665.126 30.632C665.019 30.4293 664.966 30.1893 664.966 29.912C664.966 29.6773 665.008 29.448 665.094 29.224C664.998 29.128 664.95 28.968 664.95 28.744C664.95 28.552 664.992 28.4027 665.078 28.296C665.056 28.2213 665.024 28.1307 664.982 28.024C664.939 27.9067 664.918 27.8053 664.918 27.72C664.918 27.6453 664.944 27.5547 664.998 27.448C664.934 27.32 664.902 27.208 664.902 27.112C664.902 27.016 664.934 26.8987 664.998 26.76C665.062 26.6213 665.104 26.5253 665.126 26.472C665.03 26.3227 664.982 26.088 664.982 25.768C664.982 25.48 665.019 25.2827 665.094 25.176C664.944 24.856 664.87 24.6053 664.87 24.424C664.87 24.2427 664.918 24.0987 665.014 23.992C664.971 23.9067 664.95 23.8107 664.95 23.704C664.95 23.5973 664.982 23.496 665.046 23.4C664.971 23.2827 664.934 23.112 664.934 22.888C664.934 22.6 664.987 22.3973 665.094 22.28C664.976 21.9813 664.918 21.688 664.918 21.4C664.918 21.1547 664.96 20.9733 665.046 20.856C665.035 20.824 665.03 20.776 665.03 20.712C665.03 20.5307 665.104 20.3813 665.254 20.264C665.414 20.136 665.584 20.072 665.766 20.072C665.904 20.072 666.022 20.1093 666.118 20.184C666.214 20.2587 666.283 20.3707 666.326 20.52L666.406 20.568C666.48 20.4613 666.582 20.3867 666.71 20.344C666.838 20.2907 666.976 20.2747 667.126 20.296C667.222 20.168 667.403 20.104 667.67 20.104C667.84 20.104 667.995 20.12 668.134 20.152C668.198 20.1307 668.256 20.12 668.31 20.12C668.416 20.12 668.523 20.1467 668.63 20.2C668.736 20.2427 668.806 20.2907 668.838 20.344C668.976 20.344 669.078 20.3547 669.142 20.376C669.216 20.3973 669.296 20.4613 669.382 20.568C669.467 20.568 669.542 20.5947 669.606 20.648C669.68 20.6907 669.728 20.744 669.75 20.808C669.846 20.8187 669.91 20.8453 669.942 20.888C669.984 20.9307 670.022 21 670.054 21.096C670.267 21.2987 670.384 21.6347 670.406 22.104C670.523 22.168 670.608 22.2747 670.662 22.424C670.726 22.5733 670.758 22.7333 670.758 22.904C670.758 23.0427 670.736 23.176 670.694 23.304ZM668.326 27.544C668.379 27.4267 668.47 27.3253 668.598 27.24C668.726 27.144 668.848 27.0853 668.966 27.064C668.966 26.8187 669.056 26.584 669.238 26.36C669.206 26.2 669.19 26.104 669.19 26.072C669.19 25.8267 669.291 25.6187 669.494 25.448C669.462 25.256 669.446 25.032 669.446 24.776C669.446 24.6373 669.456 24.536 669.478 24.472C669.371 24.3867 669.28 24.2373 669.206 24.024C669.142 23.8 669.11 23.5813 669.11 23.368C669.11 23.2293 669.126 23.112 669.158 23.016C669.072 22.9307 669.003 22.7973 668.95 22.616C668.907 22.4347 668.896 22.2693 668.918 22.12C668.832 22.088 668.736 22.0293 668.63 21.944C668.534 21.8587 668.459 21.7787 668.406 21.704C668.331 21.704 668.256 21.688 668.182 21.656C668.118 21.624 668.048 21.5867 667.974 21.544C667.92 21.5867 667.792 21.608 667.59 21.608C667.43 21.608 667.323 21.5973 667.27 21.576C667.088 21.6933 666.907 21.752 666.726 21.752C666.598 21.752 666.475 21.7147 666.358 21.64C666.454 21.8 666.502 22.0027 666.502 22.248C666.502 22.4933 666.464 22.6907 666.39 22.84C666.475 22.9573 666.518 23.1707 666.518 23.48C666.518 23.7467 666.48 23.9333 666.406 24.04C666.491 24.1893 666.534 24.44 666.534 24.792C666.534 25.0907 666.491 25.3093 666.406 25.448C666.48 25.5867 666.518 25.784 666.518 26.04C666.518 26.2747 666.486 26.456 666.422 26.584C666.486 26.68 666.518 26.8293 666.518 27.032C666.518 27.1067 666.507 27.1867 666.486 27.272C666.614 27.2507 666.79 27.272 667.014 27.336C667.248 27.3893 667.419 27.4587 667.526 27.544C667.59 27.5227 667.723 27.512 667.926 27.512C668.139 27.512 668.272 27.5227 668.326 27.544ZM673.744 28.104C673.798 28.264 673.824 28.3867 673.824 28.472C673.824 28.6533 673.755 28.7867 673.616 28.872C673.488 28.9573 673.312 29 673.088 29C672.854 29 672.672 28.9253 672.544 28.776C672.427 28.616 672.368 28.4293 672.368 28.216C672.368 28.0347 672.411 27.8907 672.496 27.784C672.368 27.656 672.304 27.464 672.304 27.208C672.304 26.9307 672.39 26.712 672.56 26.552C672.422 26.4133 672.352 26.232 672.352 26.008C672.352 25.784 672.416 25.5707 672.544 25.368C672.512 25.272 672.496 25.16 672.496 25.032C672.496 24.872 672.512 24.7387 672.544 24.632C672.448 24.5147 672.4 24.3867 672.4 24.248C672.4 24.12 672.432 24.008 672.496 23.912C672.454 23.8373 672.432 23.752 672.432 23.656C672.432 23.5707 672.448 23.4907 672.48 23.416C672.363 23.2667 672.304 23.0907 672.304 22.888C672.304 22.728 672.347 22.5787 672.432 22.44C672.4 22.3547 672.384 22.2693 672.384 22.184C672.384 22.1307 672.395 22.0613 672.416 21.976C672.342 21.8693 672.304 21.7147 672.304 21.512C672.304 21.32 672.342 21.1707 672.416 21.064C672.352 20.936 672.32 20.792 672.32 20.632C672.32 20.4827 672.358 20.3493 672.432 20.232C672.347 20.0613 672.304 19.9013 672.304 19.752C672.304 19.5707 672.347 19.4107 672.432 19.272C672.358 19.1867 672.32 19.0587 672.32 18.888C672.32 18.76 672.342 18.6213 672.384 18.472C672.342 18.3227 672.32 18.2 672.32 18.104C672.32 17.976 672.352 17.8747 672.416 17.8C672.406 17.6187 672.459 17.4693 672.576 17.352C672.694 17.2347 672.838 17.176 673.008 17.176C673.094 17.176 673.2 17.2027 673.328 17.256C673.446 17.32 673.536 17.4373 673.6 17.608C673.675 17.7787 673.712 17.96 673.712 18.152C673.712 18.344 673.675 18.5147 673.6 18.664C673.675 18.8027 673.712 18.952 673.712 19.112C673.712 19.2933 673.659 19.5013 673.552 19.736C673.648 19.9067 673.696 20.088 673.696 20.28C673.696 20.3973 673.675 20.4933 673.632 20.568C673.75 20.6533 673.808 20.7813 673.808 20.952C673.808 21.048 673.776 21.1547 673.712 21.272C673.776 21.2933 673.814 21.3733 673.824 21.512C673.846 21.6507 673.856 21.7307 673.856 21.752C673.91 21.6133 674.006 21.5067 674.144 21.432C674.283 21.3467 674.406 21.3147 674.512 21.336C674.555 21.208 674.635 21.112 674.752 21.048C674.87 20.9733 674.992 20.936 675.12 20.936C675.174 20.936 675.243 20.9467 675.328 20.968C675.414 20.8827 675.542 20.84 675.712 20.84C675.83 20.84 675.926 20.8613 676 20.904C676.054 20.872 676.123 20.856 676.208 20.856C676.315 20.856 676.422 20.8827 676.528 20.936C676.614 20.904 676.694 20.888 676.768 20.888C676.907 20.888 677.024 20.936 677.12 21.032C677.216 21.0107 677.344 21.0533 677.504 21.16C677.664 21.2667 677.75 21.3893 677.76 21.528C677.952 21.688 678.048 21.8587 678.048 22.04C678.048 22.104 678.032 22.1627 678 22.216C678.064 22.2587 678.118 22.328 678.16 22.424C678.203 22.52 678.224 22.6213 678.224 22.728C678.224 22.8027 678.219 22.8613 678.208 22.904C678.336 23 678.4 23.1493 678.4 23.352C678.4 23.5013 678.363 23.64 678.288 23.768C678.384 23.9173 678.432 24.056 678.432 24.184C678.432 24.2587 678.416 24.3387 678.384 24.424C678.438 24.5627 678.464 24.7227 678.464 24.904C678.464 25.1173 678.427 25.2933 678.352 25.432C678.384 25.5067 678.4 25.6667 678.4 25.912C678.4 26.2213 678.379 26.424 678.336 26.52C678.411 26.6267 678.448 26.792 678.448 27.016C678.448 27.272 678.4 27.4587 678.304 27.576C678.368 27.672 678.4 27.8107 678.4 27.992C678.4 28.2053 678.363 28.3867 678.288 28.536C678.299 28.6533 678.23 28.7547 678.08 28.84C677.942 28.9253 677.787 28.968 677.616 28.968C677.467 28.968 677.344 28.9307 677.248 28.856C677.163 28.7813 677.126 28.6747 677.136 28.536C677.019 28.3547 676.96 28.152 676.96 27.928C676.96 27.736 676.992 27.5547 677.056 27.384C677.003 27.224 676.976 27.032 676.976 26.808C676.976 26.5733 677.003 26.4027 677.056 26.296C677.014 26.232 676.992 26.1307 676.992 25.992C676.992 25.832 677.019 25.7093 677.072 25.624C676.998 25.5067 676.96 25.368 676.96 25.208C676.96 25.0907 676.987 25.0053 677.04 24.952C676.944 24.8027 676.896 24.6427 676.896 24.472C676.896 24.3547 676.918 24.2693 676.96 24.216C676.843 24.1307 676.784 23.9813 676.784 23.768C676.784 23.5973 676.822 23.4747 676.896 23.4C676.704 23.24 676.608 23.064 676.608 22.872C676.608 22.7653 676.63 22.6693 676.672 22.584C676.598 22.6053 676.512 22.584 676.416 22.52C676.32 22.4453 676.256 22.3653 676.224 22.28C676.118 22.3333 675.984 22.36 675.824 22.36C675.76 22.36 675.718 22.3547 675.696 22.344C675.654 22.408 675.568 22.4667 675.44 22.52C675.323 22.5627 675.232 22.5733 675.168 22.552C675.083 22.6373 674.976 22.7227 674.848 22.808C674.72 22.8933 674.63 22.9307 674.576 22.92C674.555 23.016 674.486 23.1333 674.368 23.272C674.251 23.4 674.139 23.464 674.032 23.464C674.054 23.5493 674.064 23.6187 674.064 23.672C674.064 23.8107 674.016 24.0133 673.92 24.28C674.006 24.3973 674.048 24.52 674.048 24.648C674.048 24.7653 674.011 24.888 673.936 25.016C673.958 25.0587 673.968 25.128 673.968 25.224C673.968 25.32 673.947 25.432 673.904 25.56C673.926 25.6347 673.936 25.72 673.936 25.816C673.936 25.9227 673.894 26.0453 673.808 26.184C673.926 26.2373 673.984 26.392 673.984 26.648C673.984 26.776 673.968 26.9093 673.936 27.048C673.904 27.1867 673.862 27.2987 673.808 27.384C673.872 27.4907 673.904 27.6133 673.904 27.752C673.904 27.8907 673.851 28.008 673.744 28.104ZM680.028 22.792C679.943 22.6533 679.9 22.52 679.9 22.392C679.9 22.2 679.964 22.04 680.092 21.912C680.124 21.752 680.199 21.6027 680.316 21.464C680.434 21.3147 680.562 21.2027 680.7 21.128C680.85 21.0427 680.967 21.0107 681.052 21.032C681.127 20.9147 681.276 20.808 681.5 20.712C681.724 20.6053 681.932 20.552 682.124 20.552C682.167 20.552 682.231 20.5627 682.316 20.584C682.434 20.456 682.588 20.392 682.78 20.392C682.93 20.392 683.036 20.4347 683.1 20.52C683.239 20.424 683.42 20.376 683.644 20.376C683.911 20.376 684.146 20.44 684.348 20.568C684.562 20.696 684.684 20.8667 684.716 21.08C684.908 21.144 685.052 21.2453 685.148 21.384C685.255 21.512 685.319 21.6933 685.34 21.928C685.479 22.0667 685.58 22.232 685.644 22.424C685.708 22.6053 685.74 22.792 685.74 22.984C685.74 23.2293 685.698 23.4267 685.612 23.576C685.687 23.6827 685.751 23.8427 685.804 24.056C685.858 24.2693 685.884 24.4773 685.884 24.68C685.884 24.7653 685.874 24.872 685.852 25C685.927 25.16 685.964 25.2667 685.964 25.32C685.964 25.352 685.948 25.4267 685.916 25.544C685.927 25.5867 685.938 25.64 685.948 25.704C685.959 25.7573 685.964 25.8267 685.964 25.912C685.964 26.072 685.906 26.216 685.788 26.344C685.831 26.4613 685.852 26.6053 685.852 26.776C685.852 27 685.799 27.1813 685.692 27.32C685.714 27.3627 685.724 27.432 685.724 27.528C685.724 27.752 685.634 27.9387 685.452 28.088C685.41 28.2373 685.33 28.3547 685.212 28.44C685.095 28.5147 684.967 28.552 684.828 28.552C684.69 28.552 684.578 28.5093 684.492 28.424C684.215 28.5413 683.991 28.6 683.82 28.6C683.735 28.6 683.671 28.5947 683.628 28.584C683.351 28.6693 683.116 28.712 682.924 28.712C682.786 28.712 682.594 28.6853 682.348 28.632C682.199 28.7173 682.055 28.76 681.916 28.76C681.788 28.76 681.671 28.7227 681.564 28.648C681.511 28.6587 681.431 28.664 681.324 28.664C680.908 28.664 680.588 28.4773 680.364 28.104C679.959 27.8693 679.756 27.5173 679.756 27.048C679.756 26.9307 679.762 26.84 679.772 26.776C679.676 26.712 679.628 26.5787 679.628 26.376C679.628 26.2373 679.655 26.1147 679.708 26.008C679.666 25.816 679.644 25.6933 679.644 25.64C679.644 25.3307 679.794 25.0533 680.092 24.808C680.21 24.5627 680.343 24.3973 680.492 24.312C680.652 24.2267 680.85 24.1627 681.084 24.12C681.148 23.9387 681.298 23.816 681.532 23.752C681.767 23.688 681.996 23.6667 682.22 23.688C682.284 23.6453 682.375 23.608 682.492 23.576C682.61 23.5333 682.727 23.512 682.844 23.512C682.972 23.512 683.084 23.5333 683.18 23.576C683.202 23.5547 683.255 23.544 683.34 23.544C683.404 23.544 683.468 23.5493 683.532 23.56C683.596 23.5707 683.639 23.5867 683.66 23.608C683.81 23.416 683.986 23.32 684.188 23.32C684.252 23.32 684.316 23.336 684.38 23.368V23.32C684.38 23.1387 684.418 23.0107 684.492 22.936C684.386 22.904 684.268 22.8133 684.14 22.664C684.023 22.504 683.954 22.36 683.932 22.232C683.762 22.1573 683.644 22.0347 683.58 21.864C683.452 21.96 683.303 22.008 683.132 22.008C683.015 22.008 682.903 21.976 682.796 21.912C682.615 21.9653 682.498 21.9867 682.444 21.976C682.295 22.0827 682.13 22.136 681.948 22.136C681.788 22.3493 681.602 22.4453 681.388 22.424C681.292 22.5947 681.159 22.744 680.988 22.872C680.828 23 680.663 23.064 680.492 23.064C680.3 23.064 680.146 22.9733 680.028 22.792ZM680.908 26.36C681.036 26.488 681.1 26.6107 681.1 26.728C681.1 26.8133 681.079 26.92 681.036 27.048C681.079 27.048 681.138 27.0747 681.212 27.128C681.298 27.1707 681.346 27.2187 681.356 27.272C681.442 27.24 681.548 27.224 681.676 27.224C681.911 27.224 682.066 27.2773 682.14 27.384C682.258 27.3413 682.38 27.32 682.508 27.32C682.711 27.32 682.871 27.3787 682.988 27.496C683.074 27.4107 683.212 27.3413 683.404 27.288C683.607 27.2347 683.788 27.208 683.948 27.208C684.044 27.016 684.215 26.904 684.46 26.872C684.482 26.7973 684.54 26.7013 684.636 26.584C684.594 26.52 684.556 26.4347 684.524 26.328C684.492 26.2213 684.476 26.1147 684.476 26.008C684.476 25.784 684.53 25.6187 684.636 25.512C684.519 25.3627 684.46 25.1867 684.46 24.984C684.46 24.8453 684.482 24.728 684.524 24.632C684.439 24.6853 684.343 24.712 684.236 24.712C684.14 24.712 684.06 24.6747 683.996 24.6C683.9 24.696 683.767 24.744 683.596 24.744C683.49 24.744 683.383 24.7173 683.276 24.664C683.159 24.7813 683.015 24.84 682.844 24.84C682.791 24.84 682.711 24.8187 682.604 24.776C682.444 24.936 682.3 24.984 682.172 24.92C682.108 25.0693 682.023 25.1707 681.916 25.224C681.82 25.2773 681.682 25.304 681.5 25.304C681.458 25.4213 681.383 25.5173 681.276 25.592C681.18 25.6667 681.079 25.6933 680.972 25.672C681.026 25.7467 681.052 25.832 681.052 25.928C681.052 26.088 681.004 26.232 680.908 26.36ZM691.542 27.624C691.552 27.5707 691.579 27.5333 691.622 27.512C691.675 27.4907 691.734 27.4747 691.798 27.464C691.84 27.4533 691.894 27.448 691.958 27.448C692.139 27.448 692.283 27.5173 692.39 27.656C692.507 27.784 692.566 27.9387 692.566 28.12C692.566 28.2587 692.528 28.3813 692.454 28.488C692.379 28.584 692.267 28.6533 692.118 28.696C691.894 28.888 691.627 28.968 691.318 28.936C691.232 29.0107 691.12 29.048 690.982 29.048C690.79 29.048 690.614 28.9787 690.454 28.84C690.347 28.8187 690.219 28.7653 690.07 28.68C689.92 28.584 689.846 28.4987 689.846 28.424C689.696 28.4027 689.542 28.3173 689.382 28.168C689.232 28.0187 689.179 27.8373 689.222 27.624C689.104 27.496 689.035 27.3627 689.014 27.224C688.886 27.16 688.79 27.064 688.726 26.936C688.672 26.808 688.656 26.6747 688.678 26.536C688.539 26.408 688.47 26.216 688.47 25.96C688.47 25.864 688.48 25.7413 688.502 25.592C688.352 25.4747 688.278 25.3147 688.278 25.112C688.278 24.9307 688.336 24.7813 688.454 24.664C688.326 24.536 688.262 24.3707 688.262 24.168C688.262 24.0933 688.283 24.0027 688.326 23.896C688.262 23.768 688.23 23.64 688.23 23.512C688.23 23.3413 688.278 23.208 688.374 23.112C688.31 22.984 688.278 22.8453 688.278 22.696C688.278 22.568 688.294 22.456 688.326 22.36C688.368 22.2533 688.416 22.1733 688.47 22.12C688.352 21.9813 688.294 21.832 688.294 21.672C688.294 21.5867 688.31 21.496 688.342 21.4C688.246 21.432 688.139 21.448 688.022 21.448C687.84 21.448 687.707 21.4107 687.622 21.336C687.494 21.368 687.382 21.384 687.286 21.384C687.094 21.384 686.896 21.3253 686.694 21.208C686.587 21.272 686.475 21.304 686.358 21.304C686.187 21.304 686.048 21.2347 685.942 21.096C685.824 20.9467 685.766 20.7813 685.766 20.6C685.766 20.44 685.819 20.3067 685.926 20.2C686.022 20.0827 686.166 20.0187 686.358 20.008C686.486 19.9547 686.603 19.928 686.71 19.928C686.923 19.928 687.11 19.9813 687.27 20.088C687.408 20.0347 687.563 20.008 687.734 20.008C687.883 20.008 688 20.0347 688.086 20.088C688.096 20.0453 688.139 20.008 688.214 19.976C688.299 19.9333 688.368 19.9173 688.422 19.928C688.379 19.832 688.358 19.704 688.358 19.544C688.358 19.352 688.4 19.2507 688.486 19.24C688.411 19.1333 688.374 18.9787 688.374 18.776C688.374 18.4987 688.443 18.3067 688.582 18.2C688.571 17.9867 688.614 17.8267 688.71 17.72C688.806 17.6133 688.928 17.56 689.078 17.56C689.227 17.56 689.366 17.6133 689.494 17.72C689.622 17.816 689.686 17.944 689.686 18.104C689.686 18.2107 689.643 18.3333 689.558 18.472C689.664 18.568 689.718 18.728 689.718 18.952C689.718 19.048 689.702 19.1493 689.67 19.256C689.648 19.352 689.616 19.4267 689.574 19.48C689.638 19.5227 689.67 19.608 689.67 19.736C689.67 19.8427 689.643 19.9867 689.59 20.168C689.686 20.136 689.787 20.12 689.894 20.12C690.054 20.12 690.176 20.1573 690.262 20.232C690.368 20.1787 690.454 20.152 690.518 20.152C690.624 20.152 690.71 20.1947 690.774 20.28C690.848 20.2267 690.939 20.2 691.046 20.2C691.195 20.2 691.312 20.2587 691.398 20.376C691.6 20.376 691.75 20.424 691.846 20.52C691.952 20.6053 692.006 20.7173 692.006 20.856C692.006 21.0267 691.936 21.192 691.798 21.352C691.67 21.5013 691.52 21.576 691.35 21.576C691.254 21.576 691.158 21.544 691.062 21.48C690.955 21.5653 690.816 21.608 690.646 21.608C690.486 21.608 690.352 21.5707 690.246 21.496C690.107 21.5493 690.006 21.576 689.942 21.576C689.856 21.576 689.755 21.5387 689.638 21.464C689.734 21.592 689.782 21.7307 689.782 21.88C689.782 22.04 689.718 22.184 689.59 22.312C689.686 22.44 689.734 22.6 689.734 22.792C689.734 22.9627 689.686 23.1227 689.59 23.272C689.718 23.3573 689.782 23.496 689.782 23.688C689.782 23.848 689.734 23.9867 689.638 24.104C689.744 24.2213 689.798 24.4293 689.798 24.728C689.798 24.856 689.782 24.9627 689.75 25.048C689.824 25.1547 689.862 25.2667 689.862 25.384C689.862 25.448 689.846 25.5333 689.814 25.64C689.792 25.736 689.776 25.816 689.766 25.88C689.894 26.0293 689.958 26.1733 689.958 26.312C690.139 26.4507 690.23 26.616 690.23 26.808C690.443 26.9253 690.55 27.1227 690.55 27.4C690.571 27.432 690.592 27.4533 690.614 27.464C690.635 27.4747 690.651 27.4853 690.662 27.496L690.774 27.48C690.934 27.48 691.062 27.528 691.158 27.624C691.243 27.6027 691.312 27.592 691.366 27.592C691.398 27.592 691.456 27.6027 691.542 27.624ZM699.835 22.744C699.952 22.7973 700.059 22.9253 700.155 23.128C700.261 23.3307 700.315 23.5387 700.315 23.752C700.315 24.1147 700.155 24.36 699.835 24.488C699.749 24.6373 699.632 24.7547 699.483 24.84C699.344 24.9253 699.189 24.968 699.019 24.968C698.88 24.968 698.736 24.936 698.587 24.872C698.501 24.9253 698.384 24.9733 698.235 25.016C698.085 25.0587 697.936 25.08 697.787 25.08C697.531 25.08 697.355 25.0267 697.259 24.92C697.152 25.0053 696.981 25.048 696.747 25.048C696.576 25.048 696.421 25.016 696.283 24.952C696.133 25.0267 695.963 25.064 695.771 25.064C695.589 25.064 695.44 25.0373 695.323 24.984C695.216 25.08 694.997 25.128 694.667 25.128C694.485 25.128 694.363 25.112 694.299 25.08C694.331 25.3893 694.288 25.6187 694.171 25.768C694.373 25.9707 694.453 26.1893 694.411 26.424C694.421 26.4347 694.48 26.4773 694.587 26.552C694.693 26.6267 694.768 26.7493 694.811 26.92C694.928 26.92 695.035 26.968 695.131 27.064C695.237 27.16 695.301 27.256 695.323 27.352C695.365 27.3093 695.451 27.288 695.579 27.288C695.675 27.288 695.76 27.304 695.835 27.336C695.909 27.368 695.952 27.4053 695.963 27.448C696.037 27.4053 696.123 27.384 696.219 27.384C696.357 27.384 696.485 27.432 696.603 27.528C696.709 27.5067 696.789 27.496 696.843 27.496C696.949 27.496 697.04 27.512 697.115 27.544C697.147 27.4587 697.232 27.3787 697.371 27.304C697.509 27.2187 697.653 27.1813 697.803 27.192C697.888 27.0853 698.005 27 698.155 26.936C698.304 26.872 698.453 26.84 698.603 26.84C698.891 26.84 699.099 26.9573 699.227 27.192C699.269 27.2773 699.291 27.3787 699.291 27.496C699.291 27.752 699.173 27.9547 698.939 28.104C698.885 28.136 698.795 28.1947 698.667 28.28C698.539 28.3547 698.421 28.4133 698.315 28.456C698.208 28.4987 698.112 28.52 698.027 28.52C697.867 28.712 697.648 28.808 697.371 28.808C697.243 28.808 697.147 28.7973 697.083 28.776C696.955 28.8827 696.768 28.936 696.523 28.936C696.299 28.936 696.144 28.8933 696.059 28.808C695.984 28.84 695.909 28.856 695.835 28.856C695.685 28.856 695.547 28.8027 695.419 28.696C694.875 28.728 694.507 28.5573 694.315 28.184C694.165 28.184 693.995 28.0933 693.803 27.912C693.621 27.72 693.52 27.5547 693.499 27.416C693.253 27.32 693.099 27.144 693.035 26.888C693.024 26.8027 693.024 26.7227 693.035 26.648C692.992 26.6373 692.955 26.5947 692.923 26.52C692.901 26.4347 692.891 26.3493 692.891 26.264C692.891 26.2 692.896 26.1573 692.907 26.136C692.821 25.88 692.779 25.6453 692.779 25.432C692.779 25.2187 692.821 25.0267 692.907 24.856C692.843 24.7387 692.811 24.6107 692.811 24.472C692.811 24.3013 692.848 24.1307 692.923 23.96C692.997 23.7893 693.067 23.6773 693.131 23.624C693.109 23.5707 693.125 23.48 693.179 23.352C693.232 23.2133 693.301 23.0907 693.387 22.984C693.483 22.8667 693.579 22.7973 693.675 22.776L693.659 22.6C693.659 22.184 693.883 21.9227 694.331 21.816C694.331 21.6347 694.437 21.4587 694.651 21.288C694.864 21.1173 695.051 21.0427 695.211 21.064C695.232 20.9467 695.333 20.856 695.515 20.792C695.707 20.7173 695.851 20.696 695.947 20.728C696.032 20.5893 696.203 20.4933 696.459 20.44C696.555 20.3333 696.693 20.28 696.875 20.28C696.928 20.28 696.997 20.2907 697.083 20.312L697.227 20.296C697.355 20.296 697.461 20.3227 697.547 20.376C697.643 20.4187 697.685 20.472 697.675 20.536C697.909 20.5573 698.107 20.6107 698.267 20.696C698.427 20.7813 698.523 20.936 698.555 21.16C698.693 21.128 698.869 21.1653 699.083 21.272C699.296 21.368 699.477 21.5227 699.627 21.736C699.787 21.9387 699.867 22.1787 699.867 22.456C699.867 22.52 699.856 22.616 699.835 22.744ZM697.483 23.784C697.589 23.6347 697.851 23.56 698.267 23.56C698.501 23.56 698.683 23.5813 698.811 23.624C698.725 23.5813 698.645 23.4907 698.571 23.352C698.507 23.2027 698.475 23.064 698.475 22.936C698.475 22.8507 698.491 22.7867 698.523 22.744C698.373 22.7547 698.245 22.7173 698.139 22.632C698.043 22.536 697.952 22.4293 697.867 22.312C697.792 22.1947 697.733 22.1093 697.691 22.056C697.637 22.088 697.525 22.0613 697.355 21.976C697.195 21.88 697.109 21.784 697.099 21.688C697.056 21.7413 696.965 21.7893 696.827 21.832C696.688 21.864 696.581 21.8747 696.507 21.864C696.475 21.9173 696.4 21.9707 696.283 22.024C696.165 22.0773 696.043 22.0933 695.915 22.072C695.808 22.2747 695.696 22.44 695.579 22.568C695.461 22.696 695.312 22.792 695.131 22.856C695.109 23.0053 695.04 23.1707 694.923 23.352C694.816 23.5333 694.704 23.672 694.587 23.768L694.651 23.784C694.8 23.6773 695.003 23.624 695.259 23.624C695.408 23.624 695.547 23.64 695.675 23.672C695.813 23.704 695.909 23.7413 695.963 23.784C696.219 23.624 696.501 23.544 696.811 23.544C697.067 23.544 697.291 23.624 697.483 23.784ZM706.973 27.112C707.005 27.2187 707.021 27.3253 707.021 27.432C707.021 27.6453 706.936 27.7893 706.765 27.864C706.787 28.024 706.723 28.184 706.573 28.344C706.424 28.504 706.285 28.584 706.157 28.584C706.104 28.68 705.944 28.7707 705.677 28.856C705.411 28.9413 705.165 28.984 704.941 28.984C704.781 28.984 704.659 28.952 704.573 28.888C704.424 28.9627 704.211 29 703.933 29C703.688 29 703.464 28.9627 703.261 28.888C703.069 28.8133 702.952 28.7013 702.909 28.552C702.696 28.584 702.456 28.52 702.189 28.36C701.933 28.2 701.768 28.0347 701.693 27.864C701.501 27.8107 701.341 27.7093 701.213 27.56C701.096 27.4107 701.032 27.2347 701.021 27.032C700.957 26.936 700.925 26.84 700.925 26.744C700.925 26.5947 700.973 26.4613 701.069 26.344C701.176 26.2267 701.299 26.168 701.437 26.168C701.576 26.168 701.709 26.2533 701.837 26.424C702.029 26.4027 702.2 26.4667 702.349 26.616C702.509 26.7653 702.589 26.9147 702.589 27.064C702.621 27.064 702.701 27.0747 702.829 27.096C702.968 27.1067 703.091 27.144 703.197 27.208C703.304 27.272 703.379 27.3627 703.421 27.48C703.613 27.48 703.8 27.5067 703.981 27.56C704.173 27.6027 704.285 27.656 704.317 27.72C704.403 27.6667 704.525 27.624 704.685 27.592C704.856 27.5493 705 27.528 705.117 27.528C705.149 27.4853 705.229 27.4427 705.357 27.4C705.485 27.3573 705.592 27.3307 705.677 27.32C705.624 27.2453 705.597 27.1333 705.597 26.984C705.597 26.76 705.667 26.6 705.805 26.504C705.677 26.4613 705.576 26.3973 705.501 26.312C705.427 26.216 705.395 26.1093 705.405 25.992C705.32 26.0133 705.256 26.024 705.213 26.024C705.011 26.024 704.845 25.944 704.717 25.784C704.504 25.8053 704.291 25.7573 704.077 25.64C703.875 25.5227 703.725 25.368 703.629 25.176C703.555 25.208 703.475 25.224 703.389 25.224C703.208 25.224 703.016 25.1707 702.813 25.064C702.621 24.9467 702.499 24.8347 702.445 24.728C702.296 24.7707 702.12 24.7227 701.917 24.584C701.715 24.4453 701.613 24.2907 701.613 24.12C701.485 24.056 701.384 23.9493 701.309 23.8C701.235 23.64 701.197 23.496 701.197 23.368C701.197 23.272 701.219 23.208 701.261 23.176C701.208 23.0693 701.181 22.9627 701.181 22.856C701.181 22.664 701.245 22.4987 701.373 22.36C701.341 22.2427 701.325 22.136 701.325 22.04C701.325 21.8587 701.363 21.7093 701.437 21.592C701.523 21.464 701.624 21.4107 701.741 21.432C701.72 21.2613 701.757 21.112 701.853 20.984C701.96 20.856 702.088 20.7653 702.237 20.712C702.397 20.648 702.536 20.6267 702.653 20.648C702.717 20.552 702.803 20.4773 702.909 20.424C703.016 20.3707 703.123 20.344 703.229 20.344C703.411 20.344 703.539 20.3973 703.613 20.504C703.624 20.4507 703.661 20.408 703.725 20.376C703.8 20.344 703.885 20.328 703.981 20.328C704.067 20.328 704.152 20.344 704.237 20.376C704.323 20.408 704.387 20.4453 704.429 20.488C704.493 20.424 704.605 20.392 704.765 20.392C704.893 20.392 705.021 20.4187 705.149 20.472C705.277 20.5147 705.363 20.5787 705.405 20.664C705.469 20.632 705.539 20.616 705.613 20.616C705.741 20.616 705.859 20.664 705.965 20.76C706.083 20.8453 706.163 20.9573 706.205 21.096C706.365 21.0747 706.531 21.128 706.701 21.256C706.872 21.384 706.936 21.512 706.893 21.64C707.181 21.8 707.325 22.0187 707.325 22.296C707.325 22.4667 707.267 22.616 707.149 22.744C707.032 22.872 706.883 22.936 706.701 22.936C706.541 22.9253 706.408 22.8827 706.301 22.808C706.195 22.7333 706.131 22.6427 706.109 22.536C705.971 22.5147 705.837 22.4613 705.709 22.376C705.592 22.28 705.528 22.1573 705.517 22.008C705.315 22.0293 705.16 22.008 705.053 21.944C704.957 21.88 704.872 21.7787 704.797 21.64C704.723 21.6933 704.627 21.72 704.509 21.72C704.392 21.72 704.264 21.688 704.125 21.624C704.051 21.688 703.955 21.7413 703.837 21.784C703.731 21.8267 703.624 21.848 703.517 21.848C703.4 21.848 703.299 21.8213 703.213 21.768C703.235 21.896 703.203 21.9973 703.117 22.072C703.032 22.1467 702.915 22.1733 702.765 22.152C702.797 22.2267 702.813 22.3067 702.813 22.392C702.813 22.584 702.728 22.744 702.557 22.872C702.675 22.9253 702.76 23.016 702.813 23.144C702.867 23.2613 702.888 23.3787 702.877 23.496L703.005 23.48C703.325 23.48 703.528 23.5813 703.613 23.784L703.741 23.768C703.912 23.768 704.072 23.8107 704.221 23.896C704.381 23.9813 704.499 24.1253 704.573 24.328C704.744 24.3173 704.909 24.3387 705.069 24.392C705.229 24.4347 705.341 24.52 705.405 24.648C705.491 24.616 705.571 24.6 705.645 24.6C705.827 24.6 705.987 24.6533 706.125 24.76C706.275 24.8667 706.355 24.9893 706.365 25.128C706.461 25.128 706.547 25.1813 706.621 25.288C706.707 25.3947 706.739 25.5173 706.717 25.656C706.792 25.6453 706.861 25.688 706.925 25.784C706.989 25.8693 707.021 25.9707 707.021 26.088C707.021 26.152 707.005 26.2107 706.973 26.264C707.123 26.3707 707.197 26.5147 707.197 26.696C707.197 26.792 707.176 26.8773 707.133 26.952C707.101 27.0267 707.048 27.08 706.973 27.112Z M668.48 193.098C668.488 191.41 668.707 190.195 669.137 189.453C669.566 188.703 670.219 188.305 671.094 188.258C671.477 188.258 671.816 188.363 672.113 188.574C672.41 188.785 672.645 189.055 672.816 189.383C672.996 189.703 673.145 190.09 673.262 190.543C673.379 190.988 673.457 191.414 673.496 191.82C673.543 192.219 673.574 192.645 673.59 193.098C673.59 193.715 673.496 194.348 673.309 194.996C673.129 195.637 672.848 196.199 672.465 196.684C672.09 197.16 671.668 197.398 671.199 197.398C669.387 197.398 668.48 195.965 668.48 193.098ZM670.93 189.16C670.742 189.199 670.574 189.262 670.426 189.348C670.277 189.434 670.152 189.531 670.051 189.641C669.957 189.75 669.875 189.895 669.805 190.074C669.734 190.254 669.68 190.422 669.641 190.578C669.609 190.727 669.578 190.922 669.547 191.164C669.523 191.406 669.508 191.617 669.5 191.797C669.492 191.969 669.48 192.199 669.465 192.488C669.457 192.77 669.445 193 669.43 193.18C669.43 193.539 669.449 193.883 669.488 194.211C669.527 194.531 669.598 194.867 669.699 195.219C669.809 195.57 669.977 195.855 670.203 196.074C670.43 196.293 670.703 196.418 671.023 196.449C671.508 196.449 671.906 196.113 672.219 195.441C672.539 194.77 672.699 194.09 672.699 193.402C672.699 190.605 672.109 189.191 670.93 189.16ZM674.117 195.535C674.328 195.535 674.504 195.629 674.645 195.816C674.793 195.996 674.867 196.203 674.867 196.438C674.867 196.609 674.824 196.75 674.738 196.859C674.66 196.961 674.551 197.012 674.41 197.012C674.191 197.012 674.016 196.922 673.883 196.742C673.758 196.562 673.695 196.352 673.695 196.109C673.695 195.938 673.73 195.801 673.801 195.699C673.879 195.59 673.984 195.535 674.117 195.535ZM679.906 193.59L680.023 194.117C679.617 194.164 679.328 194.195 679.156 194.211C679.172 194.57 679.191 195.023 679.215 195.57C679.246 196.117 679.266 196.566 679.273 196.918C679.203 197.16 679.07 197.281 678.875 197.281C678.734 197.281 678.598 197.223 678.465 197.105C678.332 196.988 678.25 196.848 678.219 196.684C678.227 196.441 678.254 195.645 678.301 194.293C678.051 194.309 677.852 194.316 677.703 194.316C677.469 194.316 677.105 194.305 676.613 194.281C676.129 194.25 675.773 194.234 675.547 194.234C675.438 194.234 675.289 194.242 675.102 194.258C675.117 194.07 675.125 193.941 675.125 193.871C675.125 193.824 675.121 193.75 675.113 193.648C675.113 193.539 675.113 193.457 675.113 193.402C676.418 191.207 677.473 189.578 678.277 188.516C678.52 188.516 678.852 188.566 679.273 188.668C679.258 189.035 679.234 189.832 679.203 191.059C679.18 192.277 679.156 193.102 679.133 193.531C679.477 193.547 679.734 193.566 679.906 193.59ZM675.969 193.438L678.324 193.508C678.348 193.062 678.371 192.402 678.395 191.527C678.418 190.652 678.438 189.992 678.453 189.547C678.133 189.875 677.668 190.562 677.059 191.609C676.457 192.648 676.094 193.258 675.969 193.438ZM680.797 196.965V196.344C680.984 196.32 681.215 196.281 681.488 196.227C681.77 196.172 681.988 196.133 682.145 196.109C682.168 195.547 682.18 194.98 682.18 194.41C682.18 194.051 682.176 193.512 682.168 192.793C682.16 192.066 682.156 191.52 682.156 191.152C682.156 190.285 682.168 189.629 682.191 189.184C681.48 189.59 680.961 189.918 680.633 190.168L680.258 189.781C680.383 189.68 680.598 189.504 680.902 189.254C681.207 188.996 681.48 188.766 681.723 188.562C681.965 188.352 682.152 188.18 682.285 188.047C682.41 188.062 682.539 188.074 682.672 188.082C682.805 188.082 682.934 188.09 683.059 188.105C683.105 189.012 683.129 190.672 683.129 193.086C683.129 194.523 683.141 195.555 683.164 196.18C683.234 196.188 683.402 196.219 683.668 196.273C683.941 196.32 684.152 196.352 684.301 196.367L684.488 196.988C684.098 196.988 683.758 196.988 683.469 196.988C683.18 196.988 682.793 196.988 682.309 196.988C681.832 196.988 681.457 196.988 681.184 196.988C680.918 196.98 680.789 196.973 680.797 196.965Z M667.48 271.098C667.488 269.41 667.707 268.195 668.137 267.453C668.566 266.703 669.219 266.305 670.094 266.258C670.477 266.258 670.816 266.363 671.113 266.574C671.41 266.785 671.645 267.055 671.816 267.383C671.996 267.703 672.145 268.09 672.262 268.543C672.379 268.988 672.457 269.414 672.496 269.82C672.543 270.219 672.574 270.645 672.59 271.098C672.59 271.715 672.496 272.348 672.309 272.996C672.129 273.637 671.848 274.199 671.465 274.684C671.09 275.16 670.668 275.398 670.199 275.398C668.387 275.398 667.48 273.965 667.48 271.098ZM669.93 267.16C669.742 267.199 669.574 267.262 669.426 267.348C669.277 267.434 669.152 267.531 669.051 267.641C668.957 267.75 668.875 267.895 668.805 268.074C668.734 268.254 668.68 268.422 668.641 268.578C668.609 268.727 668.578 268.922 668.547 269.164C668.523 269.406 668.508 269.617 668.5 269.797C668.492 269.969 668.48 270.199 668.465 270.488C668.457 270.77 668.445 271 668.43 271.18C668.43 271.539 668.449 271.883 668.488 272.211C668.527 272.531 668.598 272.867 668.699 273.219C668.809 273.57 668.977 273.855 669.203 274.074C669.43 274.293 669.703 274.418 670.023 274.449C670.508 274.449 670.906 274.113 671.219 273.441C671.539 272.77 671.699 272.09 671.699 271.402C671.699 268.605 671.109 267.191 669.93 267.16ZM673.117 273.535C673.328 273.535 673.504 273.629 673.645 273.816C673.793 273.996 673.867 274.203 673.867 274.438C673.867 274.609 673.824 274.75 673.738 274.859C673.66 274.961 673.551 275.012 673.41 275.012C673.191 275.012 673.016 274.922 672.883 274.742C672.758 274.562 672.695 274.352 672.695 274.109C672.695 273.938 672.73 273.801 672.801 273.699C672.879 273.59 672.984 273.535 673.117 273.535ZM678.906 271.59L679.023 272.117C678.617 272.164 678.328 272.195 678.156 272.211C678.172 272.57 678.191 273.023 678.215 273.57C678.246 274.117 678.266 274.566 678.273 274.918C678.203 275.16 678.07 275.281 677.875 275.281C677.734 275.281 677.598 275.223 677.465 275.105C677.332 274.988 677.25 274.848 677.219 274.684C677.227 274.441 677.254 273.645 677.301 272.293C677.051 272.309 676.852 272.316 676.703 272.316C676.469 272.316 676.105 272.305 675.613 272.281C675.129 272.25 674.773 272.234 674.547 272.234C674.438 272.234 674.289 272.242 674.102 272.258C674.117 272.07 674.125 271.941 674.125 271.871C674.125 271.824 674.121 271.75 674.113 271.648C674.113 271.539 674.113 271.457 674.113 271.402C675.418 269.207 676.473 267.578 677.277 266.516C677.52 266.516 677.852 266.566 678.273 266.668C678.258 267.035 678.234 267.832 678.203 269.059C678.18 270.277 678.156 271.102 678.133 271.531C678.477 271.547 678.734 271.566 678.906 271.59ZM674.969 271.438L677.324 271.508C677.348 271.062 677.371 270.402 677.395 269.527C677.418 268.652 677.438 267.992 677.453 267.547C677.133 267.875 676.668 268.562 676.059 269.609C675.457 270.648 675.094 271.258 674.969 271.438ZM683.91 266.68L684.039 267.207C683.656 267.277 683.219 267.312 682.727 267.312C681.992 267.312 681.523 267.324 681.32 267.348C681.203 268.246 681.051 269.199 680.863 270.207C681.09 270.16 681.309 270.137 681.52 270.137C682.207 270.137 682.816 270.41 683.348 270.957C683.879 271.496 684.145 272.121 684.145 272.832C684.145 273.504 683.883 274.078 683.359 274.555C682.836 275.031 682.191 275.27 681.426 275.27C680.684 275.27 679.961 275.023 679.258 274.531C679.266 274.523 679.324 274.398 679.434 274.156C679.551 273.914 679.664 273.793 679.773 273.793C679.828 273.793 679.879 273.812 679.926 273.852C680.465 274.258 680.973 274.461 681.449 274.461C681.934 274.461 682.332 274.27 682.645 273.887C682.957 273.504 683.113 273.074 683.113 272.598C683.113 272.152 682.965 271.773 682.668 271.461C682.379 271.148 681.953 270.992 681.391 270.992C681.188 270.992 680.996 271.008 680.816 271.039C680.66 270.953 680.488 270.867 680.301 270.781C680.113 270.695 679.957 270.621 679.832 270.559C680.012 269.855 680.16 269.152 680.277 268.449C680.395 267.746 680.551 267.117 680.746 266.562C681.02 266.586 681.523 266.598 682.258 266.598C682.992 266.598 683.543 266.625 683.91 266.68Z M667.48 89.0977C667.488 87.4102 667.707 86.1953 668.137 85.4531C668.566 84.7031 669.219 84.3047 670.094 84.2578C670.477 84.2578 670.816 84.3633 671.113 84.5742C671.41 84.7852 671.645 85.0547 671.816 85.3828C671.996 85.7031 672.145 86.0898 672.262 86.543C672.379 86.9883 672.457 87.4141 672.496 87.8203C672.543 88.2188 672.574 88.6445 672.59 89.0977C672.59 89.7148 672.496 90.3477 672.309 90.9961C672.129 91.6367 671.848 92.1992 671.465 92.6836C671.09 93.1602 670.668 93.3984 670.199 93.3984C668.387 93.3984 667.48 91.9648 667.48 89.0977ZM669.93 85.1602C669.742 85.1992 669.574 85.2617 669.426 85.3477C669.277 85.4336 669.152 85.5312 669.051 85.6406C668.957 85.75 668.875 85.8945 668.805 86.0742C668.734 86.2539 668.68 86.4219 668.641 86.5781C668.609 86.7266 668.578 86.9219 668.547 87.1641C668.523 87.4062 668.508 87.6172 668.5 87.7969C668.492 87.9688 668.48 88.1992 668.465 88.4883C668.457 88.7695 668.445 89 668.43 89.1797C668.43 89.5391 668.449 89.8828 668.488 90.2109C668.527 90.5312 668.598 90.8672 668.699 91.2188C668.809 91.5703 668.977 91.8555 669.203 92.0742C669.43 92.293 669.703 92.418 670.023 92.4492C670.508 92.4492 670.906 92.1133 671.219 91.4414C671.539 90.7695 671.699 90.0898 671.699 89.4023C671.699 86.6055 671.109 85.1914 669.93 85.1602ZM673.117 91.5352C673.328 91.5352 673.504 91.6289 673.645 91.8164C673.793 91.9961 673.867 92.2031 673.867 92.4375C673.867 92.6094 673.824 92.75 673.738 92.8594C673.66 92.9609 673.551 93.0117 673.41 93.0117C673.191 93.0117 673.016 92.9219 672.883 92.7422C672.758 92.5625 672.695 92.3516 672.695 92.1094C672.695 91.9375 672.73 91.8008 672.801 91.6992C672.879 91.5898 672.984 91.5352 673.117 91.5352ZM678.754 84.6797L678.883 85.207C678.5 85.2773 678.062 85.3125 677.57 85.3125C676.836 85.3125 676.367 85.3242 676.164 85.3477C676.047 86.2461 675.895 87.1992 675.707 88.207C675.934 88.1602 676.152 88.1367 676.363 88.1367C677.051 88.1367 677.66 88.4102 678.191 88.957C678.723 89.4961 678.988 90.1211 678.988 90.832C678.988 91.5039 678.727 92.0781 678.203 92.5547C677.68 93.0312 677.035 93.2695 676.27 93.2695C675.527 93.2695 674.805 93.0234 674.102 92.5312C674.109 92.5234 674.168 92.3984 674.277 92.1562C674.395 91.9141 674.508 91.793 674.617 91.793C674.672 91.793 674.723 91.8125 674.77 91.8516C675.309 92.2578 675.816 92.4609 676.293 92.4609C676.777 92.4609 677.176 92.2695 677.488 91.8867C677.801 91.5039 677.957 91.0742 677.957 90.5977C677.957 90.1523 677.809 89.7734 677.512 89.4609C677.223 89.1484 676.797 88.9922 676.234 88.9922C676.031 88.9922 675.84 89.0078 675.66 89.0391C675.504 88.9531 675.332 88.8672 675.145 88.7812C674.957 88.6953 674.801 88.6211 674.676 88.5586C674.855 87.8555 675.004 87.1523 675.121 86.4492C675.238 85.7461 675.395 85.1172 675.59 84.5625C675.863 84.5859 676.367 84.5977 677.102 84.5977C677.836 84.5977 678.387 84.625 678.754 84.6797ZM684.027 89.5898L684.145 90.1172C683.738 90.1641 683.449 90.1953 683.277 90.2109C683.293 90.5703 683.312 91.0234 683.336 91.5703C683.367 92.1172 683.387 92.5664 683.395 92.918C683.324 93.1602 683.191 93.2812 682.996 93.2812C682.855 93.2812 682.719 93.2227 682.586 93.1055C682.453 92.9883 682.371 92.8477 682.34 92.6836C682.348 92.4414 682.375 91.6445 682.422 90.293C682.172 90.3086 681.973 90.3164 681.824 90.3164C681.59 90.3164 681.227 90.3047 680.734 90.2812C680.25 90.25 679.895 90.2344 679.668 90.2344C679.559 90.2344 679.41 90.2422 679.223 90.2578C679.238 90.0703 679.246 89.9414 679.246 89.8711C679.246 89.8242 679.242 89.75 679.234 89.6484C679.234 89.5391 679.234 89.457 679.234 89.4023C680.539 87.207 681.594 85.5781 682.398 84.5156C682.641 84.5156 682.973 84.5664 683.395 84.668C683.379 85.0352 683.355 85.832 683.324 87.0586C683.301 88.2773 683.277 89.1016 683.254 89.5312C683.598 89.5469 683.855 89.5664 684.027 89.5898ZM680.09 89.4375L682.445 89.5078C682.469 89.0625 682.492 88.4023 682.516 87.5273C682.539 86.6523 682.559 85.9922 682.574 85.5469C682.254 85.875 681.789 86.5625 681.18 87.6094C680.578 88.6484 680.215 89.2578 680.09 89.4375Z M668.48 297.098C668.488 295.41 668.707 294.195 669.137 293.453C669.566 292.703 670.219 292.305 671.094 292.258C671.477 292.258 671.816 292.363 672.113 292.574C672.41 292.785 672.645 293.055 672.816 293.383C672.996 293.703 673.145 294.09 673.262 294.543C673.379 294.988 673.457 295.414 673.496 295.82C673.543 296.219 673.574 296.645 673.59 297.098C673.59 297.715 673.496 298.348 673.309 298.996C673.129 299.637 672.848 300.199 672.465 300.684C672.09 301.16 671.668 301.398 671.199 301.398C669.387 301.398 668.48 299.965 668.48 297.098ZM670.93 293.16C670.742 293.199 670.574 293.262 670.426 293.348C670.277 293.434 670.152 293.531 670.051 293.641C669.957 293.75 669.875 293.895 669.805 294.074C669.734 294.254 669.68 294.422 669.641 294.578C669.609 294.727 669.578 294.922 669.547 295.164C669.523 295.406 669.508 295.617 669.5 295.797C669.492 295.969 669.48 296.199 669.465 296.488C669.457 296.77 669.445 297 669.43 297.18C669.43 297.539 669.449 297.883 669.488 298.211C669.527 298.531 669.598 298.867 669.699 299.219C669.809 299.57 669.977 299.855 670.203 300.074C670.43 300.293 670.703 300.418 671.023 300.449C671.508 300.449 671.906 300.113 672.219 299.441C672.539 298.77 672.699 298.09 672.699 297.402C672.699 294.605 672.109 293.191 670.93 293.16ZM674.117 299.535C674.328 299.535 674.504 299.629 674.645 299.816C674.793 299.996 674.867 300.203 674.867 300.438C674.867 300.609 674.824 300.75 674.738 300.859C674.66 300.961 674.551 301.012 674.41 301.012C674.191 301.012 674.016 300.922 673.883 300.742C673.758 300.562 673.695 300.352 673.695 300.109C673.695 299.938 673.73 299.801 673.801 299.699C673.879 299.59 673.984 299.535 674.117 299.535ZM675.641 300.965V300.344C675.828 300.32 676.059 300.281 676.332 300.227C676.613 300.172 676.832 300.133 676.988 300.109C677.012 299.547 677.023 298.98 677.023 298.41C677.023 298.051 677.02 297.512 677.012 296.793C677.004 296.066 677 295.52 677 295.152C677 294.285 677.012 293.629 677.035 293.184C676.324 293.59 675.805 293.918 675.477 294.168L675.102 293.781C675.227 293.68 675.441 293.504 675.746 293.254C676.051 292.996 676.324 292.766 676.566 292.562C676.809 292.352 676.996 292.18 677.129 292.047C677.254 292.062 677.383 292.074 677.516 292.082C677.648 292.082 677.777 292.09 677.902 292.105C677.949 293.012 677.973 294.672 677.973 297.086C677.973 298.523 677.984 299.555 678.008 300.18C678.078 300.188 678.246 300.219 678.512 300.273C678.785 300.32 678.996 300.352 679.145 300.367L679.332 300.988C678.941 300.988 678.602 300.988 678.312 300.988C678.023 300.988 677.637 300.988 677.152 300.988C676.676 300.988 676.301 300.988 676.027 300.988C675.762 300.98 675.633 300.973 675.641 300.965ZM683.727 300.191L684.09 300.965C683.504 300.98 682.586 300.992 681.336 301C680.086 301 679.422 301 679.344 301C679.344 300.938 679.34 300.828 679.332 300.672C679.332 300.516 679.332 300.391 679.332 300.297C679.48 300.039 679.727 299.73 680.07 299.371C680.414 299.004 680.758 298.648 681.102 298.305C681.445 297.953 681.781 297.57 682.109 297.156C682.445 296.742 682.719 296.281 682.93 295.773C683.141 295.258 683.246 294.73 683.246 294.191C683.246 293.848 683.125 293.57 682.883 293.359C682.641 293.141 682.348 293.031 682.004 293.031C681.605 293.031 681.234 293.195 680.891 293.523C680.555 293.844 680.32 294.336 680.188 295L679.66 294.812C679.691 294.055 679.938 293.465 680.398 293.043C680.867 292.621 681.406 292.41 682.016 292.41C682.562 292.41 683.031 292.582 683.422 292.926C683.812 293.27 684.008 293.75 684.008 294.367C684.008 294.875 683.93 295.371 683.773 295.855C683.617 296.332 683.391 296.781 683.094 297.203C682.797 297.625 682.52 297.988 682.262 298.293C682.004 298.59 681.68 298.938 681.289 299.336C680.906 299.727 680.637 300.008 680.48 300.18C680.746 300.195 680.973 300.203 681.16 300.203C681.355 300.203 681.66 300.199 682.074 300.191C682.488 300.176 682.797 300.168 683 300.168C683.188 300.168 683.43 300.176 683.727 300.191Z M668.48 141.098C668.488 139.41 668.707 138.195 669.137 137.453C669.566 136.703 670.219 136.305 671.094 136.258C671.477 136.258 671.816 136.363 672.113 136.574C672.41 136.785 672.645 137.055 672.816 137.383C672.996 137.703 673.145 138.09 673.262 138.543C673.379 138.988 673.457 139.414 673.496 139.82C673.543 140.219 673.574 140.645 673.59 141.098C673.59 141.715 673.496 142.348 673.309 142.996C673.129 143.637 672.848 144.199 672.465 144.684C672.09 145.16 671.668 145.398 671.199 145.398C669.387 145.398 668.48 143.965 668.48 141.098ZM670.93 137.16C670.742 137.199 670.574 137.262 670.426 137.348C670.277 137.434 670.152 137.531 670.051 137.641C669.957 137.75 669.875 137.895 669.805 138.074C669.734 138.254 669.68 138.422 669.641 138.578C669.609 138.727 669.578 138.922 669.547 139.164C669.523 139.406 669.508 139.617 669.5 139.797C669.492 139.969 669.48 140.199 669.465 140.488C669.457 140.77 669.445 141 669.43 141.18C669.43 141.539 669.449 141.883 669.488 142.211C669.527 142.531 669.598 142.867 669.699 143.219C669.809 143.57 669.977 143.855 670.203 144.074C670.43 144.293 670.703 144.418 671.023 144.449C671.508 144.449 671.906 144.113 672.219 143.441C672.539 142.77 672.699 142.09 672.699 141.402C672.699 138.605 672.109 137.191 670.93 137.16ZM674.117 143.535C674.328 143.535 674.504 143.629 674.645 143.816C674.793 143.996 674.867 144.203 674.867 144.438C674.867 144.609 674.824 144.75 674.738 144.859C674.66 144.961 674.551 145.012 674.41 145.012C674.191 145.012 674.016 144.922 673.883 144.742C673.758 144.562 673.695 144.352 673.695 144.109C673.695 143.938 673.73 143.801 673.801 143.699C673.879 143.59 673.984 143.535 674.117 143.535ZM679.754 136.68L679.883 137.207C679.5 137.277 679.062 137.312 678.57 137.312C677.836 137.312 677.367 137.324 677.164 137.348C677.047 138.246 676.895 139.199 676.707 140.207C676.934 140.16 677.152 140.137 677.363 140.137C678.051 140.137 678.66 140.41 679.191 140.957C679.723 141.496 679.988 142.121 679.988 142.832C679.988 143.504 679.727 144.078 679.203 144.555C678.68 145.031 678.035 145.27 677.27 145.27C676.527 145.27 675.805 145.023 675.102 144.531C675.109 144.523 675.168 144.398 675.277 144.156C675.395 143.914 675.508 143.793 675.617 143.793C675.672 143.793 675.723 143.812 675.77 143.852C676.309 144.258 676.816 144.461 677.293 144.461C677.777 144.461 678.176 144.27 678.488 143.887C678.801 143.504 678.957 143.074 678.957 142.598C678.957 142.152 678.809 141.773 678.512 141.461C678.223 141.148 677.797 140.992 677.234 140.992C677.031 140.992 676.84 141.008 676.66 141.039C676.504 140.953 676.332 140.867 676.145 140.781C675.957 140.695 675.801 140.621 675.676 140.559C675.855 139.855 676.004 139.152 676.121 138.449C676.238 137.746 676.395 137.117 676.59 136.562C676.863 136.586 677.367 136.598 678.102 136.598C678.836 136.598 679.387 136.625 679.754 136.68ZM680.762 144.965V144.344C680.949 144.32 681.18 144.281 681.453 144.227C681.734 144.172 681.953 144.133 682.109 144.109C682.133 143.547 682.145 142.98 682.145 142.41C682.145 142.051 682.141 141.512 682.133 140.793C682.125 140.066 682.121 139.52 682.121 139.152C682.121 138.285 682.133 137.629 682.156 137.184C681.445 137.59 680.926 137.918 680.598 138.168L680.223 137.781C680.348 137.68 680.562 137.504 680.867 137.254C681.172 136.996 681.445 136.766 681.688 136.562C681.93 136.352 682.117 136.18 682.25 136.047C682.375 136.062 682.504 136.074 682.637 136.082C682.77 136.082 682.898 136.09 683.023 136.105C683.07 137.012 683.094 138.672 683.094 141.086C683.094 142.523 683.105 143.555 683.129 144.18C683.199 144.188 683.367 144.219 683.633 144.273C683.906 144.32 684.117 144.352 684.266 144.367L684.453 144.988C684.062 144.988 683.723 144.988 683.434 144.988C683.145 144.988 682.758 144.988 682.273 144.988C681.797 144.988 681.422 144.988 681.148 144.988C680.883 144.98 680.754 144.973 680.762 144.965Z M668.48 115.098C668.488 113.41 668.707 112.195 669.137 111.453C669.566 110.703 670.219 110.305 671.094 110.258C671.477 110.258 671.816 110.363 672.113 110.574C672.41 110.785 672.645 111.055 672.816 111.383C672.996 111.703 673.145 112.09 673.262 112.543C673.379 112.988 673.457 113.414 673.496 113.82C673.543 114.219 673.574 114.645 673.59 115.098C673.59 115.715 673.496 116.348 673.309 116.996C673.129 117.637 672.848 118.199 672.465 118.684C672.09 119.16 671.668 119.398 671.199 119.398C669.387 119.398 668.48 117.965 668.48 115.098ZM670.93 111.16C670.742 111.199 670.574 111.262 670.426 111.348C670.277 111.434 670.152 111.531 670.051 111.641C669.957 111.75 669.875 111.895 669.805 112.074C669.734 112.254 669.68 112.422 669.641 112.578C669.609 112.727 669.578 112.922 669.547 113.164C669.523 113.406 669.508 113.617 669.5 113.797C669.492 113.969 669.48 114.199 669.465 114.488C669.457 114.77 669.445 115 669.43 115.18C669.43 115.539 669.449 115.883 669.488 116.211C669.527 116.531 669.598 116.867 669.699 117.219C669.809 117.57 669.977 117.855 670.203 118.074C670.43 118.293 670.703 118.418 671.023 118.449C671.508 118.449 671.906 118.113 672.219 117.441C672.539 116.77 672.699 116.09 672.699 115.402C672.699 112.605 672.109 111.191 670.93 111.16ZM674.117 117.535C674.328 117.535 674.504 117.629 674.645 117.816C674.793 117.996 674.867 118.203 674.867 118.438C674.867 118.609 674.824 118.75 674.738 118.859C674.66 118.961 674.551 119.012 674.41 119.012C674.191 119.012 674.016 118.922 673.883 118.742C673.758 118.562 673.695 118.352 673.695 118.109C673.695 117.938 673.73 117.801 673.801 117.699C673.879 117.59 673.984 117.535 674.117 117.535ZM679.742 110.516L679.941 111.043C678.113 111.824 677.027 112.871 676.684 114.184C676.996 113.98 677.312 113.879 677.633 113.879C678.305 113.879 678.867 114.184 679.32 114.793C679.773 115.395 680 116.164 680 117.102C680 117.773 679.793 118.309 679.379 118.707C678.973 119.105 678.453 119.305 677.82 119.305C677.227 119.305 676.703 119.09 676.25 118.66C675.805 118.223 675.582 117.645 675.582 116.926C675.582 116.473 675.59 116.078 675.605 115.742C675.629 115.406 675.672 115.039 675.734 114.641C675.805 114.234 675.898 113.883 676.016 113.586C676.133 113.289 676.293 112.98 676.496 112.66C676.707 112.332 676.957 112.047 677.246 111.805C677.535 111.555 677.887 111.32 678.301 111.102C678.723 110.875 679.203 110.68 679.742 110.516ZM676.426 116.586C676.426 117.234 676.547 117.723 676.789 118.051C677.031 118.371 677.332 118.531 677.691 118.531C678.074 118.531 678.406 118.402 678.688 118.145C678.969 117.887 679.109 117.531 679.109 117.078C679.109 116.391 678.953 115.816 678.641 115.355C678.328 114.895 677.949 114.664 677.504 114.664C677.301 114.664 677.129 114.703 676.988 114.781C676.848 114.852 676.742 114.934 676.672 115.027C676.602 115.121 676.547 115.27 676.508 115.473C676.469 115.668 676.445 115.836 676.438 115.977C676.43 116.109 676.426 116.312 676.426 116.586ZM681.008 118.965V118.344C681.195 118.32 681.426 118.281 681.699 118.227C681.98 118.172 682.199 118.133 682.355 118.109C682.379 117.547 682.391 116.98 682.391 116.41C682.391 116.051 682.387 115.512 682.379 114.793C682.371 114.066 682.367 113.52 682.367 113.152C682.367 112.285 682.379 111.629 682.402 111.184C681.691 111.59 681.172 111.918 680.844 112.168L680.469 111.781C680.594 111.68 680.809 111.504 681.113 111.254C681.418 110.996 681.691 110.766 681.934 110.562C682.176 110.352 682.363 110.18 682.496 110.047C682.621 110.062 682.75 110.074 682.883 110.082C683.016 110.082 683.145 110.09 683.27 110.105C683.316 111.012 683.34 112.672 683.34 115.086C683.34 116.523 683.352 117.555 683.375 118.18C683.445 118.188 683.613 118.219 683.879 118.273C684.152 118.32 684.363 118.352 684.512 118.367L684.699 118.988C684.309 118.988 683.969 118.988 683.68 118.988C683.391 118.988 683.004 118.988 682.52 118.988C682.043 118.988 681.668 118.988 681.395 118.988C681.129 118.98 681 118.973 681.008 118.965Z M668.48 323.098C668.488 321.41 668.707 320.195 669.137 319.453C669.566 318.703 670.219 318.305 671.094 318.258C671.477 318.258 671.816 318.363 672.113 318.574C672.41 318.785 672.645 319.055 672.816 319.383C672.996 319.703 673.145 320.09 673.262 320.543C673.379 320.988 673.457 321.414 673.496 321.82C673.543 322.219 673.574 322.645 673.59 323.098C673.59 323.715 673.496 324.348 673.309 324.996C673.129 325.637 672.848 326.199 672.465 326.684C672.09 327.16 671.668 327.398 671.199 327.398C669.387 327.398 668.48 325.965 668.48 323.098ZM670.93 319.16C670.742 319.199 670.574 319.262 670.426 319.348C670.277 319.434 670.152 319.531 670.051 319.641C669.957 319.75 669.875 319.895 669.805 320.074C669.734 320.254 669.68 320.422 669.641 320.578C669.609 320.727 669.578 320.922 669.547 321.164C669.523 321.406 669.508 321.617 669.5 321.797C669.492 321.969 669.48 322.199 669.465 322.488C669.457 322.77 669.445 323 669.43 323.18C669.43 323.539 669.449 323.883 669.488 324.211C669.527 324.531 669.598 324.867 669.699 325.219C669.809 325.57 669.977 325.855 670.203 326.074C670.43 326.293 670.703 326.418 671.023 326.449C671.508 326.449 671.906 326.113 672.219 325.441C672.539 324.77 672.699 324.09 672.699 323.402C672.699 320.605 672.109 319.191 670.93 319.16ZM674.117 325.535C674.328 325.535 674.504 325.629 674.645 325.816C674.793 325.996 674.867 326.203 674.867 326.438C674.867 326.609 674.824 326.75 674.738 326.859C674.66 326.961 674.551 327.012 674.41 327.012C674.191 327.012 674.016 326.922 673.883 326.742C673.758 326.562 673.695 326.352 673.695 326.109C673.695 325.938 673.73 325.801 673.801 325.699C673.879 325.59 673.984 325.535 674.117 325.535ZM675.641 326.965V326.344C675.828 326.32 676.059 326.281 676.332 326.227C676.613 326.172 676.832 326.133 676.988 326.109C677.012 325.547 677.023 324.98 677.023 324.41C677.023 324.051 677.02 323.512 677.012 322.793C677.004 322.066 677 321.52 677 321.152C677 320.285 677.012 319.629 677.035 319.184C676.324 319.59 675.805 319.918 675.477 320.168L675.102 319.781C675.227 319.68 675.441 319.504 675.746 319.254C676.051 318.996 676.324 318.766 676.566 318.562C676.809 318.352 676.996 318.18 677.129 318.047C677.254 318.062 677.383 318.074 677.516 318.082C677.648 318.082 677.777 318.09 677.902 318.105C677.949 319.012 677.973 320.672 677.973 323.086C677.973 324.523 677.984 325.555 678.008 326.18C678.078 326.188 678.246 326.219 678.512 326.273C678.785 326.32 678.996 326.352 679.145 326.367L679.332 326.988C678.941 326.988 678.602 326.988 678.312 326.988C678.023 326.988 677.637 326.988 677.152 326.988C676.676 326.988 676.301 326.988 676.027 326.988C675.762 326.98 675.633 326.973 675.641 326.965ZM679.941 327.223L679.754 326.695C681.574 325.922 682.656 324.875 683 323.555C682.672 323.766 682.355 323.871 682.051 323.871C681.379 323.871 680.816 323.57 680.363 322.969C679.918 322.359 679.695 321.582 679.695 320.637C679.695 319.965 679.898 319.434 680.305 319.043C680.711 318.645 681.23 318.445 681.863 318.445C682.465 318.445 682.988 318.664 683.434 319.102C683.887 319.531 684.113 320.105 684.113 320.824C684.113 321.277 684.102 321.672 684.078 322.008C684.062 322.344 684.02 322.711 683.949 323.109C683.887 323.508 683.797 323.859 683.68 324.164C683.562 324.461 683.398 324.773 683.188 325.102C682.984 325.422 682.738 325.703 682.449 325.945C682.16 326.188 681.805 326.422 681.383 326.648C680.961 326.867 680.48 327.059 679.941 327.223ZM683.27 321.152C683.27 320.504 683.145 320.02 682.895 319.699C682.652 319.371 682.352 319.207 681.992 319.207C681.609 319.207 681.277 319.336 680.996 319.594C680.715 319.852 680.574 320.207 680.574 320.66C680.574 321.348 680.73 321.922 681.043 322.383C681.355 322.844 681.738 323.074 682.191 323.074C682.395 323.074 682.566 323.039 682.707 322.969C682.848 322.891 682.953 322.805 683.023 322.711C683.094 322.617 683.148 322.473 683.188 322.277C683.227 322.074 683.25 321.906 683.258 321.773C683.266 321.633 683.27 321.426 683.27 321.152Z M666.48 245.098C666.488 243.41 666.707 242.195 667.137 241.453C667.566 240.703 668.219 240.305 669.094 240.258C669.477 240.258 669.816 240.363 670.113 240.574C670.41 240.785 670.645 241.055 670.816 241.383C670.996 241.703 671.145 242.09 671.262 242.543C671.379 242.988 671.457 243.414 671.496 243.82C671.543 244.219 671.574 244.645 671.59 245.098C671.59 245.715 671.496 246.348 671.309 246.996C671.129 247.637 670.848 248.199 670.465 248.684C670.09 249.16 669.668 249.398 669.199 249.398C667.387 249.398 666.48 247.965 666.48 245.098ZM668.93 241.16C668.742 241.199 668.574 241.262 668.426 241.348C668.277 241.434 668.152 241.531 668.051 241.641C667.957 241.75 667.875 241.895 667.805 242.074C667.734 242.254 667.68 242.422 667.641 242.578C667.609 242.727 667.578 242.922 667.547 243.164C667.523 243.406 667.508 243.617 667.5 243.797C667.492 243.969 667.48 244.199 667.465 244.488C667.457 244.77 667.445 245 667.43 245.18C667.43 245.539 667.449 245.883 667.488 246.211C667.527 246.531 667.598 246.867 667.699 247.219C667.809 247.57 667.977 247.855 668.203 248.074C668.43 248.293 668.703 248.418 669.023 248.449C669.508 248.449 669.906 248.113 670.219 247.441C670.539 246.77 670.699 246.09 670.699 245.402C670.699 242.605 670.109 241.191 668.93 241.16ZM672.117 247.535C672.328 247.535 672.504 247.629 672.645 247.816C672.793 247.996 672.867 248.203 672.867 248.438C672.867 248.609 672.824 248.75 672.738 248.859C672.66 248.961 672.551 249.012 672.41 249.012C672.191 249.012 672.016 248.922 671.883 248.742C671.758 248.562 671.695 248.352 671.695 248.109C671.695 247.938 671.73 247.801 671.801 247.699C671.879 247.59 671.984 247.535 672.117 247.535ZM673.711 249.223L673.523 248.695C675.344 247.922 676.426 246.875 676.77 245.555C676.441 245.766 676.125 245.871 675.82 245.871C675.148 245.871 674.586 245.57 674.133 244.969C673.688 244.359 673.465 243.582 673.465 242.637C673.465 241.965 673.668 241.434 674.074 241.043C674.48 240.645 675 240.445 675.633 240.445C676.234 240.445 676.758 240.664 677.203 241.102C677.656 241.531 677.883 242.105 677.883 242.824C677.883 243.277 677.871 243.672 677.848 244.008C677.832 244.344 677.789 244.711 677.719 245.109C677.656 245.508 677.566 245.859 677.449 246.164C677.332 246.461 677.168 246.773 676.957 247.102C676.754 247.422 676.508 247.703 676.219 247.945C675.93 248.188 675.574 248.422 675.152 248.648C674.73 248.867 674.25 249.059 673.711 249.223ZM677.039 243.152C677.039 242.504 676.914 242.02 676.664 241.699C676.422 241.371 676.121 241.207 675.762 241.207C675.379 241.207 675.047 241.336 674.766 241.594C674.484 241.852 674.344 242.207 674.344 242.66C674.344 243.348 674.5 243.922 674.812 244.383C675.125 244.844 675.508 245.074 675.961 245.074C676.164 245.074 676.336 245.039 676.477 244.969C676.617 244.891 676.723 244.805 676.793 244.711C676.863 244.617 676.918 244.473 676.957 244.277C676.996 244.074 677.02 243.906 677.027 243.773C677.035 243.633 677.039 243.426 677.039 243.152ZM678.832 245.098C678.84 243.41 679.059 242.195 679.488 241.453C679.918 240.703 680.57 240.305 681.445 240.258C681.828 240.258 682.168 240.363 682.465 240.574C682.762 240.785 682.996 241.055 683.168 241.383C683.348 241.703 683.496 242.09 683.613 242.543C683.73 242.988 683.809 243.414 683.848 243.82C683.895 244.219 683.926 244.645 683.941 245.098C683.941 245.715 683.848 246.348 683.66 246.996C683.48 247.637 683.199 248.199 682.816 248.684C682.441 249.16 682.02 249.398 681.551 249.398C679.738 249.398 678.832 247.965 678.832 245.098ZM681.281 241.16C681.094 241.199 680.926 241.262 680.777 241.348C680.629 241.434 680.504 241.531 680.402 241.641C680.309 241.75 680.227 241.895 680.156 242.074C680.086 242.254 680.031 242.422 679.992 242.578C679.961 242.727 679.93 242.922 679.898 243.164C679.875 243.406 679.859 243.617 679.852 243.797C679.844 243.969 679.832 244.199 679.816 244.488C679.809 244.77 679.797 245 679.781 245.18C679.781 245.539 679.801 245.883 679.84 246.211C679.879 246.531 679.949 246.867 680.051 247.219C680.16 247.57 680.328 247.855 680.555 248.074C680.781 248.293 681.055 248.418 681.375 248.449C681.859 248.449 682.258 248.113 682.57 247.441C682.891 246.77 683.051 246.09 683.051 245.402C683.051 242.605 682.461 241.191 681.281 241.16Z M667.48 167.098C667.488 165.41 667.707 164.195 668.137 163.453C668.566 162.703 669.219 162.305 670.094 162.258C670.477 162.258 670.816 162.363 671.113 162.574C671.41 162.785 671.645 163.055 671.816 163.383C671.996 163.703 672.145 164.09 672.262 164.543C672.379 164.988 672.457 165.414 672.496 165.82C672.543 166.219 672.574 166.645 672.59 167.098C672.59 167.715 672.496 168.348 672.309 168.996C672.129 169.637 671.848 170.199 671.465 170.684C671.09 171.16 670.668 171.398 670.199 171.398C668.387 171.398 667.48 169.965 667.48 167.098ZM669.93 163.16C669.742 163.199 669.574 163.262 669.426 163.348C669.277 163.434 669.152 163.531 669.051 163.641C668.957 163.75 668.875 163.895 668.805 164.074C668.734 164.254 668.68 164.422 668.641 164.578C668.609 164.727 668.578 164.922 668.547 165.164C668.523 165.406 668.508 165.617 668.5 165.797C668.492 165.969 668.48 166.199 668.465 166.488C668.457 166.77 668.445 167 668.43 167.18C668.43 167.539 668.449 167.883 668.488 168.211C668.527 168.531 668.598 168.867 668.699 169.219C668.809 169.57 668.977 169.855 669.203 170.074C669.43 170.293 669.703 170.418 670.023 170.449C670.508 170.449 670.906 170.113 671.219 169.441C671.539 168.77 671.699 168.09 671.699 167.402C671.699 164.605 671.109 163.191 669.93 163.16ZM673.117 169.535C673.328 169.535 673.504 169.629 673.645 169.816C673.793 169.996 673.867 170.203 673.867 170.438C673.867 170.609 673.824 170.75 673.738 170.859C673.66 170.961 673.551 171.012 673.41 171.012C673.191 171.012 673.016 170.922 672.883 170.742C672.758 170.562 672.695 170.352 672.695 170.109C672.695 169.938 672.73 169.801 672.801 169.699C672.879 169.59 672.984 169.535 673.117 169.535ZM679.562 168.645C679.562 169.496 679.355 170.129 678.941 170.543C678.527 170.949 677.895 171.152 677.043 171.152C675.402 171.152 674.582 170.301 674.582 168.598C674.582 167.988 674.707 167.453 674.957 166.992C675.207 166.531 675.551 166.266 675.988 166.195C675.543 166.188 675.207 166.023 674.98 165.703C674.754 165.383 674.641 164.984 674.641 164.508C674.641 163.773 674.84 163.195 675.238 162.773C675.645 162.352 676.219 162.141 676.961 162.141C677.742 162.141 678.355 162.336 678.801 162.727C679.246 163.117 679.469 163.719 679.469 164.531C679.469 165.008 679.355 165.406 679.129 165.727C678.902 166.047 678.566 166.211 678.121 166.219C678.574 166.289 678.926 166.559 679.176 167.027C679.434 167.496 679.562 168.035 679.562 168.645ZM677.172 170.309C677.609 170.309 677.973 170.141 678.262 169.805C678.551 169.461 678.695 169.055 678.695 168.586C678.695 168.117 678.535 167.715 678.215 167.379C677.895 167.035 677.465 166.859 676.926 166.852C676.457 166.992 676.105 167.215 675.871 167.52C675.637 167.816 675.52 168.152 675.52 168.527C675.52 168.996 675.676 169.41 675.988 169.77C676.301 170.129 676.695 170.309 677.172 170.309ZM677.172 162.785C676.648 162.824 676.25 162.996 675.977 163.301C675.703 163.605 675.566 163.957 675.566 164.355C675.566 164.762 675.695 165.113 675.953 165.41C676.219 165.707 676.57 165.855 677.008 165.855C677.516 165.848 677.902 165.711 678.168 165.445C678.434 165.172 678.566 164.844 678.566 164.461C678.566 164.078 678.438 163.723 678.18 163.395C677.93 163.066 677.594 162.863 677.172 162.785ZM684.426 170.191L684.789 170.965C684.203 170.98 683.285 170.992 682.035 171C680.785 171 680.121 171 680.043 171C680.043 170.938 680.039 170.828 680.031 170.672C680.031 170.516 680.031 170.391 680.031 170.297C680.18 170.039 680.426 169.73 680.77 169.371C681.113 169.004 681.457 168.648 681.801 168.305C682.145 167.953 682.48 167.57 682.809 167.156C683.145 166.742 683.418 166.281 683.629 165.773C683.84 165.258 683.945 164.73 683.945 164.191C683.945 163.848 683.824 163.57 683.582 163.359C683.34 163.141 683.047 163.031 682.703 163.031C682.305 163.031 681.934 163.195 681.59 163.523C681.254 163.844 681.02 164.336 680.887 165L680.359 164.812C680.391 164.055 680.637 163.465 681.098 163.043C681.566 162.621 682.105 162.41 682.715 162.41C683.262 162.41 683.73 162.582 684.121 162.926C684.512 163.27 684.707 163.75 684.707 164.367C684.707 164.875 684.629 165.371 684.473 165.855C684.316 166.332 684.09 166.781 683.793 167.203C683.496 167.625 683.219 167.988 682.961 168.293C682.703 168.59 682.379 168.938 681.988 169.336C681.605 169.727 681.336 170.008 681.18 170.18C681.445 170.195 681.672 170.203 681.859 170.203C682.055 170.203 682.359 170.199 682.773 170.191C683.188 170.176 683.496 170.168 683.699 170.168C683.887 170.168 684.129 170.176 684.426 170.191Z M667.48 219.098C667.488 217.41 667.707 216.195 668.137 215.453C668.566 214.703 669.219 214.305 670.094 214.258C670.477 214.258 670.816 214.363 671.113 214.574C671.41 214.785 671.645 215.055 671.816 215.383C671.996 215.703 672.145 216.09 672.262 216.543C672.379 216.988 672.457 217.414 672.496 217.82C672.543 218.219 672.574 218.645 672.59 219.098C672.59 219.715 672.496 220.348 672.309 220.996C672.129 221.637 671.848 222.199 671.465 222.684C671.09 223.16 670.668 223.398 670.199 223.398C668.387 223.398 667.48 221.965 667.48 219.098ZM669.93 215.16C669.742 215.199 669.574 215.262 669.426 215.348C669.277 215.434 669.152 215.531 669.051 215.641C668.957 215.75 668.875 215.895 668.805 216.074C668.734 216.254 668.68 216.422 668.641 216.578C668.609 216.727 668.578 216.922 668.547 217.164C668.523 217.406 668.508 217.617 668.5 217.797C668.492 217.969 668.48 218.199 668.465 218.488C668.457 218.77 668.445 219 668.43 219.18C668.43 219.539 668.449 219.883 668.488 220.211C668.527 220.531 668.598 220.867 668.699 221.219C668.809 221.57 668.977 221.855 669.203 222.074C669.43 222.293 669.703 222.418 670.023 222.449C670.508 222.449 670.906 222.113 671.219 221.441C671.539 220.77 671.699 220.09 671.699 219.402C671.699 216.605 671.109 215.191 669.93 215.16ZM673.117 221.535C673.328 221.535 673.504 221.629 673.645 221.816C673.793 221.996 673.867 222.203 673.867 222.438C673.867 222.609 673.824 222.75 673.738 222.859C673.66 222.961 673.551 223.012 673.41 223.012C673.191 223.012 673.016 222.922 672.883 222.742C672.758 222.562 672.695 222.352 672.695 222.109C672.695 221.938 672.73 221.801 672.801 221.699C672.879 221.59 672.984 221.535 673.117 221.535ZM678.496 222.191L678.859 222.965C678.273 222.98 677.355 222.992 676.105 223C674.855 223 674.191 223 674.113 223C674.113 222.938 674.109 222.828 674.102 222.672C674.102 222.516 674.102 222.391 674.102 222.297C674.25 222.039 674.496 221.73 674.84 221.371C675.184 221.004 675.527 220.648 675.871 220.305C676.215 219.953 676.551 219.57 676.879 219.156C677.215 218.742 677.488 218.281 677.699 217.773C677.91 217.258 678.016 216.73 678.016 216.191C678.016 215.848 677.895 215.57 677.652 215.359C677.41 215.141 677.117 215.031 676.773 215.031C676.375 215.031 676.004 215.195 675.66 215.523C675.324 215.844 675.09 216.336 674.957 217L674.43 216.812C674.461 216.055 674.707 215.465 675.168 215.043C675.637 214.621 676.176 214.41 676.785 214.41C677.332 214.41 677.801 214.582 678.191 214.926C678.582 215.27 678.777 215.75 678.777 216.367C678.777 216.875 678.699 217.371 678.543 217.855C678.387 218.332 678.16 218.781 677.863 219.203C677.566 219.625 677.289 219.988 677.031 220.293C676.773 220.59 676.449 220.938 676.059 221.336C675.676 221.727 675.406 222.008 675.25 222.18C675.516 222.195 675.742 222.203 675.93 222.203C676.125 222.203 676.43 222.199 676.844 222.191C677.258 222.176 677.566 222.168 677.77 222.168C677.957 222.168 678.199 222.176 678.496 222.191ZM679.457 223.223L679.27 222.695C681.09 221.922 682.172 220.875 682.516 219.555C682.188 219.766 681.871 219.871 681.566 219.871C680.895 219.871 680.332 219.57 679.879 218.969C679.434 218.359 679.211 217.582 679.211 216.637C679.211 215.965 679.414 215.434 679.82 215.043C680.227 214.645 680.746 214.445 681.379 214.445C681.98 214.445 682.504 214.664 682.949 215.102C683.402 215.531 683.629 216.105 683.629 216.824C683.629 217.277 683.617 217.672 683.594 218.008C683.578 218.344 683.535 218.711 683.465 219.109C683.402 219.508 683.312 219.859 683.195 220.164C683.078 220.461 682.914 220.773 682.703 221.102C682.5 221.422 682.254 221.703 681.965 221.945C681.676 222.188 681.32 222.422 680.898 222.648C680.477 222.867 679.996 223.059 679.457 223.223ZM682.785 217.152C682.785 216.504 682.66 216.02 682.41 215.699C682.168 215.371 681.867 215.207 681.508 215.207C681.125 215.207 680.793 215.336 680.512 215.594C680.23 215.852 680.09 216.207 680.09 216.66C680.09 217.348 680.246 217.922 680.559 218.383C680.871 218.844 681.254 219.074 681.707 219.074C681.91 219.074 682.082 219.039 682.223 218.969C682.363 218.891 682.469 218.805 682.539 218.711C682.609 218.617 682.664 218.473 682.703 218.277C682.742 218.074 682.766 217.906 682.773 217.773C682.781 217.633 682.785 217.426 682.785 217.152Z M676.312 347.07C676.734 347.07 677.086 347.258 677.367 347.633C677.664 347.992 677.812 348.406 677.812 348.875C677.812 349.219 677.727 349.5 677.555 349.719C677.398 349.922 677.18 350.023 676.898 350.023C676.461 350.023 676.109 349.844 675.844 349.484C675.594 349.125 675.469 348.703 675.469 348.219C675.469 347.875 675.539 347.602 675.68 347.398C675.836 347.18 676.047 347.07 676.312 347.07Z M676.312 357.07C676.734 357.07 677.086 357.258 677.367 357.633C677.664 357.992 677.812 358.406 677.812 358.875C677.812 359.219 677.727 359.5 677.555 359.719C677.398 359.922 677.18 360.023 676.898 360.023C676.461 360.023 676.109 359.844 675.844 359.484C675.594 359.125 675.469 358.703 675.469 358.219C675.469 357.875 675.539 357.602 675.68 357.398C675.836 357.18 676.047 357.07 676.312 357.07Z M676.312 367.07C676.734 367.07 677.086 367.258 677.367 367.633C677.664 367.992 677.812 368.406 677.812 368.875C677.812 369.219 677.727 369.5 677.555 369.719C677.398 369.922 677.18 370.023 676.898 370.023C676.461 370.023 676.109 369.844 675.844 369.484C675.594 369.125 675.469 368.703 675.469 368.219C675.469 367.875 675.539 367.602 675.68 367.398C675.836 367.18 676.047 367.07 676.312 367.07Z';

  var dataset12Alcohol = 'M750.539 196.965V196.344C750.727 196.32 750.957 196.281 751.23 196.227C751.512 196.172 751.73 196.133 751.887 196.109C751.91 195.547 751.922 194.98 751.922 194.41C751.922 194.051 751.918 193.512 751.91 192.793C751.902 192.066 751.898 191.52 751.898 191.152C751.898 190.285 751.91 189.629 751.934 189.184C751.223 189.59 750.703 189.918 750.375 190.168L750 189.781C750.125 189.68 750.34 189.504 750.645 189.254C750.949 188.996 751.223 188.766 751.465 188.562C751.707 188.352 751.895 188.18 752.027 188.047C752.152 188.062 752.281 188.074 752.414 188.082C752.547 188.082 752.676 188.09 752.801 188.105C752.848 189.012 752.871 190.672 752.871 193.086C752.871 194.523 752.883 195.555 752.906 196.18C752.977 196.188 753.145 196.219 753.41 196.273C753.684 196.32 753.895 196.352 754.043 196.367L754.23 196.988C753.84 196.988 753.5 196.988 753.211 196.988C752.922 196.988 752.535 196.988 752.051 196.988C751.574 196.988 751.199 196.988 750.926 196.988C750.66 196.98 750.531 196.973 750.539 196.965ZM754.711 193.098C754.719 191.41 754.938 190.195 755.367 189.453C755.797 188.703 756.449 188.305 757.324 188.258C757.707 188.258 758.047 188.363 758.344 188.574C758.641 188.785 758.875 189.055 759.047 189.383C759.227 189.703 759.375 190.09 759.492 190.543C759.609 190.988 759.688 191.414 759.727 191.82C759.773 192.219 759.805 192.645 759.82 193.098C759.82 193.715 759.727 194.348 759.539 194.996C759.359 195.637 759.078 196.199 758.695 196.684C758.32 197.16 757.898 197.398 757.43 197.398C755.617 197.398 754.711 195.965 754.711 193.098ZM757.16 189.16C756.973 189.199 756.805 189.262 756.656 189.348C756.508 189.434 756.383 189.531 756.281 189.641C756.188 189.75 756.105 189.895 756.035 190.074C755.965 190.254 755.91 190.422 755.871 190.578C755.84 190.727 755.809 190.922 755.777 191.164C755.754 191.406 755.738 191.617 755.73 191.797C755.723 191.969 755.711 192.199 755.695 192.488C755.688 192.77 755.676 193 755.66 193.18C755.66 193.539 755.68 193.883 755.719 194.211C755.758 194.531 755.828 194.867 755.93 195.219C756.039 195.57 756.207 195.855 756.434 196.074C756.66 196.293 756.934 196.418 757.254 196.449C757.738 196.449 758.137 196.113 758.449 195.441C758.77 194.77 758.93 194.09 758.93 193.402C758.93 190.605 758.34 189.191 757.16 189.16ZM760.348 195.535C760.559 195.535 760.734 195.629 760.875 195.816C761.023 195.996 761.098 196.203 761.098 196.438C761.098 196.609 761.055 196.75 760.969 196.859C760.891 196.961 760.781 197.012 760.641 197.012C760.422 197.012 760.246 196.922 760.113 196.742C759.988 196.562 759.926 196.352 759.926 196.109C759.926 195.938 759.961 195.801 760.031 195.699C760.109 195.59 760.215 195.535 760.348 195.535ZM761.871 196.965V196.344C762.059 196.32 762.289 196.281 762.562 196.227C762.844 196.172 763.062 196.133 763.219 196.109C763.242 195.547 763.254 194.98 763.254 194.41C763.254 194.051 763.25 193.512 763.242 192.793C763.234 192.066 763.23 191.52 763.23 191.152C763.23 190.285 763.242 189.629 763.266 189.184C762.555 189.59 762.035 189.918 761.707 190.168L761.332 189.781C761.457 189.68 761.672 189.504 761.977 189.254C762.281 188.996 762.555 188.766 762.797 188.562C763.039 188.352 763.227 188.18 763.359 188.047C763.484 188.062 763.613 188.074 763.746 188.082C763.879 188.082 764.008 188.09 764.133 188.105C764.18 189.012 764.203 190.672 764.203 193.086C764.203 194.523 764.215 195.555 764.238 196.18C764.309 196.188 764.477 196.219 764.742 196.273C765.016 196.32 765.227 196.352 765.375 196.367L765.562 196.988C765.172 196.988 764.832 196.988 764.543 196.988C764.254 196.988 763.867 196.988 763.383 196.988C762.906 196.988 762.531 196.988 762.258 196.988C761.992 196.98 761.863 196.973 761.871 196.965Z M755.609 275.223L755.422 274.695C757.242 273.922 758.324 272.875 758.668 271.555C758.34 271.766 758.023 271.871 757.719 271.871C757.047 271.871 756.484 271.57 756.031 270.969C755.586 270.359 755.363 269.582 755.363 268.637C755.363 267.965 755.566 267.434 755.973 267.043C756.379 266.645 756.898 266.445 757.531 266.445C758.133 266.445 758.656 266.664 759.102 267.102C759.555 267.531 759.781 268.105 759.781 268.824C759.781 269.277 759.77 269.672 759.746 270.008C759.73 270.344 759.688 270.711 759.617 271.109C759.555 271.508 759.465 271.859 759.348 272.164C759.23 272.461 759.066 272.773 758.855 273.102C758.652 273.422 758.406 273.703 758.117 273.945C757.828 274.188 757.473 274.422 757.051 274.648C756.629 274.867 756.148 275.059 755.609 275.223ZM758.938 269.152C758.938 268.504 758.812 268.02 758.562 267.699C758.32 267.371 758.02 267.207 757.66 267.207C757.277 267.207 756.945 267.336 756.664 267.594C756.383 267.852 756.242 268.207 756.242 268.66C756.242 269.348 756.398 269.922 756.711 270.383C757.023 270.844 757.406 271.074 757.859 271.074C758.062 271.074 758.234 271.039 758.375 270.969C758.516 270.891 758.621 270.805 758.691 270.711C758.762 270.617 758.816 270.473 758.855 270.277C758.895 270.074 758.918 269.906 758.926 269.773C758.934 269.633 758.938 269.426 758.938 269.152ZM759.676 273.535C759.887 273.535 760.062 273.629 760.203 273.816C760.352 273.996 760.426 274.203 760.426 274.438C760.426 274.609 760.383 274.75 760.297 274.859C760.219 274.961 760.109 275.012 759.969 275.012C759.75 275.012 759.574 274.922 759.441 274.742C759.316 274.562 759.254 274.352 759.254 274.109C759.254 273.938 759.289 273.801 759.359 273.699C759.438 273.59 759.543 273.535 759.676 273.535ZM762.113 275.094L761.199 274.824L764.363 267.066C762.543 267.012 761.309 266.957 760.66 266.902L760.543 266.375C761.09 266.312 761.918 266.281 763.027 266.281C764.137 266.273 764.902 266.254 765.324 266.223L765.266 267.242L762.113 275.094Z M755.609 93.2227L755.422 92.6953C757.242 91.9219 758.324 90.875 758.668 89.5547C758.34 89.7656 758.023 89.8711 757.719 89.8711C757.047 89.8711 756.484 89.5703 756.031 88.9688C755.586 88.3594 755.363 87.582 755.363 86.6367C755.363 85.9648 755.566 85.4336 755.973 85.043C756.379 84.6445 756.898 84.4453 757.531 84.4453C758.133 84.4453 758.656 84.6641 759.102 85.1016C759.555 85.5312 759.781 86.1055 759.781 86.8242C759.781 87.2773 759.77 87.6719 759.746 88.0078C759.73 88.3438 759.688 88.7109 759.617 89.1094C759.555 89.5078 759.465 89.8594 759.348 90.1641C759.23 90.4609 759.066 90.7734 758.855 91.1016C758.652 91.4219 758.406 91.7031 758.117 91.9453C757.828 92.1875 757.473 92.4219 757.051 92.6484C756.629 92.8672 756.148 93.0586 755.609 93.2227ZM758.938 87.1523C758.938 86.5039 758.812 86.0195 758.562 85.6992C758.32 85.3711 758.02 85.207 757.66 85.207C757.277 85.207 756.945 85.3359 756.664 85.5938C756.383 85.8516 756.242 86.207 756.242 86.6602C756.242 87.3477 756.398 87.9219 756.711 88.3828C757.023 88.8438 757.406 89.0742 757.859 89.0742C758.062 89.0742 758.234 89.0391 758.375 88.9688C758.516 88.8906 758.621 88.8047 758.691 88.7109C758.762 88.6172 758.816 88.4727 758.855 88.2773C758.895 88.0742 758.918 87.9062 758.926 87.7734C758.934 87.6328 758.938 87.4258 758.938 87.1523ZM759.676 91.5352C759.887 91.5352 760.062 91.6289 760.203 91.8164C760.352 91.9961 760.426 92.2031 760.426 92.4375C760.426 92.6094 760.383 92.75 760.297 92.8594C760.219 92.9609 760.109 93.0117 759.969 93.0117C759.75 93.0117 759.574 92.9219 759.441 92.7422C759.316 92.5625 759.254 92.3516 759.254 92.1094C759.254 91.9375 759.289 91.8008 759.359 91.6992C759.438 91.5898 759.543 91.5352 759.676 91.5352ZM765.465 89.5898L765.582 90.1172C765.176 90.1641 764.887 90.1953 764.715 90.2109C764.73 90.5703 764.75 91.0234 764.773 91.5703C764.805 92.1172 764.824 92.5664 764.832 92.918C764.762 93.1602 764.629 93.2812 764.434 93.2812C764.293 93.2812 764.156 93.2227 764.023 93.1055C763.891 92.9883 763.809 92.8477 763.777 92.6836C763.785 92.4414 763.812 91.6445 763.859 90.293C763.609 90.3086 763.41 90.3164 763.262 90.3164C763.027 90.3164 762.664 90.3047 762.172 90.2812C761.688 90.25 761.332 90.2344 761.105 90.2344C760.996 90.2344 760.848 90.2422 760.66 90.2578C760.676 90.0703 760.684 89.9414 760.684 89.8711C760.684 89.8242 760.68 89.75 760.672 89.6484C760.672 89.5391 760.672 89.457 760.672 89.4023C761.977 87.207 763.031 85.5781 763.836 84.5156C764.078 84.5156 764.41 84.5664 764.832 84.668C764.816 85.0352 764.793 85.832 764.762 87.0586C764.738 88.2773 764.715 89.1016 764.691 89.5312C765.035 89.5469 765.293 89.5664 765.465 89.5898ZM761.527 89.4375L763.883 89.5078C763.906 89.0625 763.93 88.4023 763.953 87.5273C763.977 86.6523 763.996 85.9922 764.012 85.5469C763.691 85.875 763.227 86.5625 762.617 87.6094C762.016 88.6484 761.652 89.2578 761.527 89.4375Z M755.609 301.223L755.422 300.695C757.242 299.922 758.324 298.875 758.668 297.555C758.34 297.766 758.023 297.871 757.719 297.871C757.047 297.871 756.484 297.57 756.031 296.969C755.586 296.359 755.363 295.582 755.363 294.637C755.363 293.965 755.566 293.434 755.973 293.043C756.379 292.645 756.898 292.445 757.531 292.445C758.133 292.445 758.656 292.664 759.102 293.102C759.555 293.531 759.781 294.105 759.781 294.824C759.781 295.277 759.77 295.672 759.746 296.008C759.73 296.344 759.688 296.711 759.617 297.109C759.555 297.508 759.465 297.859 759.348 298.164C759.23 298.461 759.066 298.773 758.855 299.102C758.652 299.422 758.406 299.703 758.117 299.945C757.828 300.188 757.473 300.422 757.051 300.648C756.629 300.867 756.148 301.059 755.609 301.223ZM758.938 295.152C758.938 294.504 758.812 294.02 758.562 293.699C758.32 293.371 758.02 293.207 757.66 293.207C757.277 293.207 756.945 293.336 756.664 293.594C756.383 293.852 756.242 294.207 756.242 294.66C756.242 295.348 756.398 295.922 756.711 296.383C757.023 296.844 757.406 297.074 757.859 297.074C758.062 297.074 758.234 297.039 758.375 296.969C758.516 296.891 758.621 296.805 758.691 296.711C758.762 296.617 758.816 296.473 758.855 296.277C758.895 296.074 758.918 295.906 758.926 295.773C758.934 295.633 758.938 295.426 758.938 295.152ZM759.676 299.535C759.887 299.535 760.062 299.629 760.203 299.816C760.352 299.996 760.426 300.203 760.426 300.438C760.426 300.609 760.383 300.75 760.297 300.859C760.219 300.961 760.109 301.012 759.969 301.012C759.75 301.012 759.574 300.922 759.441 300.742C759.316 300.562 759.254 300.352 759.254 300.109C759.254 299.938 759.289 299.801 759.359 299.699C759.438 299.59 759.543 299.535 759.676 299.535ZM765.465 297.59L765.582 298.117C765.176 298.164 764.887 298.195 764.715 298.211C764.73 298.57 764.75 299.023 764.773 299.57C764.805 300.117 764.824 300.566 764.832 300.918C764.762 301.16 764.629 301.281 764.434 301.281C764.293 301.281 764.156 301.223 764.023 301.105C763.891 300.988 763.809 300.848 763.777 300.684C763.785 300.441 763.812 299.645 763.859 298.293C763.609 298.309 763.41 298.316 763.262 298.316C763.027 298.316 762.664 298.305 762.172 298.281C761.688 298.25 761.332 298.234 761.105 298.234C760.996 298.234 760.848 298.242 760.66 298.258C760.676 298.07 760.684 297.941 760.684 297.871C760.684 297.824 760.68 297.75 760.672 297.648C760.672 297.539 760.672 297.457 760.672 297.402C761.977 295.207 763.031 293.578 763.836 292.516C764.078 292.516 764.41 292.566 764.832 292.668C764.816 293.035 764.793 293.832 764.762 295.059C764.738 296.277 764.715 297.102 764.691 297.531C765.035 297.547 765.293 297.566 765.465 297.59ZM761.527 297.438L763.883 297.508C763.906 297.062 763.93 296.402 763.953 295.527C763.977 294.652 763.996 293.992 764.012 293.547C763.691 293.875 763.227 294.562 762.617 295.609C762.016 296.648 761.652 297.258 761.527 297.438Z M754.609 145.223L754.422 144.695C756.242 143.922 757.324 142.875 757.668 141.555C757.34 141.766 757.023 141.871 756.719 141.871C756.047 141.871 755.484 141.57 755.031 140.969C754.586 140.359 754.363 139.582 754.363 138.637C754.363 137.965 754.566 137.434 754.973 137.043C755.379 136.645 755.898 136.445 756.531 136.445C757.133 136.445 757.656 136.664 758.102 137.102C758.555 137.531 758.781 138.105 758.781 138.824C758.781 139.277 758.77 139.672 758.746 140.008C758.73 140.344 758.688 140.711 758.617 141.109C758.555 141.508 758.465 141.859 758.348 142.164C758.23 142.461 758.066 142.773 757.855 143.102C757.652 143.422 757.406 143.703 757.117 143.945C756.828 144.188 756.473 144.422 756.051 144.648C755.629 144.867 755.148 145.059 754.609 145.223ZM757.938 139.152C757.938 138.504 757.812 138.02 757.562 137.699C757.32 137.371 757.02 137.207 756.66 137.207C756.277 137.207 755.945 137.336 755.664 137.594C755.383 137.852 755.242 138.207 755.242 138.66C755.242 139.348 755.398 139.922 755.711 140.383C756.023 140.844 756.406 141.074 756.859 141.074C757.062 141.074 757.234 141.039 757.375 140.969C757.516 140.891 757.621 140.805 757.691 140.711C757.762 140.617 757.816 140.473 757.855 140.277C757.895 140.074 757.918 139.906 757.926 139.773C757.934 139.633 757.938 139.426 757.938 139.152ZM758.676 143.535C758.887 143.535 759.062 143.629 759.203 143.816C759.352 143.996 759.426 144.203 759.426 144.438C759.426 144.609 759.383 144.75 759.297 144.859C759.219 144.961 759.109 145.012 758.969 145.012C758.75 145.012 758.574 144.922 758.441 144.742C758.316 144.562 758.254 144.352 758.254 144.109C758.254 143.938 758.289 143.801 758.359 143.699C758.438 143.59 758.543 143.535 758.676 143.535ZM765.121 142.645C765.121 143.496 764.914 144.129 764.5 144.543C764.086 144.949 763.453 145.152 762.602 145.152C760.961 145.152 760.141 144.301 760.141 142.598C760.141 141.988 760.266 141.453 760.516 140.992C760.766 140.531 761.109 140.266 761.547 140.195C761.102 140.188 760.766 140.023 760.539 139.703C760.312 139.383 760.199 138.984 760.199 138.508C760.199 137.773 760.398 137.195 760.797 136.773C761.203 136.352 761.777 136.141 762.52 136.141C763.301 136.141 763.914 136.336 764.359 136.727C764.805 137.117 765.027 137.719 765.027 138.531C765.027 139.008 764.914 139.406 764.688 139.727C764.461 140.047 764.125 140.211 763.68 140.219C764.133 140.289 764.484 140.559 764.734 141.027C764.992 141.496 765.121 142.035 765.121 142.645ZM762.73 144.309C763.168 144.309 763.531 144.141 763.82 143.805C764.109 143.461 764.254 143.055 764.254 142.586C764.254 142.117 764.094 141.715 763.773 141.379C763.453 141.035 763.023 140.859 762.484 140.852C762.016 140.992 761.664 141.215 761.43 141.52C761.195 141.816 761.078 142.152 761.078 142.527C761.078 142.996 761.234 143.41 761.547 143.77C761.859 144.129 762.254 144.309 762.73 144.309ZM762.73 136.785C762.207 136.824 761.809 136.996 761.535 137.301C761.262 137.605 761.125 137.957 761.125 138.355C761.125 138.762 761.254 139.113 761.512 139.41C761.777 139.707 762.129 139.855 762.566 139.855C763.074 139.848 763.461 139.711 763.727 139.445C763.992 139.172 764.125 138.844 764.125 138.461C764.125 138.078 763.996 137.723 763.738 137.395C763.488 137.066 763.152 136.863 762.73 136.785Z M754.609 119.223L754.422 118.695C756.242 117.922 757.324 116.875 757.668 115.555C757.34 115.766 757.023 115.871 756.719 115.871C756.047 115.871 755.484 115.57 755.031 114.969C754.586 114.359 754.363 113.582 754.363 112.637C754.363 111.965 754.566 111.434 754.973 111.043C755.379 110.645 755.898 110.445 756.531 110.445C757.133 110.445 757.656 110.664 758.102 111.102C758.555 111.531 758.781 112.105 758.781 112.824C758.781 113.277 758.77 113.672 758.746 114.008C758.73 114.344 758.688 114.711 758.617 115.109C758.555 115.508 758.465 115.859 758.348 116.164C758.23 116.461 758.066 116.773 757.855 117.102C757.652 117.422 757.406 117.703 757.117 117.945C756.828 118.188 756.473 118.422 756.051 118.648C755.629 118.867 755.148 119.059 754.609 119.223ZM757.938 113.152C757.938 112.504 757.812 112.02 757.562 111.699C757.32 111.371 757.02 111.207 756.66 111.207C756.277 111.207 755.945 111.336 755.664 111.594C755.383 111.852 755.242 112.207 755.242 112.66C755.242 113.348 755.398 113.922 755.711 114.383C756.023 114.844 756.406 115.074 756.859 115.074C757.062 115.074 757.234 115.039 757.375 114.969C757.516 114.891 757.621 114.805 757.691 114.711C757.762 114.617 757.816 114.473 757.855 114.277C757.895 114.074 757.918 113.906 757.926 113.773C757.934 113.633 757.938 113.426 757.938 113.152ZM758.676 117.535C758.887 117.535 759.062 117.629 759.203 117.816C759.352 117.996 759.426 118.203 759.426 118.438C759.426 118.609 759.383 118.75 759.297 118.859C759.219 118.961 759.109 119.012 758.969 119.012C758.75 119.012 758.574 118.922 758.441 118.742C758.316 118.562 758.254 118.352 758.254 118.109C758.254 117.938 758.289 117.801 758.359 117.699C758.438 117.59 758.543 117.535 758.676 117.535ZM765.121 116.645C765.121 117.496 764.914 118.129 764.5 118.543C764.086 118.949 763.453 119.152 762.602 119.152C760.961 119.152 760.141 118.301 760.141 116.598C760.141 115.988 760.266 115.453 760.516 114.992C760.766 114.531 761.109 114.266 761.547 114.195C761.102 114.188 760.766 114.023 760.539 113.703C760.312 113.383 760.199 112.984 760.199 112.508C760.199 111.773 760.398 111.195 760.797 110.773C761.203 110.352 761.777 110.141 762.52 110.141C763.301 110.141 763.914 110.336 764.359 110.727C764.805 111.117 765.027 111.719 765.027 112.531C765.027 113.008 764.914 113.406 764.688 113.727C764.461 114.047 764.125 114.211 763.68 114.219C764.133 114.289 764.484 114.559 764.734 115.027C764.992 115.496 765.121 116.035 765.121 116.645ZM762.73 118.309C763.168 118.309 763.531 118.141 763.82 117.805C764.109 117.461 764.254 117.055 764.254 116.586C764.254 116.117 764.094 115.715 763.773 115.379C763.453 115.035 763.023 114.859 762.484 114.852C762.016 114.992 761.664 115.215 761.43 115.52C761.195 115.816 761.078 116.152 761.078 116.527C761.078 116.996 761.234 117.41 761.547 117.77C761.859 118.129 762.254 118.309 762.73 118.309ZM762.73 110.785C762.207 110.824 761.809 110.996 761.535 111.301C761.262 111.605 761.125 111.957 761.125 112.355C761.125 112.762 761.254 113.113 761.512 113.41C761.777 113.707 762.129 113.855 762.566 113.855C763.074 113.848 763.461 113.711 763.727 113.445C763.992 113.172 764.125 112.844 764.125 112.461C764.125 112.078 763.996 111.723 763.738 111.395C763.488 111.066 763.152 110.863 762.73 110.785Z M754.609 327.223L754.422 326.695C756.242 325.922 757.324 324.875 757.668 323.555C757.34 323.766 757.023 323.871 756.719 323.871C756.047 323.871 755.484 323.57 755.031 322.969C754.586 322.359 754.363 321.582 754.363 320.637C754.363 319.965 754.566 319.434 754.973 319.043C755.379 318.645 755.898 318.445 756.531 318.445C757.133 318.445 757.656 318.664 758.102 319.102C758.555 319.531 758.781 320.105 758.781 320.824C758.781 321.277 758.77 321.672 758.746 322.008C758.73 322.344 758.688 322.711 758.617 323.109C758.555 323.508 758.465 323.859 758.348 324.164C758.23 324.461 758.066 324.773 757.855 325.102C757.652 325.422 757.406 325.703 757.117 325.945C756.828 326.188 756.473 326.422 756.051 326.648C755.629 326.867 755.148 327.059 754.609 327.223ZM757.938 321.152C757.938 320.504 757.812 320.02 757.562 319.699C757.32 319.371 757.02 319.207 756.66 319.207C756.277 319.207 755.945 319.336 755.664 319.594C755.383 319.852 755.242 320.207 755.242 320.66C755.242 321.348 755.398 321.922 755.711 322.383C756.023 322.844 756.406 323.074 756.859 323.074C757.062 323.074 757.234 323.039 757.375 322.969C757.516 322.891 757.621 322.805 757.691 322.711C757.762 322.617 757.816 322.473 757.855 322.277C757.895 322.074 757.918 321.906 757.926 321.773C757.934 321.633 757.938 321.426 757.938 321.152ZM758.676 325.535C758.887 325.535 759.062 325.629 759.203 325.816C759.352 325.996 759.426 326.203 759.426 326.438C759.426 326.609 759.383 326.75 759.297 326.859C759.219 326.961 759.109 327.012 758.969 327.012C758.75 327.012 758.574 326.922 758.441 326.742C758.316 326.562 758.254 326.352 758.254 326.109C758.254 325.938 758.289 325.801 758.359 325.699C758.438 325.59 758.543 325.535 758.676 325.535ZM764.301 318.516L764.5 319.043C762.672 319.824 761.586 320.871 761.242 322.184C761.555 321.98 761.871 321.879 762.191 321.879C762.863 321.879 763.426 322.184 763.879 322.793C764.332 323.395 764.559 324.164 764.559 325.102C764.559 325.773 764.352 326.309 763.938 326.707C763.531 327.105 763.012 327.305 762.379 327.305C761.785 327.305 761.262 327.09 760.809 326.66C760.363 326.223 760.141 325.645 760.141 324.926C760.141 324.473 760.148 324.078 760.164 323.742C760.188 323.406 760.23 323.039 760.293 322.641C760.363 322.234 760.457 321.883 760.574 321.586C760.691 321.289 760.852 320.98 761.055 320.66C761.266 320.332 761.516 320.047 761.805 319.805C762.094 319.555 762.445 319.32 762.859 319.102C763.281 318.875 763.762 318.68 764.301 318.516ZM760.984 324.586C760.984 325.234 761.105 325.723 761.348 326.051C761.59 326.371 761.891 326.531 762.25 326.531C762.633 326.531 762.965 326.402 763.246 326.145C763.527 325.887 763.668 325.531 763.668 325.078C763.668 324.391 763.512 323.816 763.199 323.355C762.887 322.895 762.508 322.664 762.062 322.664C761.859 322.664 761.688 322.703 761.547 322.781C761.406 322.852 761.301 322.934 761.23 323.027C761.16 323.121 761.105 323.27 761.066 323.473C761.027 323.668 761.004 323.836 760.996 323.977C760.988 324.109 760.984 324.312 760.984 324.586Z M755.609 249.223L755.422 248.695C757.242 247.922 758.324 246.875 758.668 245.555C758.34 245.766 758.023 245.871 757.719 245.871C757.047 245.871 756.484 245.57 756.031 244.969C755.586 244.359 755.363 243.582 755.363 242.637C755.363 241.965 755.566 241.434 755.973 241.043C756.379 240.645 756.898 240.445 757.531 240.445C758.133 240.445 758.656 240.664 759.102 241.102C759.555 241.531 759.781 242.105 759.781 242.824C759.781 243.277 759.77 243.672 759.746 244.008C759.73 244.344 759.688 244.711 759.617 245.109C759.555 245.508 759.465 245.859 759.348 246.164C759.23 246.461 759.066 246.773 758.855 247.102C758.652 247.422 758.406 247.703 758.117 247.945C757.828 248.188 757.473 248.422 757.051 248.648C756.629 248.867 756.148 249.059 755.609 249.223ZM758.938 243.152C758.938 242.504 758.812 242.02 758.562 241.699C758.32 241.371 758.02 241.207 757.66 241.207C757.277 241.207 756.945 241.336 756.664 241.594C756.383 241.852 756.242 242.207 756.242 242.66C756.242 243.348 756.398 243.922 756.711 244.383C757.023 244.844 757.406 245.074 757.859 245.074C758.062 245.074 758.234 245.039 758.375 244.969C758.516 244.891 758.621 244.805 758.691 244.711C758.762 244.617 758.816 244.473 758.855 244.277C758.895 244.074 758.918 243.906 758.926 243.773C758.934 243.633 758.938 243.426 758.938 243.152ZM759.676 247.535C759.887 247.535 760.062 247.629 760.203 247.816C760.352 247.996 760.426 248.203 760.426 248.438C760.426 248.609 760.383 248.75 760.297 248.859C760.219 248.961 760.109 249.012 759.969 249.012C759.75 249.012 759.574 248.922 759.441 248.742C759.316 248.562 759.254 248.352 759.254 248.109C759.254 247.938 759.289 247.801 759.359 247.699C759.438 247.59 759.543 247.535 759.676 247.535ZM765.055 248.191L765.418 248.965C764.832 248.98 763.914 248.992 762.664 249C761.414 249 760.75 249 760.672 249C760.672 248.938 760.668 248.828 760.66 248.672C760.66 248.516 760.66 248.391 760.66 248.297C760.809 248.039 761.055 247.73 761.398 247.371C761.742 247.004 762.086 246.648 762.43 246.305C762.773 245.953 763.109 245.57 763.438 245.156C763.773 244.742 764.047 244.281 764.258 243.773C764.469 243.258 764.574 242.73 764.574 242.191C764.574 241.848 764.453 241.57 764.211 241.359C763.969 241.141 763.676 241.031 763.332 241.031C762.934 241.031 762.562 241.195 762.219 241.523C761.883 241.844 761.648 242.336 761.516 243L760.988 242.812C761.02 242.055 761.266 241.465 761.727 241.043C762.195 240.621 762.734 240.41 763.344 240.41C763.891 240.41 764.359 240.582 764.75 240.926C765.141 241.27 765.336 241.75 765.336 242.367C765.336 242.875 765.258 243.371 765.102 243.855C764.945 244.332 764.719 244.781 764.422 245.203C764.125 245.625 763.848 245.988 763.59 246.293C763.332 246.59 763.008 246.938 762.617 247.336C762.234 247.727 761.965 248.008 761.809 248.18C762.074 248.195 762.301 248.203 762.488 248.203C762.684 248.203 762.988 248.199 763.402 248.191C763.816 248.176 764.125 248.168 764.328 248.168C764.516 248.168 764.758 248.176 765.055 248.191Z M755.609 171.223L755.422 170.695C757.242 169.922 758.324 168.875 758.668 167.555C758.34 167.766 758.023 167.871 757.719 167.871C757.047 167.871 756.484 167.57 756.031 166.969C755.586 166.359 755.363 165.582 755.363 164.637C755.363 163.965 755.566 163.434 755.973 163.043C756.379 162.645 756.898 162.445 757.531 162.445C758.133 162.445 758.656 162.664 759.102 163.102C759.555 163.531 759.781 164.105 759.781 164.824C759.781 165.277 759.77 165.672 759.746 166.008C759.73 166.344 759.688 166.711 759.617 167.109C759.555 167.508 759.465 167.859 759.348 168.164C759.23 168.461 759.066 168.773 758.855 169.102C758.652 169.422 758.406 169.703 758.117 169.945C757.828 170.188 757.473 170.422 757.051 170.648C756.629 170.867 756.148 171.059 755.609 171.223ZM758.938 165.152C758.938 164.504 758.812 164.02 758.562 163.699C758.32 163.371 758.02 163.207 757.66 163.207C757.277 163.207 756.945 163.336 756.664 163.594C756.383 163.852 756.242 164.207 756.242 164.66C756.242 165.348 756.398 165.922 756.711 166.383C757.023 166.844 757.406 167.074 757.859 167.074C758.062 167.074 758.234 167.039 758.375 166.969C758.516 166.891 758.621 166.805 758.691 166.711C758.762 166.617 758.816 166.473 758.855 166.277C758.895 166.074 758.918 165.906 758.926 165.773C758.934 165.633 758.938 165.426 758.938 165.152ZM759.676 169.535C759.887 169.535 760.062 169.629 760.203 169.816C760.352 169.996 760.426 170.203 760.426 170.438C760.426 170.609 760.383 170.75 760.297 170.859C760.219 170.961 760.109 171.012 759.969 171.012C759.75 171.012 759.574 170.922 759.441 170.742C759.316 170.562 759.254 170.352 759.254 170.109C759.254 169.938 759.289 169.801 759.359 169.699C759.438 169.59 759.543 169.535 759.676 169.535ZM765.465 167.59L765.582 168.117C765.176 168.164 764.887 168.195 764.715 168.211C764.73 168.57 764.75 169.023 764.773 169.57C764.805 170.117 764.824 170.566 764.832 170.918C764.762 171.16 764.629 171.281 764.434 171.281C764.293 171.281 764.156 171.223 764.023 171.105C763.891 170.988 763.809 170.848 763.777 170.684C763.785 170.441 763.812 169.645 763.859 168.293C763.609 168.309 763.41 168.316 763.262 168.316C763.027 168.316 762.664 168.305 762.172 168.281C761.688 168.25 761.332 168.234 761.105 168.234C760.996 168.234 760.848 168.242 760.66 168.258C760.676 168.07 760.684 167.941 760.684 167.871C760.684 167.824 760.68 167.75 760.672 167.648C760.672 167.539 760.672 167.457 760.672 167.402C761.977 165.207 763.031 163.578 763.836 162.516C764.078 162.516 764.41 162.566 764.832 162.668C764.816 163.035 764.793 163.832 764.762 165.059C764.738 166.277 764.715 167.102 764.691 167.531C765.035 167.547 765.293 167.566 765.465 167.59ZM761.527 167.438L763.883 167.508C763.906 167.062 763.93 166.402 763.953 165.527C763.977 164.652 763.996 163.992 764.012 163.547C763.691 163.875 763.227 164.562 762.617 165.609C762.016 166.648 761.652 167.258 761.527 167.438Z M755.609 223.223L755.422 222.695C757.242 221.922 758.324 220.875 758.668 219.555C758.34 219.766 758.023 219.871 757.719 219.871C757.047 219.871 756.484 219.57 756.031 218.969C755.586 218.359 755.363 217.582 755.363 216.637C755.363 215.965 755.566 215.434 755.973 215.043C756.379 214.645 756.898 214.445 757.531 214.445C758.133 214.445 758.656 214.664 759.102 215.102C759.555 215.531 759.781 216.105 759.781 216.824C759.781 217.277 759.77 217.672 759.746 218.008C759.73 218.344 759.688 218.711 759.617 219.109C759.555 219.508 759.465 219.859 759.348 220.164C759.23 220.461 759.066 220.773 758.855 221.102C758.652 221.422 758.406 221.703 758.117 221.945C757.828 222.188 757.473 222.422 757.051 222.648C756.629 222.867 756.148 223.059 755.609 223.223ZM758.938 217.152C758.938 216.504 758.812 216.02 758.562 215.699C758.32 215.371 758.02 215.207 757.66 215.207C757.277 215.207 756.945 215.336 756.664 215.594C756.383 215.852 756.242 216.207 756.242 216.66C756.242 217.348 756.398 217.922 756.711 218.383C757.023 218.844 757.406 219.074 757.859 219.074C758.062 219.074 758.234 219.039 758.375 218.969C758.516 218.891 758.621 218.805 758.691 218.711C758.762 218.617 758.816 218.473 758.855 218.277C758.895 218.074 758.918 217.906 758.926 217.773C758.934 217.633 758.938 217.426 758.938 217.152ZM759.676 221.535C759.887 221.535 760.062 221.629 760.203 221.816C760.352 221.996 760.426 222.203 760.426 222.438C760.426 222.609 760.383 222.75 760.297 222.859C760.219 222.961 760.109 223.012 759.969 223.012C759.75 223.012 759.574 222.922 759.441 222.742C759.316 222.562 759.254 222.352 759.254 222.109C759.254 221.938 759.289 221.801 759.359 221.699C759.438 221.59 759.543 221.535 759.676 221.535ZM760.66 222.625L760.754 222.086C760.816 222.094 760.992 222.129 761.281 222.191C761.578 222.254 761.84 222.301 762.066 222.332C762.301 222.363 762.508 222.379 762.688 222.379C763.133 222.379 763.48 222.211 763.73 221.875C763.988 221.539 764.117 221.148 764.117 220.703C764.117 220.094 763.906 219.57 763.484 219.133C763.07 218.688 762.469 218.465 761.68 218.465C761.555 218.465 761.461 218.469 761.398 218.477V217.902C761.469 217.91 761.578 217.914 761.727 217.914C762.438 217.914 763.016 217.789 763.461 217.539C763.914 217.289 764.141 216.891 764.141 216.344C764.141 215.93 764.023 215.598 763.789 215.348C763.555 215.098 763.25 214.973 762.875 214.973C762.703 214.973 762.516 214.984 762.312 215.008C762.117 215.023 761.902 215.047 761.668 215.078C761.434 215.109 761.285 215.129 761.223 215.137L761.035 214.609C761.129 214.586 761.281 214.543 761.492 214.48C761.703 214.418 761.867 214.371 761.984 214.34C762.109 214.309 762.266 214.281 762.453 214.258C762.641 214.227 762.816 214.211 762.98 214.211C763.582 214.211 764.059 214.422 764.41 214.844C764.762 215.258 764.938 215.828 764.938 216.555C764.938 217.016 764.824 217.395 764.598 217.691C764.379 217.988 764.043 218.172 763.59 218.242C764.059 218.43 764.414 218.738 764.656 219.168C764.906 219.59 765.031 220.09 765.031 220.668C765.031 221.332 764.875 221.902 764.562 222.379C764.25 222.848 763.777 223.082 763.145 223.082C762.23 223.082 761.402 222.93 760.66 222.625Z M760.312 347.07C760.734 347.07 761.086 347.258 761.367 347.633C761.664 347.992 761.812 348.406 761.812 348.875C761.812 349.219 761.727 349.5 761.555 349.719C761.398 349.922 761.18 350.023 760.898 350.023C760.461 350.023 760.109 349.844 759.844 349.484C759.594 349.125 759.469 348.703 759.469 348.219C759.469 347.875 759.539 347.602 759.68 347.398C759.836 347.18 760.047 347.07 760.312 347.07Z M760.312 357.07C760.734 357.07 761.086 357.258 761.367 357.633C761.664 357.992 761.812 358.406 761.812 358.875C761.812 359.219 761.727 359.5 761.555 359.719C761.398 359.922 761.18 360.023 760.898 360.023C760.461 360.023 760.109 359.844 759.844 359.484C759.594 359.125 759.469 358.703 759.469 358.219C759.469 357.875 759.539 357.602 759.68 357.398C759.836 357.18 760.047 357.07 760.312 357.07Z M760.312 367.07C760.734 367.07 761.086 367.258 761.367 367.633C761.664 367.992 761.812 368.406 761.812 368.875C761.812 369.219 761.727 369.5 761.555 369.719C761.398 369.922 761.18 370.023 760.898 370.023C760.461 370.023 760.109 369.844 759.844 369.484C759.594 369.125 759.469 368.703 759.469 368.219C759.469 367.875 759.539 367.602 759.68 367.398C759.836 367.18 760.047 367.07 760.312 367.07Z M731.943 22.792C731.857 22.6533 731.815 22.52 731.815 22.392C731.815 22.2 731.879 22.04 732.007 21.912C732.039 21.752 732.113 21.6027 732.231 21.464C732.348 21.3147 732.476 21.2027 732.615 21.128C732.764 21.0427 732.881 21.0107 732.967 21.032C733.041 20.9147 733.191 20.808 733.414 20.712C733.639 20.6053 733.847 20.552 734.039 20.552C734.081 20.552 734.145 20.5627 734.231 20.584C734.348 20.456 734.503 20.392 734.695 20.392C734.844 20.392 734.951 20.4347 735.015 20.52C735.153 20.424 735.335 20.376 735.559 20.376C735.825 20.376 736.06 20.44 736.263 20.568C736.476 20.696 736.599 20.8667 736.631 21.08C736.823 21.144 736.967 21.2453 737.063 21.384C737.169 21.512 737.233 21.6933 737.255 21.928C737.393 22.0667 737.495 22.232 737.559 22.424C737.623 22.6053 737.655 22.792 737.655 22.984C737.655 23.2293 737.612 23.4267 737.527 23.576C737.601 23.6827 737.665 23.8427 737.719 24.056C737.772 24.2693 737.799 24.4773 737.799 24.68C737.799 24.7653 737.788 24.872 737.767 25C737.841 25.16 737.879 25.2667 737.879 25.32C737.879 25.352 737.863 25.4267 737.831 25.544C737.841 25.5867 737.852 25.64 737.863 25.704C737.873 25.7573 737.879 25.8267 737.879 25.912C737.879 26.072 737.82 26.216 737.703 26.344C737.745 26.4613 737.767 26.6053 737.767 26.776C737.767 27 737.713 27.1813 737.607 27.32C737.628 27.3627 737.639 27.432 737.639 27.528C737.639 27.752 737.548 27.9387 737.367 28.088C737.324 28.2373 737.244 28.3547 737.127 28.44C737.009 28.5147 736.881 28.552 736.743 28.552C736.604 28.552 736.492 28.5093 736.407 28.424C736.129 28.5413 735.905 28.6 735.735 28.6C735.649 28.6 735.585 28.5947 735.543 28.584C735.265 28.6693 735.031 28.712 734.839 28.712C734.7 28.712 734.508 28.6853 734.263 28.632C734.113 28.7173 733.969 28.76 733.831 28.76C733.703 28.76 733.585 28.7227 733.479 28.648C733.425 28.6587 733.345 28.664 733.239 28.664C732.823 28.664 732.503 28.4773 732.279 28.104C731.873 27.8693 731.671 27.5173 731.671 27.048C731.671 26.9307 731.676 26.84 731.687 26.776C731.591 26.712 731.543 26.5787 731.543 26.376C731.543 26.2373 731.569 26.1147 731.623 26.008C731.58 25.816 731.559 25.6933 731.559 25.64C731.559 25.3307 731.708 25.0533 732.007 24.808C732.124 24.5627 732.257 24.3973 732.407 24.312C732.567 24.2267 732.764 24.1627 732.999 24.12C733.063 23.9387 733.212 23.816 733.447 23.752C733.681 23.688 733.911 23.6667 734.135 23.688C734.199 23.6453 734.289 23.608 734.407 23.576C734.524 23.5333 734.641 23.512 734.759 23.512C734.887 23.512 734.999 23.5333 735.095 23.576C735.116 23.5547 735.169 23.544 735.255 23.544C735.319 23.544 735.383 23.5493 735.447 23.56C735.511 23.5707 735.553 23.5867 735.575 23.608C735.724 23.416 735.9 23.32 736.103 23.32C736.167 23.32 736.231 23.336 736.295 23.368V23.32C736.295 23.1387 736.332 23.0107 736.407 22.936C736.3 22.904 736.183 22.8133 736.055 22.664C735.937 22.504 735.868 22.36 735.847 22.232C735.676 22.1573 735.559 22.0347 735.495 21.864C735.367 21.96 735.217 22.008 735.047 22.008C734.929 22.008 734.817 21.976 734.711 21.912C734.529 21.9653 734.412 21.9867 734.359 21.976C734.209 22.0827 734.044 22.136 733.863 22.136C733.703 22.3493 733.516 22.4453 733.303 22.424C733.207 22.5947 733.073 22.744 732.903 22.872C732.743 23 732.577 23.064 732.407 23.064C732.215 23.064 732.06 22.9733 731.943 22.792ZM732.823 26.36C732.951 26.488 733.015 26.6107 733.015 26.728C733.015 26.8133 732.993 26.92 732.951 27.048C732.993 27.048 733.052 27.0747 733.127 27.128C733.212 27.1707 733.26 27.2187 733.271 27.272C733.356 27.24 733.463 27.224 733.591 27.224C733.825 27.224 733.98 27.2773 734.055 27.384C734.172 27.3413 734.295 27.32 734.423 27.32C734.625 27.32 734.785 27.3787 734.903 27.496C734.988 27.4107 735.127 27.3413 735.319 27.288C735.521 27.2347 735.703 27.208 735.863 27.208C735.959 27.016 736.129 26.904 736.375 26.872C736.396 26.7973 736.455 26.7013 736.551 26.584C736.508 26.52 736.471 26.4347 736.439 26.328C736.407 26.2213 736.391 26.1147 736.391 26.008C736.391 25.784 736.444 25.6187 736.551 25.512C736.433 25.3627 736.375 25.1867 736.375 24.984C736.375 24.8453 736.396 24.728 736.439 24.632C736.353 24.6853 736.257 24.712 736.151 24.712C736.055 24.712 735.975 24.6747 735.911 24.6C735.815 24.696 735.681 24.744 735.511 24.744C735.404 24.744 735.297 24.7173 735.191 24.664C735.073 24.7813 734.929 24.84 734.759 24.84C734.705 24.84 734.625 24.8187 734.519 24.776C734.359 24.936 734.215 24.984 734.087 24.92C734.023 25.0693 733.937 25.1707 733.831 25.224C733.735 25.2773 733.596 25.304 733.414 25.304C733.372 25.4213 733.297 25.5173 733.191 25.592C733.095 25.6667 732.993 25.6933 732.887 25.672C732.94 25.7467 732.967 25.832 732.967 25.928C732.967 26.088 732.919 26.232 732.823 26.36ZM741.124 27C741.231 27.1173 741.284 27.2987 741.284 27.544C741.284 27.704 741.257 27.8587 741.204 28.008C741.161 28.1467 741.103 28.248 741.028 28.312C741.06 28.5147 741.007 28.68 740.868 28.808C740.729 28.936 740.564 29 740.372 29C740.244 29 740.121 28.968 740.004 28.904C739.887 28.84 739.801 28.7333 739.748 28.584C739.695 28.4347 739.668 28.2747 739.668 28.104C739.668 27.8693 739.705 27.6827 739.78 27.544C739.727 27.448 739.7 27.3093 739.7 27.128C739.7 26.9253 739.732 26.7173 739.796 26.504C739.721 26.4187 739.684 26.264 739.684 26.04C739.684 25.752 739.727 25.5387 739.812 25.4C739.748 25.2507 739.716 25.1067 739.716 24.968C739.716 24.776 739.764 24.584 739.86 24.392C739.775 24.168 739.732 23.9653 739.732 23.784C739.732 23.6347 739.764 23.464 739.828 23.272C739.721 23.1547 739.668 23.0053 739.668 22.824C739.668 22.7493 739.673 22.696 739.684 22.664C739.567 22.5253 739.508 22.3653 739.508 22.184C739.508 22.0667 739.54 21.9547 739.604 21.848C739.529 21.6773 739.492 21.512 739.492 21.352C739.492 21.096 739.556 20.904 739.684 20.776C739.62 20.6267 739.588 20.4453 739.588 20.232C739.588 20.0613 739.615 19.9387 739.668 19.864C739.615 19.832 739.572 19.7733 739.54 19.688C739.508 19.6027 739.492 19.5067 739.492 19.4C739.492 19.2187 739.535 19.0693 739.62 18.952C739.588 18.8667 739.572 18.7547 739.572 18.616C739.572 18.5093 739.583 18.4133 739.604 18.328C739.476 18.2 739.412 18.0507 739.412 17.88C739.412 17.6987 739.487 17.544 739.636 17.416C739.796 17.2773 739.972 17.208 740.164 17.208C740.292 17.208 740.409 17.2507 740.516 17.336C740.623 17.4107 740.697 17.528 740.74 17.688C740.9 17.7947 740.98 17.96 740.98 18.184C740.98 18.2267 740.969 18.2907 740.948 18.376C741.076 18.504 741.14 18.6693 741.14 18.872C741.14 19.0427 741.087 19.176 740.98 19.272C741.033 19.3147 741.081 19.3893 741.124 19.496C741.167 19.592 741.188 19.6987 741.188 19.816C741.188 20.008 741.119 20.168 740.98 20.296C741.065 20.4133 741.108 20.5573 741.108 20.728C741.108 20.8987 741.076 21.0373 741.012 21.144C741.055 21.1867 741.076 21.2933 741.076 21.464C741.076 21.56 741.065 21.6613 741.044 21.768C741.023 21.8747 740.991 21.9493 740.948 21.992C741.108 22.1307 741.188 22.3067 741.188 22.52C741.188 22.6373 741.167 22.7387 741.124 22.824C741.188 22.92 741.22 23.064 741.22 23.256C741.22 23.5013 741.177 23.6987 741.092 23.848C741.167 23.9973 741.204 24.1947 741.204 24.44C741.204 24.7387 741.156 24.952 741.06 25.08C741.135 25.1867 741.172 25.32 741.172 25.48C741.172 25.6187 741.14 25.784 741.076 25.976C741.172 26.0827 741.22 26.248 741.22 26.472C741.22 26.664 741.188 26.84 741.124 27ZM747.881 28.648C747.785 28.7653 747.657 28.856 747.497 28.92C747.337 28.9733 747.171 29 747.001 29C746.787 29 746.638 28.9627 746.553 28.888C746.478 28.92 746.398 28.936 746.312 28.936C746.11 28.936 745.939 28.8667 745.801 28.728C745.673 28.7813 745.561 28.808 745.465 28.808C745.294 28.808 745.123 28.7653 744.953 28.68C744.793 28.584 744.681 28.472 744.617 28.344C744.414 28.3653 744.211 28.3067 744.009 28.168C743.817 28.0187 743.705 27.848 743.673 27.656C743.353 27.5173 743.134 27.144 743.017 26.536C742.953 26.4827 742.905 26.4027 742.873 26.296C742.841 26.1893 742.825 26.0827 742.825 25.976C742.825 25.9013 742.83 25.848 742.84 25.816C742.659 25.4533 742.569 25.08 742.569 24.696C742.569 24.344 742.643 24.056 742.793 23.832C742.771 23.7253 742.761 23.6453 742.761 23.592C742.761 23.4107 742.803 23.24 742.889 23.08C742.974 22.9093 743.081 22.7867 743.209 22.712C743.187 22.6587 743.177 22.584 743.177 22.488C743.177 22.3173 743.23 22.1627 743.337 22.024C743.454 21.8747 743.566 21.784 743.673 21.752C743.715 21.6027 743.817 21.464 743.977 21.336C744.147 21.1973 744.323 21.1333 744.505 21.144C744.718 20.824 744.931 20.68 745.145 20.712C745.241 20.584 745.369 20.4933 745.529 20.44C745.699 20.3867 745.854 20.3653 745.993 20.376C746.099 20.3013 746.217 20.264 746.345 20.264C746.473 20.264 746.601 20.296 746.729 20.36C746.814 20.296 746.931 20.264 747.081 20.264C747.187 20.264 747.289 20.28 747.385 20.312C747.481 20.344 747.545 20.3813 747.577 20.424C747.662 20.4027 747.753 20.424 747.849 20.488C747.945 20.5413 748.003 20.6107 748.025 20.696C748.206 20.696 748.361 20.7547 748.489 20.872C748.627 20.9787 748.729 21.1067 748.793 21.256C748.867 21.3947 748.899 21.5013 748.889 21.576C749.07 21.6613 749.198 21.8 749.273 21.992C749.347 22.1627 749.385 22.312 749.385 22.44C749.385 22.6533 749.305 22.8187 749.145 22.936C749.038 23.0107 748.926 23.048 748.809 23.048C748.617 23.048 748.43 22.968 748.249 22.808C748.078 22.648 747.966 22.4507 747.913 22.216C747.774 22.1947 747.641 22.1467 747.513 22.072C747.385 21.9867 747.283 21.896 747.209 21.8C747.177 21.8107 747.097 21.816 746.969 21.816C746.851 21.816 746.771 21.8107 746.729 21.8C746.633 21.896 746.526 21.944 746.409 21.944C746.291 21.944 746.179 21.9067 746.073 21.832C745.934 22.0453 745.731 22.152 745.465 22.152C745.326 22.344 745.203 22.4933 745.097 22.6C744.99 22.696 744.846 22.7333 744.664 22.712C744.675 22.744 744.681 22.792 744.681 22.856C744.681 22.984 744.649 23.096 744.585 23.192C744.521 23.288 744.446 23.3787 744.361 23.464C744.286 23.5387 744.227 23.5973 744.185 23.64C744.238 23.8 744.265 23.9493 744.265 24.088C744.265 24.3333 744.19 24.6267 744.041 24.968C744.094 25.0427 744.137 25.1493 744.169 25.288C744.211 25.416 744.233 25.544 744.233 25.672C744.233 25.7467 744.227 25.8 744.217 25.832C744.291 25.8853 744.355 25.976 744.409 26.104C744.473 26.232 744.505 26.3547 744.505 26.472C744.771 26.5573 744.99 26.68 745.161 26.84C745.342 27 745.433 27.1493 745.433 27.288C745.55 27.192 745.678 27.144 745.817 27.144C745.945 27.144 746.067 27.176 746.185 27.24C746.313 27.304 746.409 27.3893 746.473 27.496C746.526 27.4853 746.59 27.48 746.665 27.48C746.825 27.48 746.963 27.5333 747.081 27.64C747.123 27.5547 747.23 27.464 747.401 27.368C747.571 27.272 747.71 27.2293 747.817 27.24C747.881 27.1333 747.966 27.0533 748.073 27C748.19 26.9467 748.313 26.92 748.441 26.92C748.526 26.92 748.585 26.9253 748.617 26.936C748.755 26.7653 748.942 26.68 749.177 26.68C749.379 26.68 749.555 26.7493 749.705 26.888C749.854 27.0267 749.929 27.1973 749.929 27.4C749.929 27.6347 749.827 27.832 749.625 27.992C749.433 28.1413 749.214 28.216 748.969 28.216C748.873 28.216 748.803 28.2107 748.761 28.2C748.846 28.2213 748.835 28.2693 748.729 28.344C748.633 28.4187 748.494 28.4933 748.313 28.568C748.131 28.632 747.987 28.6587 747.881 28.648ZM755.558 28.808C755.43 28.936 755.232 29 754.966 29C754.763 29 754.598 28.968 754.47 28.904C754.278 28.9467 754.107 28.968 753.958 28.968C753.542 28.968 753.243 28.8613 753.062 28.648C753.019 28.6587 752.96 28.664 752.886 28.664C752.64 28.664 752.454 28.552 752.326 28.328C752.219 28.3387 752.08 28.2853 751.91 28.168C751.75 28.04 751.68 27.9173 751.702 27.8C751.531 27.7573 751.387 27.656 751.27 27.496C751.163 27.3253 751.115 27.1333 751.126 26.92C751.008 26.8773 750.918 26.792 750.854 26.664C750.79 26.536 750.758 26.392 750.758 26.232C750.758 26.0613 750.784 25.9387 750.838 25.864C750.72 25.6827 750.662 25.4747 750.662 25.24C750.662 24.9947 750.736 24.7973 750.886 24.648C750.768 24.5627 750.71 24.4347 750.71 24.264C750.71 24.1573 750.736 24.0507 750.79 23.944C750.843 23.8373 750.912 23.7627 750.998 23.72C750.976 23.5707 750.992 23.432 751.046 23.304C751.11 23.1653 751.195 23.064 751.302 23C751.28 22.968 751.27 22.92 751.27 22.856C751.27 22.76 751.302 22.664 751.366 22.568C751.44 22.472 751.52 22.4133 751.606 22.392C751.595 22.36 751.59 22.3173 751.59 22.264C751.59 22.04 751.675 21.848 751.846 21.688C752.016 21.5173 752.182 21.4427 752.342 21.464C752.342 21.3147 752.406 21.192 752.534 21.096C752.672 20.9893 752.848 20.936 753.062 20.936C753.158 20.936 753.232 20.9413 753.286 20.952C753.36 20.792 753.488 20.664 753.67 20.568C753.851 20.4613 754.038 20.408 754.23 20.408C754.358 20.408 754.464 20.4347 754.549 20.488C754.699 20.36 754.886 20.296 755.11 20.296C755.291 20.296 755.451 20.3387 755.59 20.424C755.739 20.5093 755.83 20.6267 755.862 20.776C756.032 20.776 756.214 20.84 756.406 20.968C756.598 21.0853 756.71 21.208 756.742 21.336C756.998 21.4107 757.243 21.576 757.478 21.832C757.723 22.0773 757.846 22.328 757.846 22.584C757.846 22.6267 757.835 22.6907 757.814 22.776C758.272 22.872 758.48 23.336 758.438 24.168C758.534 24.328 758.582 24.4987 758.582 24.68C758.582 24.8933 758.512 25.1067 758.374 25.32C758.406 25.416 758.422 25.5067 758.422 25.592C758.422 25.72 758.395 25.8427 758.342 25.96C758.288 26.0773 758.219 26.168 758.134 26.232C758.144 26.4027 758.112 26.5413 758.038 26.648C757.974 26.7547 757.851 26.8987 757.67 27.08C757.68 27.1227 757.686 27.1867 757.686 27.272C757.686 27.592 757.504 27.8 757.142 27.896C757.11 28.0667 757.019 28.2053 756.87 28.312C756.731 28.4187 756.56 28.472 756.358 28.472C756.187 28.7067 755.979 28.824 755.734 28.824C755.659 28.824 755.6 28.8187 755.558 28.808ZM754.054 27.688C754.139 27.6133 754.283 27.576 754.486 27.576C754.635 27.576 754.715 27.5973 754.726 27.64C754.811 27.544 754.918 27.4693 755.046 27.416C755.174 27.3627 755.291 27.3413 755.398 27.352C755.579 27.1707 755.776 27.08 755.99 27.08C756.064 27.08 756.118 27.0853 756.15 27.096C756.139 27 756.166 26.9093 756.23 26.824C756.294 26.728 756.368 26.664 756.454 26.632C756.454 26.4933 756.486 26.376 756.55 26.28C756.624 26.1733 756.715 26.0933 756.822 26.04C756.822 25.8267 756.864 25.656 756.95 25.528C756.918 25.4427 756.902 25.3573 756.902 25.272C756.902 25.1547 756.928 25.0427 756.982 24.936C757.035 24.8187 757.11 24.7227 757.206 24.648C757.099 24.552 757.046 24.4347 757.046 24.296C757.046 24.168 757.083 24.04 757.158 23.912C756.944 23.784 756.8 23.6613 756.726 23.544C756.662 23.416 756.63 23.1867 756.63 22.856C756.534 22.8667 756.432 22.8133 756.326 22.696C756.23 22.5787 756.171 22.4453 756.15 22.296C756.032 22.328 755.888 22.296 755.718 22.2C755.558 22.0933 755.478 21.96 755.478 21.8C755.392 21.8427 755.291 21.864 755.174 21.864C754.95 21.864 754.768 21.784 754.63 21.624C754.512 21.7413 754.358 21.8373 754.166 21.912C753.984 21.976 753.824 21.9973 753.686 21.976C753.675 22.0827 753.579 22.2107 753.398 22.36C753.227 22.4987 753.072 22.5893 752.934 22.632C752.966 22.696 752.982 22.7707 752.982 22.856C752.982 22.9627 752.955 23.0693 752.902 23.176C752.848 23.2827 752.774 23.3733 752.678 23.448C752.688 23.5973 752.651 23.7413 752.566 23.88C752.491 24.0187 752.384 24.1147 752.246 24.168C752.267 24.2533 752.278 24.3227 752.278 24.376C752.278 24.5253 752.24 24.6427 752.166 24.728C752.198 24.8027 752.214 24.8773 752.214 24.952C752.214 25.0693 752.155 25.1973 752.038 25.336C752.304 25.5173 752.438 25.7787 752.438 26.12C752.438 26.3013 752.406 26.456 752.342 26.584C752.448 26.5947 752.523 26.6267 752.566 26.68C752.608 26.7333 752.646 26.8187 752.678 26.936C752.944 26.968 753.142 27.096 753.27 27.32C753.387 27.32 753.531 27.3573 753.702 27.432C753.883 27.5067 754 27.592 754.054 27.688ZM761.127 28.104C761.181 28.264 761.207 28.3867 761.207 28.472C761.207 28.6533 761.138 28.7867 760.999 28.872C760.871 28.9573 760.695 29 760.471 29C760.237 29 760.055 28.9253 759.927 28.776C759.81 28.616 759.751 28.4293 759.751 28.216C759.751 28.0347 759.794 27.8907 759.879 27.784C759.751 27.656 759.687 27.464 759.687 27.208C759.687 26.9307 759.773 26.712 759.943 26.552C759.805 26.4133 759.735 26.232 759.735 26.008C759.735 25.784 759.799 25.5707 759.927 25.368C759.895 25.272 759.879 25.16 759.879 25.032C759.879 24.872 759.895 24.7387 759.927 24.632C759.831 24.5147 759.783 24.3867 759.783 24.248C759.783 24.12 759.815 24.008 759.879 23.912C759.837 23.8373 759.815 23.752 759.815 23.656C759.815 23.5707 759.831 23.4907 759.863 23.416C759.746 23.2667 759.687 23.0907 759.687 22.888C759.687 22.728 759.73 22.5787 759.815 22.44C759.783 22.3547 759.767 22.2693 759.767 22.184C759.767 22.1307 759.778 22.0613 759.799 21.976C759.725 21.8693 759.687 21.7147 759.687 21.512C759.687 21.32 759.725 21.1707 759.799 21.064C759.735 20.936 759.703 20.792 759.703 20.632C759.703 20.4827 759.741 20.3493 759.815 20.232C759.73 20.0613 759.687 19.9013 759.687 19.752C759.687 19.5707 759.73 19.4107 759.815 19.272C759.741 19.1867 759.703 19.0587 759.703 18.888C759.703 18.76 759.725 18.6213 759.767 18.472C759.725 18.3227 759.703 18.2 759.703 18.104C759.703 17.976 759.735 17.8747 759.799 17.8C759.789 17.6187 759.842 17.4693 759.959 17.352C760.077 17.2347 760.221 17.176 760.391 17.176C760.477 17.176 760.583 17.2027 760.711 17.256C760.829 17.32 760.919 17.4373 760.983 17.608C761.058 17.7787 761.095 17.96 761.095 18.152C761.095 18.344 761.058 18.5147 760.983 18.664C761.058 18.8027 761.095 18.952 761.095 19.112C761.095 19.2933 761.042 19.5013 760.935 19.736C761.031 19.9067 761.079 20.088 761.079 20.28C761.079 20.3973 761.058 20.4933 761.015 20.568C761.133 20.6533 761.191 20.7813 761.191 20.952C761.191 21.048 761.159 21.1547 761.095 21.272C761.159 21.2933 761.197 21.3733 761.207 21.512C761.229 21.6507 761.239 21.7307 761.239 21.752C761.293 21.6133 761.389 21.5067 761.527 21.432C761.666 21.3467 761.789 21.3147 761.895 21.336C761.938 21.208 762.018 21.112 762.135 21.048C762.253 20.9733 762.375 20.936 762.503 20.936C762.557 20.936 762.626 20.9467 762.711 20.968C762.797 20.8827 762.925 20.84 763.095 20.84C763.213 20.84 763.309 20.8613 763.383 20.904C763.437 20.872 763.506 20.856 763.591 20.856C763.698 20.856 763.805 20.8827 763.911 20.936C763.997 20.904 764.077 20.888 764.151 20.888C764.29 20.888 764.407 20.936 764.503 21.032C764.599 21.0107 764.727 21.0533 764.887 21.16C765.047 21.2667 765.133 21.3893 765.143 21.528C765.335 21.688 765.431 21.8587 765.431 22.04C765.431 22.104 765.415 22.1627 765.383 22.216C765.447 22.2587 765.501 22.328 765.543 22.424C765.586 22.52 765.607 22.6213 765.607 22.728C765.607 22.8027 765.602 22.8613 765.591 22.904C765.719 23 765.783 23.1493 765.783 23.352C765.783 23.5013 765.746 23.64 765.671 23.768C765.767 23.9173 765.815 24.056 765.815 24.184C765.815 24.2587 765.799 24.3387 765.767 24.424C765.821 24.5627 765.847 24.7227 765.847 24.904C765.847 25.1173 765.81 25.2933 765.735 25.432C765.767 25.5067 765.783 25.6667 765.783 25.912C765.783 26.2213 765.762 26.424 765.719 26.52C765.794 26.6267 765.831 26.792 765.831 27.016C765.831 27.272 765.783 27.4587 765.687 27.576C765.751 27.672 765.783 27.8107 765.783 27.992C765.783 28.2053 765.746 28.3867 765.671 28.536C765.682 28.6533 765.613 28.7547 765.463 28.84C765.325 28.9253 765.17 28.968 764.999 28.968C764.85 28.968 764.727 28.9307 764.631 28.856C764.546 28.7813 764.509 28.6747 764.519 28.536C764.402 28.3547 764.343 28.152 764.343 27.928C764.343 27.736 764.375 27.5547 764.439 27.384C764.386 27.224 764.359 27.032 764.359 26.808C764.359 26.5733 764.386 26.4027 764.439 26.296C764.397 26.232 764.375 26.1307 764.375 25.992C764.375 25.832 764.402 25.7093 764.455 25.624C764.381 25.5067 764.343 25.368 764.343 25.208C764.343 25.0907 764.37 25.0053 764.423 24.952C764.327 24.8027 764.279 24.6427 764.279 24.472C764.279 24.3547 764.301 24.2693 764.343 24.216C764.226 24.1307 764.167 23.9813 764.167 23.768C764.167 23.5973 764.205 23.4747 764.279 23.4C764.087 23.24 763.991 23.064 763.991 22.872C763.991 22.7653 764.013 22.6693 764.055 22.584C763.981 22.6053 763.895 22.584 763.799 22.52C763.703 22.4453 763.639 22.3653 763.607 22.28C763.501 22.3333 763.367 22.36 763.207 22.36C763.143 22.36 763.101 22.3547 763.079 22.344C763.037 22.408 762.951 22.4667 762.823 22.52C762.706 22.5627 762.615 22.5733 762.551 22.552C762.466 22.6373 762.359 22.7227 762.231 22.808C762.103 22.8933 762.013 22.9307 761.959 22.92C761.938 23.016 761.869 23.1333 761.751 23.272C761.634 23.4 761.522 23.464 761.415 23.464C761.437 23.5493 761.447 23.6187 761.447 23.672C761.447 23.8107 761.399 24.0133 761.303 24.28C761.389 24.3973 761.431 24.52 761.431 24.648C761.431 24.7653 761.394 24.888 761.319 25.016C761.341 25.0587 761.351 25.128 761.351 25.224C761.351 25.32 761.33 25.432 761.287 25.56C761.309 25.6347 761.319 25.72 761.319 25.816C761.319 25.9227 761.277 26.0453 761.191 26.184C761.309 26.2373 761.367 26.392 761.367 26.648C761.367 26.776 761.351 26.9093 761.319 27.048C761.287 27.1867 761.245 27.2987 761.191 27.384C761.255 27.4907 761.287 27.6133 761.287 27.752C761.287 27.8907 761.234 28.008 761.127 28.104ZM771.651 28.808C771.523 28.936 771.326 29 771.059 29C770.857 29 770.691 28.968 770.563 28.904C770.371 28.9467 770.201 28.968 770.051 28.968C769.635 28.968 769.337 28.8613 769.155 28.648C769.113 28.6587 769.054 28.664 768.979 28.664C768.734 28.664 768.547 28.552 768.419 28.328C768.313 28.3387 768.174 28.2853 768.003 28.168C767.843 28.04 767.774 27.9173 767.795 27.8C767.625 27.7573 767.481 27.656 767.363 27.496C767.257 27.3253 767.209 27.1333 767.219 26.92C767.102 26.8773 767.011 26.792 766.947 26.664C766.883 26.536 766.851 26.392 766.851 26.232C766.851 26.0613 766.878 25.9387 766.931 25.864C766.814 25.6827 766.755 25.4747 766.755 25.24C766.755 24.9947 766.83 24.7973 766.979 24.648C766.862 24.5627 766.803 24.4347 766.803 24.264C766.803 24.1573 766.83 24.0507 766.883 23.944C766.937 23.8373 767.006 23.7627 767.091 23.72C767.07 23.5707 767.086 23.432 767.139 23.304C767.203 23.1653 767.289 23.064 767.395 23C767.374 22.968 767.363 22.92 767.363 22.856C767.363 22.76 767.395 22.664 767.459 22.568C767.534 22.472 767.614 22.4133 767.699 22.392C767.689 22.36 767.683 22.3173 767.683 22.264C767.683 22.04 767.769 21.848 767.939 21.688C768.11 21.5173 768.275 21.4427 768.435 21.464C768.435 21.3147 768.499 21.192 768.627 21.096C768.766 20.9893 768.942 20.936 769.155 20.936C769.251 20.936 769.326 20.9413 769.379 20.952C769.454 20.792 769.582 20.664 769.763 20.568C769.945 20.4613 770.131 20.408 770.323 20.408C770.451 20.408 770.558 20.4347 770.643 20.488C770.793 20.36 770.979 20.296 771.203 20.296C771.385 20.296 771.545 20.3387 771.683 20.424C771.833 20.5093 771.923 20.6267 771.955 20.776C772.126 20.776 772.307 20.84 772.499 20.968C772.691 21.0853 772.803 21.208 772.835 21.336C773.091 21.4107 773.337 21.576 773.571 21.832C773.817 22.0773 773.939 22.328 773.939 22.584C773.939 22.6267 773.929 22.6907 773.907 22.776C774.366 22.872 774.574 23.336 774.531 24.168C774.627 24.328 774.675 24.4987 774.675 24.68C774.675 24.8933 774.606 25.1067 774.467 25.32C774.499 25.416 774.515 25.5067 774.515 25.592C774.515 25.72 774.489 25.8427 774.435 25.96C774.382 26.0773 774.313 26.168 774.227 26.232C774.238 26.4027 774.206 26.5413 774.131 26.648C774.067 26.7547 773.945 26.8987 773.763 27.08C773.774 27.1227 773.779 27.1867 773.779 27.272C773.779 27.592 773.598 27.8 773.235 27.896C773.203 28.0667 773.113 28.2053 772.963 28.312C772.825 28.4187 772.654 28.472 772.451 28.472C772.281 28.7067 772.073 28.824 771.827 28.824C771.753 28.824 771.694 28.8187 771.651 28.808ZM770.147 27.688C770.233 27.6133 770.377 27.576 770.579 27.576C770.729 27.576 770.809 27.5973 770.819 27.64C770.905 27.544 771.011 27.4693 771.139 27.416C771.267 27.3627 771.385 27.3413 771.491 27.352C771.673 27.1707 771.87 27.08 772.083 27.08C772.158 27.08 772.211 27.0853 772.243 27.096C772.233 27 772.259 26.9093 772.323 26.824C772.387 26.728 772.462 26.664 772.547 26.632C772.547 26.4933 772.579 26.376 772.643 26.28C772.718 26.1733 772.809 26.0933 772.915 26.04C772.915 25.8267 772.958 25.656 773.043 25.528C773.011 25.4427 772.995 25.3573 772.995 25.272C772.995 25.1547 773.022 25.0427 773.075 24.936C773.129 24.8187 773.203 24.7227 773.299 24.648C773.193 24.552 773.139 24.4347 773.139 24.296C773.139 24.168 773.177 24.04 773.251 23.912C773.038 23.784 772.894 23.6613 772.819 23.544C772.755 23.416 772.723 23.1867 772.723 22.856C772.627 22.8667 772.526 22.8133 772.419 22.696C772.323 22.5787 772.265 22.4453 772.243 22.296C772.126 22.328 771.982 22.296 771.811 22.2C771.651 22.0933 771.571 21.96 771.571 21.8C771.486 21.8427 771.385 21.864 771.267 21.864C771.043 21.864 770.862 21.784 770.723 21.624C770.606 21.7413 770.451 21.8373 770.259 21.912C770.078 21.976 769.918 21.9973 769.779 21.976C769.769 22.0827 769.673 22.2107 769.491 22.36C769.321 22.4987 769.166 22.5893 769.027 22.632C769.059 22.696 769.075 22.7707 769.075 22.856C769.075 22.9627 769.049 23.0693 768.995 23.176C768.942 23.2827 768.867 23.3733 768.771 23.448C768.782 23.5973 768.745 23.7413 768.659 23.88C768.585 24.0187 768.478 24.1147 768.339 24.168C768.361 24.2533 768.371 24.3227 768.371 24.376C768.371 24.5253 768.334 24.6427 768.259 24.728C768.291 24.8027 768.307 24.8773 768.307 24.952C768.307 25.0693 768.249 25.1973 768.131 25.336C768.398 25.5173 768.531 25.7787 768.531 26.12C768.531 26.3013 768.499 26.456 768.435 26.584C768.542 26.5947 768.617 26.6267 768.659 26.68C768.702 26.7333 768.739 26.8187 768.771 26.936C769.038 26.968 769.235 27.096 769.363 27.32C769.481 27.32 769.625 27.3573 769.795 27.432C769.977 27.5067 770.094 27.592 770.147 27.688ZM777.749 27C777.856 27.1173 777.909 27.2987 777.909 27.544C777.909 27.704 777.882 27.8587 777.829 28.008C777.786 28.1467 777.728 28.248 777.653 28.312C777.685 28.5147 777.632 28.68 777.493 28.808C777.354 28.936 777.189 29 776.997 29C776.869 29 776.746 28.968 776.629 28.904C776.512 28.84 776.426 28.7333 776.373 28.584C776.32 28.4347 776.293 28.2747 776.293 28.104C776.293 27.8693 776.33 27.6827 776.405 27.544C776.352 27.448 776.325 27.3093 776.325 27.128C776.325 26.9253 776.357 26.7173 776.421 26.504C776.346 26.4187 776.309 26.264 776.309 26.04C776.309 25.752 776.352 25.5387 776.437 25.4C776.373 25.2507 776.341 25.1067 776.341 24.968C776.341 24.776 776.389 24.584 776.485 24.392C776.4 24.168 776.357 23.9653 776.357 23.784C776.357 23.6347 776.389 23.464 776.453 23.272C776.346 23.1547 776.293 23.0053 776.293 22.824C776.293 22.7493 776.298 22.696 776.309 22.664C776.192 22.5253 776.133 22.3653 776.133 22.184C776.133 22.0667 776.165 21.9547 776.229 21.848C776.154 21.6773 776.117 21.512 776.117 21.352C776.117 21.096 776.181 20.904 776.309 20.776C776.245 20.6267 776.213 20.4453 776.213 20.232C776.213 20.0613 776.24 19.9387 776.293 19.864C776.24 19.832 776.197 19.7733 776.165 19.688C776.133 19.6027 776.117 19.5067 776.117 19.4C776.117 19.2187 776.16 19.0693 776.245 18.952C776.213 18.8667 776.197 18.7547 776.197 18.616C776.197 18.5093 776.208 18.4133 776.229 18.328C776.101 18.2 776.037 18.0507 776.037 17.88C776.037 17.6987 776.112 17.544 776.261 17.416C776.421 17.2773 776.597 17.208 776.789 17.208C776.917 17.208 777.034 17.2507 777.141 17.336C777.248 17.4107 777.322 17.528 777.365 17.688C777.525 17.7947 777.605 17.96 777.605 18.184C777.605 18.2267 777.594 18.2907 777.573 18.376C777.701 18.504 777.765 18.6693 777.765 18.872C777.765 19.0427 777.712 19.176 777.605 19.272C777.658 19.3147 777.706 19.3893 777.749 19.496C777.792 19.592 777.813 19.6987 777.813 19.816C777.813 20.008 777.744 20.168 777.605 20.296C777.69 20.4133 777.733 20.5573 777.733 20.728C777.733 20.8987 777.701 21.0373 777.637 21.144C777.68 21.1867 777.701 21.2933 777.701 21.464C777.701 21.56 777.69 21.6613 777.669 21.768C777.648 21.8747 777.616 21.9493 777.573 21.992C777.733 22.1307 777.813 22.3067 777.813 22.52C777.813 22.6373 777.792 22.7387 777.749 22.824C777.813 22.92 777.845 23.064 777.845 23.256C777.845 23.5013 777.802 23.6987 777.717 23.848C777.792 23.9973 777.829 24.1947 777.829 24.44C777.829 24.7387 777.781 24.952 777.685 25.08C777.76 25.1867 777.797 25.32 777.797 25.48C777.797 25.6187 777.765 25.784 777.701 25.976C777.797 26.0827 777.845 26.248 777.845 26.472C777.845 26.664 777.813 26.84 777.749 27Z';

  var compiler = createCommonjsModule(function (module, exports) {
  /*
   *  Copyright 2011 Twitter, Inc.
   *  Licensed under the Apache License, Version 2.0 (the "License");
   *  you may not use this file except in compliance with the License.
   *  You may obtain a copy of the License at
   *
   *  http://www.apache.org/licenses/LICENSE-2.0
   *
   *  Unless required by applicable law or agreed to in writing, software
   *  distributed under the License is distributed on an "AS IS" BASIS,
   *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   *  See the License for the specific language governing permissions and
   *  limitations under the License.
   */

  (function (Hogan) {
    // Setup regex  assignments
    // remove whitespace according to Mustache spec
    var rIsWhitespace = /\S/,
        rQuot = /\"/g,
        rNewline =  /\n/g,
        rCr = /\r/g,
        rSlash = /\\/g,
        rLineSep = /\u2028/,
        rParagraphSep = /\u2029/;

    Hogan.tags = {
      '#': 1, '^': 2, '<': 3, '$': 4,
      '/': 5, '!': 6, '>': 7, '=': 8, '_v': 9,
      '{': 10, '&': 11, '_t': 12
    };

    Hogan.scan = function scan(text, delimiters) {
      var len = text.length,
          IN_TEXT = 0,
          IN_TAG_TYPE = 1,
          IN_TAG = 2,
          state = IN_TEXT,
          tagType = null,
          tag = null,
          buf = '',
          tokens = [],
          seenTag = false,
          i = 0,
          lineStart = 0,
          otag = '{{',
          ctag = '}}';

      function addBuf() {
        if (buf.length > 0) {
          tokens.push({tag: '_t', text: new String(buf)});
          buf = '';
        }
      }

      function lineIsWhitespace() {
        var isAllWhitespace = true;
        for (var j = lineStart; j < tokens.length; j++) {
          isAllWhitespace =
            (Hogan.tags[tokens[j].tag] < Hogan.tags['_v']) ||
            (tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null);
          if (!isAllWhitespace) {
            return false;
          }
        }

        return isAllWhitespace;
      }

      function filterLine(haveSeenTag, noNewLine) {
        addBuf();

        if (haveSeenTag && lineIsWhitespace()) {
          for (var j = lineStart, next; j < tokens.length; j++) {
            if (tokens[j].text) {
              if ((next = tokens[j+1]) && next.tag == '>') {
                // set indent to token value
                next.indent = tokens[j].text.toString();
              }
              tokens.splice(j, 1);
            }
          }
        } else if (!noNewLine) {
          tokens.push({tag:'\n'});
        }

        seenTag = false;
        lineStart = tokens.length;
      }

      function changeDelimiters(text, index) {
        var close = '=' + ctag,
            closeIndex = text.indexOf(close, index),
            delimiters = trim(
              text.substring(text.indexOf('=', index) + 1, closeIndex)
            ).split(' ');

        otag = delimiters[0];
        ctag = delimiters[delimiters.length - 1];

        return closeIndex + close.length - 1;
      }

      if (delimiters) {
        delimiters = delimiters.split(' ');
        otag = delimiters[0];
        ctag = delimiters[1];
      }

      for (i = 0; i < len; i++) {
        if (state == IN_TEXT) {
          if (tagChange(otag, text, i)) {
            --i;
            addBuf();
            state = IN_TAG_TYPE;
          } else {
            if (text.charAt(i) == '\n') {
              filterLine(seenTag);
            } else {
              buf += text.charAt(i);
            }
          }
        } else if (state == IN_TAG_TYPE) {
          i += otag.length - 1;
          tag = Hogan.tags[text.charAt(i + 1)];
          tagType = tag ? text.charAt(i + 1) : '_v';
          if (tagType == '=') {
            i = changeDelimiters(text, i);
            state = IN_TEXT;
          } else {
            if (tag) {
              i++;
            }
            state = IN_TAG;
          }
          seenTag = i;
        } else {
          if (tagChange(ctag, text, i)) {
            tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,
                         i: (tagType == '/') ? seenTag - otag.length : i + ctag.length});
            buf = '';
            i += ctag.length - 1;
            state = IN_TEXT;
            if (tagType == '{') {
              if (ctag == '}}') {
                i++;
              } else {
                cleanTripleStache(tokens[tokens.length - 1]);
              }
            }
          } else {
            buf += text.charAt(i);
          }
        }
      }

      filterLine(seenTag, true);

      return tokens;
    };

    function cleanTripleStache(token) {
      if (token.n.substr(token.n.length - 1) === '}') {
        token.n = token.n.substring(0, token.n.length - 1);
      }
    }

    function trim(s) {
      if (s.trim) {
        return s.trim();
      }

      return s.replace(/^\s*|\s*$/g, '');
    }

    function tagChange(tag, text, index) {
      if (text.charAt(index) != tag.charAt(0)) {
        return false;
      }

      for (var i = 1, l = tag.length; i < l; i++) {
        if (text.charAt(index + i) != tag.charAt(i)) {
          return false;
        }
      }

      return true;
    }

    // the tags allowed inside super templates
    var allowedInSuper = {'_t': true, '\n': true, '$': true, '/': true};

    function buildTree(tokens, kind, stack, customTags) {
      var instructions = [],
          opener = null,
          tail = null,
          token = null;

      tail = stack[stack.length - 1];

      while (tokens.length > 0) {
        token = tokens.shift();

        if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {
          throw new Error('Illegal content in < super tag.');
        }

        if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {
          stack.push(token);
          token.nodes = buildTree(tokens, token.tag, stack, customTags);
        } else if (token.tag == '/') {
          if (stack.length === 0) {
            throw new Error('Closing tag without opener: /' + token.n);
          }
          opener = stack.pop();
          if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {
            throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);
          }
          opener.end = token.i;
          return instructions;
        } else if (token.tag == '\n') {
          token.last = (tokens.length == 0) || (tokens[0].tag == '\n');
        }

        instructions.push(token);
      }

      if (stack.length > 0) {
        throw new Error('missing closing tag: ' + stack.pop().n);
      }

      return instructions;
    }

    function isOpener(token, tags) {
      for (var i = 0, l = tags.length; i < l; i++) {
        if (tags[i].o == token.n) {
          token.tag = '#';
          return true;
        }
      }
    }

    function isCloser(close, open, tags) {
      for (var i = 0, l = tags.length; i < l; i++) {
        if (tags[i].c == close && tags[i].o == open) {
          return true;
        }
      }
    }

    function stringifySubstitutions(obj) {
      var items = [];
      for (var key in obj) {
        items.push('"' + esc(key) + '": function(c,p,t,i) {' + obj[key] + '}');
      }
      return "{ " + items.join(",") + " }";
    }

    function stringifyPartials(codeObj) {
      var partials = [];
      for (var key in codeObj.partials) {
        partials.push('"' + esc(key) + '":{name:"' + esc(codeObj.partials[key].name) + '", ' + stringifyPartials(codeObj.partials[key]) + "}");
      }
      return "partials: {" + partials.join(",") + "}, subs: " + stringifySubstitutions(codeObj.subs);
    }

    Hogan.stringify = function(codeObj, text, options) {
      return "{code: function (c,p,i) { " + Hogan.wrapMain(codeObj.code) + " }," + stringifyPartials(codeObj) +  "}";
    };

    var serialNo = 0;
    Hogan.generate = function(tree, text, options) {
      serialNo = 0;
      var context = { code: '', subs: {}, partials: {} };
      Hogan.walk(tree, context);

      if (options.asString) {
        return this.stringify(context, text, options);
      }

      return this.makeTemplate(context, text, options);
    };

    Hogan.wrapMain = function(code) {
      return 'var t=this;t.b(i=i||"");' + code + 'return t.fl();';
    };

    Hogan.template = Hogan.Template;

    Hogan.makeTemplate = function(codeObj, text, options) {
      var template = this.makePartials(codeObj);
      template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));
      return new this.template(template, text, this, options);
    };

    Hogan.makePartials = function(codeObj) {
      var key, template = {subs: {}, partials: codeObj.partials, name: codeObj.name};
      for (key in template.partials) {
        template.partials[key] = this.makePartials(template.partials[key]);
      }
      for (key in codeObj.subs) {
        template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);
      }
      return template;
    };

    function esc(s) {
      return s.replace(rSlash, '\\\\')
              .replace(rQuot, '\\\"')
              .replace(rNewline, '\\n')
              .replace(rCr, '\\r')
              .replace(rLineSep, '\\u2028')
              .replace(rParagraphSep, '\\u2029');
    }

    function chooseMethod(s) {
      return (~s.indexOf('.')) ? 'd' : 'f';
    }

    function createPartial(node, context) {
      var prefix = "<" + (context.prefix || "");
      var sym = prefix + node.n + serialNo++;
      context.partials[sym] = {name: node.n, partials: {}};
      context.code += 't.b(t.rp("' +  esc(sym) + '",c,p,"' + (node.indent || '') + '"));';
      return sym;
    }

    Hogan.codegen = {
      '#': function(node, context) {
        context.code += 'if(t.s(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,1),' +
                        'c,p,0,' + node.i + ',' + node.end + ',"' + node.otag + " " + node.ctag + '")){' +
                        't.rs(c,p,' + 'function(c,p,t){';
        Hogan.walk(node.nodes, context);
        context.code += '});c.pop();}';
      },

      '^': function(node, context) {
        context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,1),c,p,1,0,0,"")){';
        Hogan.walk(node.nodes, context);
        context.code += '};';
      },

      '>': createPartial,
      '<': function(node, context) {
        var ctx = {partials: {}, code: '', subs: {}, inPartial: true};
        Hogan.walk(node.nodes, ctx);
        var template = context.partials[createPartial(node, context)];
        template.subs = ctx.subs;
        template.partials = ctx.partials;
      },

      '$': function(node, context) {
        var ctx = {subs: {}, code: '', partials: context.partials, prefix: node.n};
        Hogan.walk(node.nodes, ctx);
        context.subs[node.n] = ctx.code;
        if (!context.inPartial) {
          context.code += 't.sub("' + esc(node.n) + '",c,p,i);';
        }
      },

      '\n': function(node, context) {
        context.code += write('"\\n"' + (node.last ? '' : ' + i'));
      },

      '_v': function(node, context) {
        context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,0)));';
      },

      '_t': function(node, context) {
        context.code += write('"' + esc(node.text) + '"');
      },

      '{': tripleStache,

      '&': tripleStache
    };

    function tripleStache(node, context) {
      context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,0)));';
    }

    function write(s) {
      return 't.b(' + s + ');';
    }

    Hogan.walk = function(nodelist, context) {
      var func;
      for (var i = 0, l = nodelist.length; i < l; i++) {
        func = Hogan.codegen[nodelist[i].tag];
        func && func(nodelist[i], context);
      }
      return context;
    };

    Hogan.parse = function(tokens, text, options) {
      options = options || {};
      return buildTree(tokens, '', [], options.sectionTags || []);
    };

    Hogan.cache = {};

    Hogan.cacheKey = function(text, options) {
      return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');
    };

    Hogan.compile = function(text, options) {
      options = options || {};
      var key = Hogan.cacheKey(text, options);
      var template = this.cache[key];

      if (template) {
        var partials = template.partials;
        for (var name in partials) {
          delete partials[name].instance;
        }
        return template;
      }

      template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);
      return this.cache[key] = template;
    };
  })( exports );
  });

  var template = createCommonjsModule(function (module, exports) {

  (function (Hogan) {
    Hogan.Template = function (codeObj, text, compiler, options) {
      codeObj = codeObj || {};
      this.r = codeObj.code || this.r;
      this.c = compiler;
      this.options = options || {};
      this.text = text || '';
      this.partials = codeObj.partials || {};
      this.subs = codeObj.subs || {};
      this.buf = '';
    };

    Hogan.Template.prototype = {
      // render: replaced by generated code.
      r: function (context, partials, indent) { return ''; },

      // variable escaping
      v: hoganEscape,

      // triple stache
      t: coerceToString,

      render: function render(context, partials, indent) {
        return this.ri([context], partials || {}, indent);
      },

      // render internal -- a hook for overrides that catches partials too
      ri: function (context, partials, indent) {
        return this.r(context, partials, indent);
      },

      // ensurePartial
      ep: function(symbol, partials) {
        var partial = this.partials[symbol];

        // check to see that if we've instantiated this partial before
        var template = partials[partial.name];
        if (partial.instance && partial.base == template) {
          return partial.instance;
        }

        if (typeof template == 'string') {
          if (!this.c) {
            throw new Error("No compiler available.");
          }
          template = this.c.compile(template, this.options);
        }

        if (!template) {
          return null;
        }

        // We use this to check whether the partials dictionary has changed
        this.partials[symbol].base = template;

        if (partial.subs) {
          // Make sure we consider parent template now
          if (!partials.stackText) partials.stackText = {};
          for (key in partial.subs) {
            if (!partials.stackText[key]) {
              partials.stackText[key] = (this.activeSub !== undefined && partials.stackText[this.activeSub]) ? partials.stackText[this.activeSub] : this.text;
            }
          }
          template = createSpecializedPartial(template, partial.subs, partial.partials,
            this.stackSubs, this.stackPartials, partials.stackText);
        }
        this.partials[symbol].instance = template;

        return template;
      },

      // tries to find a partial in the current scope and render it
      rp: function(symbol, context, partials, indent) {
        var partial = this.ep(symbol, partials);
        if (!partial) {
          return '';
        }

        return partial.ri(context, partials, indent);
      },

      // render a section
      rs: function(context, partials, section) {
        var tail = context[context.length - 1];

        if (!isArray(tail)) {
          section(context, partials, this);
          return;
        }

        for (var i = 0; i < tail.length; i++) {
          context.push(tail[i]);
          section(context, partials, this);
          context.pop();
        }
      },

      // maybe start a section
      s: function(val, ctx, partials, inverted, start, end, tags) {
        var pass;

        if (isArray(val) && val.length === 0) {
          return false;
        }

        if (typeof val == 'function') {
          val = this.ms(val, ctx, partials, inverted, start, end, tags);
        }

        pass = !!val;

        if (!inverted && pass && ctx) {
          ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);
        }

        return pass;
      },

      // find values with dotted names
      d: function(key, ctx, partials, returnFound) {
        var found,
            names = key.split('.'),
            val = this.f(names[0], ctx, partials, returnFound),
            doModelGet = this.options.modelGet,
            cx = null;

        if (key === '.' && isArray(ctx[ctx.length - 2])) {
          val = ctx[ctx.length - 1];
        } else {
          for (var i = 1; i < names.length; i++) {
            found = findInScope(names[i], val, doModelGet);
            if (found !== undefined) {
              cx = val;
              val = found;
            } else {
              val = '';
            }
          }
        }

        if (returnFound && !val) {
          return false;
        }

        if (!returnFound && typeof val == 'function') {
          ctx.push(cx);
          val = this.mv(val, ctx, partials);
          ctx.pop();
        }

        return val;
      },

      // find values with normal names
      f: function(key, ctx, partials, returnFound) {
        var val = false,
            v = null,
            found = false,
            doModelGet = this.options.modelGet;

        for (var i = ctx.length - 1; i >= 0; i--) {
          v = ctx[i];
          val = findInScope(key, v, doModelGet);
          if (val !== undefined) {
            found = true;
            break;
          }
        }

        if (!found) {
          return (returnFound) ? false : "";
        }

        if (!returnFound && typeof val == 'function') {
          val = this.mv(val, ctx, partials);
        }

        return val;
      },

      // higher order templates
      ls: function(func, cx, partials, text, tags) {
        var oldTags = this.options.delimiters;

        this.options.delimiters = tags;
        this.b(this.ct(coerceToString(func.call(cx, text)), cx, partials));
        this.options.delimiters = oldTags;

        return false;
      },

      // compile text
      ct: function(text, cx, partials) {
        if (this.options.disableLambda) {
          throw new Error('Lambda features disabled.');
        }
        return this.c.compile(text, this.options).render(cx, partials);
      },

      // template result buffering
      b: function(s) { this.buf += s; },

      fl: function() { var r = this.buf; this.buf = ''; return r; },

      // method replace section
      ms: function(func, ctx, partials, inverted, start, end, tags) {
        var textSource,
            cx = ctx[ctx.length - 1],
            result = func.call(cx);

        if (typeof result == 'function') {
          if (inverted) {
            return true;
          } else {
            textSource = (this.activeSub && this.subsText && this.subsText[this.activeSub]) ? this.subsText[this.activeSub] : this.text;
            return this.ls(result, cx, partials, textSource.substring(start, end), tags);
          }
        }

        return result;
      },

      // method replace variable
      mv: function(func, ctx, partials) {
        var cx = ctx[ctx.length - 1];
        var result = func.call(cx);

        if (typeof result == 'function') {
          return this.ct(coerceToString(result.call(cx)), cx, partials);
        }

        return result;
      },

      sub: function(name, context, partials, indent) {
        var f = this.subs[name];
        if (f) {
          this.activeSub = name;
          f(context, partials, this, indent);
          this.activeSub = false;
        }
      }

    };

    //Find a key in an object
    function findInScope(key, scope, doModelGet) {
      var val;

      if (scope && typeof scope == 'object') {

        if (scope[key] !== undefined) {
          val = scope[key];

        // try lookup with get for backbone or similar model data
        } else if (doModelGet && scope.get && typeof scope.get == 'function') {
          val = scope.get(key);
        }
      }

      return val;
    }

    function createSpecializedPartial(instance, subs, partials, stackSubs, stackPartials, stackText) {
      function PartialTemplate() {}    PartialTemplate.prototype = instance;
      function Substitutions() {}    Substitutions.prototype = instance.subs;
      var key;
      var partial = new PartialTemplate();
      partial.subs = new Substitutions();
      partial.subsText = {};  //hehe. substext.
      partial.buf = '';

      stackSubs = stackSubs || {};
      partial.stackSubs = stackSubs;
      partial.subsText = stackText;
      for (key in subs) {
        if (!stackSubs[key]) stackSubs[key] = subs[key];
      }
      for (key in stackSubs) {
        partial.subs[key] = stackSubs[key];
      }

      stackPartials = stackPartials || {};
      partial.stackPartials = stackPartials;
      for (key in partials) {
        if (!stackPartials[key]) stackPartials[key] = partials[key];
      }
      for (key in stackPartials) {
        partial.partials[key] = stackPartials[key];
      }

      return partial;
    }

    var rAmp = /&/g,
        rLt = /</g,
        rGt = />/g,
        rApos = /\'/g,
        rQuot = /\"/g,
        hChars = /[&<>\"\']/;

    function coerceToString(val) {
      return String((val === null || val === undefined) ? '' : val);
    }

    function hoganEscape(str) {
      str = coerceToString(str);
      return hChars.test(str) ?
        str
          .replace(rAmp, '&amp;')
          .replace(rLt, '&lt;')
          .replace(rGt, '&gt;')
          .replace(rApos, '&#39;')
          .replace(rQuot, '&quot;') :
        str;
    }

    var isArray = Array.isArray || function(a) {
      return Object.prototype.toString.call(a) === '[object Array]';
    };

  })( exports );
  });

  /*
   *  Copyright 2011 Twitter, Inc.
   *  Licensed under the Apache License, Version 2.0 (the "License");
   *  you may not use this file except in compliance with the License.
   *  You may obtain a copy of the License at
   *
   *  http://www.apache.org/licenses/LICENSE-2.0
   *
   *  Unless required by applicable law or agreed to in writing, software
   *  distributed under the License is distributed on an "AS IS" BASIS,
   *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   *  See the License for the specific language governing permissions and
   *  limitations under the License.
   */

  // This file is for use with Node.js. See dist/ for browser files.


  compiler.Template = template.Template;
  compiler.template = compiler.Template;
  var hogan = compiler;

  var part0Html = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("\n" + i);t.b("<div id=\"title-image\">");t.b("\n" + i);t.b("  <img src=\"../../static/bush.png\">");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div id=\"title-text\">");t.b("\n" + i);t.b("  <div id=\"title-header\">");t.b("\n" + i);t.b("  <h2>Wine Quality</h2>");t.b("\n" + i);t.b("  <h2>Wine Quality</h2>");t.b("\n" + i);t.b("  <h2>hidden placeholder element keeping the height</h2>");t.b("\n" + i);t.b("</div>");t.b("\n" + i);t.b("<h3 id=\"title-subheader\">How to teach a model to taste</h3>");t.b("\n" + i);t.b("  <div class=\"scroll-arrow\">↓<br/><span class=\"lowlight\">scroll</span></div>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div id=\"intro-text\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    For better or worse, wine has been with us for quite some time. We started yeast fermentation in the stone age, made the first dedicated wine jars some 7,000 years ago and marvelled at King Tutankhamun who took <a href=\"https://www.scientificamerican.com/article/king-tut-drank-red-wine-r/\" target=\"_blank\">26 jars of wine to his grave</a>. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    While we didn’t lose dedication or interest, a few things changed since then. We rarely stomp grapes with our feet, we use barrels rather than beeswaxed terracotta for storage and at some point we even gave up mixing in seawater and honey to improve the wine's palate. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Yet, one key question is still of crucial importance: what makes a wine a good wine? ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>    ");t.b("\n" + i);t.b("    The Roman would have had an ideal amount of saltwater and maybe even a certain type of honey to get it right. Today, the winemaker's concern with honey is likely to be limited to her breakfast habits. However, she'll still try to manipulate a wine’s quality by controlling the wine’s very properties &mdash; sugar, sulfates, alcohol, and others.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    This piece wonders if we can use these properties to predict a wine's quality...");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }});

  var part1Html = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div class=\"section section-0 empty\">");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-1\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Let's maybe first have a look at what exactly we mean with predicting wine quality and why we think this is a good idea at all...");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<h1>What makes a wine a wine</h1>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-2\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Assuming we have a bottle of wine, we can describe this wine in various ways.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-3\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    We can give it a varietal, a vintage, maybe a name, which is how we would identify a wine in a conversation.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    If you know your wines, you might be reasonably or indeed rather good in telling a wine's quality without even having to taste it.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-4\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    However, a possibly more concise way to describe a wine might be to focus on the very liquid itself and decompose the wine into its <span class=\"highlight\">physiochemical properties</span>.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    The main benefit of such a description is precision. Vintages, varietals and names are an approximate illustration of a wine summarising and representing information like soil, climate as well as production factors.");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("    Physiochemical properties, in turn, are a concise characterisation of the very wine itself. The focus is on the liquid's composition rather than the wine's production context.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    But how could this help us?");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }});

  var part2Html = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<h1>A conceptual model</h1>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-5\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Given a wine's physiochemical properties we could boldly assume they are associated to wine quality &mdash; meaning that a certain composition of these properties result in a good wine...");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-6\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    while a different set of properties fails to please distinguished palates entirely.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-7\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Naturally, we won’t rest before finding the golden formula.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-8\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    If this worked and there was an association between a wine's properties and quality &mdash; we could <span class=\"highlight\">express wine quality as a function of its properties</span> entirely.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-9\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    We would have a <span class=\"highlight\">mathematical model</span> that takes a wine's properties as input");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-10\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    and returns some sort of estimate as to whether this wine is leaning towards being good or bad.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    This model would not be able to tell every good wine from a bad wine. Reality is too complex, taste too subjective and &mdash; as a sense &mdash; not fully understood to capture such perfection mathematically. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    However, as we shall see, a model can be accurate enough to support the winemaker's evaluations &mdash; improving the quality and speed of their decisions.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    How would we go about this? ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section no-trigger\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Let’s maybe take a step back and consider what a model actually is.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    In technical terms, a model reduces relationships between individual data columns to an equation. We would possibly want to reduce our wine problem to something like this:");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <div class=\"image-wrap\">");t.b("\n" + i);t.b("    <img src=\"../../static/equation@2x.png\" alt=\"wine quality equation\">");t.b("\n" + i);t.b("  </div>");t.b("\n" + i);t.b("    <p>");t.b("\n" + i);t.b("    This is a rather simple envelope’s backside, but in essence it’s an equation that relates the ingredient configuration to wine quality. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    We have the properties weighted by some property specific factor which tells the model how much impact the respective property has on quality. The greater the weights the more impact they have. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-11\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Sounds simple and also carries the good news that we can take our equation with us and throw it at any updated combination of ingredients to get an estimate of wine quality without knowing anything about it prior.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    But how does the model get these weights? How does it learn which property drives quality to what degree?");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    This is where we need to take our model by the hand and teach it.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }});

  var part3Html = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<h1>Learning by example</h1>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-12\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("     We want it to learn how to tell a good wine from a bad wine – how to predict, in this case <span class=\"highlight\">classify</span> each wine. But the model doesn't have our senses. It can't see, taste, or feel a wine, and we can’t be there for it in the future, to pre-taste each wine. It needs to stand on its own data columns. ");t.b("\n" + i);t.b("    </p>");t.b("\n" + i);t.b("    <p>");t.b("\n" + i);t.b("     This process is called <a href=\"https://www.analyticsvidhya.com/blog/2020/04/supervised-learning-unsupervised-learning/\" target=\"_blank\">supervised learning</a> and we all know its powers from our own childhood. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-13\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Think back to the days when you learned your animal names. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    You were probably just sitting in a proudly self-concocted puddle of peas, mash and apple juice leafing through a picture book of animal drawings, while your father tried to teach you what a sloth looks like.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-14\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Any of these shapes could have been a sloth,");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-15\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    but your father calmly supervised your learning,");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-16\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    by labelling the non-sloths");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-17\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    and celebrating the actual sloths!");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-18\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    And even though not every sloth looks the same,");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-19\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    after many examples, you learned the basic features that make up a sloth. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-20\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Now, although you sometimes weren't sure whether that thing you looked at was a sloth indeed &mdash; possibly because the picture book was a bit rubbish &mdash; you learned to give it a good guess at least. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    You scanned the configuration of lines and shapes that made up the animal and gauged how likely it is for this thing to be a sloth.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    That's exactly what a mathematical model does, too: you give it <span class=\"highlight\">examples</span> (many at best) → you <span class=\"highlight\">label</span> them with what you want your model to learn → and let it detect <span class=\"highlight\">patterns</span> that help your concluding → <span class=\"highlight\">classification</span>.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-21\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    So &mdash; turning our sloth back into a bottle of wine");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-22\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    it turns out that if you want your model to differentiate between");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-23\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    ...a high quality");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-24\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    ...and a low quality wine &mdash; a single specimen won’t be enough.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-25\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Just like a single animal drawing won't teach your child what a sloth is, you need as many wines as you can get hold of.");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("    Let's get some...");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-26\">");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-27\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Each wine in this dataset &mdash; let's call it a <a href=\"https://developers.google.com/machine-learning/crash-course/training-and-test-sets/splitting-data\" target=\"_blank\">training set</a> &mdash; is labelled as either <span class=\"good\">good</span> or <span class=\"bad\">bad</span>.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-28\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    In a next step you can split these wines into their respective quality group and identify how their features differ for each group. How, for example, good wines tend to have a higher alcohol level than bad wines. Or how lower amounts of chlorides seem to increase the quality.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    So, what we need, in short, is a large dataset with labelled data!");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }});

  var part4Html = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<h1>The data we have</h1>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-29\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    If you are a winery (or at least work for one), you probably have such data specifically for all the past wines you produced, tasted and labelled. As such, you have a lot of data-encoded experience or &mdash; put differently &mdash; you are a great teacher. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    You can do quite a lot with this information &mdash; more than this article will cover &mdash; but at least you could use this as your base data for classification.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-30\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    If you do not have such data in your drawer, there's a rather <a href=\"https://archive.ics.uci.edu/ml/datasets/wine+quality\" target=\"_blank\">well equipped and tested dataset</a> available for our purposes showing a total of 1,600 wines,");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-31\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    each row representing a different wine, showing the wine's properties");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-32\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    as well as their <i>Quality</i> rating.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Each rating is based on at least three evaluations from wine experts ranging from 0 (🤮) to 10 (🏆). We’ll simplify this later to a binary outcome &mdash; just <span class=\"good\">good</span> or <span class=\"bad\">bad</span> &mdash; but for now, this is what we have.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-33\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    The other eleven variables in here are the physiochemical properties, our model shall learn to associate with quality:");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-34\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    <span class=\"highlight\">Acidity values</span> can have a set of impacts on taste. They can impart sourness or tartness &mdash; if levels are too high they can tip things to a more vinegary taste &mdash;");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-35\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    and they can add freshness to your wine.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-36\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    The dataset also sports the amount of <span class=\"highlight\">sugar</span> remaining after fermentation,");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-37\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    as well as the amount of <span class=\"highlight\">salt</span>.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-38\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    <span class=\"highlight\">Sulfur dioxide</span> indirectly affects taste by preventing microbial growth and wine oxidation which can spoil aromas.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-39\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    <span class=\"highlight\">Wine density</span> is closely linked to alcohol and sugar content,");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-40\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    while <span class=\"highlight\">pH</span> values describe how acidic or basic a wine is.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-41\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Added <span class=\"highlight\">sulphates</span> can promote the degree of sulfur dioxide in the wine, which &mdash; as mentioned &mdash; act as an antimicrobial and antioxidant.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-42\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    And lastly there is <span class=\"highlight\">Alcohol</span>, which probably doesn’t need much of an introduction.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-43\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    All these wines in our training dataset are red wines from the <a href=\"https://en.wikipedia.org/wiki/Vinho_Verde\" target=\"_blank\">Vinho Verde</a> region in the north west of Portugal. Each wine was sampled and evaluated between 2004 and 2007 but this data has since been used in many studies and papers to understand the connection between wine properties and quality. There’s also a publicly available training set of <a href=\"https://archive.ics.uci.edu/ml/datasets/wine+quality\" target=\"_blank\">white wines</a>, but this red wine dataset will do just fine for our example…");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section no-trigger\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Before we build our model, let's have a look at our data....");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");return t.fl(); },partials: {}, subs: {  }});

  var part5Html = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<h1>The shape of the data</h1>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-44\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Here are 1,600 tiny bottles (disguised as dots) unfolding into a well-behaved grid.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Let's give them some shape...");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-45\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Here’s <span class=\"highlight\">Alcohol</span>. Most wines are between 9 and 12% with quite a few bottles around the 9.5% mark, which is what you'd expect, I guess.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-46\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    <span class=\"highlight\">Density</span> is in a classic, pyramid or normally distributed shape with a mean of 0.997 (you don't need to remember that value).");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-47\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    <span class=\"highlight\">Citric Acid</span> &mdash; potentially adding notes of freshness to your wine &mdash; seems to be equally or uniformly distributed up to a certain level.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-48\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    The average <span class=\"highlight\">pH</span> value of a wine is 3.3, which is rather acidic. It's on a par with orange juice but still secures a safe distance to battery acid with a pH value of 0. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-49\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    There are other measures, but one key variable in our data is of course...");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-50\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    <span class=\"highlight\">Quality</span>");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section no-trigger\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Here’s how our wine experts marked all our wines on a scale from 0 to 10. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Let's note that no wine got worse than 3 or better than 8 and most wines clustered around the 5 or 6 mark with an average of 5.6.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n");t.b("\n" + i);t.b("<div class=\"section no-trigger\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    That’s all good to know, but we’re not after individual variable distributions, we want to know how the physiochemical properties relate to each other and specifically how they relate to quality. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    In order to make that more visible, let’s split all our wines into two groups: ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-51\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    <span class=\"bad\">bad wines</span> and <span class=\"good\">good wines</span>.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    We’re going along with the wine quality <a href=\"https://scinapse.io/papers/2103459159\" target=\"_blank\">literature</a>, which suggests labelling all wines marked 6 or lower bad and all wines marked 7 or higher as good. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    To be clear, <span class=\"highlight\">\"good\"</span> really does mean good from the judges' perspective. It includes the top 2 marks the wine experts gave. However, <span class=\"highlight\">\"bad\"</span> rather means \"not good\" as it also includes wines with a rating of 5 or 6 of which many are surely decent to average in the judges minds. But, if you allow, we'll continue calling them \"bad\" here for simplicity's sake.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section no-trigger\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    We can now see how our variables distribute across these two simple categories. Looking at for example <span class=\"highlight\">Volatile Acidity</span>...");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-52\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    we can see how the blue, better wines (<a href=\"https://wineeconomist.com/2010/02/21/curse-of-the-blue-nun/\" target=\"_blank\">Blue Nun</a> had nothing to do with the colour choice) predominantly sport lower levels and &mdash; reversely &mdash; the worse wines have the highest levels of volatile acidity. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    This doesn’t surprise too much as we've already established how high levels of acetic acid lead to vinegar rather than wine. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    We can look at the same data in a scatter plot,");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-53\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    which maybe more clearly suggests that the lower the volatile acidity → the higher the quality.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-54\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Another variable of potential interest is <span class=\"highlight\">Alcohol</span>...");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section no-trigger\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    The association is flipped here &mdash; higher quality wines are likely to have more alcohol as a solid proportion of especially wines around the 12-13% mark was voted good. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    <span class=\"arrow\"></span>Look at that 9.5% bar. Considering this is the most populated section, it’s interesting to see how few wines are deemed good in here.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-55\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    The scatter plot also shows the general trend. The higher the alcohol → the better the wine.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Great! We know there are some associations between the physiochemical properties and the wine quality. Let's see if we can build a model.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");return t.fl(); },partials: {}, subs: {  }});

  var part6Html = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<h1>The shape of the model</h1>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section no-trigger\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Many models learn by looking at the data and fit a curve that best represents the relationship between the predicting properties and the target variable &mdash; <span class=\"highlight\">Quality</span> in our case. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Let’s &mdash; for simplicity’s sake &mdash; say, we want to build a model with a single predictor: <span class=\"highlight\">Alcohol</span>. So, our model will try and predict the quality of each wine, based on its alcohol content alone. What would we do?");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    One of the simpler options is to build a so-called <a href=\"https://setosa.io/ev/ordinary-least-squares-regression/\" target=\"_blank\">Ordinary Least Squares Regression</a> model that predicts wine quality solely on Alcohol, which might look something like this:");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-56\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    The model in this case very much <span class=\"highlight\">is</span> the line. Reality &mdash; the actual distribution of our wines in the scatter plot &mdash; is of course more complex as we can see. Our model is rather a reduced approximation of reality &mdash; it captures how the story goes &mdash; and it fits into a beautifully simple equation that goes:");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p class=\"center\">");t.b("\n" + i);t.b("    <i><span class=\"highlight\">y = m &middot; x + b</span></i>");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p class=\"tight-bottom\">");t.b("\n" + i);t.b("    <span class=\"highlight\">y</span> represents the quality output value ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p class=\"tight-top tight-bottom\">");t.b("\n" + i);t.b("    <span class=\"highlight\">x</span> the alcohol input value. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p class=\"tight-top tight-bottom\">");t.b("\n" + i);t.b("    In geometric terms, <span class=\"highlight\">b</span> represents the intercept (the point the line crosses the y axis when <span class=\"highlight\">x = 0</span>) and");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p class=\"tight-top tight-bottom\">");t.b("\n" + i);t.b("    <span class=\"highlight\">m</span> the slope of the line. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p class=\"tight-top\">");t.b("\n" + i);t.b("    In conceptual terms <span class=\"highlight\">m</span> represents the increase in <span class=\"highlight\">y</span> when we increase <span class=\"highlight\">x</span> by one unit. In our case <span class=\"highlight\">m</span> &mdash; our line's slope &mdash; tells us how much our quality goes up if we add one percent of alcohol.");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("    We can now use this equation to predict Quality solely on Alcohol.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-57\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Plugging in an alcohol value of <span class=\"highlight\">x = 12%</span>, for example, will return a quality (a <span class=\"highlight\">y</span> value) just above 6. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    That's nice! We can do this for any value &mdash; will, however, soon hit a problem that might bend reality just a little too much:");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-58\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Because we’re dealing with a line, we could theoretically extend it indefinitely into any direction, returning rather non-sensical results, like, for example, quality values above 10 or even negative quality ratings. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Instead, we’d like a model equation that doesn’t produce a straight line.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-59\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    To get there, we first make things worse, by simplifying our continuous data to a binary variable: 0 for <span class=\"bad\">bad</span>, 1 for <span class=\"good\">good</span>. This indeed exacerbates our line problems. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    To win, we need a different model function. One that doesn’t produce a line but something like this:");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-60\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    This is a typical curve for a <a href=\"https://en.wikipedia.org/wiki/Logistic_regression\" target=\"_blank\">Logistic Regression</a> model.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Having simplified the quality labels to 0 for <span class=\"bad\">bad</span> and 1 for <span class=\"good\">good</span>, we can now express the relationship between alcohol and quality in probabilities from 0 to 100%! ");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("    If a wine has an alcohol level of, for example, 9, we can read off a probability of 4% of being good. If it has an alcohol level of 12 it has an 86% probability of being good.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    This way we are not necessarily forced to give a binary answer but can express the <span class=\"highlight\">likelihood</span> of a wine being good or bad. This is great as the magnitude of the likelihood helps us understand how certain we can be in our classification. 20% good is obviously not quite as certain as 100% good.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    It’s like with a badly drawn sloth. We might not be totally sure about it being a sloth, but we might consider it likely.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n");return t.fl(); },partials: {}, subs: {  }});

  var part7Html = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<h1>A grown up model</h1>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section no-trigger\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    These are the basics. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    For our full model we draw a curve not only for one but for eleven predictors, which is pretty impossible to display in a single visual as you can imagine. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    We’re also skipping the details here on how to find this best curve. We do this with an optimisation process that finds the curve closest to the data. For logistic regression we would typically use an optimisation process called <a href=\"https://machinelearningmastery.com/what-is-maximum-likelihood-estimation-in-machine-learning/\" target=\"_blank\">maximum likelihood</a>. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Lastly, we would always check the accuracy of the model, by testing it on labelled data without giving the labels away &mdash; not a training but a <a href=\"https://developers.google.com/machine-learning/crash-course/training-and-test-sets/splitting-data\" target=\"_blank\">testset</a>. This very logistic regression model, for example, achieved an accuracy of 79%, meaning that 79% of all cases got predicted correctly. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Spending more time on model selection and engineering <a href=\"http://cs229.stanford.edu/proj2019aut/data/assignment_308875_raw/25892857.pdf\" target=\"_blank\">can in fact get this up to 95%</a>.</p>");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-61\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Model selection is a big topic for itself and would be very much worth everyone's while in this case. Apart from potentially higher accuracy, other model types provide further tools that can be useful...");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-62\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    For example, a model from the <a href=\"https://en.wikipedia.org/wiki/Random_forest\" target=\"_blank\">Random Forest</a> family will enlighten us with a neat ranking of which variables are most important in our predictions.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    In this case, Alcohol appears to have the biggest impact on Quality, followed by Volatile Acidity (no vinegar please) and the amount of sulphates in the wine. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section no-trigger\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Used together, a model and variable importance can flag the current state of the wine quality as well as potentially providing informed ideas as to whether, where and what changes might help improve the overall wine quality during the process of wine making. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    As such, you can think of each predictor &mdash; each variable in your data &mdash; as a <span class=\"highlight\">model screw</span> you can adjust to achieve the highest quality wine. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-63\">");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-64\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    In fact, let's do this now...");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n" + i);t.b("<div class=\"section section-65\">");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    <span class=\"arrow\"></span> This wine over there isn't that great yet. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    It's only 5% full &mdash; which means its physiochemical properties indicate only a 5% chance of it being good. This is what you get when taking the average value for each wine property. ");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    You can change that though by scrolling down to our little quality simulator. Each property has a little chart showing its distribution as well as a handle to change this property's level in the wine. Use it to add or decrease that property in the wine and see how it affects the wine's likelihood to be good.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("  <p>");t.b("\n" + i);t.b("    Over to you now to produce a winner! Or a washout.");t.b("\n" + i);t.b("  </p>");t.b("\n" + i);t.b("</div>");t.b("\n");t.b("\n");return t.fl(); },partials: {}, subs: {  }});

  var part8Html = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<h1>Quality simulator</h1>");t.b("\n" + i);t.b("<h3>Adjust the handles to make your wine</h3>");return t.fl(); },partials: {}, subs: {  }});

  var part9Html = new hogan.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div id=\"outro-modal-inner\">");t.b("\n" + i);t.b("  ");t.b("\n" + i);t.b("  <div id=\"outro-close\">");t.b("\n" + i);t.b("    <img id=\"outro-close-image\" src=\"../../static/close-grey.png\" alt=\"close\">");t.b("\n" + i);t.b("  </div>");t.b("\n");t.b("\n" + i);t.b("  <div id=\"outro-modal-text\">");t.b("\n" + i);t.b("    <h3>What next, then?</h3>");t.b("\n");t.b("\n" + i);t.b("    <p>");t.b("\n" + i);t.b("      This little exploration was supposed to give you an idea of how machines can learn, enlighten and possibly augment the work of a winemaker &mdash; becoming a co-pilot for fine-tuning the process of winemaking by classifying high quality wine. ");t.b("\n" + i);t.b("    </p>");t.b("\n" + i);t.b("    <p>");t.b("\n" + i);t.b("      For explanation's sake we looked at rather simple models and took a few shortcuts in order to focus on the basics. A logical next step would be to engineer a model that is more accurate as well as more flexible in its predictions. ");t.b("\n" + i);t.b("    </p>");t.b("\n" + i);t.b("    <p>");t.b("\n" + i);t.b("      Considering flexibility, you might have wondered, for example, how easy it is to get a good wine with our model by just cranking up the alcohol to the max and muting Volatile Acidity to the minimum. This behavior is a feature of all linear models, like Logistic Regression. While the model itself is not a line but a curve as we've seen, it still models <span class=\"highlight\">correlation</span> &mdash; how things move up or down together or how they move in opposite directions. As such it won't be able to identify <span class=\"highlight\">non-linear relationships</span> &mdash; an Alcohol tipping point for example, after which quality decreases again.");t.b("\n" + i);t.b("    </p>");t.b("\n" + i);t.b("    <p>");t.b("\n" + i);t.b("      Another improvement would be to build a model not only on general Vinho Verde data but (also) historic <span class=\"highlight\">tasting data</span> from a winery using such model. We would get a helping hand that leverages all the winery's past experience to improve its wine's future qualities...");t.b("\n" + i);t.b("    </p>");t.b("\n" + i);t.b("    <p>");t.b("\n" + i);t.b("      Santé 🍷");t.b("\n" + i);t.b("    </p>");t.b("\n" + i);t.b("  </div>");t.b("\n");t.b("\n" + i);t.b("  <div id=\"credits\">");t.b("\n" + i);t.b("    <p>");t.b("\n" + i);t.b("      This was fun and due some gratitude and credits...");t.b("\n" + i);t.b("    </p>");t.b("\n" + i);t.b("    <p>");t.b("\n" + i);t.b("      First of all, Thanks to <a href=\"https://vinoez.com/author/shawn/\" target=\"_blank\">Shawn</a> from ZAM for letting me go wild with this... Big thanks to <a href=\"https://www.behance.net/g-gaborieau-bookatme\" target=\"_blank\">Geoffroy Gaborieau</a>, <a href=\"https://twitter.com/martgnz\" target=\"_blank\">Martin Gonzales</a> and <a href=\"https://twitter.com/MollzMP\" target=\"_blank\">Mollie Pettit</a> for keeping me honest and providing priceless feedback!");t.b("\n" + i);t.b("    </p>");t.b("\n" + i);t.b("    <p>");t.b("\n" + i);t.b("      Technical thanks to <a href=\"https://greensock.com/\" target=\"_blank\">gsap</a>, <a href=\"https://roughjs.com/\" target=\"_blank\">roughjs</a>, <a href=\"http://d3js.org/\" target=\"_blank\">d3</a> and <a href=\"https://www.r-project.org/about.html\" target=\"_blank\">R</a> for makeing all these brilliant libraries and things one can make fun stuff with.");t.b("\n" + i);t.b("    </p>");t.b("\n" + i);t.b("    <p>");t.b("\n" + i);t.b("      The dataset comes from the seminal paper: <i>P. Cortez, A. Cerdeira, F. Almeida, T. Matos and J. Reis. <a href=\"https://scinapse.io/papers/2103459159\" target=\"_blank\">Modeling wine preferences by data mining from physicochemical properties.</a> In Decision Support Systems, Elsevier, 47(4):547-553, 2009.</i> which is a highly recommended read. There's more out there, but they were first!");t.b("\n" + i);t.b("    </p>");t.b("\n" + i);t.b("    <p>");t.b("\n" + i);t.b("      And as you ask, all the drawings were more or less badly hand drawn, based on a set of images I collected from various sources (<a href=\"http://sweetclipart.com/cute-colorable-piglet-52\" target=\"_blank\">Pig</a>, <a href=\"https://easydrawingguides.com/how-to-draw-an-alligator/\" target=\"_blank\">Crocodile</a>, <a href=\"https://www.how-to-draw-funny-cartoons.com/giraffe-cartoon.html\" target=\"_blank\">Giraffe</a>, <a href=\"https://pixy.org/4196108/\" target=\"_blank\">Whale</a>, <a href=\"https://depositphotos.com/248265696/stock-illustration-line-drawing-quirky-cartoon-sloth.html\" target=\"_blank\">Sloth #1</a> and <a href=\"https://depositphotos.com/248394246/stock-illustration-sticker-of-a-quirky-hand.html\" target=\"_blank\">Sloth #2</a>. I am afraid I can't find my inspiration for the chicklet anymore. If you're seeing this, chicklet, please contact <a href=\"https://www.datamake.io\" target=\"_blank\">me</a>.)");t.b("\n" + i);t.b("    </p>");t.b("\n" + i);t.b("  </div>");t.b("\n" + i);t.b("</div>  ");t.b("\n");t.b("\n");t.b("\n");return t.fl(); },partials: {}, subs: {  }});

  gsapWithCSS.registerPlugin(MorphSVGPlugin, DrawSVGPlugin, ScrollTrigger, GSDevTools); // Helpers.

  function setModelWeightMap(array) {
    var mapResult = map();
    array.forEach(function (d) {
      return mapResult.set(d.term, d.estimate);
    });
    return mapResult;
  }

  function getModelValues(data) {
    var predictors = data.columns.filter(function (d) {
      return d !== 'id' && d !== 'index' && d !== 'quality' && d !== 'quality_binary';
    });
    var meanMap = map();
    var rangeMap = map();
    predictors.forEach(function (col) {
      meanMap.set(col, mean(data, function (d) {
        return d[col];
      }));
      rangeMap.set(col, extent(data, function (d) {
        return d[col];
      }));
    });
    return {
      meanMap: meanMap,
      rangeMap: rangeMap
    };
  } // Handlers.


  function removeSpinner() {
    // Remove the loading site just after loading.
    // (to give it some time to stretch).
    timeout$1(function () {
      select('#loading img').transition().duration(500).style('opacity', 0);
      select('#loading').transition().duration(1000).style('opacity', 0);
    }, 750);
  }

  function modalOpen() {
    selectAll('#container, #outro').style('pointer-events', 'none');
    select('#outro-modal-outer').style('pointer-events', 'all').transition().style('opacity', 1); // So totally unnecessary...
    // eslint-disable-next-line no-unused-expressions

    Math.round(Math.random()) ? gsapWithCSS.fromTo('#outro-modal-inner', {
      left: '-100vw'
    }, {
      left: '0vw'
    }) : gsapWithCSS.fromTo('#outro-modal-inner', {
      top: '-100vh'
    }, {
      top: '0vh'
    });
  }

  function modalClose(e) {
    if (e.target !== select('#outro-modal-outer').node() && e.target !== select('#outro-close-image').node()) return;
    select('#outro-modal-outer').transition().style('opacity', 0).style('pointer-events', 'none');
    selectAll('#container, #outro').style('pointer-events', 'all');
  } // Build funcs.


  function prepareVisuals(globeData, wineData, varImpData, modelIntercept, modelWeights) {
    var svg = select('#svg-hidden');
    var stageGroup = svg.append('g').attr('id', 'stage-group');
    var rg = st.svg(svg.node()).generator; // Add glass/bottle morph paths.

    var roughBottle = rg.path(bottle, {
      simplification: 0.6
    });
    var roughBottlePath = rg.toPaths(roughBottle);
    stageGroup.append('path').attr('id', 'glass-path').attr('d', glass).style('fill', 'none').style('stroke-width', 1).style('stroke', 'grey');
    stageGroup.append('path').attr('id', 'bottle-path').attr('d', roughBottlePath[0].d).style('fill', 'none').style('stroke-width', 1).style('stroke', 'grey'); // Prep bottle dims.

    state.glassBottle.bottleBox = getBox('#bottle-path'); // Prep text bottle.

    var bottleTexts = splitPath(textBottle);
    state.bottleText.dims = bottleTexts.map(function (p) {
      return getPathData(p);
    });
    state.bottleText.maxLength = max(state.bottleText.dims, function (d) {
      return d.length;
    });
    state.bottleText.dashOffset = lodash_clonedeep(state.bottleText.maxLength);
    state.bottleText.paths = bottleTexts.map(function (p) {
      return new Path2D(p);
    }); // Prep bottle wave.

    state.bottleWave.bottlePath = new Path2D(bottle); // Prep lolly chart.
    // Get the lolly's path data (the paths and the length).

    var lolliTextPaths = [textAlcohol, textAcid, textChloride, textQuality].map(getPathData); // Set the data
    // `value` is the mutable value to change,
    // `values` has all values we want to gsap to.

    state.lolli.data = {
      alcohol: {
        value: 0,
        values: [0, 0.6, 0.3, 0.8, 0],
        radius: 0,
        text: lolliTextPaths[0],
        offset: {
          x: 0,
          y: 0
        }
      },
      acid: {
        value: 0,
        values: [0, 0.3, 0.7, 0.2, 0],
        radius: 0,
        text: lolliTextPaths[1],
        offset: {
          x: 0,
          y: 0
        }
      },
      chloride: {
        value: 0,
        values: [0, 0.7, 0.6, 0.4, 0],
        radius: 0,
        text: lolliTextPaths[2],
        offset: {
          x: 0,
          y: 0
        }
      },
      quality: {
        value: 0,
        values: [0, 0.5, 0.3, 0.9, 0],
        radius: 0,
        text: lolliTextPaths[3],
        offset: {
          x: 0,
          y: 0
        }
      }
    }; // A bit roundabout, but in order to gsapolate the values we need them in
    // objects as below. But to iterate through them in the canvas draw function
    // we need at least the names in an array like here:

    state.lolli.values = Object.keys(state.lolli.data); // Get the blackbox pathdata.

    state.blackBox.box = getPathData(blackBox);
    state.blackBox.model = getPathData(textModel);
    stageGroup.append('path').attr('id', 'black-box-path').attr('d', blackBox).style('fill', 'none').style('stroke-width', 0).style('stroke', 'none');
    state.blackBox.boxDims = getBox('#black-box-path'); // All animals, their paths and how they should be scaled.
    // prettier-ignore

    state.animals.data = [{
      name: 'animalPig',
      path: animalPig,
      fit: {
        width: 0.5,
        height: 0
      }
    }, {
      name: 'animalCroc',
      path: animalCroc,
      fit: {
        width: 0.5,
        height: 0
      }
    }, {
      name: 'animalGiraffe',
      path: animalGiraffe,
      fit: {
        width: 0.5,
        height: 0
      }
    }, {
      name: 'animalSloth1',
      path: animalSloth1,
      fit: {
        width: 0.5,
        height: 0
      }
    }, {
      name: 'animalWhale',
      path: animalWhale,
      fit: {
        width: 0.5,
        height: 0
      }
    }, {
      name: 'animalBird',
      path: animalBird,
      fit: {
        width: 0.5,
        height: 0
      }
    }, {
      name: 'animalSloth2',
      path: animalSloth2,
      fit: {
        width: 0.5,
        height: 0
      }
    }]; // Add the paths to the DOM.

    var animalPaths = stageGroup.append('g').attr('class', 'animals').selectAll('.animal').data(state.animals.data).join('path').attr('class', 'animal').attr('id', function (d) {
      return d.name;
    }).attr('d', function (d) {
      return d.path;
    }); // Get each animal path's BBox.

    animalPaths.each(function (d) {
      state.animals[d.name] = this.getBBox();
    }); // Set the paths and info of all dataset's elements.

    state.dataset.info = [{
      name: 'grid',
      paths: dataset00Grid,
      tween: 'datasetGrid'
    }, {
      name: 'id',
      paths: dataset01Id,
      tween: 'datasetId'
    }, {
      name: 'quality',
      paths: dataset02Quality,
      tween: 'datasetQuality'
    }, {
      name: 'fxAcidity',
      paths: dataset03FAcidity,
      tween: 'datasetFxAcidity'
    }, {
      name: 'vlAcidity',
      paths: dataset04VAcidity,
      tween: 'datasetVlAcidity'
    }, {
      name: 'citric',
      paths: dataset05Citric,
      tween: 'datasetCitric'
    }, {
      name: 'sugar',
      paths: dataset06Sugar,
      tween: 'datasetSugar'
    }, {
      name: 'chlorides',
      paths: dataset07Chlorides,
      tween: 'datasetChlorides'
    }, {
      name: 'sulfur',
      paths: dataset08Sulfur,
      tween: 'datasetSulfur'
    }, {
      name: 'density',
      paths: dataset09Density,
      tween: 'datasetDensity'
    }, {
      name: 'ph',
      paths: dataset10Ph,
      tween: 'datasetPh'
    }, {
      name: 'sulphates',
      paths: dataset11Sulphates,
      tween: 'datasetSulphates'
    }, {
      name: 'alcohol',
      paths: dataset12Alcohol,
      tween: 'datasetAlcohol'
    }]; // Get the path info for each element.

    state.dataset.info.forEach(function (d) {
      return state.dataset[d.name] = getPathData(d.paths);
    }); // Also, the grid and columns share the same base bounding box,
    // so we just need a single bbox, we take from the grid:

    state.dataset.box = getBox(false, dataset00Grid); // Save the world json.

    state.globe.data = globeData; // Save the wine data

    state.stats.data = wineData; // Get a link grid.

    var n = 40;
    var links = [];

    for (var y = 0; y < n; ++y) {
      for (var x = 0; x < n; ++x) {
        if (y > 0) links.push({
          source: (y - 1) * n + x,
          target: y * n + x
        });
        if (x > 0) links.push({
          source: y * n + (x - 1),
          target: y * n + x
        });
      }
    }

    state.stats.links = links; // Variable importance.

    state.varImp.data = varImpData.sort(function (a, b) {
      return b.importance - a.importance;
    }); // Model.

    state.model.intercept = modelIntercept[0].estimate;
    state.model.weights = setModelWeightMap(modelWeights);
    var modelValues = getModelValues(state.stats.data);
    state.model.values = modelValues.meanMap;
    state.model.ranges = modelValues.rangeMap;
    state.model.probability = getProbability(state.model.values, state.model.weights, state.model.intercept); // Model bottle.

    var bottlePath = roughBottlePath.map(function (d) {
      return d.d;
    }).join();
    var bottlePathInfo = getPathData(bottlePath);
    state.modelBottle.paths = bottlePathInfo.paths;
    state.modelBottle.maxLength = bottlePathInfo.length;
  }

  function buildStory(logoSvg) {
    // Logo.
    // SVG dimensions controlled by CSS (overwriting given attributes).
    select('#logo').node().append(logoSvg.documentElement); // Intro text.

    var introContainer = select('#container-intro');
    var introHtml = part0Html.render();
    introContainer.html(introHtml); // Main text.

    var container = select('#text-container'); // Set up the article sections.

    var sectionData = [{
      id: 'part-1',
      html: part1Html.render()
    }, {
      id: 'part-2',
      html: part2Html.render()
    }, {
      id: 'part-3',
      html: part3Html.render()
    }, {
      id: 'part-4',
      html: part4Html.render()
    }, {
      id: 'part-5',
      html: part5Html.render()
    }, {
      id: 'part-6',
      html: part6Html.render()
    }, {
      id: 'part-7',
      html: part7Html.render()
    }]; // Add the main text html.

    container.selectAll('.main-section').data(sectionData).join('section').attr('class', function (d) {
      return "main-section ".concat(d.id);
    }).html(function (d) {
      return d.html;
    }); // Add model base.
    // needs to come at the bitter end to stop at top and become scrollable.

    var modelApp = select('#text-container').append('div').attr('id', 'model-app');
    modelApp.append('div').attr('id', 'model-app-header').html(part8Html.render());
    modelApp.append('div').attr('id', 'model-app-wrap'); // Outro.

    select('#outro-modal-outer').html(part9Html.render());
    document.querySelector('#outro').addEventListener('click', modalOpen);
    document.querySelector('#outro-modal-outer').addEventListener('click', modalClose);
  } // Main func.


  function ready(_ref) {
    var _ref2 = _slicedToArray(_ref, 7),
        wineScape = _ref2[0],
        logo = _ref2[1],
        globeData = _ref2[2],
        wineData = _ref2[3],
        varImpData = _ref2[4],
        modelIntercept = _ref2[5],
        modelWeights = _ref2[6];

    // Make sure all variable names are lower case! This is not checked in the app.
    prepareVisuals(globeData, wineData, varImpData, modelIntercept, modelWeights);
    buildStory(logo);
    update(wineScape); // Debounced resize.

    var debounced = lodash_debounce(function () {
      return update(wineScape);
    }, 500);
    window.addEventListener('resize', debounced);
  }

  function init$1() {
    window.addEventListener('load', removeSpinner);
    var wineScape = image('../../static/wine-scape.png');
    var logo = xml('../../static/vinoez.svg');
    var globeData = json('../../data/world-simple.json');
    var wineData = csv$1('../../data/winedata.csv', autoType);
    var varImpData = csv$1('../../data/importance.csv', autoType);
    var modelIntercept = csv$1('../../data/model-intercept.csv', autoType);
    var modelWeights = csv$1('../../data/model-weights.csv', autoType);
    Promise.all([wineScape, logo, globeData, wineData, varImpData, modelIntercept, modelWeights]).then(ready);
  }

  init$1();

})));
